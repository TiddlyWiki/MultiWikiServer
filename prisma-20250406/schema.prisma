datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  // prisma 7 will remove the need for native node files, everything will be js and wasm
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "driverAdapters"]
  binaryTargets = []
}

// generator zod {
//   provider                  = "zod-prisma-types"
//   output                    = "./generated/zod-prisma"
//   useMultipleFiles          = false
//   createRelationValuesTypes = true
// }

enum Permission {
  READ
  WRITE
  ADMIN
}

model Recipes {
  recipe_id   Int           @id @default(autoincrement())
  recipe_name String        @unique
  description String
  owner_id    Int?
  recipe_bags Recipe_bags[]
  acl         RecipeAcl[]

  @@map("recipes")
}

model RecipeAcl {
  acl_id     Int        @id @default(autoincrement())
  role_id    Int
  permission Permission
  recipe    Recipes   @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id  Int

  @@map("recipe_acl")
}

model Recipe_bags {
  recipe_id Int
  bag_id    Int
  position  Int
  with_acl  Boolean
  bag       Bags    @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)
  recipe    Recipes @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

  @@unique([recipe_id, bag_id])
  @@index([recipe_id])
  @@map("recipe_bags")
}

model Bags {
  bag_id      Int           @id @default(autoincrement())
  bag_name    String        @unique
  description String
  is_plugin   Boolean
  owner_id    Int?
  recipe_bags Recipe_bags[]
  tiddlers    Tiddlers[]
  acl         BagAcl[]

  @@map("bags")
}

model BagAcl {
  acl_id     Int        @id @default(autoincrement())
  bag_id     Int
  bag        Bags       @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)
  role_id    Int
  permission Permission

  @@map("bag_acl")
}

model Tiddlers {
  tiddler_id      Int      @id @default(autoincrement())
  bag_id          Int
  title           String
  is_deleted      Boolean
  attachment_hash String?
  fields          Fields[]
  // Deleting a referenced record (bag) will trigger the deletion of referencing record (tiddler).
  bag             Bags     @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)

  @@unique([bag_id, title])
  @@index([bag_id])
  @@map("tiddlers")
}

model Fields {
  tiddler_id  Int
  field_name  String
  field_value String
  // Deleting a referenced record (tiddler) will trigger the deletion of referencing record (field).
  tiddler     Tiddlers @relation(fields: [tiddler_id], references: [tiddler_id], onDelete: Cascade)

  @@id([tiddler_id, field_name])
  @@index([tiddler_id])
  @@map("fields")
}

model Groups {
  group_id    Int     @id @default(autoincrement())
  group_name  String  @unique()
  description String?
  roles       Roles[]
  users       Users[]

  @@map("groups")
}

model Roles {
  role_id     Int         @id @default(autoincrement())
  role_name   String      @unique()
  description String?
  groups      Groups[]
  users       Users[]

  @@map("roles")
}

model Users {
  user_id    Int        @id @default(autoincrement())
  username   String     @unique
  email      String     @unique
  password   String
  created_at DateTime   @default(now())
  last_login DateTime?
  sessions   Sessions[]
  groups     Groups[]
  roles      Roles[]

  @@map("users")
}

model Sessions {
  session_id    String   @id
  created_at    DateTime @default(now())
  last_accessed DateTime
  session_key   String?
  user_id       Int
  user          Users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("sessions")
}
