/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require("./runtime/wasm-engine-edge.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c",
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: "Serializable",
});

exports.Prisma.SettingsScalarFieldEnum = {
  key: "key",
  value: "value",
};

exports.Prisma.RecipesScalarFieldEnum = {
  recipe_id: "recipe_id",
  recipe_name: "recipe_name",
  description: "description",
  owner_id: "owner_id",
  plugin_names: "plugin_names",
  skip_required_plugins: "skip_required_plugins",
  skip_core: "skip_core",
  preload_store: "preload_store",
  custom_wiki: "custom_wiki",
};

exports.Prisma.RecipeAclScalarFieldEnum = {
  acl_id: "acl_id",
  role_id: "role_id",
  permission: "permission",
  recipe_id: "recipe_id",
};

exports.Prisma.Recipe_bagsScalarFieldEnum = {
  recipe_id: "recipe_id",
  bag_id: "bag_id",
  position: "position",
  with_acl: "with_acl",
  load_modules: "load_modules",
};

exports.Prisma.BagsScalarFieldEnum = {
  bag_id: "bag_id",
  bag_name: "bag_name",
  description: "description",
  owner_id: "owner_id",
};

exports.Prisma.BagAclScalarFieldEnum = {
  acl_id: "acl_id",
  bag_id: "bag_id",
  role_id: "role_id",
  permission: "permission",
};

exports.Prisma.TiddlersScalarFieldEnum = {
  revision_id: "revision_id",
  bag_id: "bag_id",
  title: "title",
  is_deleted: "is_deleted",
  attachment_hash: "attachment_hash",
};

exports.Prisma.FieldsScalarFieldEnum = {
  revision_id: "revision_id",
  field_name: "field_name",
  field_value: "field_value",
};

exports.Prisma.RolesScalarFieldEnum = {
  role_id: "role_id",
  role_name: "role_name",
  description: "description",
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: "user_id",
  username: "username",
  email: "email",
  password: "password",
  created_at: "created_at",
  last_login: "last_login",
};

exports.Prisma.SessionsScalarFieldEnum = {
  session_id: "session_id",
  created_at: "created_at",
  last_accessed: "last_accessed",
  session_key: "session_key",
  user_id: "user_id",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};
exports.Permission = exports.$Enums.Permission = {
  READ: "READ",
  WRITE: "WRITE",
  ADMIN: "ADMIN",
};

exports.Prisma.ModelName = {
  Settings: "Settings",
  Recipes: "Recipes",
  RecipeAcl: "RecipeAcl",
  Recipe_bags: "Recipe_bags",
  Bags: "Bags",
  BagAcl: "BagAcl",
  Tiddlers: "Tiddlers",
  Fields: "Fields",
  Roles: "Roles",
  Users: "Users",
  Sessions: "Sessions",
};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client-js",
    },
    output: {
      value: "/home/arlen2/GitHub/MWS-main/prisma/client",
      fromEnvVar: null,
    },
    config: {
      engineType: "library",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "debian-openssl-3.0.x",
        native: true,
      },
    ],
    previewFeatures: ["driverAdapters", "relationJoins"],
    sourceFilePath: "/home/arlen2/GitHub/MWS-main/prisma/schema.prisma",
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: null,
  },
  relativePath: "..",
  clientVersion: "6.10.1",
  engineVersion: "9b628578b3b7cae625e8c927178f15a170e74a9c",
  datasourceNames: ["db"],
  activeProvider: "sqlite",
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    'datasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  // prisma 7 will remove the need for native node files, everything will be js and wasm\n  provider        = "prisma-client-js"\n  previewFeatures = ["relationJoins", "driverAdapters"]\n  binaryTargets   = []\n  output          = "client"\n}\n\ngenerator json {\n  provider = "prisma-json-types-generator"\n}\n\nenum Permission {\n  READ\n  WRITE\n  ADMIN\n}\n\n// The `packages/mws/src/managers/` folder is the primary place this schema is used. \n// SQLite initialization is done in `packages/mws/src/db/sqlite-adapter.ts`.\n\nmodel Settings {\n  key   String @id\n  value String\n\n  @@map("settings")\n}\n\nmodel Recipes {\n  recipe_id             String        @id @default(uuid(7))\n  recipe_name           String        @unique\n  description           String\n  owner_id              String?\n  /// [Recipes_plugin_names]\n  plugin_names          Json\n  skip_required_plugins Boolean       @default(false)\n  skip_core             Boolean       @default(false)\n  preload_store         Boolean       @default(false)\n  custom_wiki           String?\n  recipe_bags           Recipe_bags[]\n  acl                   RecipeAcl[]\n\n  @@map("recipes")\n}\n\nmodel RecipeAcl {\n  acl_id     Int        @id @default(autoincrement())\n  role_id    String\n  permission Permission\n  recipe     Recipes    @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)\n  recipe_id  String\n\n  @@map("recipe_acl")\n}\n\nmodel Recipe_bags {\n  recipe_id    String\n  bag_id       String\n  position     Int\n  with_acl     Boolean @default(false)\n  load_modules Boolean @default(false)\n\n  bag    Bags    @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)\n  recipe Recipes @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)\n\n  @@unique([recipe_id, bag_id])\n  @@index([recipe_id])\n  @@map("recipe_bags")\n}\n\nmodel Bags {\n  bag_id      String        @id @default(uuid(7))\n  bag_name    String        @unique\n  description String\n  owner_id    String?\n  recipe_bags Recipe_bags[]\n  tiddlers    Tiddlers[]\n  acl         BagAcl[]\n\n  @@map("bags")\n}\n\nmodel BagAcl {\n  acl_id     Int        @id @default(autoincrement())\n  bag_id     String\n  bag        Bags       @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)\n  role_id    String\n  permission Permission\n\n  @@map("bag_acl")\n}\n\nmodel Tiddlers {\n  revision_id     String   @id @default(uuid(7))\n  bag_id          String\n  title           String\n  is_deleted      Boolean\n  attachment_hash String?\n  fields          Fields[]\n  // Deleting a referenced record (bag) will trigger the deletion of referencing record (tiddler).\n  bag             Bags     @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)\n\n  @@unique([bag_id, title])\n  @@index([bag_id])\n  @@map("tiddlers")\n}\n\nmodel Fields {\n  revision_id String\n  field_name  String\n  field_value String\n  // Deleting a referenced record (tiddler) will trigger the deletion of referencing record (field).\n  tiddler     Tiddlers @relation(fields: [revision_id], references: [revision_id], onDelete: Cascade)\n\n  @@id([revision_id, field_name])\n  @@index([revision_id])\n  @@map("fields")\n}\n\nmodel Roles {\n  role_id     String  @id @default(uuid(7))\n  role_name   String  @unique()\n  description String?\n  users       Users[]\n\n  @@map("roles")\n}\n\nmodel Users {\n  user_id    String     @id @default(uuid(7))\n  username   String     @unique\n  email      String     @unique\n  password   String\n  created_at DateTime   @default(now())\n  last_login DateTime?\n  sessions   Sessions[]\n  roles      Roles[]\n\n  @@map("users")\n}\n\nmodel Sessions {\n  session_id    String   @id\n  created_at    DateTime @default(now())\n  last_accessed DateTime\n  session_key   String?\n  user_id       String\n  user          Users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)\n\n  @@map("sessions")\n}\n',
  inlineSchemaHash:
    "4bb965dd8e129acd3ade7565ddec7d8baac655f0946e22165f3b5375cf67c75f",
  copyEngine: true,
};
config.dirname = "/";

config.runtimeDataModel = JSON.parse(
  '{"models":{"Settings":{"fields":[{"name":"key","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"}],"dbName":"settings"},"Recipes":{"fields":[{"name":"recipe_id","kind":"scalar","type":"String"},{"name":"recipe_name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"owner_id","kind":"scalar","type":"String"},{"name":"plugin_names","kind":"scalar","type":"Json"},{"name":"skip_required_plugins","kind":"scalar","type":"Boolean"},{"name":"skip_core","kind":"scalar","type":"Boolean"},{"name":"preload_store","kind":"scalar","type":"Boolean"},{"name":"custom_wiki","kind":"scalar","type":"String"},{"name":"recipe_bags","kind":"object","type":"Recipe_bags","relationName":"Recipe_bagsToRecipes"},{"name":"acl","kind":"object","type":"RecipeAcl","relationName":"RecipeAclToRecipes"}],"dbName":"recipes"},"RecipeAcl":{"fields":[{"name":"acl_id","kind":"scalar","type":"Int"},{"name":"role_id","kind":"scalar","type":"String"},{"name":"permission","kind":"enum","type":"Permission"},{"name":"recipe","kind":"object","type":"Recipes","relationName":"RecipeAclToRecipes"},{"name":"recipe_id","kind":"scalar","type":"String"}],"dbName":"recipe_acl"},"Recipe_bags":{"fields":[{"name":"recipe_id","kind":"scalar","type":"String"},{"name":"bag_id","kind":"scalar","type":"String"},{"name":"position","kind":"scalar","type":"Int"},{"name":"with_acl","kind":"scalar","type":"Boolean"},{"name":"load_modules","kind":"scalar","type":"Boolean"},{"name":"bag","kind":"object","type":"Bags","relationName":"BagsToRecipe_bags"},{"name":"recipe","kind":"object","type":"Recipes","relationName":"Recipe_bagsToRecipes"}],"dbName":"recipe_bags"},"Bags":{"fields":[{"name":"bag_id","kind":"scalar","type":"String"},{"name":"bag_name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"owner_id","kind":"scalar","type":"String"},{"name":"recipe_bags","kind":"object","type":"Recipe_bags","relationName":"BagsToRecipe_bags"},{"name":"tiddlers","kind":"object","type":"Tiddlers","relationName":"BagsToTiddlers"},{"name":"acl","kind":"object","type":"BagAcl","relationName":"BagAclToBags"}],"dbName":"bags"},"BagAcl":{"fields":[{"name":"acl_id","kind":"scalar","type":"Int"},{"name":"bag_id","kind":"scalar","type":"String"},{"name":"bag","kind":"object","type":"Bags","relationName":"BagAclToBags"},{"name":"role_id","kind":"scalar","type":"String"},{"name":"permission","kind":"enum","type":"Permission"}],"dbName":"bag_acl"},"Tiddlers":{"fields":[{"name":"revision_id","kind":"scalar","type":"String"},{"name":"bag_id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"is_deleted","kind":"scalar","type":"Boolean"},{"name":"attachment_hash","kind":"scalar","type":"String"},{"name":"fields","kind":"object","type":"Fields","relationName":"FieldsToTiddlers"},{"name":"bag","kind":"object","type":"Bags","relationName":"BagsToTiddlers"}],"dbName":"tiddlers"},"Fields":{"fields":[{"name":"revision_id","kind":"scalar","type":"String"},{"name":"field_name","kind":"scalar","type":"String"},{"name":"field_value","kind":"scalar","type":"String"},{"name":"tiddler","kind":"object","type":"Tiddlers","relationName":"FieldsToTiddlers"}],"dbName":"fields"},"Roles":{"fields":[{"name":"role_id","kind":"scalar","type":"String"},{"name":"role_name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"users","kind":"object","type":"Users","relationName":"RolesToUsers"}],"dbName":"roles"},"Users":{"fields":[{"name":"user_id","kind":"scalar","type":"String"},{"name":"username","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"created_at","kind":"scalar","type":"DateTime"},{"name":"last_login","kind":"scalar","type":"DateTime"},{"name":"sessions","kind":"object","type":"Sessions","relationName":"SessionsToUsers"},{"name":"roles","kind":"object","type":"Roles","relationName":"RolesToUsers"}],"dbName":"users"},"Sessions":{"fields":[{"name":"session_id","kind":"scalar","type":"String"},{"name":"created_at","kind":"scalar","type":"DateTime"},{"name":"last_accessed","kind":"scalar","type":"DateTime"},{"name":"session_key","kind":"scalar","type":"String"},{"name":"user_id","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"Users","relationName":"SessionsToUsers"}],"dbName":"sessions"}},"enums":{},"types":{}}',
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
  getRuntime: async () => require("./query_engine_bg.js"),
  getQueryEngineWasmModule: async () => {
    const loader = (await import("#wasm-engine-loader")).default;
    const engine = (await loader).default;
    return engine;
  },
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL:
      (typeof globalThis !== "undefined" && globalThis["DATABASE_URL"]) ||
      (typeof process !== "undefined" &&
        process.env &&
        process.env.DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
  (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
      (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
      undefined,
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
