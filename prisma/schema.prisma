datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  previewFeatures = ["relationJoins", "driverAdapters"]
}

model config {
  realm_id   Int     @id @default(autoincrement())
  allowReads  Boolean
  allowWrites Boolean
}

model acl {
  acl_id        Int          @id @default(autoincrement())
  entity_name   String
  entity_type   String
  role_id       Int
  permission    String
  role          roles?       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([entity_name])
}

model bags {
  bag_id        Int           @id @default(autoincrement())
  bag_name      String        @unique
  accesscontrol String?
  description   String
  recipe_bags   recipe_bags[]
  tiddlers      tiddlers[]
}

model groups {
  group_id    Int     @id @default(autoincrement())
  group_name  String  @unique()
  description String?
  roles       roles[]
  users       users[]
}

model recipe_bags {
  recipe_id Int
  bag_id    Int
  position  Int
  bag       bags    @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)
  recipe    recipes @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

  @@unique([recipe_id, bag_id])
  @@index([recipe_id])
}

model recipes {
  recipe_id   Int           @id @default(autoincrement())
  recipe_name String        @unique
  description String
  recipe_bags recipe_bags[]
  owner_id    Int?
  owner       users?        @relation(fields: [owner_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  role_id     Int           @id @default(autoincrement())
  role_name   String        @unique()
  description String?
  acls        acl[]
  groups      groups[]
  users       users[]
}

model sessions {
  session_id          String  @id
  created_at          String
  last_accessed       String
  session_key         String?
  session_login_state String?
  user_id             Int
  user                users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model tiddlers {
  tiddler_id      Int      @id @default(autoincrement())
  bag_id          Int
  title           String
  is_deleted      Boolean
  attachment_blob String?
  fields          fields[]
  // Deleting a referenced record (bag_id) will trigger the deletion of referencing record (tiddler).
  bag             bags     @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)

  @@unique([bag_id, title])
  @@index([bag_id])
}

model fields {
  tiddler_id  Int
  field_name  String
  field_value String
  // Deleting a referenced record (tiddler_id) will trigger the deletion of referencing record (field).
  tiddler     tiddlers @relation(fields: [tiddler_id], references: [tiddler_id], onDelete: Cascade)

  @@id([tiddler_id, field_name])
  @@index([tiddler_id])
}

model users {
  user_id    Int        @id @default(autoincrement())
  username   String     @unique
  email      String     @unique
  password   String
  created_at DateTime     @default(now())
  last_login DateTime?
  recipes    recipes[]
  sessions   sessions[]
  groups     groups[]
  roles      roles[]
}
