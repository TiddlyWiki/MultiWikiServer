datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  // prisma 7 will remove the need for native node files, everything will be js and wasm
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "driverAdapters"]
  binaryTargets   = []
  output = "client"
}

generator json {
  provider = "prisma-json-types-generator"
}

enum Permission {
  READ
  WRITE
  ADMIN
}

// The `packages/mws/src/managers/` folder is the primary place this schema is used. 
// SQLite initialization is done in `packages/mws/src/db/sqlite-adapter.ts`.

model Settings {
  key   String @id
  value String

  @@map("settings")
}

model Recipes {
  recipe_id             String        @id @default(uuid(7))
  recipe_name           String        @unique
  description           String
  owner_id              String?
  /// [Recipes_plugin_names]
  plugin_names          Json
  skip_required_plugins Boolean       @default(false)
  skip_core             Boolean       @default(false)
  preload_store         Boolean       @default(false)
  custom_wiki           String?
  recipe_bags           Recipe_bags[]
  acl                   RecipeAcl[]

  @@map("recipes")
}

model RecipeAcl {
  acl_id     Int        @id @default(autoincrement())
  role_id    String
  permission Permission
  recipe     Recipes    @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id  String

  @@map("recipe_acl")
}

model Recipe_bags {
  recipe_id    String
  bag_id       String
  position     Int
  with_acl     Boolean @default(false)
  load_modules Boolean @default(false)

  bag    Bags    @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)
  recipe Recipes @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

  @@unique([recipe_id, bag_id])
  @@index([recipe_id])
  @@map("recipe_bags")
}

model Bags {
  bag_id      String        @id @default(uuid(7))
  bag_name    String        @unique
  description String
  owner_id    String?
  recipe_bags Recipe_bags[]
  tiddlers    Tiddlers[]
  acl         BagAcl[]

  @@map("bags")
}

model BagAcl {
  acl_id     Int        @id @default(autoincrement())
  bag_id     String
  bag        Bags       @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)
  role_id    String
  permission Permission

  @@map("bag_acl")
}

model Tiddlers {
  revision_id     String   @id @default(uuid(7))
  bag_id          String
  title           String
  is_deleted      Boolean
  attachment_hash String?
  fields          Fields[]
  // Deleting a referenced record (bag) will trigger the deletion of referencing record (tiddler).
  bag             Bags     @relation(fields: [bag_id], references: [bag_id], onDelete: Cascade)

  @@unique([bag_id, title])
  @@index([bag_id])
  @@map("tiddlers")
}

model Fields {
  revision_id String
  field_name  String
  field_value String
  // Deleting a referenced record (tiddler) will trigger the deletion of referencing record (field).
  tiddler     Tiddlers @relation(fields: [revision_id], references: [revision_id], onDelete: Cascade)

  @@id([revision_id, field_name])
  @@index([revision_id])
  @@map("fields")
}

model Roles {
  role_id     String  @id @default(uuid(7))
  role_name   String  @unique()
  description String?
  users       Users[]

  @@map("roles")
}

model Users {
  user_id    String     @id @default(uuid(7))
  username   String     @unique
  email      String     @unique
  password   String
  created_at DateTime   @default(now())
  last_login DateTime?
  sessions   Sessions[]
  roles      Roles[]

  @@map("users")
}

model Sessions {
  session_id    String   @id
  created_at    DateTime @default(now())
  last_accessed DateTime
  session_key   String?
  user_id       String
  user          Users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("sessions")
}
