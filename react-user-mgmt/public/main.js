"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __typeError = (msg) => {
    throw TypeError(msg);
  };
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
  var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);

  // react-user-mgmt/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "react-user-mgmt/node_modules/react/cjs/react.development.js"(exports2, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component6(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component6.prototype.isReactComponent = {};
          Component6.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component6.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component6.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component6.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component6.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef2() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty16 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty16.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty16.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement6(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty16.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement17(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty16.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement11(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement11(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement11(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext13(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef67(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType2(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext21(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState30(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef28(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect22(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback25(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo13(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle7(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId4() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component7) {
            var prototype = Component7.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty16);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray2(node2)) {
              for (var i2 = 0; i2 < node2.length; i2++) {
                var child = node2[i2];
                if (isValidElement11(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement11(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement11(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys2.length; i2++) {
                var key = keys2[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement6.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement17.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children9 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports2.Children = Children9;
          exports2.Component = Component6;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.Profiler = REACT_PROFILER_TYPE;
          exports2.PureComponent = PureComponent;
          exports2.StrictMode = REACT_STRICT_MODE_TYPE;
          exports2.Suspense = REACT_SUSPENSE_TYPE;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.act = act;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext13;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef2;
          exports2.forwardRef = forwardRef67;
          exports2.isValidElement = isValidElement11;
          exports2.lazy = lazy;
          exports2.memo = memo2;
          exports2.startTransition = startTransition;
          exports2.unstable_act = act;
          exports2.useCallback = useCallback25;
          exports2.useContext = useContext21;
          exports2.useDebugValue = useDebugValue3;
          exports2.useDeferredValue = useDeferredValue;
          exports2.useEffect = useEffect22;
          exports2.useId = useId4;
          exports2.useImperativeHandle = useImperativeHandle7;
          exports2.useInsertionEffect = useInsertionEffect3;
          exports2.useLayoutEffect = useLayoutEffect3;
          exports2.useMemo = useMemo13;
          exports2.useReducer = useReducer2;
          exports2.useRef = useRef28;
          exports2.useState = useState30;
          exports2.useSyncExternalStore = useSyncExternalStore;
          exports2.useTransition = useTransition;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/react/index.js
  var require_react = __commonJS({
    "react-user-mgmt/node_modules/react/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // react-user-mgmt/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "react-user-mgmt/node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap2, node2) {
            var index = heap2.length;
            heap2.push(node2);
            siftUp(heap2, node2, index);
          }
          function peek2(heap2) {
            return heap2.length === 0 ? null : heap2[0];
          }
          function pop(heap2) {
            if (heap2.length === 0) {
              return null;
            }
            var first = heap2[0];
            var last2 = heap2.pop();
            if (last2 !== first) {
              heap2[0] = last2;
              siftDown(heap2, last2, 0);
            }
            return first;
          }
          function siftUp(heap2, node2, i2) {
            var index = i2;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent2 = heap2[parentIndex];
              if (compare(parent2, node2) > 0) {
                heap2[parentIndex] = node2;
                heap2[index] = parent2;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap2, node2, i2) {
            var index = i2;
            var length2 = heap2.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap2[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap2[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap2[index] = right;
                  heap2[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap2[index] = left;
                  heap2[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap2[index] = right;
                heap2[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports2.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports2.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports2.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_forceFrameRate = forceFrameRate;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = shouldYieldToHost;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "react-user-mgmt/node_modules/scheduler/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // react-user-mgmt/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "react-user-mgmt/node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React140 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React140.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment21 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty16 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty16.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty16.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties2.hasOwnProperty(name) ? properties2[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize3 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component6) {
            var prototype = Component6.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef2:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment21:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set4.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString3(value);
                }
              } else if (node2.value !== toString3(value)) {
                node2.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString3(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString3(value)) {
                node2.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React140.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html2) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty5 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty5) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles5) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles5) {
                if (!styles5.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles5[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles5) {
            var style5 = node2.style;
            for (var styleName in styles5) {
              if (!styles5.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles5[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles5[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style5.setProperty(styleName, styleValue);
              } else {
                style5[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles5) {
            var expanded = {};
            for (var key in styles5) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty16.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty16.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d2, e2, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d2, e2, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b2, c2, d2, e2, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d2, e2, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has2(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty16.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node2 = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next2 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next2 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next2;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length2;
                }
                if ((next2 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next2;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style4 = {};
          if (canUseDOM) {
            style4 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style4) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop: while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html2) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop6() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop6;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement6(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty16.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement6(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style5 = instance.style;
            if (typeof style5.setProperty === "function") {
              style5.setProperty("display", "none", "important");
            } else {
              style5.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element) {
            {
              var has3 = Function.call.bind(hasOwnProperty16);
              for (var typeSpecName in typeSpecs) {
                if (has3(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component6, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component6)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component6 = node2.type;
                    if (isContextProvider(Component6)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array = [];
              set4.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment21) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment21) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node2 = parent2;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent2;
              parent2 = parent2.return;
            }
            if (node2.tag === HostRoot) {
              var root3 = node2.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion5 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component6, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component6(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component6(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion5, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion5, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component6, baseProps) {
            if (Component6 && Component6.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component6.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var render2 = Component6.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component6.type;
              if (isSimpleFunctionComponent(type) && Component6.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component6.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component6.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component6.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component6.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component6.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component6, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component6, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component6, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component6, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component6, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component6.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component6)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component6)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component6, nextProps);
              mountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component6, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component6, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component6, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component6, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component6.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component6, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component6 = init(payload);
            workInProgress2.type = Component6;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component6);
            var resolvedProps = resolveDefaultProps(Component6, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component6);
                  workInProgress2.type = Component6 = resolveFunctionForHotReloading(Component6);
                }
                child = updateFunctionComponent(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component6 = resolveClassForHotReloading(Component6);
                }
                child = updateClassComponent(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component6 = resolveForwardRefForHotReloading(Component6);
                }
                child = updateForwardRef(null, workInProgress2, Component6, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component6.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component6)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component6,
                  resolveDefaultProps(Component6.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component6 !== null && typeof Component6 === "object" && Component6.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component6 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component6, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component6)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component6, nextProps);
            mountClassInstance(workInProgress2, Component6, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component6, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component6, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component6, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component6.prototype && typeof Component6.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component6, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component6)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component6, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component6, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component6, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component6);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component6) {
            {
              if (Component6) {
                if (Component6.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component6.displayName || Component6.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component6.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component6.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component6.contextType === "object" && Component6.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component6) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component6 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component6 ? unresolvedProps : resolveDefaultProps(Component6, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component6, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment21:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent2, node2.stateNode);
                } else if (node2.tag === HostPortal) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment21:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component6 = workInProgress2.type;
                if (isContextProvider(Component6)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion5) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion5) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion5) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion5) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion5) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings: while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent2) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent2) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent2, stateNode, before);
              } else {
                appendChild(parent2, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent: while (parent2 !== null) {
                switch (parent2.tag) {
                  case HostComponent: {
                    hostParent = parent2.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent2.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent2.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent2 = parent2.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion5) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion5 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion5 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError2(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError2(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError2(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component6) {
            var prototype = Component6.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component6) {
            if (typeof Component6 === "function") {
              return shouldConstruct$1(Component6) ? ClassComponent : FunctionComponent;
            } else if (Component6 !== void 0 && Component6 !== null) {
              var $$typeof = Component6.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef2;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment21, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.3.1";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component6 = fiber.type;
              if (isContextProvider(Component6)) {
                return processChildContext(fiber, Component6, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer2(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer2(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer2(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has2(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.createRoot = createRoot$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync$1;
          exports2.hydrate = hydrate;
          exports2.hydrateRoot = hydrateRoot$1;
          exports2.render = render;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "react-user-mgmt/node_modules/react-dom/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // react-user-mgmt/node_modules/react-dom/client.js
  var require_client = __commonJS({
    "react-user-mgmt/node_modules/react-dom/client.js"(exports2) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports2.createRoot = m2.createRoot;
        exports2.hydrateRoot = m2.hydrateRoot;
      } else {
        i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports2.createRoot = function(c2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports2.hydrateRoot = function(c2, h2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // node_modules/@prisma/client/runtime/index-browser.js
  var require_index_browser = __commonJS({
    "node_modules/@prisma/client/runtime/index-browser.js"(exports2, module2) {
      "use strict";
      var he2 = Object.defineProperty;
      var We2 = Object.getOwnPropertyDescriptor;
      var Ge2 = Object.getOwnPropertyNames;
      var Je = Object.prototype.hasOwnProperty;
      var Me2 = (e2, n2) => {
        for (var i2 in n2) he2(e2, i2, { get: n2[i2], enumerable: true });
      };
      var Xe = (e2, n2, i2, t2) => {
        if (n2 && typeof n2 == "object" || typeof n2 == "function") for (let r3 of Ge2(n2)) !Je.call(e2, r3) && r3 !== i2 && he2(e2, r3, { get: () => n2[r3], enumerable: !(t2 = We2(n2, r3)) || t2.enumerable });
        return e2;
      };
      var Ke = (e2) => Xe(he2({}, "__esModule", { value: true }), e2);
      var Xn = {};
      Me2(Xn, { Decimal: () => je2, Public: () => pe2, getRuntime: () => Re2, makeStrictEnum: () => Pe2, objectEnumValues: () => Oe2 });
      module2.exports = Ke(Xn);
      var pe2 = {};
      Me2(pe2, { validator: () => Ce2 });
      function Ce2(...e2) {
        return (n2) => n2;
      }
      var ne2 = Symbol();
      var ge2 = /* @__PURE__ */ new WeakMap();
      var me2 = class {
        constructor(n2) {
          n2 === ne2 ? ge2.set(this, "Prisma.".concat(this._getName())) : ge2.set(this, "new Prisma.".concat(this._getNamespace(), ".").concat(this._getName(), "()"));
        }
        _getName() {
          return this.constructor.name;
        }
        toString() {
          return ge2.get(this);
        }
      };
      var G2 = class extends me2 {
        _getNamespace() {
          return "NullTypes";
        }
      };
      var J2 = class extends G2 {
      };
      we2(J2, "DbNull");
      var X2 = class extends G2 {
      };
      we2(X2, "JsonNull");
      var K2 = class extends G2 {
      };
      we2(K2, "AnyNull");
      var Oe2 = { classes: { DbNull: J2, JsonNull: X2, AnyNull: K2 }, instances: { DbNull: new J2(ne2), JsonNull: new X2(ne2), AnyNull: new K2(ne2) } };
      function we2(e2, n2) {
        Object.defineProperty(e2, "name", { value: n2, configurable: true });
      }
      var xe2 = /* @__PURE__ */ new Set(["toJSON", "$$typeof", "asymmetricMatch", Symbol.iterator, Symbol.toStringTag, Symbol.isConcatSpreadable, Symbol.toPrimitive]);
      function Pe2(e2) {
        return new Proxy(e2, { get(n2, i2) {
          if (i2 in n2) return n2[i2];
          if (!xe2.has(i2)) throw new TypeError("Invalid enum value: ".concat(String(i2)));
        } });
      }
      var Qe2 = "Cloudflare-Workers";
      var Ye = "node";
      function be2() {
        var e2, n2, i2;
        return typeof Netlify == "object" ? "netlify" : typeof EdgeRuntime == "string" ? "edge-light" : ((e2 = globalThis.navigator) == null ? void 0 : e2.userAgent) === Qe2 ? "workerd" : globalThis.Deno ? "deno" : globalThis.__lagon__ ? "lagon" : ((i2 = (n2 = globalThis.process) == null ? void 0 : n2.release) == null ? void 0 : i2.name) === Ye ? "node" : globalThis.Bun ? "bun" : globalThis.fastly ? "fastly" : "unknown";
      }
      var ze2 = { node: "Node.js", workerd: "Cloudflare Workers", deno: "Deno and Deno Deploy", netlify: "Netlify Edge Functions", "edge-light": "Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)" };
      function Re2() {
        let e2 = be2();
        return { id: e2, prettyName: ze2[e2] || e2, isEdge: ["workerd", "deno", "netlify", "edge-light"].includes(e2) };
      }
      var H2 = 9e15;
      var $2 = 1e9;
      var Ne2 = "0123456789abcdef";
      var re2 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
      var se2 = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
      var ve2 = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -H2, maxE: H2, crypto: false };
      var Te2;
      var Z2;
      var w2 = true;
      var ue2 = "[DecimalError] ";
      var V2 = ue2 + "Invalid argument: ";
      var Le2 = ue2 + "Precision limit exceeded";
      var De2 = ue2 + "crypto unavailable";
      var Fe2 = "[object Decimal]";
      var R2 = Math.floor;
      var C2 = Math.pow;
      var ye2 = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
      var en = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
      var nn = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
      var Ie2 = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
      var L2 = 1e7;
      var m2 = 7;
      var tn = 9007199254740991;
      var rn = re2.length - 1;
      var Ee2 = se2.length - 1;
      var h2 = { toStringTag: Fe2 };
      h2.absoluteValue = h2.abs = function() {
        var e2 = new this.constructor(this);
        return e2.s < 0 && (e2.s = 1), p2(e2);
      };
      h2.ceil = function() {
        return p2(new this.constructor(this), this.e + 1, 2);
      };
      h2.clampedTo = h2.clamp = function(e2, n2) {
        var i2, t2 = this, r3 = t2.constructor;
        if (e2 = new r3(e2), n2 = new r3(n2), !e2.s || !n2.s) return new r3(NaN);
        if (e2.gt(n2)) throw Error(V2 + n2);
        return i2 = t2.cmp(e2), i2 < 0 ? e2 : t2.cmp(n2) > 0 ? n2 : new r3(t2);
      };
      h2.comparedTo = h2.cmp = function(e2) {
        var n2, i2, t2, r3, s2 = this, o2 = s2.d, u2 = (e2 = new s2.constructor(e2)).d, l2 = s2.s, f2 = e2.s;
        if (!o2 || !u2) return !l2 || !f2 ? NaN : l2 !== f2 ? l2 : o2 === u2 ? 0 : !o2 ^ l2 < 0 ? 1 : -1;
        if (!o2[0] || !u2[0]) return o2[0] ? l2 : u2[0] ? -f2 : 0;
        if (l2 !== f2) return l2;
        if (s2.e !== e2.e) return s2.e > e2.e ^ l2 < 0 ? 1 : -1;
        for (t2 = o2.length, r3 = u2.length, n2 = 0, i2 = t2 < r3 ? t2 : r3; n2 < i2; ++n2) if (o2[n2] !== u2[n2]) return o2[n2] > u2[n2] ^ l2 < 0 ? 1 : -1;
        return t2 === r3 ? 0 : t2 > r3 ^ l2 < 0 ? 1 : -1;
      };
      h2.cosine = h2.cos = function() {
        var e2, n2, i2 = this, t2 = i2.constructor;
        return i2.d ? i2.d[0] ? (e2 = t2.precision, n2 = t2.rounding, t2.precision = e2 + Math.max(i2.e, i2.sd()) + m2, t2.rounding = 1, i2 = sn(t2, $e2(t2, i2)), t2.precision = e2, t2.rounding = n2, p2(Z2 == 2 || Z2 == 3 ? i2.neg() : i2, e2, n2, true)) : new t2(1) : new t2(NaN);
      };
      h2.cubeRoot = h2.cbrt = function() {
        var e2, n2, i2, t2, r3, s2, o2, u2, l2, f2, c2 = this, a2 = c2.constructor;
        if (!c2.isFinite() || c2.isZero()) return new a2(c2);
        for (w2 = false, s2 = c2.s * C2(c2.s * c2, 1 / 3), !s2 || Math.abs(s2) == 1 / 0 ? (i2 = O2(c2.d), e2 = c2.e, (s2 = (e2 - i2.length + 1) % 3) && (i2 += s2 == 1 || s2 == -2 ? "0" : "00"), s2 = C2(i2, 1 / 3), e2 = R2((e2 + 1) / 3) - (e2 % 3 == (e2 < 0 ? -1 : 2)), s2 == 1 / 0 ? i2 = "5e" + e2 : (i2 = s2.toExponential(), i2 = i2.slice(0, i2.indexOf("e") + 1) + e2), t2 = new a2(i2), t2.s = c2.s) : t2 = new a2(s2.toString()), o2 = (e2 = a2.precision) + 3; ; ) if (u2 = t2, l2 = u2.times(u2).times(u2), f2 = l2.plus(c2), t2 = S2(f2.plus(c2).times(u2), f2.plus(l2), o2 + 2, 1), O2(u2.d).slice(0, o2) === (i2 = O2(t2.d)).slice(0, o2)) if (i2 = i2.slice(o2 - 3, o2 + 1), i2 == "9999" || !r3 && i2 == "4999") {
          if (!r3 && (p2(u2, e2 + 1, 0), u2.times(u2).times(u2).eq(c2))) {
            t2 = u2;
            break;
          }
          o2 += 4, r3 = 1;
        } else {
          (!+i2 || !+i2.slice(1) && i2.charAt(0) == "5") && (p2(t2, e2 + 1, 1), n2 = !t2.times(t2).times(t2).eq(c2));
          break;
        }
        return w2 = true, p2(t2, e2, a2.rounding, n2);
      };
      h2.decimalPlaces = h2.dp = function() {
        var e2, n2 = this.d, i2 = NaN;
        if (n2) {
          if (e2 = n2.length - 1, i2 = (e2 - R2(this.e / m2)) * m2, e2 = n2[e2], e2) for (; e2 % 10 == 0; e2 /= 10) i2--;
          i2 < 0 && (i2 = 0);
        }
        return i2;
      };
      h2.dividedBy = h2.div = function(e2) {
        return S2(this, new this.constructor(e2));
      };
      h2.dividedToIntegerBy = h2.divToInt = function(e2) {
        var n2 = this, i2 = n2.constructor;
        return p2(S2(n2, new i2(e2), 0, 1, 1), i2.precision, i2.rounding);
      };
      h2.equals = h2.eq = function(e2) {
        return this.cmp(e2) === 0;
      };
      h2.floor = function() {
        return p2(new this.constructor(this), this.e + 1, 3);
      };
      h2.greaterThan = h2.gt = function(e2) {
        return this.cmp(e2) > 0;
      };
      h2.greaterThanOrEqualTo = h2.gte = function(e2) {
        var n2 = this.cmp(e2);
        return n2 == 1 || n2 === 0;
      };
      h2.hyperbolicCosine = h2.cosh = function() {
        var e2, n2, i2, t2, r3, s2 = this, o2 = s2.constructor, u2 = new o2(1);
        if (!s2.isFinite()) return new o2(s2.s ? 1 / 0 : NaN);
        if (s2.isZero()) return u2;
        i2 = o2.precision, t2 = o2.rounding, o2.precision = i2 + Math.max(s2.e, s2.sd()) + 4, o2.rounding = 1, r3 = s2.d.length, r3 < 32 ? (e2 = Math.ceil(r3 / 3), n2 = (1 / le2(4, e2)).toString()) : (e2 = 16, n2 = "2.3283064365386962890625e-10"), s2 = j2(o2, 1, s2.times(n2), new o2(1), true);
        for (var l2, f2 = e2, c2 = new o2(8); f2--; ) l2 = s2.times(s2), s2 = u2.minus(l2.times(c2.minus(l2.times(c2))));
        return p2(s2, o2.precision = i2, o2.rounding = t2, true);
      };
      h2.hyperbolicSine = h2.sinh = function() {
        var e2, n2, i2, t2, r3 = this, s2 = r3.constructor;
        if (!r3.isFinite() || r3.isZero()) return new s2(r3);
        if (n2 = s2.precision, i2 = s2.rounding, s2.precision = n2 + Math.max(r3.e, r3.sd()) + 4, s2.rounding = 1, t2 = r3.d.length, t2 < 3) r3 = j2(s2, 2, r3, r3, true);
        else {
          e2 = 1.4 * Math.sqrt(t2), e2 = e2 > 16 ? 16 : e2 | 0, r3 = r3.times(1 / le2(5, e2)), r3 = j2(s2, 2, r3, r3, true);
          for (var o2, u2 = new s2(5), l2 = new s2(16), f2 = new s2(20); e2--; ) o2 = r3.times(r3), r3 = r3.times(u2.plus(o2.times(l2.times(o2).plus(f2))));
        }
        return s2.precision = n2, s2.rounding = i2, p2(r3, n2, i2, true);
      };
      h2.hyperbolicTangent = h2.tanh = function() {
        var e2, n2, i2 = this, t2 = i2.constructor;
        return i2.isFinite() ? i2.isZero() ? new t2(i2) : (e2 = t2.precision, n2 = t2.rounding, t2.precision = e2 + 7, t2.rounding = 1, S2(i2.sinh(), i2.cosh(), t2.precision = e2, t2.rounding = n2)) : new t2(i2.s);
      };
      h2.inverseCosine = h2.acos = function() {
        var e2 = this, n2 = e2.constructor, i2 = e2.abs().cmp(1), t2 = n2.precision, r3 = n2.rounding;
        return i2 !== -1 ? i2 === 0 ? e2.isNeg() ? D2(n2, t2, r3) : new n2(0) : new n2(NaN) : e2.isZero() ? D2(n2, t2 + 4, r3).times(0.5) : (n2.precision = t2 + 6, n2.rounding = 1, e2 = new n2(1).minus(e2).div(e2.plus(1)).sqrt().atan(), n2.precision = t2, n2.rounding = r3, e2.times(2));
      };
      h2.inverseHyperbolicCosine = h2.acosh = function() {
        var e2, n2, i2 = this, t2 = i2.constructor;
        return i2.lte(1) ? new t2(i2.eq(1) ? 0 : NaN) : i2.isFinite() ? (e2 = t2.precision, n2 = t2.rounding, t2.precision = e2 + Math.max(Math.abs(i2.e), i2.sd()) + 4, t2.rounding = 1, w2 = false, i2 = i2.times(i2).minus(1).sqrt().plus(i2), w2 = true, t2.precision = e2, t2.rounding = n2, i2.ln()) : new t2(i2);
      };
      h2.inverseHyperbolicSine = h2.asinh = function() {
        var e2, n2, i2 = this, t2 = i2.constructor;
        return !i2.isFinite() || i2.isZero() ? new t2(i2) : (e2 = t2.precision, n2 = t2.rounding, t2.precision = e2 + 2 * Math.max(Math.abs(i2.e), i2.sd()) + 6, t2.rounding = 1, w2 = false, i2 = i2.times(i2).plus(1).sqrt().plus(i2), w2 = true, t2.precision = e2, t2.rounding = n2, i2.ln());
      };
      h2.inverseHyperbolicTangent = h2.atanh = function() {
        var e2, n2, i2, t2, r3 = this, s2 = r3.constructor;
        return r3.isFinite() ? r3.e >= 0 ? new s2(r3.abs().eq(1) ? r3.s / 0 : r3.isZero() ? r3 : NaN) : (e2 = s2.precision, n2 = s2.rounding, t2 = r3.sd(), Math.max(t2, e2) < 2 * -r3.e - 1 ? p2(new s2(r3), e2, n2, true) : (s2.precision = i2 = t2 - r3.e, r3 = S2(r3.plus(1), new s2(1).minus(r3), i2 + e2, 1), s2.precision = e2 + 4, s2.rounding = 1, r3 = r3.ln(), s2.precision = e2, s2.rounding = n2, r3.times(0.5))) : new s2(NaN);
      };
      h2.inverseSine = h2.asin = function() {
        var e2, n2, i2, t2, r3 = this, s2 = r3.constructor;
        return r3.isZero() ? new s2(r3) : (n2 = r3.abs().cmp(1), i2 = s2.precision, t2 = s2.rounding, n2 !== -1 ? n2 === 0 ? (e2 = D2(s2, i2 + 4, t2).times(0.5), e2.s = r3.s, e2) : new s2(NaN) : (s2.precision = i2 + 6, s2.rounding = 1, r3 = r3.div(new s2(1).minus(r3.times(r3)).sqrt().plus(1)).atan(), s2.precision = i2, s2.rounding = t2, r3.times(2)));
      };
      h2.inverseTangent = h2.atan = function() {
        var e2, n2, i2, t2, r3, s2, o2, u2, l2, f2 = this, c2 = f2.constructor, a2 = c2.precision, d2 = c2.rounding;
        if (f2.isFinite()) {
          if (f2.isZero()) return new c2(f2);
          if (f2.abs().eq(1) && a2 + 4 <= Ee2) return o2 = D2(c2, a2 + 4, d2).times(0.25), o2.s = f2.s, o2;
        } else {
          if (!f2.s) return new c2(NaN);
          if (a2 + 4 <= Ee2) return o2 = D2(c2, a2 + 4, d2).times(0.5), o2.s = f2.s, o2;
        }
        for (c2.precision = u2 = a2 + 10, c2.rounding = 1, i2 = Math.min(28, u2 / m2 + 2 | 0), e2 = i2; e2; --e2) f2 = f2.div(f2.times(f2).plus(1).sqrt().plus(1));
        for (w2 = false, n2 = Math.ceil(u2 / m2), t2 = 1, l2 = f2.times(f2), o2 = new c2(f2), r3 = f2; e2 !== -1; ) if (r3 = r3.times(l2), s2 = o2.minus(r3.div(t2 += 2)), r3 = r3.times(l2), o2 = s2.plus(r3.div(t2 += 2)), o2.d[n2] !== void 0) for (e2 = n2; o2.d[e2] === s2.d[e2] && e2--; ) ;
        return i2 && (o2 = o2.times(2 << i2 - 1)), w2 = true, p2(o2, c2.precision = a2, c2.rounding = d2, true);
      };
      h2.isFinite = function() {
        return !!this.d;
      };
      h2.isInteger = h2.isInt = function() {
        return !!this.d && R2(this.e / m2) > this.d.length - 2;
      };
      h2.isNaN = function() {
        return !this.s;
      };
      h2.isNegative = h2.isNeg = function() {
        return this.s < 0;
      };
      h2.isPositive = h2.isPos = function() {
        return this.s > 0;
      };
      h2.isZero = function() {
        return !!this.d && this.d[0] === 0;
      };
      h2.lessThan = h2.lt = function(e2) {
        return this.cmp(e2) < 0;
      };
      h2.lessThanOrEqualTo = h2.lte = function(e2) {
        return this.cmp(e2) < 1;
      };
      h2.logarithm = h2.log = function(e2) {
        var n2, i2, t2, r3, s2, o2, u2, l2, f2 = this, c2 = f2.constructor, a2 = c2.precision, d2 = c2.rounding, g2 = 5;
        if (e2 == null) e2 = new c2(10), n2 = true;
        else {
          if (e2 = new c2(e2), i2 = e2.d, e2.s < 0 || !i2 || !i2[0] || e2.eq(1)) return new c2(NaN);
          n2 = e2.eq(10);
        }
        if (i2 = f2.d, f2.s < 0 || !i2 || !i2[0] || f2.eq(1)) return new c2(i2 && !i2[0] ? -1 / 0 : f2.s != 1 ? NaN : i2 ? 0 : 1 / 0);
        if (n2) if (i2.length > 1) s2 = true;
        else {
          for (r3 = i2[0]; r3 % 10 === 0; ) r3 /= 10;
          s2 = r3 !== 1;
        }
        if (w2 = false, u2 = a2 + g2, o2 = B2(f2, u2), t2 = n2 ? oe2(c2, u2 + 10) : B2(e2, u2), l2 = S2(o2, t2, u2, 1), x2(l2.d, r3 = a2, d2)) do
          if (u2 += 10, o2 = B2(f2, u2), t2 = n2 ? oe2(c2, u2 + 10) : B2(e2, u2), l2 = S2(o2, t2, u2, 1), !s2) {
            +O2(l2.d).slice(r3 + 1, r3 + 15) + 1 == 1e14 && (l2 = p2(l2, a2 + 1, 0));
            break;
          }
        while (x2(l2.d, r3 += 10, d2));
        return w2 = true, p2(l2, a2, d2);
      };
      h2.minus = h2.sub = function(e2) {
        var n2, i2, t2, r3, s2, o2, u2, l2, f2, c2, a2, d2, g2 = this, v2 = g2.constructor;
        if (e2 = new v2(e2), !g2.d || !e2.d) return !g2.s || !e2.s ? e2 = new v2(NaN) : g2.d ? e2.s = -e2.s : e2 = new v2(e2.d || g2.s !== e2.s ? g2 : NaN), e2;
        if (g2.s != e2.s) return e2.s = -e2.s, g2.plus(e2);
        if (f2 = g2.d, d2 = e2.d, u2 = v2.precision, l2 = v2.rounding, !f2[0] || !d2[0]) {
          if (d2[0]) e2.s = -e2.s;
          else if (f2[0]) e2 = new v2(g2);
          else return new v2(l2 === 3 ? -0 : 0);
          return w2 ? p2(e2, u2, l2) : e2;
        }
        if (i2 = R2(e2.e / m2), c2 = R2(g2.e / m2), f2 = f2.slice(), s2 = c2 - i2, s2) {
          for (a2 = s2 < 0, a2 ? (n2 = f2, s2 = -s2, o2 = d2.length) : (n2 = d2, i2 = c2, o2 = f2.length), t2 = Math.max(Math.ceil(u2 / m2), o2) + 2, s2 > t2 && (s2 = t2, n2.length = 1), n2.reverse(), t2 = s2; t2--; ) n2.push(0);
          n2.reverse();
        } else {
          for (t2 = f2.length, o2 = d2.length, a2 = t2 < o2, a2 && (o2 = t2), t2 = 0; t2 < o2; t2++) if (f2[t2] != d2[t2]) {
            a2 = f2[t2] < d2[t2];
            break;
          }
          s2 = 0;
        }
        for (a2 && (n2 = f2, f2 = d2, d2 = n2, e2.s = -e2.s), o2 = f2.length, t2 = d2.length - o2; t2 > 0; --t2) f2[o2++] = 0;
        for (t2 = d2.length; t2 > s2; ) {
          if (f2[--t2] < d2[t2]) {
            for (r3 = t2; r3 && f2[--r3] === 0; ) f2[r3] = L2 - 1;
            --f2[r3], f2[t2] += L2;
          }
          f2[t2] -= d2[t2];
        }
        for (; f2[--o2] === 0; ) f2.pop();
        for (; f2[0] === 0; f2.shift()) --i2;
        return f2[0] ? (e2.d = f2, e2.e = fe2(f2, i2), w2 ? p2(e2, u2, l2) : e2) : new v2(l2 === 3 ? -0 : 0);
      };
      h2.modulo = h2.mod = function(e2) {
        var n2, i2 = this, t2 = i2.constructor;
        return e2 = new t2(e2), !i2.d || !e2.s || e2.d && !e2.d[0] ? new t2(NaN) : !e2.d || i2.d && !i2.d[0] ? p2(new t2(i2), t2.precision, t2.rounding) : (w2 = false, t2.modulo == 9 ? (n2 = S2(i2, e2.abs(), 0, 3, 1), n2.s *= e2.s) : n2 = S2(i2, e2, 0, t2.modulo, 1), n2 = n2.times(e2), w2 = true, i2.minus(n2));
      };
      h2.naturalExponential = h2.exp = function() {
        return Se2(this);
      };
      h2.naturalLogarithm = h2.ln = function() {
        return B2(this);
      };
      h2.negated = h2.neg = function() {
        var e2 = new this.constructor(this);
        return e2.s = -e2.s, p2(e2);
      };
      h2.plus = h2.add = function(e2) {
        var n2, i2, t2, r3, s2, o2, u2, l2, f2, c2, a2 = this, d2 = a2.constructor;
        if (e2 = new d2(e2), !a2.d || !e2.d) return !a2.s || !e2.s ? e2 = new d2(NaN) : a2.d || (e2 = new d2(e2.d || a2.s === e2.s ? a2 : NaN)), e2;
        if (a2.s != e2.s) return e2.s = -e2.s, a2.minus(e2);
        if (f2 = a2.d, c2 = e2.d, u2 = d2.precision, l2 = d2.rounding, !f2[0] || !c2[0]) return c2[0] || (e2 = new d2(a2)), w2 ? p2(e2, u2, l2) : e2;
        if (s2 = R2(a2.e / m2), t2 = R2(e2.e / m2), f2 = f2.slice(), r3 = s2 - t2, r3) {
          for (r3 < 0 ? (i2 = f2, r3 = -r3, o2 = c2.length) : (i2 = c2, t2 = s2, o2 = f2.length), s2 = Math.ceil(u2 / m2), o2 = s2 > o2 ? s2 + 1 : o2 + 1, r3 > o2 && (r3 = o2, i2.length = 1), i2.reverse(); r3--; ) i2.push(0);
          i2.reverse();
        }
        for (o2 = f2.length, r3 = c2.length, o2 - r3 < 0 && (r3 = o2, i2 = c2, c2 = f2, f2 = i2), n2 = 0; r3; ) n2 = (f2[--r3] = f2[r3] + c2[r3] + n2) / L2 | 0, f2[r3] %= L2;
        for (n2 && (f2.unshift(n2), ++t2), o2 = f2.length; f2[--o2] == 0; ) f2.pop();
        return e2.d = f2, e2.e = fe2(f2, t2), w2 ? p2(e2, u2, l2) : e2;
      };
      h2.precision = h2.sd = function(e2) {
        var n2, i2 = this;
        if (e2 !== void 0 && e2 !== !!e2 && e2 !== 1 && e2 !== 0) throw Error(V2 + e2);
        return i2.d ? (n2 = Ze2(i2.d), e2 && i2.e + 1 > n2 && (n2 = i2.e + 1)) : n2 = NaN, n2;
      };
      h2.round = function() {
        var e2 = this, n2 = e2.constructor;
        return p2(new n2(e2), e2.e + 1, n2.rounding);
      };
      h2.sine = h2.sin = function() {
        var e2, n2, i2 = this, t2 = i2.constructor;
        return i2.isFinite() ? i2.isZero() ? new t2(i2) : (e2 = t2.precision, n2 = t2.rounding, t2.precision = e2 + Math.max(i2.e, i2.sd()) + m2, t2.rounding = 1, i2 = un(t2, $e2(t2, i2)), t2.precision = e2, t2.rounding = n2, p2(Z2 > 2 ? i2.neg() : i2, e2, n2, true)) : new t2(NaN);
      };
      h2.squareRoot = h2.sqrt = function() {
        var e2, n2, i2, t2, r3, s2, o2 = this, u2 = o2.d, l2 = o2.e, f2 = o2.s, c2 = o2.constructor;
        if (f2 !== 1 || !u2 || !u2[0]) return new c2(!f2 || f2 < 0 && (!u2 || u2[0]) ? NaN : u2 ? o2 : 1 / 0);
        for (w2 = false, f2 = Math.sqrt(+o2), f2 == 0 || f2 == 1 / 0 ? (n2 = O2(u2), (n2.length + l2) % 2 == 0 && (n2 += "0"), f2 = Math.sqrt(n2), l2 = R2((l2 + 1) / 2) - (l2 < 0 || l2 % 2), f2 == 1 / 0 ? n2 = "5e" + l2 : (n2 = f2.toExponential(), n2 = n2.slice(0, n2.indexOf("e") + 1) + l2), t2 = new c2(n2)) : t2 = new c2(f2.toString()), i2 = (l2 = c2.precision) + 3; ; ) if (s2 = t2, t2 = s2.plus(S2(o2, s2, i2 + 2, 1)).times(0.5), O2(s2.d).slice(0, i2) === (n2 = O2(t2.d)).slice(0, i2)) if (n2 = n2.slice(i2 - 3, i2 + 1), n2 == "9999" || !r3 && n2 == "4999") {
          if (!r3 && (p2(s2, l2 + 1, 0), s2.times(s2).eq(o2))) {
            t2 = s2;
            break;
          }
          i2 += 4, r3 = 1;
        } else {
          (!+n2 || !+n2.slice(1) && n2.charAt(0) == "5") && (p2(t2, l2 + 1, 1), e2 = !t2.times(t2).eq(o2));
          break;
        }
        return w2 = true, p2(t2, l2, c2.rounding, e2);
      };
      h2.tangent = h2.tan = function() {
        var e2, n2, i2 = this, t2 = i2.constructor;
        return i2.isFinite() ? i2.isZero() ? new t2(i2) : (e2 = t2.precision, n2 = t2.rounding, t2.precision = e2 + 10, t2.rounding = 1, i2 = i2.sin(), i2.s = 1, i2 = S2(i2, new t2(1).minus(i2.times(i2)).sqrt(), e2 + 10, 0), t2.precision = e2, t2.rounding = n2, p2(Z2 == 2 || Z2 == 4 ? i2.neg() : i2, e2, n2, true)) : new t2(NaN);
      };
      h2.times = h2.mul = function(e2) {
        var n2, i2, t2, r3, s2, o2, u2, l2, f2, c2 = this, a2 = c2.constructor, d2 = c2.d, g2 = (e2 = new a2(e2)).d;
        if (e2.s *= c2.s, !d2 || !d2[0] || !g2 || !g2[0]) return new a2(!e2.s || d2 && !d2[0] && !g2 || g2 && !g2[0] && !d2 ? NaN : !d2 || !g2 ? e2.s / 0 : e2.s * 0);
        for (i2 = R2(c2.e / m2) + R2(e2.e / m2), l2 = d2.length, f2 = g2.length, l2 < f2 && (s2 = d2, d2 = g2, g2 = s2, o2 = l2, l2 = f2, f2 = o2), s2 = [], o2 = l2 + f2, t2 = o2; t2--; ) s2.push(0);
        for (t2 = f2; --t2 >= 0; ) {
          for (n2 = 0, r3 = l2 + t2; r3 > t2; ) u2 = s2[r3] + g2[t2] * d2[r3 - t2 - 1] + n2, s2[r3--] = u2 % L2 | 0, n2 = u2 / L2 | 0;
          s2[r3] = (s2[r3] + n2) % L2 | 0;
        }
        for (; !s2[--o2]; ) s2.pop();
        return n2 ? ++i2 : s2.shift(), e2.d = s2, e2.e = fe2(s2, i2), w2 ? p2(e2, a2.precision, a2.rounding) : e2;
      };
      h2.toBinary = function(e2, n2) {
        return ke2(this, 2, e2, n2);
      };
      h2.toDecimalPlaces = h2.toDP = function(e2, n2) {
        var i2 = this, t2 = i2.constructor;
        return i2 = new t2(i2), e2 === void 0 ? i2 : (_2(e2, 0, $2), n2 === void 0 ? n2 = t2.rounding : _2(n2, 0, 8), p2(i2, e2 + i2.e + 1, n2));
      };
      h2.toExponential = function(e2, n2) {
        var i2, t2 = this, r3 = t2.constructor;
        return e2 === void 0 ? i2 = F2(t2, true) : (_2(e2, 0, $2), n2 === void 0 ? n2 = r3.rounding : _2(n2, 0, 8), t2 = p2(new r3(t2), e2 + 1, n2), i2 = F2(t2, true, e2 + 1)), t2.isNeg() && !t2.isZero() ? "-" + i2 : i2;
      };
      h2.toFixed = function(e2, n2) {
        var i2, t2, r3 = this, s2 = r3.constructor;
        return e2 === void 0 ? i2 = F2(r3) : (_2(e2, 0, $2), n2 === void 0 ? n2 = s2.rounding : _2(n2, 0, 8), t2 = p2(new s2(r3), e2 + r3.e + 1, n2), i2 = F2(t2, false, e2 + t2.e + 1)), r3.isNeg() && !r3.isZero() ? "-" + i2 : i2;
      };
      h2.toFraction = function(e2) {
        var n2, i2, t2, r3, s2, o2, u2, l2, f2, c2, a2, d2, g2 = this, v2 = g2.d, N2 = g2.constructor;
        if (!v2) return new N2(g2);
        if (f2 = i2 = new N2(1), t2 = l2 = new N2(0), n2 = new N2(t2), s2 = n2.e = Ze2(v2) - g2.e - 1, o2 = s2 % m2, n2.d[0] = C2(10, o2 < 0 ? m2 + o2 : o2), e2 == null) e2 = s2 > 0 ? n2 : f2;
        else {
          if (u2 = new N2(e2), !u2.isInt() || u2.lt(f2)) throw Error(V2 + u2);
          e2 = u2.gt(n2) ? s2 > 0 ? n2 : f2 : u2;
        }
        for (w2 = false, u2 = new N2(O2(v2)), c2 = N2.precision, N2.precision = s2 = v2.length * m2 * 2; a2 = S2(u2, n2, 0, 1, 1), r3 = i2.plus(a2.times(t2)), r3.cmp(e2) != 1; ) i2 = t2, t2 = r3, r3 = f2, f2 = l2.plus(a2.times(r3)), l2 = r3, r3 = n2, n2 = u2.minus(a2.times(r3)), u2 = r3;
        return r3 = S2(e2.minus(i2), t2, 0, 1, 1), l2 = l2.plus(r3.times(f2)), i2 = i2.plus(r3.times(t2)), l2.s = f2.s = g2.s, d2 = S2(f2, t2, s2, 1).minus(g2).abs().cmp(S2(l2, i2, s2, 1).minus(g2).abs()) < 1 ? [f2, t2] : [l2, i2], N2.precision = c2, w2 = true, d2;
      };
      h2.toHexadecimal = h2.toHex = function(e2, n2) {
        return ke2(this, 16, e2, n2);
      };
      h2.toNearest = function(e2, n2) {
        var i2 = this, t2 = i2.constructor;
        if (i2 = new t2(i2), e2 == null) {
          if (!i2.d) return i2;
          e2 = new t2(1), n2 = t2.rounding;
        } else {
          if (e2 = new t2(e2), n2 === void 0 ? n2 = t2.rounding : _2(n2, 0, 8), !i2.d) return e2.s ? i2 : e2;
          if (!e2.d) return e2.s && (e2.s = i2.s), e2;
        }
        return e2.d[0] ? (w2 = false, i2 = S2(i2, e2, 0, n2, 1).times(e2), w2 = true, p2(i2)) : (e2.s = i2.s, i2 = e2), i2;
      };
      h2.toNumber = function() {
        return +this;
      };
      h2.toOctal = function(e2, n2) {
        return ke2(this, 8, e2, n2);
      };
      h2.toPower = h2.pow = function(e2) {
        var n2, i2, t2, r3, s2, o2, u2 = this, l2 = u2.constructor, f2 = +(e2 = new l2(e2));
        if (!u2.d || !e2.d || !u2.d[0] || !e2.d[0]) return new l2(C2(+u2, f2));
        if (u2 = new l2(u2), u2.eq(1)) return u2;
        if (t2 = l2.precision, s2 = l2.rounding, e2.eq(1)) return p2(u2, t2, s2);
        if (n2 = R2(e2.e / m2), n2 >= e2.d.length - 1 && (i2 = f2 < 0 ? -f2 : f2) <= tn) return r3 = Ue2(l2, u2, i2, t2), e2.s < 0 ? new l2(1).div(r3) : p2(r3, t2, s2);
        if (o2 = u2.s, o2 < 0) {
          if (n2 < e2.d.length - 1) return new l2(NaN);
          if (e2.d[n2] & 1 || (o2 = 1), u2.e == 0 && u2.d[0] == 1 && u2.d.length == 1) return u2.s = o2, u2;
        }
        return i2 = C2(+u2, f2), n2 = i2 == 0 || !isFinite(i2) ? R2(f2 * (Math.log("0." + O2(u2.d)) / Math.LN10 + u2.e + 1)) : new l2(i2 + "").e, n2 > l2.maxE + 1 || n2 < l2.minE - 1 ? new l2(n2 > 0 ? o2 / 0 : 0) : (w2 = false, l2.rounding = u2.s = 1, i2 = Math.min(12, (n2 + "").length), r3 = Se2(e2.times(B2(u2, t2 + i2)), t2), r3.d && (r3 = p2(r3, t2 + 5, 1), x2(r3.d, t2, s2) && (n2 = t2 + 10, r3 = p2(Se2(e2.times(B2(u2, n2 + i2)), n2), n2 + 5, 1), +O2(r3.d).slice(t2 + 1, t2 + 15) + 1 == 1e14 && (r3 = p2(r3, t2 + 1, 0)))), r3.s = o2, w2 = true, l2.rounding = s2, p2(r3, t2, s2));
      };
      h2.toPrecision = function(e2, n2) {
        var i2, t2 = this, r3 = t2.constructor;
        return e2 === void 0 ? i2 = F2(t2, t2.e <= r3.toExpNeg || t2.e >= r3.toExpPos) : (_2(e2, 1, $2), n2 === void 0 ? n2 = r3.rounding : _2(n2, 0, 8), t2 = p2(new r3(t2), e2, n2), i2 = F2(t2, e2 <= t2.e || t2.e <= r3.toExpNeg, e2)), t2.isNeg() && !t2.isZero() ? "-" + i2 : i2;
      };
      h2.toSignificantDigits = h2.toSD = function(e2, n2) {
        var i2 = this, t2 = i2.constructor;
        return e2 === void 0 ? (e2 = t2.precision, n2 = t2.rounding) : (_2(e2, 1, $2), n2 === void 0 ? n2 = t2.rounding : _2(n2, 0, 8)), p2(new t2(i2), e2, n2);
      };
      h2.toString = function() {
        var e2 = this, n2 = e2.constructor, i2 = F2(e2, e2.e <= n2.toExpNeg || e2.e >= n2.toExpPos);
        return e2.isNeg() && !e2.isZero() ? "-" + i2 : i2;
      };
      h2.truncated = h2.trunc = function() {
        return p2(new this.constructor(this), this.e + 1, 1);
      };
      h2.valueOf = h2.toJSON = function() {
        var e2 = this, n2 = e2.constructor, i2 = F2(e2, e2.e <= n2.toExpNeg || e2.e >= n2.toExpPos);
        return e2.isNeg() ? "-" + i2 : i2;
      };
      function O2(e2) {
        var n2, i2, t2, r3 = e2.length - 1, s2 = "", o2 = e2[0];
        if (r3 > 0) {
          for (s2 += o2, n2 = 1; n2 < r3; n2++) t2 = e2[n2] + "", i2 = m2 - t2.length, i2 && (s2 += U2(i2)), s2 += t2;
          o2 = e2[n2], t2 = o2 + "", i2 = m2 - t2.length, i2 && (s2 += U2(i2));
        } else if (o2 === 0) return "0";
        for (; o2 % 10 === 0; ) o2 /= 10;
        return s2 + o2;
      }
      function _2(e2, n2, i2) {
        if (e2 !== ~~e2 || e2 < n2 || e2 > i2) throw Error(V2 + e2);
      }
      function x2(e2, n2, i2, t2) {
        var r3, s2, o2, u2;
        for (s2 = e2[0]; s2 >= 10; s2 /= 10) --n2;
        return --n2 < 0 ? (n2 += m2, r3 = 0) : (r3 = Math.ceil((n2 + 1) / m2), n2 %= m2), s2 = C2(10, m2 - n2), u2 = e2[r3] % s2 | 0, t2 == null ? n2 < 3 ? (n2 == 0 ? u2 = u2 / 100 | 0 : n2 == 1 && (u2 = u2 / 10 | 0), o2 = i2 < 4 && u2 == 99999 || i2 > 3 && u2 == 49999 || u2 == 5e4 || u2 == 0) : o2 = (i2 < 4 && u2 + 1 == s2 || i2 > 3 && u2 + 1 == s2 / 2) && (e2[r3 + 1] / s2 / 100 | 0) == C2(10, n2 - 2) - 1 || (u2 == s2 / 2 || u2 == 0) && (e2[r3 + 1] / s2 / 100 | 0) == 0 : n2 < 4 ? (n2 == 0 ? u2 = u2 / 1e3 | 0 : n2 == 1 ? u2 = u2 / 100 | 0 : n2 == 2 && (u2 = u2 / 10 | 0), o2 = (t2 || i2 < 4) && u2 == 9999 || !t2 && i2 > 3 && u2 == 4999) : o2 = ((t2 || i2 < 4) && u2 + 1 == s2 || !t2 && i2 > 3 && u2 + 1 == s2 / 2) && (e2[r3 + 1] / s2 / 1e3 | 0) == C2(10, n2 - 3) - 1, o2;
      }
      function ie2(e2, n2, i2) {
        for (var t2, r3 = [0], s2, o2 = 0, u2 = e2.length; o2 < u2; ) {
          for (s2 = r3.length; s2--; ) r3[s2] *= n2;
          for (r3[0] += Ne2.indexOf(e2.charAt(o2++)), t2 = 0; t2 < r3.length; t2++) r3[t2] > i2 - 1 && (r3[t2 + 1] === void 0 && (r3[t2 + 1] = 0), r3[t2 + 1] += r3[t2] / i2 | 0, r3[t2] %= i2);
        }
        return r3.reverse();
      }
      function sn(e2, n2) {
        var i2, t2, r3;
        if (n2.isZero()) return n2;
        t2 = n2.d.length, t2 < 32 ? (i2 = Math.ceil(t2 / 3), r3 = (1 / le2(4, i2)).toString()) : (i2 = 16, r3 = "2.3283064365386962890625e-10"), e2.precision += i2, n2 = j2(e2, 1, n2.times(r3), new e2(1));
        for (var s2 = i2; s2--; ) {
          var o2 = n2.times(n2);
          n2 = o2.times(o2).minus(o2).times(8).plus(1);
        }
        return e2.precision -= i2, n2;
      }
      var S2 = /* @__PURE__ */ function() {
        function e2(t2, r3, s2) {
          var o2, u2 = 0, l2 = t2.length;
          for (t2 = t2.slice(); l2--; ) o2 = t2[l2] * r3 + u2, t2[l2] = o2 % s2 | 0, u2 = o2 / s2 | 0;
          return u2 && t2.unshift(u2), t2;
        }
        function n2(t2, r3, s2, o2) {
          var u2, l2;
          if (s2 != o2) l2 = s2 > o2 ? 1 : -1;
          else for (u2 = l2 = 0; u2 < s2; u2++) if (t2[u2] != r3[u2]) {
            l2 = t2[u2] > r3[u2] ? 1 : -1;
            break;
          }
          return l2;
        }
        function i2(t2, r3, s2, o2) {
          for (var u2 = 0; s2--; ) t2[s2] -= u2, u2 = t2[s2] < r3[s2] ? 1 : 0, t2[s2] = u2 * o2 + t2[s2] - r3[s2];
          for (; !t2[0] && t2.length > 1; ) t2.shift();
        }
        return function(t2, r3, s2, o2, u2, l2) {
          var f2, c2, a2, d2, g2, v2, N2, A2, M2, q2, E2, P2, Y2, I2, ce2, z2, W2, ae2, T2, y2, ee2 = t2.constructor, de2 = t2.s == r3.s ? 1 : -1, b2 = t2.d, k2 = r3.d;
          if (!b2 || !b2[0] || !k2 || !k2[0]) return new ee2(!t2.s || !r3.s || (b2 ? k2 && b2[0] == k2[0] : !k2) ? NaN : b2 && b2[0] == 0 || !k2 ? de2 * 0 : de2 / 0);
          for (l2 ? (g2 = 1, c2 = t2.e - r3.e) : (l2 = L2, g2 = m2, c2 = R2(t2.e / g2) - R2(r3.e / g2)), T2 = k2.length, W2 = b2.length, M2 = new ee2(de2), q2 = M2.d = [], a2 = 0; k2[a2] == (b2[a2] || 0); a2++) ;
          if (k2[a2] > (b2[a2] || 0) && c2--, s2 == null ? (I2 = s2 = ee2.precision, o2 = ee2.rounding) : u2 ? I2 = s2 + (t2.e - r3.e) + 1 : I2 = s2, I2 < 0) q2.push(1), v2 = true;
          else {
            if (I2 = I2 / g2 + 2 | 0, a2 = 0, T2 == 1) {
              for (d2 = 0, k2 = k2[0], I2++; (a2 < W2 || d2) && I2--; a2++) ce2 = d2 * l2 + (b2[a2] || 0), q2[a2] = ce2 / k2 | 0, d2 = ce2 % k2 | 0;
              v2 = d2 || a2 < W2;
            } else {
              for (d2 = l2 / (k2[0] + 1) | 0, d2 > 1 && (k2 = e2(k2, d2, l2), b2 = e2(b2, d2, l2), T2 = k2.length, W2 = b2.length), z2 = T2, E2 = b2.slice(0, T2), P2 = E2.length; P2 < T2; ) E2[P2++] = 0;
              y2 = k2.slice(), y2.unshift(0), ae2 = k2[0], k2[1] >= l2 / 2 && ++ae2;
              do
                d2 = 0, f2 = n2(k2, E2, T2, P2), f2 < 0 ? (Y2 = E2[0], T2 != P2 && (Y2 = Y2 * l2 + (E2[1] || 0)), d2 = Y2 / ae2 | 0, d2 > 1 ? (d2 >= l2 && (d2 = l2 - 1), N2 = e2(k2, d2, l2), A2 = N2.length, P2 = E2.length, f2 = n2(N2, E2, A2, P2), f2 == 1 && (d2--, i2(N2, T2 < A2 ? y2 : k2, A2, l2))) : (d2 == 0 && (f2 = d2 = 1), N2 = k2.slice()), A2 = N2.length, A2 < P2 && N2.unshift(0), i2(E2, N2, P2, l2), f2 == -1 && (P2 = E2.length, f2 = n2(k2, E2, T2, P2), f2 < 1 && (d2++, i2(E2, T2 < P2 ? y2 : k2, P2, l2))), P2 = E2.length) : f2 === 0 && (d2++, E2 = [0]), q2[a2++] = d2, f2 && E2[0] ? E2[P2++] = b2[z2] || 0 : (E2 = [b2[z2]], P2 = 1);
              while ((z2++ < W2 || E2[0] !== void 0) && I2--);
              v2 = E2[0] !== void 0;
            }
            q2[0] || q2.shift();
          }
          if (g2 == 1) M2.e = c2, Te2 = v2;
          else {
            for (a2 = 1, d2 = q2[0]; d2 >= 10; d2 /= 10) a2++;
            M2.e = a2 + c2 * g2 - 1, p2(M2, u2 ? s2 + M2.e + 1 : s2, o2, v2);
          }
          return M2;
        };
      }();
      function p2(e2, n2, i2, t2) {
        var r3, s2, o2, u2, l2, f2, c2, a2, d2, g2 = e2.constructor;
        e: if (n2 != null) {
          if (a2 = e2.d, !a2) return e2;
          for (r3 = 1, u2 = a2[0]; u2 >= 10; u2 /= 10) r3++;
          if (s2 = n2 - r3, s2 < 0) s2 += m2, o2 = n2, c2 = a2[d2 = 0], l2 = c2 / C2(10, r3 - o2 - 1) % 10 | 0;
          else if (d2 = Math.ceil((s2 + 1) / m2), u2 = a2.length, d2 >= u2) if (t2) {
            for (; u2++ <= d2; ) a2.push(0);
            c2 = l2 = 0, r3 = 1, s2 %= m2, o2 = s2 - m2 + 1;
          } else break e;
          else {
            for (c2 = u2 = a2[d2], r3 = 1; u2 >= 10; u2 /= 10) r3++;
            s2 %= m2, o2 = s2 - m2 + r3, l2 = o2 < 0 ? 0 : c2 / C2(10, r3 - o2 - 1) % 10 | 0;
          }
          if (t2 = t2 || n2 < 0 || a2[d2 + 1] !== void 0 || (o2 < 0 ? c2 : c2 % C2(10, r3 - o2 - 1)), f2 = i2 < 4 ? (l2 || t2) && (i2 == 0 || i2 == (e2.s < 0 ? 3 : 2)) : l2 > 5 || l2 == 5 && (i2 == 4 || t2 || i2 == 6 && (s2 > 0 ? o2 > 0 ? c2 / C2(10, r3 - o2) : 0 : a2[d2 - 1]) % 10 & 1 || i2 == (e2.s < 0 ? 8 : 7)), n2 < 1 || !a2[0]) return a2.length = 0, f2 ? (n2 -= e2.e + 1, a2[0] = C2(10, (m2 - n2 % m2) % m2), e2.e = -n2 || 0) : a2[0] = e2.e = 0, e2;
          if (s2 == 0 ? (a2.length = d2, u2 = 1, d2--) : (a2.length = d2 + 1, u2 = C2(10, m2 - s2), a2[d2] = o2 > 0 ? (c2 / C2(10, r3 - o2) % C2(10, o2) | 0) * u2 : 0), f2) for (; ; ) if (d2 == 0) {
            for (s2 = 1, o2 = a2[0]; o2 >= 10; o2 /= 10) s2++;
            for (o2 = a2[0] += u2, u2 = 1; o2 >= 10; o2 /= 10) u2++;
            s2 != u2 && (e2.e++, a2[0] == L2 && (a2[0] = 1));
            break;
          } else {
            if (a2[d2] += u2, a2[d2] != L2) break;
            a2[d2--] = 0, u2 = 1;
          }
          for (s2 = a2.length; a2[--s2] === 0; ) a2.pop();
        }
        return w2 && (e2.e > g2.maxE ? (e2.d = null, e2.e = NaN) : e2.e < g2.minE && (e2.e = 0, e2.d = [0])), e2;
      }
      function F2(e2, n2, i2) {
        if (!e2.isFinite()) return Ve(e2);
        var t2, r3 = e2.e, s2 = O2(e2.d), o2 = s2.length;
        return n2 ? (i2 && (t2 = i2 - o2) > 0 ? s2 = s2.charAt(0) + "." + s2.slice(1) + U2(t2) : o2 > 1 && (s2 = s2.charAt(0) + "." + s2.slice(1)), s2 = s2 + (e2.e < 0 ? "e" : "e+") + e2.e) : r3 < 0 ? (s2 = "0." + U2(-r3 - 1) + s2, i2 && (t2 = i2 - o2) > 0 && (s2 += U2(t2))) : r3 >= o2 ? (s2 += U2(r3 + 1 - o2), i2 && (t2 = i2 - r3 - 1) > 0 && (s2 = s2 + "." + U2(t2))) : ((t2 = r3 + 1) < o2 && (s2 = s2.slice(0, t2) + "." + s2.slice(t2)), i2 && (t2 = i2 - o2) > 0 && (r3 + 1 === o2 && (s2 += "."), s2 += U2(t2))), s2;
      }
      function fe2(e2, n2) {
        var i2 = e2[0];
        for (n2 *= m2; i2 >= 10; i2 /= 10) n2++;
        return n2;
      }
      function oe2(e2, n2, i2) {
        if (n2 > rn) throw w2 = true, i2 && (e2.precision = i2), Error(Le2);
        return p2(new e2(re2), n2, 1, true);
      }
      function D2(e2, n2, i2) {
        if (n2 > Ee2) throw Error(Le2);
        return p2(new e2(se2), n2, i2, true);
      }
      function Ze2(e2) {
        var n2 = e2.length - 1, i2 = n2 * m2 + 1;
        if (n2 = e2[n2], n2) {
          for (; n2 % 10 == 0; n2 /= 10) i2--;
          for (n2 = e2[0]; n2 >= 10; n2 /= 10) i2++;
        }
        return i2;
      }
      function U2(e2) {
        for (var n2 = ""; e2--; ) n2 += "0";
        return n2;
      }
      function Ue2(e2, n2, i2, t2) {
        var r3, s2 = new e2(1), o2 = Math.ceil(t2 / m2 + 4);
        for (w2 = false; ; ) {
          if (i2 % 2 && (s2 = s2.times(n2), _e2(s2.d, o2) && (r3 = true)), i2 = R2(i2 / 2), i2 === 0) {
            i2 = s2.d.length - 1, r3 && s2.d[i2] === 0 && ++s2.d[i2];
            break;
          }
          n2 = n2.times(n2), _e2(n2.d, o2);
        }
        return w2 = true, s2;
      }
      function Ae2(e2) {
        return e2.d[e2.d.length - 1] & 1;
      }
      function Be2(e2, n2, i2) {
        for (var t2, r3, s2 = new e2(n2[0]), o2 = 0; ++o2 < n2.length; ) {
          if (r3 = new e2(n2[o2]), !r3.s) {
            s2 = r3;
            break;
          }
          t2 = s2.cmp(r3), (t2 === i2 || t2 === 0 && s2.s === i2) && (s2 = r3);
        }
        return s2;
      }
      function Se2(e2, n2) {
        var i2, t2, r3, s2, o2, u2, l2, f2 = 0, c2 = 0, a2 = 0, d2 = e2.constructor, g2 = d2.rounding, v2 = d2.precision;
        if (!e2.d || !e2.d[0] || e2.e > 17) return new d2(e2.d ? e2.d[0] ? e2.s < 0 ? 0 : 1 / 0 : 1 : e2.s ? e2.s < 0 ? 0 : e2 : NaN);
        for (n2 == null ? (w2 = false, l2 = v2) : l2 = n2, u2 = new d2(0.03125); e2.e > -2; ) e2 = e2.times(u2), a2 += 5;
        for (t2 = Math.log(C2(2, a2)) / Math.LN10 * 2 + 5 | 0, l2 += t2, i2 = s2 = o2 = new d2(1), d2.precision = l2; ; ) {
          if (s2 = p2(s2.times(e2), l2, 1), i2 = i2.times(++c2), u2 = o2.plus(S2(s2, i2, l2, 1)), O2(u2.d).slice(0, l2) === O2(o2.d).slice(0, l2)) {
            for (r3 = a2; r3--; ) o2 = p2(o2.times(o2), l2, 1);
            if (n2 == null) if (f2 < 3 && x2(o2.d, l2 - t2, g2, f2)) d2.precision = l2 += 10, i2 = s2 = u2 = new d2(1), c2 = 0, f2++;
            else return p2(o2, d2.precision = v2, g2, w2 = true);
            else return d2.precision = v2, o2;
          }
          o2 = u2;
        }
      }
      function B2(e2, n2) {
        var i2, t2, r3, s2, o2, u2, l2, f2, c2, a2, d2, g2 = 1, v2 = 10, N2 = e2, A2 = N2.d, M2 = N2.constructor, q2 = M2.rounding, E2 = M2.precision;
        if (N2.s < 0 || !A2 || !A2[0] || !N2.e && A2[0] == 1 && A2.length == 1) return new M2(A2 && !A2[0] ? -1 / 0 : N2.s != 1 ? NaN : A2 ? 0 : N2);
        if (n2 == null ? (w2 = false, c2 = E2) : c2 = n2, M2.precision = c2 += v2, i2 = O2(A2), t2 = i2.charAt(0), Math.abs(s2 = N2.e) < 15e14) {
          for (; t2 < 7 && t2 != 1 || t2 == 1 && i2.charAt(1) > 3; ) N2 = N2.times(e2), i2 = O2(N2.d), t2 = i2.charAt(0), g2++;
          s2 = N2.e, t2 > 1 ? (N2 = new M2("0." + i2), s2++) : N2 = new M2(t2 + "." + i2.slice(1));
        } else return f2 = oe2(M2, c2 + 2, E2).times(s2 + ""), N2 = B2(new M2(t2 + "." + i2.slice(1)), c2 - v2).plus(f2), M2.precision = E2, n2 == null ? p2(N2, E2, q2, w2 = true) : N2;
        for (a2 = N2, l2 = o2 = N2 = S2(N2.minus(1), N2.plus(1), c2, 1), d2 = p2(N2.times(N2), c2, 1), r3 = 3; ; ) {
          if (o2 = p2(o2.times(d2), c2, 1), f2 = l2.plus(S2(o2, new M2(r3), c2, 1)), O2(f2.d).slice(0, c2) === O2(l2.d).slice(0, c2)) if (l2 = l2.times(2), s2 !== 0 && (l2 = l2.plus(oe2(M2, c2 + 2, E2).times(s2 + ""))), l2 = S2(l2, new M2(g2), c2, 1), n2 == null) if (x2(l2.d, c2 - v2, q2, u2)) M2.precision = c2 += v2, f2 = o2 = N2 = S2(a2.minus(1), a2.plus(1), c2, 1), d2 = p2(N2.times(N2), c2, 1), r3 = u2 = 1;
          else return p2(l2, M2.precision = E2, q2, w2 = true);
          else return M2.precision = E2, l2;
          l2 = f2, r3 += 2;
        }
      }
      function Ve(e2) {
        return String(e2.s * e2.s / 0);
      }
      function te2(e2, n2) {
        var i2, t2, r3;
        for ((i2 = n2.indexOf(".")) > -1 && (n2 = n2.replace(".", "")), (t2 = n2.search(/e/i)) > 0 ? (i2 < 0 && (i2 = t2), i2 += +n2.slice(t2 + 1), n2 = n2.substring(0, t2)) : i2 < 0 && (i2 = n2.length), t2 = 0; n2.charCodeAt(t2) === 48; t2++) ;
        for (r3 = n2.length; n2.charCodeAt(r3 - 1) === 48; --r3) ;
        if (n2 = n2.slice(t2, r3), n2) {
          if (r3 -= t2, e2.e = i2 = i2 - t2 - 1, e2.d = [], t2 = (i2 + 1) % m2, i2 < 0 && (t2 += m2), t2 < r3) {
            for (t2 && e2.d.push(+n2.slice(0, t2)), r3 -= m2; t2 < r3; ) e2.d.push(+n2.slice(t2, t2 += m2));
            n2 = n2.slice(t2), t2 = m2 - n2.length;
          } else t2 -= r3;
          for (; t2--; ) n2 += "0";
          e2.d.push(+n2), w2 && (e2.e > e2.constructor.maxE ? (e2.d = null, e2.e = NaN) : e2.e < e2.constructor.minE && (e2.e = 0, e2.d = [0]));
        } else e2.e = 0, e2.d = [0];
        return e2;
      }
      function on(e2, n2) {
        var i2, t2, r3, s2, o2, u2, l2, f2, c2;
        if (n2.indexOf("_") > -1) {
          if (n2 = n2.replace(/(\d)_(?=\d)/g, "$1"), Ie2.test(n2)) return te2(e2, n2);
        } else if (n2 === "Infinity" || n2 === "NaN") return +n2 || (e2.s = NaN), e2.e = NaN, e2.d = null, e2;
        if (en.test(n2)) i2 = 16, n2 = n2.toLowerCase();
        else if (ye2.test(n2)) i2 = 2;
        else if (nn.test(n2)) i2 = 8;
        else throw Error(V2 + n2);
        for (s2 = n2.search(/p/i), s2 > 0 ? (l2 = +n2.slice(s2 + 1), n2 = n2.substring(2, s2)) : n2 = n2.slice(2), s2 = n2.indexOf("."), o2 = s2 >= 0, t2 = e2.constructor, o2 && (n2 = n2.replace(".", ""), u2 = n2.length, s2 = u2 - s2, r3 = Ue2(t2, new t2(i2), s2, s2 * 2)), f2 = ie2(n2, i2, L2), c2 = f2.length - 1, s2 = c2; f2[s2] === 0; --s2) f2.pop();
        return s2 < 0 ? new t2(e2.s * 0) : (e2.e = fe2(f2, c2), e2.d = f2, w2 = false, o2 && (e2 = S2(e2, r3, u2 * 4)), l2 && (e2 = e2.times(Math.abs(l2) < 54 ? C2(2, l2) : Q2.pow(2, l2))), w2 = true, e2);
      }
      function un(e2, n2) {
        var i2, t2 = n2.d.length;
        if (t2 < 3) return n2.isZero() ? n2 : j2(e2, 2, n2, n2);
        i2 = 1.4 * Math.sqrt(t2), i2 = i2 > 16 ? 16 : i2 | 0, n2 = n2.times(1 / le2(5, i2)), n2 = j2(e2, 2, n2, n2);
        for (var r3, s2 = new e2(5), o2 = new e2(16), u2 = new e2(20); i2--; ) r3 = n2.times(n2), n2 = n2.times(s2.plus(r3.times(o2.times(r3).minus(u2))));
        return n2;
      }
      function j2(e2, n2, i2, t2, r3) {
        var s2, o2, u2, l2, f2 = 1, c2 = e2.precision, a2 = Math.ceil(c2 / m2);
        for (w2 = false, l2 = i2.times(i2), u2 = new e2(t2); ; ) {
          if (o2 = S2(u2.times(l2), new e2(n2++ * n2++), c2, 1), u2 = r3 ? t2.plus(o2) : t2.minus(o2), t2 = S2(o2.times(l2), new e2(n2++ * n2++), c2, 1), o2 = u2.plus(t2), o2.d[a2] !== void 0) {
            for (s2 = a2; o2.d[s2] === u2.d[s2] && s2--; ) ;
            if (s2 == -1) break;
          }
          s2 = u2, u2 = t2, t2 = o2, o2 = s2, f2++;
        }
        return w2 = true, o2.d.length = a2 + 1, o2;
      }
      function le2(e2, n2) {
        for (var i2 = e2; --n2; ) i2 *= e2;
        return i2;
      }
      function $e2(e2, n2) {
        var i2, t2 = n2.s < 0, r3 = D2(e2, e2.precision, 1), s2 = r3.times(0.5);
        if (n2 = n2.abs(), n2.lte(s2)) return Z2 = t2 ? 4 : 1, n2;
        if (i2 = n2.divToInt(r3), i2.isZero()) Z2 = t2 ? 3 : 2;
        else {
          if (n2 = n2.minus(i2.times(r3)), n2.lte(s2)) return Z2 = Ae2(i2) ? t2 ? 2 : 3 : t2 ? 4 : 1, n2;
          Z2 = Ae2(i2) ? t2 ? 1 : 4 : t2 ? 3 : 2;
        }
        return n2.minus(r3).abs();
      }
      function ke2(e2, n2, i2, t2) {
        var r3, s2, o2, u2, l2, f2, c2, a2, d2, g2 = e2.constructor, v2 = i2 !== void 0;
        if (v2 ? (_2(i2, 1, $2), t2 === void 0 ? t2 = g2.rounding : _2(t2, 0, 8)) : (i2 = g2.precision, t2 = g2.rounding), !e2.isFinite()) c2 = Ve(e2);
        else {
          for (c2 = F2(e2), o2 = c2.indexOf("."), v2 ? (r3 = 2, n2 == 16 ? i2 = i2 * 4 - 3 : n2 == 8 && (i2 = i2 * 3 - 2)) : r3 = n2, o2 >= 0 && (c2 = c2.replace(".", ""), d2 = new g2(1), d2.e = c2.length - o2, d2.d = ie2(F2(d2), 10, r3), d2.e = d2.d.length), a2 = ie2(c2, 10, r3), s2 = l2 = a2.length; a2[--l2] == 0; ) a2.pop();
          if (!a2[0]) c2 = v2 ? "0p+0" : "0";
          else {
            if (o2 < 0 ? s2-- : (e2 = new g2(e2), e2.d = a2, e2.e = s2, e2 = S2(e2, d2, i2, t2, 0, r3), a2 = e2.d, s2 = e2.e, f2 = Te2), o2 = a2[i2], u2 = r3 / 2, f2 = f2 || a2[i2 + 1] !== void 0, f2 = t2 < 4 ? (o2 !== void 0 || f2) && (t2 === 0 || t2 === (e2.s < 0 ? 3 : 2)) : o2 > u2 || o2 === u2 && (t2 === 4 || f2 || t2 === 6 && a2[i2 - 1] & 1 || t2 === (e2.s < 0 ? 8 : 7)), a2.length = i2, f2) for (; ++a2[--i2] > r3 - 1; ) a2[i2] = 0, i2 || (++s2, a2.unshift(1));
            for (l2 = a2.length; !a2[l2 - 1]; --l2) ;
            for (o2 = 0, c2 = ""; o2 < l2; o2++) c2 += Ne2.charAt(a2[o2]);
            if (v2) {
              if (l2 > 1) if (n2 == 16 || n2 == 8) {
                for (o2 = n2 == 16 ? 4 : 3, --l2; l2 % o2; l2++) c2 += "0";
                for (a2 = ie2(c2, r3, n2), l2 = a2.length; !a2[l2 - 1]; --l2) ;
                for (o2 = 1, c2 = "1."; o2 < l2; o2++) c2 += Ne2.charAt(a2[o2]);
              } else c2 = c2.charAt(0) + "." + c2.slice(1);
              c2 = c2 + (s2 < 0 ? "p" : "p+") + s2;
            } else if (s2 < 0) {
              for (; ++s2; ) c2 = "0" + c2;
              c2 = "0." + c2;
            } else if (++s2 > l2) for (s2 -= l2; s2--; ) c2 += "0";
            else s2 < l2 && (c2 = c2.slice(0, s2) + "." + c2.slice(s2));
          }
          c2 = (n2 == 16 ? "0x" : n2 == 2 ? "0b" : n2 == 8 ? "0o" : "") + c2;
        }
        return e2.s < 0 ? "-" + c2 : c2;
      }
      function _e2(e2, n2) {
        if (e2.length > n2) return e2.length = n2, true;
      }
      function fn(e2) {
        return new this(e2).abs();
      }
      function ln(e2) {
        return new this(e2).acos();
      }
      function cn(e2) {
        return new this(e2).acosh();
      }
      function an(e2, n2) {
        return new this(e2).plus(n2);
      }
      function dn(e2) {
        return new this(e2).asin();
      }
      function hn(e2) {
        return new this(e2).asinh();
      }
      function pn(e2) {
        return new this(e2).atan();
      }
      function gn(e2) {
        return new this(e2).atanh();
      }
      function mn(e2, n2) {
        e2 = new this(e2), n2 = new this(n2);
        var i2, t2 = this.precision, r3 = this.rounding, s2 = t2 + 4;
        return !e2.s || !n2.s ? i2 = new this(NaN) : !e2.d && !n2.d ? (i2 = D2(this, s2, 1).times(n2.s > 0 ? 0.25 : 0.75), i2.s = e2.s) : !n2.d || e2.isZero() ? (i2 = n2.s < 0 ? D2(this, t2, r3) : new this(0), i2.s = e2.s) : !e2.d || n2.isZero() ? (i2 = D2(this, s2, 1).times(0.5), i2.s = e2.s) : n2.s < 0 ? (this.precision = s2, this.rounding = 1, i2 = this.atan(S2(e2, n2, s2, 1)), n2 = D2(this, s2, 1), this.precision = t2, this.rounding = r3, i2 = e2.s < 0 ? i2.minus(n2) : i2.plus(n2)) : i2 = this.atan(S2(e2, n2, s2, 1)), i2;
      }
      function wn(e2) {
        return new this(e2).cbrt();
      }
      function Nn(e2) {
        return p2(e2 = new this(e2), e2.e + 1, 2);
      }
      function vn(e2, n2, i2) {
        return new this(e2).clamp(n2, i2);
      }
      function En(e2) {
        if (!e2 || typeof e2 != "object") throw Error(ue2 + "Object expected");
        var n2, i2, t2, r3 = e2.defaults === true, s2 = ["precision", 1, $2, "rounding", 0, 8, "toExpNeg", -H2, 0, "toExpPos", 0, H2, "maxE", 0, H2, "minE", -H2, 0, "modulo", 0, 9];
        for (n2 = 0; n2 < s2.length; n2 += 3) if (i2 = s2[n2], r3 && (this[i2] = ve2[i2]), (t2 = e2[i2]) !== void 0) if (R2(t2) === t2 && t2 >= s2[n2 + 1] && t2 <= s2[n2 + 2]) this[i2] = t2;
        else throw Error(V2 + i2 + ": " + t2);
        if (i2 = "crypto", r3 && (this[i2] = ve2[i2]), (t2 = e2[i2]) !== void 0) if (t2 === true || t2 === false || t2 === 0 || t2 === 1) if (t2) if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[i2] = true;
        else throw Error(De2);
        else this[i2] = false;
        else throw Error(V2 + i2 + ": " + t2);
        return this;
      }
      function Sn(e2) {
        return new this(e2).cos();
      }
      function kn(e2) {
        return new this(e2).cosh();
      }
      function He2(e2) {
        var n2, i2, t2;
        function r3(s2) {
          var o2, u2, l2, f2 = this;
          if (!(f2 instanceof r3)) return new r3(s2);
          if (f2.constructor = r3, qe2(s2)) {
            f2.s = s2.s, w2 ? !s2.d || s2.e > r3.maxE ? (f2.e = NaN, f2.d = null) : s2.e < r3.minE ? (f2.e = 0, f2.d = [0]) : (f2.e = s2.e, f2.d = s2.d.slice()) : (f2.e = s2.e, f2.d = s2.d ? s2.d.slice() : s2.d);
            return;
          }
          if (l2 = typeof s2, l2 === "number") {
            if (s2 === 0) {
              f2.s = 1 / s2 < 0 ? -1 : 1, f2.e = 0, f2.d = [0];
              return;
            }
            if (s2 < 0 ? (s2 = -s2, f2.s = -1) : f2.s = 1, s2 === ~~s2 && s2 < 1e7) {
              for (o2 = 0, u2 = s2; u2 >= 10; u2 /= 10) o2++;
              w2 ? o2 > r3.maxE ? (f2.e = NaN, f2.d = null) : o2 < r3.minE ? (f2.e = 0, f2.d = [0]) : (f2.e = o2, f2.d = [s2]) : (f2.e = o2, f2.d = [s2]);
              return;
            }
            if (s2 * 0 !== 0) {
              s2 || (f2.s = NaN), f2.e = NaN, f2.d = null;
              return;
            }
            return te2(f2, s2.toString());
          }
          if (l2 === "string") return (u2 = s2.charCodeAt(0)) === 45 ? (s2 = s2.slice(1), f2.s = -1) : (u2 === 43 && (s2 = s2.slice(1)), f2.s = 1), Ie2.test(s2) ? te2(f2, s2) : on(f2, s2);
          if (l2 === "bigint") return s2 < 0 ? (s2 = -s2, f2.s = -1) : f2.s = 1, te2(f2, s2.toString());
          throw Error(V2 + s2);
        }
        if (r3.prototype = h2, r3.ROUND_UP = 0, r3.ROUND_DOWN = 1, r3.ROUND_CEIL = 2, r3.ROUND_FLOOR = 3, r3.ROUND_HALF_UP = 4, r3.ROUND_HALF_DOWN = 5, r3.ROUND_HALF_EVEN = 6, r3.ROUND_HALF_CEIL = 7, r3.ROUND_HALF_FLOOR = 8, r3.EUCLID = 9, r3.config = r3.set = En, r3.clone = He2, r3.isDecimal = qe2, r3.abs = fn, r3.acos = ln, r3.acosh = cn, r3.add = an, r3.asin = dn, r3.asinh = hn, r3.atan = pn, r3.atanh = gn, r3.atan2 = mn, r3.cbrt = wn, r3.ceil = Nn, r3.clamp = vn, r3.cos = Sn, r3.cosh = kn, r3.div = Mn, r3.exp = Cn, r3.floor = On, r3.hypot = Pn, r3.ln = bn, r3.log = Rn, r3.log10 = _n, r3.log2 = An, r3.max = qn, r3.min = Tn, r3.mod = Ln, r3.mul = Dn, r3.pow = Fn, r3.random = In, r3.round = Zn, r3.sign = Un, r3.sin = Bn, r3.sinh = Vn, r3.sqrt = $n, r3.sub = Hn, r3.sum = jn, r3.tan = Wn, r3.tanh = Gn, r3.trunc = Jn, e2 === void 0 && (e2 = {}), e2 && e2.defaults !== true) for (t2 = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], n2 = 0; n2 < t2.length; ) e2.hasOwnProperty(i2 = t2[n2++]) || (e2[i2] = this[i2]);
        return r3.config(e2), r3;
      }
      function Mn(e2, n2) {
        return new this(e2).div(n2);
      }
      function Cn(e2) {
        return new this(e2).exp();
      }
      function On(e2) {
        return p2(e2 = new this(e2), e2.e + 1, 3);
      }
      function Pn() {
        var e2, n2, i2 = new this(0);
        for (w2 = false, e2 = 0; e2 < arguments.length; ) if (n2 = new this(arguments[e2++]), n2.d) i2.d && (i2 = i2.plus(n2.times(n2)));
        else {
          if (n2.s) return w2 = true, new this(1 / 0);
          i2 = n2;
        }
        return w2 = true, i2.sqrt();
      }
      function qe2(e2) {
        return e2 instanceof Q2 || e2 && e2.toStringTag === Fe2 || false;
      }
      function bn(e2) {
        return new this(e2).ln();
      }
      function Rn(e2, n2) {
        return new this(e2).log(n2);
      }
      function An(e2) {
        return new this(e2).log(2);
      }
      function _n(e2) {
        return new this(e2).log(10);
      }
      function qn() {
        return Be2(this, arguments, -1);
      }
      function Tn() {
        return Be2(this, arguments, 1);
      }
      function Ln(e2, n2) {
        return new this(e2).mod(n2);
      }
      function Dn(e2, n2) {
        return new this(e2).mul(n2);
      }
      function Fn(e2, n2) {
        return new this(e2).pow(n2);
      }
      function In(e2) {
        var n2, i2, t2, r3, s2 = 0, o2 = new this(1), u2 = [];
        if (e2 === void 0 ? e2 = this.precision : _2(e2, 1, $2), t2 = Math.ceil(e2 / m2), this.crypto) if (crypto.getRandomValues) for (n2 = crypto.getRandomValues(new Uint32Array(t2)); s2 < t2; ) r3 = n2[s2], r3 >= 429e7 ? n2[s2] = crypto.getRandomValues(new Uint32Array(1))[0] : u2[s2++] = r3 % 1e7;
        else if (crypto.randomBytes) {
          for (n2 = crypto.randomBytes(t2 *= 4); s2 < t2; ) r3 = n2[s2] + (n2[s2 + 1] << 8) + (n2[s2 + 2] << 16) + ((n2[s2 + 3] & 127) << 24), r3 >= 214e7 ? crypto.randomBytes(4).copy(n2, s2) : (u2.push(r3 % 1e7), s2 += 4);
          s2 = t2 / 4;
        } else throw Error(De2);
        else for (; s2 < t2; ) u2[s2++] = Math.random() * 1e7 | 0;
        for (t2 = u2[--s2], e2 %= m2, t2 && e2 && (r3 = C2(10, m2 - e2), u2[s2] = (t2 / r3 | 0) * r3); u2[s2] === 0; s2--) u2.pop();
        if (s2 < 0) i2 = 0, u2 = [0];
        else {
          for (i2 = -1; u2[0] === 0; i2 -= m2) u2.shift();
          for (t2 = 1, r3 = u2[0]; r3 >= 10; r3 /= 10) t2++;
          t2 < m2 && (i2 -= m2 - t2);
        }
        return o2.e = i2, o2.d = u2, o2;
      }
      function Zn(e2) {
        return p2(e2 = new this(e2), e2.e + 1, this.rounding);
      }
      function Un(e2) {
        return e2 = new this(e2), e2.d ? e2.d[0] ? e2.s : 0 * e2.s : e2.s || NaN;
      }
      function Bn(e2) {
        return new this(e2).sin();
      }
      function Vn(e2) {
        return new this(e2).sinh();
      }
      function $n(e2) {
        return new this(e2).sqrt();
      }
      function Hn(e2, n2) {
        return new this(e2).sub(n2);
      }
      function jn() {
        var e2 = 0, n2 = arguments, i2 = new this(n2[e2]);
        for (w2 = false; i2.s && ++e2 < n2.length; ) i2 = i2.plus(n2[e2]);
        return w2 = true, p2(i2, this.precision, this.rounding);
      }
      function Wn(e2) {
        return new this(e2).tan();
      }
      function Gn(e2) {
        return new this(e2).tanh();
      }
      function Jn(e2) {
        return p2(e2 = new this(e2), e2.e + 1, 1);
      }
      h2[Symbol.for("nodejs.util.inspect.custom")] = h2.toString;
      h2[Symbol.toStringTag] = "Decimal";
      var Q2 = h2.constructor = He2(ve2);
      re2 = new Q2(re2);
      se2 = new Q2(se2);
      var je2 = Q2;
    }
  });

  // node_modules/.prisma/client/index-browser.js
  var require_index_browser2 = __commonJS({
    "node_modules/.prisma/client/index-browser.js"(exports2) {
      Object.defineProperty(exports2, "__esModule", { value: true });
      var {
        Decimal: Decimal2,
        objectEnumValues: objectEnumValues2,
        makeStrictEnum: makeStrictEnum2,
        Public: Public2,
        getRuntime: getRuntime2,
        skip
      } = require_index_browser();
      var Prisma2 = {};
      exports2.Prisma = Prisma2;
      exports2.$Enums = {};
      Prisma2.prismaVersion = {
        client: "6.4.0",
        engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
      };
      Prisma2.PrismaClientKnownRequestError = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.PrismaClientUnknownRequestError = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.PrismaClientRustPanicError = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.PrismaClientInitializationError = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.PrismaClientValidationError = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.Decimal = Decimal2;
      Prisma2.sql = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.empty = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.join = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.raw = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.validator = Public2.validator;
      Prisma2.getExtensionContext = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.defineExtension = () => {
        const runtimeName = getRuntime2().prettyName;
        throw new Error(
          `Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`
        );
      };
      Prisma2.DbNull = objectEnumValues2.instances.DbNull;
      Prisma2.JsonNull = objectEnumValues2.instances.JsonNull;
      Prisma2.AnyNull = objectEnumValues2.instances.AnyNull;
      Prisma2.NullTypes = {
        DbNull: objectEnumValues2.classes.DbNull,
        JsonNull: objectEnumValues2.classes.JsonNull,
        AnyNull: objectEnumValues2.classes.AnyNull
      };
      exports2.Prisma.TransactionIsolationLevel = makeStrictEnum2({
        Serializable: "Serializable"
      });
      exports2.Prisma.RecipesScalarFieldEnum = {
        recipe_id: "recipe_id",
        recipe_name: "recipe_name",
        description: "description",
        owner_id: "owner_id"
      };
      exports2.Prisma.RecipeAclScalarFieldEnum = {
        acl_id: "acl_id",
        role_id: "role_id",
        permission: "permission",
        recipe_id: "recipe_id"
      };
      exports2.Prisma.Recipe_bagsScalarFieldEnum = {
        recipe_id: "recipe_id",
        bag_id: "bag_id",
        position: "position",
        with_acl: "with_acl"
      };
      exports2.Prisma.BagsScalarFieldEnum = {
        bag_id: "bag_id",
        bag_name: "bag_name",
        description: "description",
        owner_id: "owner_id"
      };
      exports2.Prisma.BagAclScalarFieldEnum = {
        acl_id: "acl_id",
        bag_id: "bag_id",
        role_id: "role_id",
        permission: "permission"
      };
      exports2.Prisma.GroupsScalarFieldEnum = {
        group_id: "group_id",
        group_name: "group_name",
        description: "description"
      };
      exports2.Prisma.RolesScalarFieldEnum = {
        role_id: "role_id",
        role_name: "role_name",
        description: "description"
      };
      exports2.Prisma.TiddlersScalarFieldEnum = {
        tiddler_id: "tiddler_id",
        bag_id: "bag_id",
        title: "title",
        is_deleted: "is_deleted",
        attachment_blob: "attachment_blob"
      };
      exports2.Prisma.FieldsScalarFieldEnum = {
        tiddler_id: "tiddler_id",
        field_name: "field_name",
        field_value: "field_value"
      };
      exports2.Prisma.UsersScalarFieldEnum = {
        user_id: "user_id",
        username: "username",
        email: "email",
        password: "password",
        created_at: "created_at",
        last_login: "last_login"
      };
      exports2.Prisma.SessionsScalarFieldEnum = {
        session_id: "session_id",
        created_at: "created_at",
        last_accessed: "last_accessed",
        session_key: "session_key",
        user_id: "user_id"
      };
      exports2.Prisma.SortOrder = {
        asc: "asc",
        desc: "desc"
      };
      exports2.Prisma.NullsOrder = {
        first: "first",
        last: "last"
      };
      exports2.Permission = exports2.$Enums.Permission = {
        READ: "READ",
        WRITE: "WRITE",
        ADMIN: "ADMIN"
      };
      exports2.Prisma.ModelName = {
        Recipes: "Recipes",
        RecipeAcl: "RecipeAcl",
        Recipe_bags: "Recipe_bags",
        Bags: "Bags",
        BagAcl: "BagAcl",
        Groups: "Groups",
        Roles: "Roles",
        Tiddlers: "Tiddlers",
        Fields: "Fields",
        Users: "Users",
        Sessions: "Sessions"
      };
      var PrismaClient2 = class {
        constructor() {
          return new Proxy(this, {
            get(target, prop) {
              let message;
              const runtime = getRuntime2();
              if (runtime.isEdge) {
                message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
              } else {
                message = "PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `" + runtime.prettyName + "`).";
              }
              message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;
              throw new Error(message);
            }
          });
        }
      };
      exports2.PrismaClient = PrismaClient2;
      Object.assign(exports2, Prisma2);
    }
  });

  // node_modules/@prisma/client/index-browser.js
  var require_index_browser3 = __commonJS({
    "node_modules/@prisma/client/index-browser.js"(exports2, module2) {
      var prisma = require_index_browser2();
      module2.exports = prisma;
    }
  });

  // react-user-mgmt/node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "react-user-mgmt/node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React140 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React140.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component6) {
            var prototype = Component6.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty16 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty16);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty16.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty16.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty16.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement11(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray2(node2)) {
                for (var i2 = 0; i2 < node2.length; i2++) {
                  var child = node2[i2];
                  if (isValidElement11(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement11(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement11(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys2.length; i2++) {
                var key = keys2[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType2(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray2(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty16.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys2 = Object.keys(props).filter(function(k2) {
                    return k2 !== "key";
                  });
                  var beforeExample = keys2.length > 0 ? "{key: someKey, " + keys2.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys2.length > 0 ? "{" + keys2.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx15 = jsxWithValidationDynamic;
          var jsxs13 = jsxWithValidationStatic;
          exports2.Fragment = REACT_FRAGMENT_TYPE;
          exports2.jsx = jsx15;
          exports2.jsxs = jsxs13;
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "react-user-mgmt/node_modules/react/jsx-runtime.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // react-user-mgmt/node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "react-user-mgmt/node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment21 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef2;
          exports2.Fragment = Fragment21;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo2;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode2;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment4;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType2;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "react-user-mgmt/node_modules/prop-types/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // react-user-mgmt/node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "react-user-mgmt/node_modules/object-assign/index.js"(exports2, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty16 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from2 = Object(arguments[s2]);
          for (var key in from2) {
            if (hasOwnProperty16.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from2, symbols[i2])) {
                to[symbols[i2]] = from2[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // react-user-mgmt/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "react-user-mgmt/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // react-user-mgmt/node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "react-user-mgmt/node_modules/prop-types/lib/has.js"(exports2, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // react-user-mgmt/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "react-user-mgmt/node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has2 = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has2;
      function checkPropTypes(typeSpecs, values3, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // react-user-mgmt/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "react-user-mgmt/node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
      "use strict";
      var ReactIs2 = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has2 = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement11, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x2, y2) {
          if (x2 === y2) {
            return x2 !== 0 || 1 / x2 === 1 / y2;
          } else {
            return x2 !== x2 && y2 !== y2;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement11(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs2.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has2(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has2(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement11(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol2(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol2(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // react-user-mgmt/node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "react-user-mgmt/node_modules/prop-types/index.js"(exports2, module2) {
      if (true) {
        ReactIs2 = require_react_is();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs2.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs2;
      var throwOnDirectAccess;
    }
  });

  // react-user-mgmt/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "react-user-mgmt/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      (function() {
        function typeOf(object) {
          if ("object" === typeof object && null !== object) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                switch (object = object.type, object) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return object;
                  default:
                    switch (object = object && object.$$typeof, object) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                        return object;
                      case REACT_CONSUMER_TYPE:
                        return object;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        exports2.ContextConsumer = REACT_CONSUMER_TYPE;
        exports2.ContextProvider = REACT_CONTEXT_TYPE;
        exports2.Element = REACT_ELEMENT_TYPE;
        exports2.ForwardRef = REACT_FORWARD_REF_TYPE;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Lazy = REACT_LAZY_TYPE;
        exports2.Memo = REACT_MEMO_TYPE;
        exports2.Portal = REACT_PORTAL_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        exports2.isContextConsumer = function(object) {
          return typeOf(object) === REACT_CONSUMER_TYPE;
        };
        exports2.isContextProvider = function(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        };
        exports2.isElement = function(object) {
          return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
        };
        exports2.isForwardRef = function(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        };
        exports2.isFragment = function(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        };
        exports2.isLazy = function(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        };
        exports2.isMemo = function(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        };
        exports2.isPortal = function(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        };
        exports2.isProfiler = function(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        };
        exports2.isStrictMode = function(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        };
        exports2.isSuspense = function(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        };
        exports2.isSuspenseList = function(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        };
        exports2.isValidElementType = function(type) {
          return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? true : false;
        };
        exports2.typeOf = typeOf;
      })();
    }
  });

  // react-user-mgmt/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "react-user-mgmt/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development2();
      }
    }
  });

  // react-user-mgmt/node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "react-user-mgmt/node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment21 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports2.AsyncMode = AsyncMode;
          exports2.ConcurrentMode = ConcurrentMode;
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef2;
          exports2.Fragment = Fragment21;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo2;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode2;
          exports2.Suspense = Suspense;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment4;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isValidElementType = isValidElementType2;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "react-user-mgmt/node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development3();
      }
    }
  });

  // react-user-mgmt/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "react-user-mgmt/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
      "use strict";
      var reactIs = require_react_is3();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty2 = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i2 = 0; i2 < keys2.length; ++i2) {
            var key = keys2[i2];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty2(targetComponent, key, descriptor);
              } catch (e2) {
              }
            }
          }
        }
        return targetComponent;
      }
      module2.exports = hoistNonReactStatics;
    }
  });

  // react-user-mgmt/node_modules/jsonpointer/jsonpointer.js
  var require_jsonpointer = __commonJS({
    "react-user-mgmt/node_modules/jsonpointer/jsonpointer.js"(exports2) {
      var hasExcape = /~/;
      var escapeMatcher = /~[01]/g;
      function escapeReplacer(m2) {
        switch (m2) {
          case "~1":
            return "/";
          case "~0":
            return "~";
        }
        throw new Error("Invalid tilde escape: " + m2);
      }
      function untilde(str) {
        if (!hasExcape.test(str)) return str;
        return str.replace(escapeMatcher, escapeReplacer);
      }
      function setter(obj, pointer, value) {
        var part;
        var hasNextPart;
        for (var p2 = 1, len = pointer.length; p2 < len; ) {
          if (pointer[p2] === "constructor" || pointer[p2] === "prototype" || pointer[p2] === "__proto__") return obj;
          part = untilde(pointer[p2++]);
          hasNextPart = len > p2;
          if (typeof obj[part] === "undefined") {
            if (Array.isArray(obj) && part === "-") {
              part = obj.length;
            }
            if (hasNextPart) {
              if (pointer[p2] !== "" && pointer[p2] < Infinity || pointer[p2] === "-") obj[part] = [];
              else obj[part] = {};
            }
          }
          if (!hasNextPart) break;
          obj = obj[part];
        }
        var oldValue = obj[part];
        if (value === void 0) delete obj[part];
        else obj[part] = value;
        return oldValue;
      }
      function compilePointer(pointer) {
        if (typeof pointer === "string") {
          pointer = pointer.split("/");
          if (pointer[0] === "") return pointer;
          throw new Error("Invalid JSON pointer.");
        } else if (Array.isArray(pointer)) {
          for (const part of pointer) {
            if (typeof part !== "string" && typeof part !== "number") {
              throw new Error("Invalid JSON pointer. Must be of type string or number.");
            }
          }
          return pointer;
        }
        throw new Error("Invalid JSON pointer.");
      }
      function get3(obj, pointer) {
        if (typeof obj !== "object") throw new Error("Invalid input object.");
        pointer = compilePointer(pointer);
        var len = pointer.length;
        if (len === 1) return obj;
        for (var p2 = 1; p2 < len; ) {
          obj = obj[untilde(pointer[p2++])];
          if (len === p2) return obj;
          if (typeof obj !== "object" || obj === null) return void 0;
        }
      }
      function set3(obj, pointer, value) {
        if (typeof obj !== "object") throw new Error("Invalid input object.");
        pointer = compilePointer(pointer);
        if (pointer.length === 0) throw new Error("Invalid JSON pointer for set.");
        return setter(obj, pointer, value);
      }
      function compile2(pointer) {
        var compiled = compilePointer(pointer);
        return {
          get: function(object) {
            return get3(object, compiled);
          },
          set: function(object, value) {
            return set3(object, compiled, value);
          }
        };
      }
      exports2.get = get3;
      exports2.set = set3;
      exports2.compile = compile2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "react-user-mgmt/node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear2() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear2;
    }
  });

  // react-user-mgmt/node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "react-user-mgmt/node_modules/lodash/eq.js"(exports2, module2) {
      function eq2(value, other) {
        return value === other || value !== value && other !== other;
      }
      module2.exports = eq2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "react-user-mgmt/node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq2 = require_eq();
      function assocIndexOf2(array, key) {
        var length2 = array.length;
        while (length2--) {
          if (eq2(array[length2][0], key)) {
            return length2;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "react-user-mgmt/node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      var arrayProto2 = Array.prototype;
      var splice2 = arrayProto2.splice;
      function listCacheDelete2(key) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice2.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheGet2(key) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      module2.exports = listCacheGet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "react-user-mgmt/node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheHas2(key) {
        return assocIndexOf2(this.__data__, key) > -1;
      }
      module2.exports = listCacheHas2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf2 = require_assocIndexOf();
      function listCacheSet2(key, value) {
        var data = this.__data__, index = assocIndexOf2(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      module2.exports = listCacheSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "react-user-mgmt/node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear2 = require_listCacheClear();
      var listCacheDelete2 = require_listCacheDelete();
      var listCacheGet2 = require_listCacheGet();
      var listCacheHas2 = require_listCacheHas();
      var listCacheSet2 = require_listCacheSet();
      function ListCache2(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache2.prototype.clear = listCacheClear2;
      ListCache2.prototype["delete"] = listCacheDelete2;
      ListCache2.prototype.get = listCacheGet2;
      ListCache2.prototype.has = listCacheHas2;
      ListCache2.prototype.set = listCacheSet2;
      module2.exports = ListCache2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "react-user-mgmt/node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      function stackClear2() {
        this.__data__ = new ListCache2();
        this.size = 0;
      }
      module2.exports = stackClear2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "react-user-mgmt/node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete2(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module2.exports = stackDelete2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet2(key) {
        return this.__data__.get(key);
      }
      module2.exports = stackGet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "react-user-mgmt/node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas2(key) {
        return this.__data__.has(key);
      }
      module2.exports = stackHas2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "react-user-mgmt/node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_root.js
  var require_root = __commonJS({
    "react-user-mgmt/node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
      module2.exports = root2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root2 = require_root();
      var Symbol3 = root2.Symbol;
      module2.exports = Symbol3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var nativeObjectToString3 = objectProto19.toString;
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function getRawTag2(value) {
        var isOwn = hasOwnProperty16.call(value, symToStringTag3), tag = value[symToStringTag3];
        try {
          value[symToStringTag3] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString3.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag3] = tag;
          } else {
            delete value[symToStringTag3];
          }
        }
        return result;
      }
      module2.exports = getRawTag2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "react-user-mgmt/node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto19 = Object.prototype;
      var nativeObjectToString3 = objectProto19.toString;
      function objectToString2(value) {
        return nativeObjectToString3.call(value);
      }
      module2.exports = objectToString2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var getRawTag2 = require_getRawTag();
      var objectToString2 = require_objectToString();
      var nullTag2 = "[object Null]";
      var undefinedTag2 = "[object Undefined]";
      var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
      function baseGetTag2(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag2 : nullTag2;
        }
        return symToStringTag3 && symToStringTag3 in Object(value) ? getRawTag2(value) : objectToString2(value);
      }
      module2.exports = baseGetTag2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject4(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module2.exports = isObject4;
    }
  });

  // react-user-mgmt/node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "react-user-mgmt/node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObject4 = require_isObject();
      var asyncTag2 = "[object AsyncFunction]";
      var funcTag4 = "[object Function]";
      var genTag3 = "[object GeneratorFunction]";
      var proxyTag2 = "[object Proxy]";
      function isFunction3(value) {
        if (!isObject4(value)) {
          return false;
        }
        var tag = baseGetTag2(value);
        return tag == funcTag4 || tag == genTag3 || tag == asyncTag2 || tag == proxyTag2;
      }
      module2.exports = isFunction3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "react-user-mgmt/node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root2 = require_root();
      var coreJsData2 = root2["__core-js_shared__"];
      module2.exports = coreJsData2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData2 = require_coreJsData();
      var maskSrcKey2 = function() {
        var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked2(func) {
        return !!maskSrcKey2 && maskSrcKey2 in func;
      }
      module2.exports = isMasked2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "react-user-mgmt/node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto4 = Function.prototype;
      var funcToString4 = funcProto4.toString;
      function toSource2(func) {
        if (func != null) {
          try {
            return funcToString4.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      module2.exports = toSource2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction3 = require_isFunction();
      var isMasked2 = require_isMasked();
      var isObject4 = require_isObject();
      var toSource2 = require_toSource();
      var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
      var funcProto4 = Function.prototype;
      var objectProto19 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var reIsNative2 = RegExp(
        "^" + funcToString4.call(hasOwnProperty16).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative2(value) {
        if (!isObject4(value) || isMasked2(value)) {
          return false;
        }
        var pattern = isFunction3(value) ? reIsNative2 : reIsHostCtor2;
        return pattern.test(toSource2(value));
      }
      module2.exports = baseIsNative2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue4(object, key) {
        return object == null ? void 0 : object[key];
      }
      module2.exports = getValue4;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative2 = require_baseIsNative();
      var getValue4 = require_getValue();
      function getNative2(object, key) {
        var value = getValue4(object, key);
        return baseIsNative2(value) ? value : void 0;
      }
      module2.exports = getNative2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Map3 = getNative2(root2, "Map");
      module2.exports = Map3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "react-user-mgmt/node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var nativeCreate2 = getNative2(Object, "create");
      module2.exports = nativeCreate2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "react-user-mgmt/node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      function hashClear2() {
        this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "react-user-mgmt/node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete2(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = hashDelete2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function hashGet2(key) {
        var data = this.__data__;
        if (nativeCreate2) {
          var result = data[key];
          return result === HASH_UNDEFINED4 ? void 0 : result;
        }
        return hasOwnProperty16.call(data, key) ? data[key] : void 0;
      }
      module2.exports = hashGet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "react-user-mgmt/node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function hashHas2(key) {
        var data = this.__data__;
        return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty16.call(data, key);
      }
      module2.exports = hashHas2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate2 = require_nativeCreate();
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function hashSet2(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED4 : value;
        return this;
      }
      module2.exports = hashSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear2 = require_hashClear();
      var hashDelete2 = require_hashDelete();
      var hashGet2 = require_hashGet();
      var hashHas2 = require_hashHas();
      var hashSet2 = require_hashSet();
      function Hash2(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash2.prototype.clear = hashClear2;
      Hash2.prototype["delete"] = hashDelete2;
      Hash2.prototype.get = hashGet2;
      Hash2.prototype.has = hashHas2;
      Hash2.prototype.set = hashSet2;
      module2.exports = Hash2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "react-user-mgmt/node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash2 = require_Hash();
      var ListCache2 = require_ListCache();
      var Map3 = require_Map();
      function mapCacheClear2() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash2(),
          "map": new (Map3 || ListCache2)(),
          "string": new Hash2()
        };
      }
      module2.exports = mapCacheClear2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable2(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module2.exports = isKeyable2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable2 = require_isKeyable();
      function getMapData2(map, key) {
        var data = map.__data__;
        return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "react-user-mgmt/node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheDelete2(key) {
        var result = getMapData2(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = mapCacheDelete2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheGet2(key) {
        return getMapData2(this, key).get(key);
      }
      module2.exports = mapCacheGet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "react-user-mgmt/node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheHas2(key) {
        return getMapData2(this, key).has(key);
      }
      module2.exports = mapCacheHas2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData2 = require_getMapData();
      function mapCacheSet2(key, value) {
        var data = getMapData2(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "react-user-mgmt/node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear2 = require_mapCacheClear();
      var mapCacheDelete2 = require_mapCacheDelete();
      var mapCacheGet2 = require_mapCacheGet();
      var mapCacheHas2 = require_mapCacheHas();
      var mapCacheSet2 = require_mapCacheSet();
      function MapCache2(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache2.prototype.clear = mapCacheClear2;
      MapCache2.prototype["delete"] = mapCacheDelete2;
      MapCache2.prototype.get = mapCacheGet2;
      MapCache2.prototype.has = mapCacheHas2;
      MapCache2.prototype.set = mapCacheSet2;
      module2.exports = MapCache2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var Map3 = require_Map();
      var MapCache2 = require_MapCache();
      var LARGE_ARRAY_SIZE4 = 200;
      function stackSet2(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache2) {
          var pairs = data.__data__;
          if (!Map3 || pairs.length < LARGE_ARRAY_SIZE4 - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache2(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache2 = require_ListCache();
      var stackClear2 = require_stackClear();
      var stackDelete2 = require_stackDelete();
      var stackGet2 = require_stackGet();
      var stackHas2 = require_stackHas();
      var stackSet2 = require_stackSet();
      function Stack4(entries) {
        var data = this.__data__ = new ListCache2(entries);
        this.size = data.size;
      }
      Stack4.prototype.clear = stackClear2;
      Stack4.prototype["delete"] = stackDelete2;
      Stack4.prototype.get = stackGet2;
      Stack4.prototype.has = stackHas2;
      Stack4.prototype.set = stackSet2;
      module2.exports = Stack4;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayEach.js"(exports2, module2) {
      function arrayEach2(array, iteratee) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      module2.exports = arrayEach2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "react-user-mgmt/node_modules/lodash/_defineProperty.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var defineProperty2 = function() {
        try {
          var func = getNative2(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      module2.exports = defineProperty2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
      var defineProperty2 = require_defineProperty();
      function baseAssignValue2(object, key, value) {
        if (key == "__proto__" && defineProperty2) {
          defineProperty2(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      module2.exports = baseAssignValue2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "react-user-mgmt/node_modules/lodash/_assignValue.js"(exports2, module2) {
      var baseAssignValue2 = require_baseAssignValue();
      var eq2 = require_eq();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function assignValue2(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty16.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue2(object, key, value);
        }
      }
      module2.exports = assignValue2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/_copyObject.js"(exports2, module2) {
      var assignValue2 = require_assignValue();
      var baseAssignValue2 = require_baseAssignValue();
      function copyObject2(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length2 = props.length;
        while (++index < length2) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue2(object, key, newValue);
          } else {
            assignValue2(object, key, newValue);
          }
        }
        return object;
      }
      module2.exports = copyObject2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes2(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module2.exports = baseTimes2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "react-user-mgmt/node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike2(value) {
        return value != null && typeof value == "object";
      }
      module2.exports = isObjectLike2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var argsTag5 = "[object Arguments]";
      function baseIsArguments2(value) {
        return isObjectLike2(value) && baseGetTag2(value) == argsTag5;
      }
      module2.exports = baseIsArguments2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "react-user-mgmt/node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments2 = require_baseIsArguments();
      var isObjectLike2 = require_isObjectLike();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var propertyIsEnumerable3 = objectProto19.propertyIsEnumerable;
      var isArguments2 = baseIsArguments2(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments2 : function(value) {
        return isObjectLike2(value) && hasOwnProperty16.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
      };
      module2.exports = isArguments2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray2 = Array.isArray;
      module2.exports = isArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "react-user-mgmt/node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse2() {
        return false;
      }
      module2.exports = stubFalse2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "react-user-mgmt/node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root2 = require_root();
      var stubFalse2 = require_stubFalse();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
      var nativeIsBuffer2 = Buffer4 ? Buffer4.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer2 || stubFalse2;
      module2.exports = isBuffer2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER4 = 9007199254740991;
      var reIsUint2 = /^(?:0|[1-9]\d*)$/;
      function isIndex2(value, length2) {
        var type = typeof value;
        length2 = length2 == null ? MAX_SAFE_INTEGER4 : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
      }
      module2.exports = isIndex2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "react-user-mgmt/node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER4 = 9007199254740991;
      function isLength2(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER4;
      }
      module2.exports = isLength2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isLength2 = require_isLength();
      var isObjectLike2 = require_isObjectLike();
      var argsTag5 = "[object Arguments]";
      var arrayTag4 = "[object Array]";
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var errorTag4 = "[object Error]";
      var funcTag4 = "[object Function]";
      var mapTag8 = "[object Map]";
      var numberTag6 = "[object Number]";
      var objectTag6 = "[object Object]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag6 = "[object String]";
      var weakMapTag4 = "[object WeakMap]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var float32Tag4 = "[object Float32Array]";
      var float64Tag4 = "[object Float64Array]";
      var int8Tag4 = "[object Int8Array]";
      var int16Tag4 = "[object Int16Array]";
      var int32Tag4 = "[object Int32Array]";
      var uint8Tag4 = "[object Uint8Array]";
      var uint8ClampedTag4 = "[object Uint8ClampedArray]";
      var uint16Tag4 = "[object Uint16Array]";
      var uint32Tag4 = "[object Uint32Array]";
      var typedArrayTags2 = {};
      typedArrayTags2[float32Tag4] = typedArrayTags2[float64Tag4] = typedArrayTags2[int8Tag4] = typedArrayTags2[int16Tag4] = typedArrayTags2[int32Tag4] = typedArrayTags2[uint8Tag4] = typedArrayTags2[uint8ClampedTag4] = typedArrayTags2[uint16Tag4] = typedArrayTags2[uint32Tag4] = true;
      typedArrayTags2[argsTag5] = typedArrayTags2[arrayTag4] = typedArrayTags2[arrayBufferTag5] = typedArrayTags2[boolTag5] = typedArrayTags2[dataViewTag6] = typedArrayTags2[dateTag5] = typedArrayTags2[errorTag4] = typedArrayTags2[funcTag4] = typedArrayTags2[mapTag8] = typedArrayTags2[numberTag6] = typedArrayTags2[objectTag6] = typedArrayTags2[regexpTag5] = typedArrayTags2[setTag8] = typedArrayTags2[stringTag6] = typedArrayTags2[weakMapTag4] = false;
      function baseIsTypedArray2(value) {
        return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
      }
      module2.exports = baseIsTypedArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary2(func) {
        return function(value) {
          return func(value);
        };
      }
      module2.exports = baseUnary2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "react-user-mgmt/node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal2 = require_freeGlobal();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var freeProcess2 = moduleExports4 && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types = freeModule4 && freeModule4.require && freeModule4.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
        } catch (e2) {
        }
      }();
      module2.exports = nodeUtil2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray2 = require_baseIsTypedArray();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
      var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
      module2.exports = isTypedArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes2 = require_baseTimes();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isIndex2 = require_isIndex();
      var isTypedArray2 = require_isTypedArray();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function arrayLikeKeys2(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes2(value.length, String) : [], length2 = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty16.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex2(key, length2)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = arrayLikeKeys2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto19 = Object.prototype;
      function isPrototype2(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto19;
        return value === proto;
      }
      module2.exports = isPrototype2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "react-user-mgmt/node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg2(func, transform2) {
        return function(arg2) {
          return func(transform2(arg2));
        };
      }
      module2.exports = overArg2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "react-user-mgmt/node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var nativeKeys2 = overArg2(Object.keys, Object);
      module2.exports = nativeKeys2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype2 = require_isPrototype();
      var nativeKeys2 = require_nativeKeys();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function baseKeys2(object) {
        if (!isPrototype2(object)) {
          return nativeKeys2(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty16.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeys2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "react-user-mgmt/node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction3 = require_isFunction();
      var isLength2 = require_isLength();
      function isArrayLike2(value) {
        return value != null && isLength2(value.length) && !isFunction3(value);
      }
      module2.exports = isArrayLike2;
    }
  });

  // react-user-mgmt/node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "react-user-mgmt/node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeys2 = require_baseKeys();
      var isArrayLike2 = require_isArrayLike();
      function keys2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object) : baseKeys2(object);
      }
      module2.exports = keys2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseAssign.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keys2 = require_keys();
      function baseAssign2(object, source) {
        return object && copyObject2(source, keys2(source), object);
      }
      module2.exports = baseAssign2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
      function nativeKeysIn2(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = nativeKeysIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
      var isObject4 = require_isObject();
      var isPrototype2 = require_isPrototype();
      var nativeKeysIn2 = require_nativeKeysIn();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function baseKeysIn2(object) {
        if (!isObject4(object)) {
          return nativeKeysIn2(object);
        }
        var isProto = isPrototype2(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty16.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module2.exports = baseKeysIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/keysIn.js"(exports2, module2) {
      var arrayLikeKeys2 = require_arrayLikeKeys();
      var baseKeysIn2 = require_baseKeysIn();
      var isArrayLike2 = require_isArrayLike();
      function keysIn2(object) {
        return isArrayLike2(object) ? arrayLikeKeys2(object, true) : baseKeysIn2(object);
      }
      module2.exports = keysIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseAssignIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keysIn2 = require_keysIn();
      function baseAssignIn2(object, source) {
        return object && copyObject2(source, keysIn2(source), object);
      }
      module2.exports = baseAssignIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cloneBuffer.js"(exports2, module2) {
      var root2 = require_root();
      var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
      var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
      var allocUnsafe2 = Buffer4 ? Buffer4.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result = allocUnsafe2 ? allocUnsafe2(length2) : new buffer.constructor(length2);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/_copyArray.js"(exports2, module2) {
      function copyArray2(source, array) {
        var index = -1, length2 = source.length;
        array || (array = Array(length2));
        while (++index < length2) {
          array[index] = source[index];
        }
        return array;
      }
      module2.exports = copyArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter2(array, predicate) {
        var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length2) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module2.exports = arrayFilter2;
    }
  });

  // react-user-mgmt/node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray2() {
        return [];
      }
      module2.exports = stubArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter2 = require_arrayFilter();
      var stubArray2 = require_stubArray();
      var objectProto19 = Object.prototype;
      var propertyIsEnumerable3 = objectProto19.propertyIsEnumerable;
      var nativeGetSymbols3 = Object.getOwnPropertySymbols;
      var getSymbols2 = !nativeGetSymbols3 ? stubArray2 : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter2(nativeGetSymbols3(object), function(symbol) {
          return propertyIsEnumerable3.call(object, symbol);
        });
      };
      module2.exports = getSymbols2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS({
    "react-user-mgmt/node_modules/lodash/_copySymbols.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbols2 = require_getSymbols();
      function copySymbols2(source, object) {
        return copyObject2(source, getSymbols2(source), object);
      }
      module2.exports = copySymbols2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush2(array, values3) {
        var index = -1, length2 = values3.length, offset = array.length;
        while (++index < length2) {
          array[offset + index] = values3[index];
        }
        return array;
      }
      module2.exports = arrayPush2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getPrototype.js"(exports2, module2) {
      var overArg2 = require_overArg();
      var getPrototype2 = overArg2(Object.getPrototypeOf, Object);
      module2.exports = getPrototype2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var getPrototype2 = require_getPrototype();
      var getSymbols2 = require_getSymbols();
      var stubArray2 = require_stubArray();
      var nativeGetSymbols3 = Object.getOwnPropertySymbols;
      var getSymbolsIn2 = !nativeGetSymbols3 ? stubArray2 : function(object) {
        var result = [];
        while (object) {
          arrayPush2(result, getSymbols2(object));
          object = getPrototype2(object);
        }
        return result;
      };
      module2.exports = getSymbolsIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_copySymbolsIn.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var getSymbolsIn2 = require_getSymbolsIn();
      function copySymbolsIn2(source, object) {
        return copyObject2(source, getSymbolsIn2(source), object);
      }
      module2.exports = copySymbolsIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var isArray2 = require_isArray();
      function baseGetAllKeys2(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray2(object) ? result : arrayPush2(result, symbolsFunc(object));
      }
      module2.exports = baseGetAllKeys2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbols2 = require_getSymbols();
      var keys2 = require_keys();
      function getAllKeys2(object) {
        return baseGetAllKeys2(object, keys2, getSymbols2);
      }
      module2.exports = getAllKeys2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
      var baseGetAllKeys2 = require_baseGetAllKeys();
      var getSymbolsIn2 = require_getSymbolsIn();
      var keysIn2 = require_keysIn();
      function getAllKeysIn2(object) {
        return baseGetAllKeys2(object, keysIn2, getSymbolsIn2);
      }
      module2.exports = getAllKeysIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "react-user-mgmt/node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var DataView2 = getNative2(root2, "DataView");
      module2.exports = DataView2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Promise3 = getNative2(root2, "Promise");
      module2.exports = Promise3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var Set3 = getNative2(root2, "Set");
      module2.exports = Set3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "react-user-mgmt/node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative2 = require_getNative();
      var root2 = require_root();
      var WeakMap3 = getNative2(root2, "WeakMap");
      module2.exports = WeakMap3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView2 = require_DataView();
      var Map3 = require_Map();
      var Promise3 = require_Promise();
      var Set3 = require_Set();
      var WeakMap3 = require_WeakMap();
      var baseGetTag2 = require_baseGetTag();
      var toSource2 = require_toSource();
      var mapTag8 = "[object Map]";
      var objectTag6 = "[object Object]";
      var promiseTag2 = "[object Promise]";
      var setTag8 = "[object Set]";
      var weakMapTag4 = "[object WeakMap]";
      var dataViewTag6 = "[object DataView]";
      var dataViewCtorString2 = toSource2(DataView2);
      var mapCtorString2 = toSource2(Map3);
      var promiseCtorString2 = toSource2(Promise3);
      var setCtorString2 = toSource2(Set3);
      var weakMapCtorString2 = toSource2(WeakMap3);
      var getTag2 = baseGetTag2;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag6 || Map3 && getTag2(new Map3()) != mapTag8 || Promise3 && getTag2(Promise3.resolve()) != promiseTag2 || Set3 && getTag2(new Set3()) != setTag8 || WeakMap3 && getTag2(new WeakMap3()) != weakMapTag4) {
        getTag2 = function(value) {
          var result = baseGetTag2(value), Ctor = result == objectTag6 ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString2:
                return dataViewTag6;
              case mapCtorString2:
                return mapTag8;
              case promiseCtorString2:
                return promiseTag2;
              case setCtorString2:
                return setTag8;
              case weakMapCtorString2:
                return weakMapTag4;
            }
          }
          return result;
        };
      }
      module2.exports = getTag2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/_initCloneArray.js"(exports2, module2) {
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function initCloneArray2(array) {
        var length2 = array.length, result = new array.constructor(length2);
        if (length2 && typeof array[0] == "string" && hasOwnProperty16.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      module2.exports = initCloneArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "react-user-mgmt/node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root2 = require_root();
      var Uint8Array3 = root2.Uint8Array;
      module2.exports = Uint8Array3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cloneArrayBuffer.js"(exports2, module2) {
      var Uint8Array3 = require_Uint8Array();
      function cloneArrayBuffer2(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array3(result).set(new Uint8Array3(arrayBuffer));
        return result;
      }
      module2.exports = cloneArrayBuffer2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cloneDataView.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneDataView2(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      module2.exports = cloneDataView2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cloneRegExp.js"(exports2, module2) {
      var reFlags2 = /\w*$/;
      function cloneRegExp2(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags2.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      module2.exports = cloneRegExp2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cloneSymbol.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var symbolProto4 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf3 = symbolProto4 ? symbolProto4.valueOf : void 0;
      function cloneSymbol2(symbol) {
        return symbolValueOf3 ? Object(symbolValueOf3.call(symbol)) : {};
      }
      module2.exports = cloneSymbol2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cloneTypedArray.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      function cloneTypedArray2(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module2.exports = cloneTypedArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS({
    "react-user-mgmt/node_modules/lodash/_initCloneByTag.js"(exports2, module2) {
      var cloneArrayBuffer2 = require_cloneArrayBuffer();
      var cloneDataView2 = require_cloneDataView();
      var cloneRegExp2 = require_cloneRegExp();
      var cloneSymbol2 = require_cloneSymbol();
      var cloneTypedArray2 = require_cloneTypedArray();
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var mapTag8 = "[object Map]";
      var numberTag6 = "[object Number]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag6 = "[object String]";
      var symbolTag5 = "[object Symbol]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var float32Tag4 = "[object Float32Array]";
      var float64Tag4 = "[object Float64Array]";
      var int8Tag4 = "[object Int8Array]";
      var int16Tag4 = "[object Int16Array]";
      var int32Tag4 = "[object Int32Array]";
      var uint8Tag4 = "[object Uint8Array]";
      var uint8ClampedTag4 = "[object Uint8ClampedArray]";
      var uint16Tag4 = "[object Uint16Array]";
      var uint32Tag4 = "[object Uint32Array]";
      function initCloneByTag2(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag5:
            return cloneArrayBuffer2(object);
          case boolTag5:
          case dateTag5:
            return new Ctor(+object);
          case dataViewTag6:
            return cloneDataView2(object, isDeep);
          case float32Tag4:
          case float64Tag4:
          case int8Tag4:
          case int16Tag4:
          case int32Tag4:
          case uint8Tag4:
          case uint8ClampedTag4:
          case uint16Tag4:
          case uint32Tag4:
            return cloneTypedArray2(object, isDeep);
          case mapTag8:
            return new Ctor();
          case numberTag6:
          case stringTag6:
            return new Ctor(object);
          case regexpTag5:
            return cloneRegExp2(object);
          case setTag8:
            return new Ctor();
          case symbolTag5:
            return cloneSymbol2(object);
        }
      }
      module2.exports = initCloneByTag2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseCreate.js"(exports2, module2) {
      var isObject4 = require_isObject();
      var objectCreate2 = Object.create;
      var baseCreate2 = /* @__PURE__ */ function() {
        function object() {
        }
        return function(proto) {
          if (!isObject4(proto)) {
            return {};
          }
          if (objectCreate2) {
            return objectCreate2(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module2.exports = baseCreate2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/_initCloneObject.js"(exports2, module2) {
      var baseCreate2 = require_baseCreate();
      var getPrototype2 = require_getPrototype();
      var isPrototype2 = require_isPrototype();
      function initCloneObject2(object) {
        return typeof object.constructor == "function" && !isPrototype2(object) ? baseCreate2(getPrototype2(object)) : {};
      }
      module2.exports = initCloneObject2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsMap.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var mapTag8 = "[object Map]";
      function baseIsMap2(value) {
        return isObjectLike2(value) && getTag2(value) == mapTag8;
      }
      module2.exports = baseIsMap2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isMap.js
  var require_isMap = __commonJS({
    "react-user-mgmt/node_modules/lodash/isMap.js"(exports2, module2) {
      var baseIsMap2 = require_baseIsMap();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsMap2 = nodeUtil2 && nodeUtil2.isMap;
      var isMap2 = nodeIsMap2 ? baseUnary2(nodeIsMap2) : baseIsMap2;
      module2.exports = isMap2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsSet.js"(exports2, module2) {
      var getTag2 = require_getTag();
      var isObjectLike2 = require_isObjectLike();
      var setTag8 = "[object Set]";
      function baseIsSet2(value) {
        return isObjectLike2(value) && getTag2(value) == setTag8;
      }
      module2.exports = baseIsSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isSet.js
  var require_isSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/isSet.js"(exports2, module2) {
      var baseIsSet2 = require_baseIsSet();
      var baseUnary2 = require_baseUnary();
      var nodeUtil2 = require_nodeUtil();
      var nodeIsSet2 = nodeUtil2 && nodeUtil2.isSet;
      var isSet2 = nodeIsSet2 ? baseUnary2(nodeIsSet2) : baseIsSet2;
      module2.exports = isSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseClone.js"(exports2, module2) {
      var Stack4 = require_Stack();
      var arrayEach2 = require_arrayEach();
      var assignValue2 = require_assignValue();
      var baseAssign2 = require_baseAssign();
      var baseAssignIn2 = require_baseAssignIn();
      var cloneBuffer2 = require_cloneBuffer();
      var copyArray2 = require_copyArray();
      var copySymbols2 = require_copySymbols();
      var copySymbolsIn2 = require_copySymbolsIn();
      var getAllKeys2 = require_getAllKeys();
      var getAllKeysIn2 = require_getAllKeysIn();
      var getTag2 = require_getTag();
      var initCloneArray2 = require_initCloneArray();
      var initCloneByTag2 = require_initCloneByTag();
      var initCloneObject2 = require_initCloneObject();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isMap2 = require_isMap();
      var isObject4 = require_isObject();
      var isSet2 = require_isSet();
      var keys2 = require_keys();
      var keysIn2 = require_keysIn();
      var CLONE_DEEP_FLAG4 = 1;
      var CLONE_FLAT_FLAG3 = 2;
      var CLONE_SYMBOLS_FLAG4 = 4;
      var argsTag5 = "[object Arguments]";
      var arrayTag4 = "[object Array]";
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var errorTag4 = "[object Error]";
      var funcTag4 = "[object Function]";
      var genTag3 = "[object GeneratorFunction]";
      var mapTag8 = "[object Map]";
      var numberTag6 = "[object Number]";
      var objectTag6 = "[object Object]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag6 = "[object String]";
      var symbolTag5 = "[object Symbol]";
      var weakMapTag4 = "[object WeakMap]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var float32Tag4 = "[object Float32Array]";
      var float64Tag4 = "[object Float64Array]";
      var int8Tag4 = "[object Int8Array]";
      var int16Tag4 = "[object Int16Array]";
      var int32Tag4 = "[object Int32Array]";
      var uint8Tag4 = "[object Uint8Array]";
      var uint8ClampedTag4 = "[object Uint8ClampedArray]";
      var uint16Tag4 = "[object Uint16Array]";
      var uint32Tag4 = "[object Uint32Array]";
      var cloneableTags2 = {};
      cloneableTags2[argsTag5] = cloneableTags2[arrayTag4] = cloneableTags2[arrayBufferTag5] = cloneableTags2[dataViewTag6] = cloneableTags2[boolTag5] = cloneableTags2[dateTag5] = cloneableTags2[float32Tag4] = cloneableTags2[float64Tag4] = cloneableTags2[int8Tag4] = cloneableTags2[int16Tag4] = cloneableTags2[int32Tag4] = cloneableTags2[mapTag8] = cloneableTags2[numberTag6] = cloneableTags2[objectTag6] = cloneableTags2[regexpTag5] = cloneableTags2[setTag8] = cloneableTags2[stringTag6] = cloneableTags2[symbolTag5] = cloneableTags2[uint8Tag4] = cloneableTags2[uint8ClampedTag4] = cloneableTags2[uint16Tag4] = cloneableTags2[uint32Tag4] = true;
      cloneableTags2[errorTag4] = cloneableTags2[funcTag4] = cloneableTags2[weakMapTag4] = false;
      function baseClone2(value, bitmask, customizer, key, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG4, isFlat = bitmask & CLONE_FLAT_FLAG3, isFull = bitmask & CLONE_SYMBOLS_FLAG4;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject4(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result = initCloneArray2(value);
          if (!isDeep) {
            return copyArray2(value, result);
          }
        } else {
          var tag = getTag2(value), isFunc = tag == funcTag4 || tag == genTag3;
          if (isBuffer2(value)) {
            return cloneBuffer2(value, isDeep);
          }
          if (tag == objectTag6 || tag == argsTag5 || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject2(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn2(value, baseAssignIn2(result, value)) : copySymbols2(value, baseAssign2(result, value));
            }
          } else {
            if (!cloneableTags2[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag2(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack4());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
        if (isSet2(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone2(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap2(value)) {
          value.forEach(function(subValue, key2) {
            result.set(key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn2 : getAllKeys2 : isFlat ? keysIn2 : keys2;
        var props = isArr ? void 0 : keysFunc(value);
        arrayEach2(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue2(result, key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
        });
        return result;
      }
      module2.exports = baseClone2;
    }
  });

  // react-user-mgmt/node_modules/lodash/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "react-user-mgmt/node_modules/lodash/cloneDeep.js"(exports2, module2) {
      var baseClone2 = require_baseClone();
      var CLONE_DEEP_FLAG4 = 1;
      var CLONE_SYMBOLS_FLAG4 = 4;
      function cloneDeep2(value) {
        return baseClone2(value, CLONE_DEEP_FLAG4 | CLONE_SYMBOLS_FLAG4);
      }
      module2.exports = cloneDeep2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "react-user-mgmt/node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
      var HASH_UNDEFINED4 = "__lodash_hash_undefined__";
      function setCacheAdd2(value) {
        this.__data__.set(value, HASH_UNDEFINED4);
        return this;
      }
      module2.exports = setCacheAdd2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "react-user-mgmt/node_modules/lodash/_setCacheHas.js"(exports2, module2) {
      function setCacheHas2(value) {
        return this.__data__.has(value);
      }
      module2.exports = setCacheHas2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "react-user-mgmt/node_modules/lodash/_SetCache.js"(exports2, module2) {
      var MapCache2 = require_MapCache();
      var setCacheAdd2 = require_setCacheAdd();
      var setCacheHas2 = require_setCacheHas();
      function SetCache2(values3) {
        var index = -1, length2 = values3 == null ? 0 : values3.length;
        this.__data__ = new MapCache2();
        while (++index < length2) {
          this.add(values3[index]);
        }
      }
      SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
      SetCache2.prototype.has = setCacheHas2;
      module2.exports = SetCache2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arraySome.js"(exports2, module2) {
      function arraySome2(array, predicate) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arraySome2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "react-user-mgmt/node_modules/lodash/_cacheHas.js"(exports2, module2) {
      function cacheHas2(cache, key) {
        return cache.has(key);
      }
      module2.exports = cacheHas2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "react-user-mgmt/node_modules/lodash/_equalArrays.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arraySome2 = require_arraySome();
      var cacheHas2 = require_cacheHas();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function equalArrays2(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG5 ? new SetCache2() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome2(other, function(othValue2, othIndex) {
              if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalArrays2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/_mapToArray.js"(exports2, module2) {
      function mapToArray2(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      module2.exports = mapToArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "react-user-mgmt/node_modules/lodash/_setToArray.js"(exports2, module2) {
      function setToArray2(set3) {
        var index = -1, result = Array(set3.size);
        set3.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      module2.exports = setToArray2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "react-user-mgmt/node_modules/lodash/_equalByTag.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var Uint8Array3 = require_Uint8Array();
      var eq2 = require_eq();
      var equalArrays2 = require_equalArrays();
      var mapToArray2 = require_mapToArray();
      var setToArray2 = require_setToArray();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      var boolTag5 = "[object Boolean]";
      var dateTag5 = "[object Date]";
      var errorTag4 = "[object Error]";
      var mapTag8 = "[object Map]";
      var numberTag6 = "[object Number]";
      var regexpTag5 = "[object RegExp]";
      var setTag8 = "[object Set]";
      var stringTag6 = "[object String]";
      var symbolTag5 = "[object Symbol]";
      var arrayBufferTag5 = "[object ArrayBuffer]";
      var dataViewTag6 = "[object DataView]";
      var symbolProto4 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf3 = symbolProto4 ? symbolProto4.valueOf : void 0;
      function equalByTag2(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag6:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag5:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array3(object), new Uint8Array3(other))) {
              return false;
            }
            return true;
          case boolTag5:
          case dateTag5:
          case numberTag6:
            return eq2(+object, +other);
          case errorTag4:
            return object.name == other.name && object.message == other.message;
          case regexpTag5:
          case stringTag6:
            return object == other + "";
          case mapTag8:
            var convert = mapToArray2;
          case setTag8:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG7;
            convert || (convert = setToArray2);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG5;
            stack.set(object, other);
            var result = equalArrays2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
          case symbolTag5:
            if (symbolValueOf3) {
              return symbolValueOf3.call(object) == symbolValueOf3.call(other);
            }
        }
        return false;
      }
      module2.exports = equalByTag2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "react-user-mgmt/node_modules/lodash/_equalObjects.js"(exports2, module2) {
      var getAllKeys2 = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function equalObjects2(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG7, objProps = getAllKeys2(object), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty16.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      module2.exports = equalObjects2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
      var Stack4 = require_Stack();
      var equalArrays2 = require_equalArrays();
      var equalByTag2 = require_equalByTag();
      var equalObjects2 = require_equalObjects();
      var getTag2 = require_getTag();
      var isArray2 = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isTypedArray2 = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var argsTag5 = "[object Arguments]";
      var arrayTag4 = "[object Array]";
      var objectTag6 = "[object Object]";
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      function baseIsEqualDeep2(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag4 : getTag2(object), othTag = othIsArr ? arrayTag4 : getTag2(other);
        objTag = objTag == argsTag5 ? objectTag6 : objTag;
        othTag = othTag == argsTag5 ? objectTag6 : othTag;
        var objIsObj = objTag == objectTag6, othIsObj = othTag == objectTag6, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack4());
          return objIsArr || isTypedArray2(object) ? equalArrays2(object, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG7)) {
          var objIsWrapped = objIsObj && hasOwnProperty16.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty16.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack4());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack4());
        return equalObjects2(object, other, bitmask, customizer, equalFunc, stack);
      }
      module2.exports = baseIsEqualDeep2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
      var baseIsEqualDeep2 = require_baseIsEqualDeep();
      var isObjectLike2 = require_isObjectLike();
      function baseIsEqual2(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
      }
      module2.exports = baseIsEqual2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isEqual.js
  var require_isEqual = __commonJS({
    "react-user-mgmt/node_modules/lodash/isEqual.js"(exports2, module2) {
      var baseIsEqual2 = require_baseIsEqual();
      function isEqual(value, other) {
        return baseIsEqual2(value, other);
      }
      module2.exports = isEqual;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isFlattenable.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var spreadableSymbol2 = Symbol3 ? Symbol3.isConcatSpreadable : void 0;
      function isFlattenable2(value) {
        return isArray2(value) || isArguments2(value) || !!(spreadableSymbol2 && value && value[spreadableSymbol2]);
      }
      module2.exports = isFlattenable2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseFlatten.js"(exports2, module2) {
      var arrayPush2 = require_arrayPush();
      var isFlattenable2 = require_isFlattenable();
      function baseFlatten2(array, depth, predicate, isStrict, result) {
        var index = -1, length2 = array.length;
        predicate || (predicate = isFlattenable2);
        result || (result = []);
        while (++index < length2) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten2(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush2(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      module2.exports = baseFlatten2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayMap.js"(exports2, module2) {
      function arrayMap2(array, iteratee) {
        var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
        while (++index < length2) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      module2.exports = arrayMap2;
    }
  });

  // react-user-mgmt/node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "react-user-mgmt/node_modules/lodash/isSymbol.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var symbolTag5 = "[object Symbol]";
      function isSymbol2(value) {
        return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag5;
      }
      module2.exports = isSymbol2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isKey.js"(exports2, module2) {
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp2 = /^\w*$/;
      function isKey3(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
          return true;
        }
        return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object != null && value in Object(object);
      }
      module2.exports = isKey3;
    }
  });

  // react-user-mgmt/node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "react-user-mgmt/node_modules/lodash/memoize.js"(exports2, module2) {
      var MapCache2 = require_MapCache();
      var FUNC_ERROR_TEXT2 = "Expected a function";
      function memoize4(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT2);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize4.Cache || MapCache2)();
        return memoized;
      }
      memoize4.Cache = MapCache2;
      module2.exports = memoize4;
    }
  });

  // react-user-mgmt/node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "react-user-mgmt/node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
      var memoize4 = require_memoize();
      var MAX_MEMOIZE_SIZE2 = 500;
      function memoizeCapped2(func) {
        var result = memoize4(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE2) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      module2.exports = memoizeCapped2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "react-user-mgmt/node_modules/lodash/_stringToPath.js"(exports2, module2) {
      var memoizeCapped2 = require_memoizeCapped();
      var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar2 = /\\(\\)?/g;
      var stringToPath3 = memoizeCapped2(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46) {
          result.push("");
        }
        string.replace(rePropName2, function(match2, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar2, "$1") : number || match2);
        });
        return result;
      });
      module2.exports = stringToPath3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseToString.js"(exports2, module2) {
      var Symbol3 = require_Symbol();
      var arrayMap2 = require_arrayMap();
      var isArray2 = require_isArray();
      var isSymbol2 = require_isSymbol();
      var INFINITY6 = 1 / 0;
      var symbolProto4 = Symbol3 ? Symbol3.prototype : void 0;
      var symbolToString2 = symbolProto4 ? symbolProto4.toString : void 0;
      function baseToString2(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap2(value, baseToString2) + "";
        }
        if (isSymbol2(value)) {
          return symbolToString2 ? symbolToString2.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY6 ? "-0" : result;
      }
      module2.exports = baseToString2;
    }
  });

  // react-user-mgmt/node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "react-user-mgmt/node_modules/lodash/toString.js"(exports2, module2) {
      var baseToString2 = require_baseToString();
      function toString3(value) {
        return value == null ? "" : baseToString2(value);
      }
      module2.exports = toString3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "react-user-mgmt/node_modules/lodash/_castPath.js"(exports2, module2) {
      var isArray2 = require_isArray();
      var isKey3 = require_isKey();
      var stringToPath3 = require_stringToPath();
      var toString3 = require_toString();
      function castPath2(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey3(value, object) ? [value] : stringToPath3(toString3(value));
      }
      module2.exports = castPath2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "react-user-mgmt/node_modules/lodash/_toKey.js"(exports2, module2) {
      var isSymbol2 = require_isSymbol();
      var INFINITY6 = 1 / 0;
      function toKey2(value) {
        if (typeof value == "string" || isSymbol2(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY6 ? "-0" : result;
      }
      module2.exports = toKey2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseGet.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var toKey2 = require_toKey();
      function baseGet3(object, path) {
        path = castPath2(path, object);
        var index = 0, length2 = path.length;
        while (object != null && index < length2) {
          object = object[toKey2(path[index++])];
        }
        return index && index == length2 ? object : void 0;
      }
      module2.exports = baseGet3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
      var Stack4 = require_Stack();
      var baseIsEqual2 = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function baseIsMatch2(object, source, matchData, customizer) {
        var index = matchData.length, length2 = index, noCustomizer = !customizer;
        if (object == null) {
          return !length2;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length2) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack4();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module2.exports = baseIsMatch2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
      var isObject4 = require_isObject();
      function isStrictComparable2(value) {
        return value === value && !isObject4(value);
      }
      module2.exports = isStrictComparable2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "react-user-mgmt/node_modules/lodash/_getMatchData.js"(exports2, module2) {
      var isStrictComparable2 = require_isStrictComparable();
      var keys2 = require_keys();
      function getMatchData2(object) {
        var result = keys2(object), length2 = result.length;
        while (length2--) {
          var key = result[length2], value = object[key];
          result[length2] = [key, value, isStrictComparable2(value)];
        }
        return result;
      }
      module2.exports = getMatchData2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "react-user-mgmt/node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
      function matchesStrictComparable2(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      module2.exports = matchesStrictComparable2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseMatches.js"(exports2, module2) {
      var baseIsMatch2 = require_baseIsMatch();
      var getMatchData2 = require_getMatchData();
      var matchesStrictComparable2 = require_matchesStrictComparable();
      function baseMatches2(source) {
        var matchData = getMatchData2(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch2(object, source, matchData);
        };
      }
      module2.exports = baseMatches2;
    }
  });

  // react-user-mgmt/node_modules/lodash/get.js
  var require_get = __commonJS({
    "react-user-mgmt/node_modules/lodash/get.js"(exports2, module2) {
      var baseGet3 = require_baseGet();
      function get3(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet3(object, path);
        return result === void 0 ? defaultValue : result;
      }
      module2.exports = get3;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseHasIn.js"(exports2, module2) {
      function baseHasIn2(object, key) {
        return object != null && key in Object(object);
      }
      module2.exports = baseHasIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "react-user-mgmt/node_modules/lodash/_hasPath.js"(exports2, module2) {
      var castPath2 = require_castPath();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isIndex2 = require_isIndex();
      var isLength2 = require_isLength();
      var toKey2 = require_toKey();
      function hasPath2(object, path, hasFunc) {
        path = castPath2(path, object);
        var index = -1, length2 = path.length, result = false;
        while (++index < length2) {
          var key = toKey2(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length2) {
          return result;
        }
        length2 = object == null ? 0 : object.length;
        return !!length2 && isLength2(length2) && isIndex2(key, length2) && (isArray2(object) || isArguments2(object));
      }
      module2.exports = hasPath2;
    }
  });

  // react-user-mgmt/node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "react-user-mgmt/node_modules/lodash/hasIn.js"(exports2, module2) {
      var baseHasIn2 = require_baseHasIn();
      var hasPath2 = require_hasPath();
      function hasIn2(object, path) {
        return object != null && hasPath2(object, path, baseHasIn2);
      }
      module2.exports = hasIn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
      var baseIsEqual2 = require_baseIsEqual();
      var get3 = require_get();
      var hasIn2 = require_hasIn();
      var isKey3 = require_isKey();
      var isStrictComparable2 = require_isStrictComparable();
      var matchesStrictComparable2 = require_matchesStrictComparable();
      var toKey2 = require_toKey();
      var COMPARE_PARTIAL_FLAG7 = 1;
      var COMPARE_UNORDERED_FLAG5 = 2;
      function baseMatchesProperty2(path, srcValue) {
        if (isKey3(path) && isStrictComparable2(srcValue)) {
          return matchesStrictComparable2(toKey2(path), srcValue);
        }
        return function(object) {
          var objValue = get3(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn2(object, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG7 | COMPARE_UNORDERED_FLAG5);
        };
      }
      module2.exports = baseMatchesProperty2;
    }
  });

  // react-user-mgmt/node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "react-user-mgmt/node_modules/lodash/identity.js"(exports2, module2) {
      function identity2(value) {
        return value;
      }
      module2.exports = identity2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseProperty.js"(exports2, module2) {
      function baseProperty2(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      module2.exports = baseProperty2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "react-user-mgmt/node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
      var baseGet3 = require_baseGet();
      function basePropertyDeep2(path) {
        return function(object) {
          return baseGet3(object, path);
        };
      }
      module2.exports = basePropertyDeep2;
    }
  });

  // react-user-mgmt/node_modules/lodash/property.js
  var require_property = __commonJS({
    "react-user-mgmt/node_modules/lodash/property.js"(exports2, module2) {
      var baseProperty2 = require_baseProperty();
      var basePropertyDeep2 = require_basePropertyDeep();
      var isKey3 = require_isKey();
      var toKey2 = require_toKey();
      function property2(path) {
        return isKey3(path) ? baseProperty2(toKey2(path)) : basePropertyDeep2(path);
      }
      module2.exports = property2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIteratee.js"(exports2, module2) {
      var baseMatches2 = require_baseMatches();
      var baseMatchesProperty2 = require_baseMatchesProperty();
      var identity2 = require_identity();
      var isArray2 = require_isArray();
      var property2 = require_property();
      function baseIteratee2(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty2(value[0], value[1]) : baseMatches2(value);
        }
        return property2(value);
      }
      module2.exports = baseIteratee2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "react-user-mgmt/node_modules/lodash/_createBaseFor.js"(exports2, module2) {
      function createBaseFor2(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
          while (length2--) {
            var key = props[fromRight ? length2 : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      module2.exports = createBaseFor2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseFor.js"(exports2, module2) {
      var createBaseFor2 = require_createBaseFor();
      var baseFor2 = createBaseFor2();
      module2.exports = baseFor2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseForOwn.js"(exports2, module2) {
      var baseFor2 = require_baseFor();
      var keys2 = require_keys();
      function baseForOwn2(object, iteratee) {
        return object && baseFor2(object, iteratee, keys2);
      }
      module2.exports = baseForOwn2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "react-user-mgmt/node_modules/lodash/_createBaseEach.js"(exports2, module2) {
      var isArrayLike2 = require_isArrayLike();
      function createBaseEach2(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike2(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length2 = collection.length, index = fromRight ? length2 : -1, iterable = Object(collection);
          while (fromRight ? index-- : ++index < length2) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      module2.exports = createBaseEach2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseEach.js"(exports2, module2) {
      var baseForOwn2 = require_baseForOwn();
      var createBaseEach2 = require_createBaseEach();
      var baseEach2 = createBaseEach2(baseForOwn2);
      module2.exports = baseEach2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseMap.js"(exports2, module2) {
      var baseEach2 = require_baseEach();
      var isArrayLike2 = require_isArrayLike();
      function baseMap(collection, iteratee) {
        var index = -1, result = isArrayLike2(collection) ? Array(collection.length) : [];
        baseEach2(collection, function(value, key, collection2) {
          result[++index] = iteratee(value, key, collection2);
        });
        return result;
      }
      module2.exports = baseMap;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseSortBy.js
  var require_baseSortBy = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseSortBy.js"(exports2, module2) {
      function baseSortBy(array, comparer) {
        var length2 = array.length;
        array.sort(comparer);
        while (length2--) {
          array[length2] = array[length2].value;
        }
        return array;
      }
      module2.exports = baseSortBy;
    }
  });

  // react-user-mgmt/node_modules/lodash/_compareAscending.js
  var require_compareAscending = __commonJS({
    "react-user-mgmt/node_modules/lodash/_compareAscending.js"(exports2, module2) {
      var isSymbol2 = require_isSymbol();
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
          var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      module2.exports = compareAscending;
    }
  });

  // react-user-mgmt/node_modules/lodash/_compareMultiple.js
  var require_compareMultiple = __commonJS({
    "react-user-mgmt/node_modules/lodash/_compareMultiple.js"(exports2, module2) {
      var compareAscending = require_compareAscending();
      function compareMultiple(object, other, orders) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
        while (++index < length2) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      module2.exports = compareMultiple;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseOrderBy.js
  var require_baseOrderBy = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseOrderBy.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseGet3 = require_baseGet();
      var baseIteratee2 = require_baseIteratee();
      var baseMap = require_baseMap();
      var baseSortBy = require_baseSortBy();
      var baseUnary2 = require_baseUnary();
      var compareMultiple = require_compareMultiple();
      var identity2 = require_identity();
      var isArray2 = require_isArray();
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap2(iteratees, function(iteratee) {
            if (isArray2(iteratee)) {
              return function(value) {
                return baseGet3(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              };
            }
            return iteratee;
          });
        } else {
          iteratees = [identity2];
        }
        var index = -1;
        iteratees = arrayMap2(iteratees, baseUnary2(baseIteratee2));
        var result = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap2(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { "criteria": criteria, "index": ++index, "value": value };
        });
        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      module2.exports = baseOrderBy;
    }
  });

  // react-user-mgmt/node_modules/lodash/_apply.js
  var require_apply = __commonJS({
    "react-user-mgmt/node_modules/lodash/_apply.js"(exports2, module2) {
      function apply2(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      module2.exports = apply2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "react-user-mgmt/node_modules/lodash/_overRest.js"(exports2, module2) {
      var apply2 = require_apply();
      var nativeMax2 = Math.max;
      function overRest2(func, start, transform2) {
        start = nativeMax2(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length2 = nativeMax2(args.length - start, 0), array = Array(length2);
          while (++index < length2) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform2(array);
          return apply2(func, this, otherArgs);
        };
      }
      module2.exports = overRest2;
    }
  });

  // react-user-mgmt/node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "react-user-mgmt/node_modules/lodash/constant.js"(exports2, module2) {
      function constant2(value) {
        return function() {
          return value;
        };
      }
      module2.exports = constant2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseSetToString.js"(exports2, module2) {
      var constant2 = require_constant();
      var defineProperty2 = require_defineProperty();
      var identity2 = require_identity();
      var baseSetToString2 = !defineProperty2 ? identity2 : function(func, string) {
        return defineProperty2(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant2(string),
          "writable": true
        });
      };
      module2.exports = baseSetToString2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "react-user-mgmt/node_modules/lodash/_shortOut.js"(exports2, module2) {
      var HOT_COUNT2 = 800;
      var HOT_SPAN2 = 16;
      var nativeNow2 = Date.now;
      function shortOut2(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow2(), remaining = HOT_SPAN2 - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT2) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      module2.exports = shortOut2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "react-user-mgmt/node_modules/lodash/_setToString.js"(exports2, module2) {
      var baseSetToString2 = require_baseSetToString();
      var shortOut2 = require_shortOut();
      var setToString2 = shortOut2(baseSetToString2);
      module2.exports = setToString2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseRest.js"(exports2, module2) {
      var identity2 = require_identity();
      var overRest2 = require_overRest();
      var setToString2 = require_setToString();
      function baseRest2(func, start) {
        return setToString2(overRest2(func, start, identity2), func + "");
      }
      module2.exports = baseRest2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "react-user-mgmt/node_modules/lodash/_isIterateeCall.js"(exports2, module2) {
      var eq2 = require_eq();
      var isArrayLike2 = require_isArrayLike();
      var isIndex2 = require_isIndex();
      var isObject4 = require_isObject();
      function isIterateeCall2(value, index, object) {
        if (!isObject4(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike2(object) && isIndex2(index, object.length) : type == "string" && index in object) {
          return eq2(object[index], value);
        }
        return false;
      }
      module2.exports = isIterateeCall2;
    }
  });

  // react-user-mgmt/node_modules/lodash/sortBy.js
  var require_sortBy = __commonJS({
    "react-user-mgmt/node_modules/lodash/sortBy.js"(exports2, module2) {
      var baseFlatten2 = require_baseFlatten();
      var baseOrderBy = require_baseOrderBy();
      var baseRest2 = require_baseRest();
      var isIterateeCall2 = require_isIterateeCall();
      var sortBy = baseRest2(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length2 = iteratees.length;
        if (length2 > 1 && isIterateeCall2(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length2 > 2 && isIterateeCall2(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten2(iteratees, 1), []);
      });
      module2.exports = sortBy;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseFindIndex.js"(exports2, module2) {
      function baseFindIndex2(array, predicate, fromIndex, fromRight) {
        var length2 = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length2) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      module2.exports = baseFindIndex2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIsNaN.js"(exports2, module2) {
      function baseIsNaN2(value) {
        return value !== value;
      }
      module2.exports = baseIsNaN2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS({
    "react-user-mgmt/node_modules/lodash/_strictIndexOf.js"(exports2, module2) {
      function strictIndexOf2(array, value, fromIndex) {
        var index = fromIndex - 1, length2 = array.length;
        while (++index < length2) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      module2.exports = strictIndexOf2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIndexOf.js"(exports2, module2) {
      var baseFindIndex2 = require_baseFindIndex();
      var baseIsNaN2 = require_baseIsNaN();
      var strictIndexOf2 = require_strictIndexOf();
      function baseIndexOf2(array, value, fromIndex) {
        return value === value ? strictIndexOf2(array, value, fromIndex) : baseFindIndex2(array, baseIsNaN2, fromIndex);
      }
      module2.exports = baseIndexOf2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayIncludes.js"(exports2, module2) {
      var baseIndexOf2 = require_baseIndexOf();
      function arrayIncludes2(array, value) {
        var length2 = array == null ? 0 : array.length;
        return !!length2 && baseIndexOf2(array, value, 0) > -1;
      }
      module2.exports = arrayIncludes2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS({
    "react-user-mgmt/node_modules/lodash/_arrayIncludesWith.js"(exports2, module2) {
      function arrayIncludesWith2(array, value, comparator) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      module2.exports = arrayIncludesWith2;
    }
  });

  // react-user-mgmt/node_modules/lodash/noop.js
  var require_noop = __commonJS({
    "react-user-mgmt/node_modules/lodash/noop.js"(exports2, module2) {
      function noop6() {
      }
      module2.exports = noop6;
    }
  });

  // react-user-mgmt/node_modules/lodash/_createSet.js
  var require_createSet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_createSet.js"(exports2, module2) {
      var Set3 = require_Set();
      var noop6 = require_noop();
      var setToArray2 = require_setToArray();
      var INFINITY6 = 1 / 0;
      var createSet2 = !(Set3 && 1 / setToArray2(new Set3([, -0]))[1] == INFINITY6) ? noop6 : function(values3) {
        return new Set3(values3);
      };
      module2.exports = createSet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseUniq.js
  var require_baseUniq = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseUniq.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arrayIncludes2 = require_arrayIncludes();
      var arrayIncludesWith2 = require_arrayIncludesWith();
      var cacheHas2 = require_cacheHas();
      var createSet2 = require_createSet();
      var setToArray2 = require_setToArray();
      var LARGE_ARRAY_SIZE4 = 200;
      function baseUniq2(array, iteratee, comparator) {
        var index = -1, includes = arrayIncludes2, length2 = array.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith2;
        } else if (length2 >= LARGE_ARRAY_SIZE4) {
          var set3 = iteratee ? null : createSet2(array);
          if (set3) {
            return setToArray2(set3);
          }
          isCommon = false;
          includes = cacheHas2;
          seen = new SetCache2();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index < length2) {
            var value = array[index], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseUniq2;
    }
  });

  // react-user-mgmt/node_modules/lodash/uniq.js
  var require_uniq = __commonJS({
    "react-user-mgmt/node_modules/lodash/uniq.js"(exports2, module2) {
      var baseUniq2 = require_baseUniq();
      function uniq2(array) {
        return array && array.length ? baseUniq2(array) : [];
      }
      module2.exports = uniq2;
    }
  });

  // react-user-mgmt/node_modules/lodash/uniqWith.js
  var require_uniqWith = __commonJS({
    "react-user-mgmt/node_modules/lodash/uniqWith.js"(exports2, module2) {
      var baseUniq2 = require_baseUniq();
      function uniqWith(array, comparator) {
        comparator = typeof comparator == "function" ? comparator : void 0;
        return array && array.length ? baseUniq2(array, void 0, comparator) : [];
      }
      module2.exports = uniqWith;
    }
  });

  // react-user-mgmt/node_modules/lodash/defaults.js
  var require_defaults = __commonJS({
    "react-user-mgmt/node_modules/lodash/defaults.js"(exports2, module2) {
      var baseRest2 = require_baseRest();
      var eq2 = require_eq();
      var isIterateeCall2 = require_isIterateeCall();
      var keysIn2 = require_keysIn();
      var objectProto19 = Object.prototype;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var defaults = baseRest2(function(object, sources) {
        object = Object(object);
        var index = -1;
        var length2 = sources.length;
        var guard = length2 > 2 ? sources[2] : void 0;
        if (guard && isIterateeCall2(sources[0], sources[1], guard)) {
          length2 = 1;
        }
        while (++index < length2) {
          var source = sources[index];
          var props = keysIn2(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === void 0 || eq2(value, objectProto19[key]) && !hasOwnProperty16.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      module2.exports = defaults;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIntersection.js
  var require_baseIntersection = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIntersection.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arrayIncludes2 = require_arrayIncludes();
      var arrayIncludesWith2 = require_arrayIncludesWith();
      var arrayMap2 = require_arrayMap();
      var baseUnary2 = require_baseUnary();
      var cacheHas2 = require_cacheHas();
      var nativeMin2 = Math.min;
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith2 : arrayIncludes2, length2 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap2(array, baseUnary2(iteratee));
          }
          maxLength = nativeMin2(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length2 >= 120 && array.length >= 120) ? new SetCache2(othIndex && array) : void 0;
        }
        array = arrays[0];
        var index = -1, seen = caches[0];
        outer:
          while (++index < length2 && result.length < maxLength) {
            var value = array[index], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas2(seen, computed) : includes(result, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas2(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseIntersection;
    }
  });

  // react-user-mgmt/node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/isArrayLikeObject.js"(exports2, module2) {
      var isArrayLike2 = require_isArrayLike();
      var isObjectLike2 = require_isObjectLike();
      function isArrayLikeObject2(value) {
        return isObjectLike2(value) && isArrayLike2(value);
      }
      module2.exports = isArrayLikeObject2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_castArrayLikeObject.js
  var require_castArrayLikeObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/_castArrayLikeObject.js"(exports2, module2) {
      var isArrayLikeObject2 = require_isArrayLikeObject();
      function castArrayLikeObject(value) {
        return isArrayLikeObject2(value) ? value : [];
      }
      module2.exports = castArrayLikeObject;
    }
  });

  // react-user-mgmt/node_modules/lodash/last.js
  var require_last = __commonJS({
    "react-user-mgmt/node_modules/lodash/last.js"(exports2, module2) {
      function last2(array) {
        var length2 = array == null ? 0 : array.length;
        return length2 ? array[length2 - 1] : void 0;
      }
      module2.exports = last2;
    }
  });

  // react-user-mgmt/node_modules/lodash/intersectionWith.js
  var require_intersectionWith = __commonJS({
    "react-user-mgmt/node_modules/lodash/intersectionWith.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIntersection = require_baseIntersection();
      var baseRest2 = require_baseRest();
      var castArrayLikeObject = require_castArrayLikeObject();
      var last2 = require_last();
      var intersectionWith = baseRest2(function(arrays) {
        var comparator = last2(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : void 0;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, void 0, comparator) : [];
      });
      module2.exports = intersectionWith;
    }
  });

  // react-user-mgmt/node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/isPlainObject.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var getPrototype2 = require_getPrototype();
      var isObjectLike2 = require_isObjectLike();
      var objectTag6 = "[object Object]";
      var funcProto4 = Function.prototype;
      var objectProto19 = Object.prototype;
      var funcToString4 = funcProto4.toString;
      var hasOwnProperty16 = objectProto19.hasOwnProperty;
      var objectCtorString2 = funcToString4.call(Object);
      function isPlainObject4(value) {
        if (!isObjectLike2(value) || baseGetTag2(value) != objectTag6) {
          return false;
        }
        var proto = getPrototype2(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty16.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString4.call(Ctor) == objectCtorString2;
      }
      module2.exports = isPlainObject4;
    }
  });

  // react-user-mgmt/node_modules/lodash/isBoolean.js
  var require_isBoolean = __commonJS({
    "react-user-mgmt/node_modules/lodash/isBoolean.js"(exports2, module2) {
      var baseGetTag2 = require_baseGetTag();
      var isObjectLike2 = require_isObjectLike();
      var boolTag5 = "[object Boolean]";
      function isBoolean2(value) {
        return value === true || value === false || isObjectLike2(value) && baseGetTag2(value) == boolTag5;
      }
      module2.exports = isBoolean2;
    }
  });

  // react-user-mgmt/node_modules/json-schema-compare/src/index.js
  var require_src = __commonJS({
    "react-user-mgmt/node_modules/json-schema-compare/src/index.js"(exports2, module2) {
      var isEqual = require_isEqual();
      var sortBy = require_sortBy();
      var uniq2 = require_uniq();
      var uniqWith = require_uniqWith();
      var defaults = require_defaults();
      var intersectionWith = require_intersectionWith();
      var isPlainObject4 = require_isPlainObject();
      var isBoolean2 = require_isBoolean();
      var normalizeArray = (val) => Array.isArray(val) ? val : [val];
      var undef = (val) => val === void 0;
      var keys2 = (obj) => isPlainObject4(obj) || Array.isArray(obj) ? Object.keys(obj) : [];
      var has2 = (obj, key) => obj.hasOwnProperty(key);
      var stringArray = (arr) => sortBy(uniq2(arr));
      var undefEmpty = (val) => undef(val) || Array.isArray(val) && val.length === 0;
      var keyValEqual = (a2, b2, key, compare2) => b2 && has2(b2, key) && a2 && has2(a2, key) && compare2(a2[key], b2[key]);
      var undefAndZero = (a2, b2) => undef(a2) && b2 === 0 || undef(b2) && a2 === 0 || isEqual(a2, b2);
      var falseUndefined = (a2, b2) => undef(a2) && b2 === false || undef(b2) && a2 === false || isEqual(a2, b2);
      var emptySchema = (schema) => undef(schema) || isEqual(schema, {}) || schema === true;
      var emptyObjUndef = (schema) => undef(schema) || isEqual(schema, {});
      var isSchema = (val) => undef(val) || isPlainObject4(val) || val === true || val === false;
      function undefArrayEqual(a2, b2) {
        if (undefEmpty(a2) && undefEmpty(b2)) {
          return true;
        } else {
          return isEqual(stringArray(a2), stringArray(b2));
        }
      }
      function unsortedNormalizedArray(a2, b2) {
        a2 = normalizeArray(a2);
        b2 = normalizeArray(b2);
        return isEqual(stringArray(a2), stringArray(b2));
      }
      function schemaGroup(a2, b2, key, compare2) {
        var allProps = uniq2(keys2(a2).concat(keys2(b2)));
        if (emptyObjUndef(a2) && emptyObjUndef(b2)) {
          return true;
        } else if (emptyObjUndef(a2) && keys2(b2).length) {
          return false;
        } else if (emptyObjUndef(b2) && keys2(a2).length) {
          return false;
        }
        return allProps.every(function(key2) {
          var aVal = a2[key2];
          var bVal = b2[key2];
          if (Array.isArray(aVal) && Array.isArray(bVal)) {
            return isEqual(stringArray(a2), stringArray(b2));
          } else if (Array.isArray(aVal) && !Array.isArray(bVal)) {
            return false;
          } else if (Array.isArray(bVal) && !Array.isArray(aVal)) {
            return false;
          }
          return keyValEqual(a2, b2, key2, compare2);
        });
      }
      function items(a2, b2, key, compare2) {
        if (isPlainObject4(a2) && isPlainObject4(b2)) {
          return compare2(a2, b2);
        } else if (Array.isArray(a2) && Array.isArray(b2)) {
          return schemaGroup(a2, b2, key, compare2);
        } else {
          return isEqual(a2, b2);
        }
      }
      function unsortedArray(a2, b2, key, compare2) {
        var uniqueA = uniqWith(a2, compare2);
        var uniqueB = uniqWith(b2, compare2);
        var inter = intersectionWith(uniqueA, uniqueB, compare2);
        return inter.length === Math.max(uniqueA.length, uniqueB.length);
      }
      var comparers = {
        title: isEqual,
        uniqueItems: falseUndefined,
        minLength: undefAndZero,
        minItems: undefAndZero,
        minProperties: undefAndZero,
        required: undefArrayEqual,
        enum: undefArrayEqual,
        type: unsortedNormalizedArray,
        items,
        anyOf: unsortedArray,
        allOf: unsortedArray,
        oneOf: unsortedArray,
        properties: schemaGroup,
        patternProperties: schemaGroup,
        dependencies: schemaGroup
      };
      var acceptsUndefined = [
        "properties",
        "patternProperties",
        "dependencies",
        "uniqueItems",
        "minLength",
        "minItems",
        "minProperties",
        "required"
      ];
      var schemaProps = ["additionalProperties", "additionalItems", "contains", "propertyNames", "not"];
      function compare(a2, b2, options) {
        options = defaults(options, {
          ignore: []
        });
        if (emptySchema(a2) && emptySchema(b2)) {
          return true;
        }
        if (!isSchema(a2) || !isSchema(b2)) {
          throw new Error("Either of the values are not a JSON schema.");
        }
        if (a2 === b2) {
          return true;
        }
        if (isBoolean2(a2) && isBoolean2(b2)) {
          return a2 === b2;
        }
        if (a2 === void 0 && b2 === false || b2 === void 0 && a2 === false) {
          return false;
        }
        if (undef(a2) && !undef(b2) || !undef(a2) && undef(b2)) {
          return false;
        }
        var allKeys = uniq2(Object.keys(a2).concat(Object.keys(b2)));
        if (options.ignore.length) {
          allKeys = allKeys.filter((k2) => options.ignore.indexOf(k2) === -1);
        }
        if (!allKeys.length) {
          return true;
        }
        function innerCompare(a3, b3) {
          return compare(a3, b3, options);
        }
        return allKeys.every(function(key) {
          var aValue = a2[key];
          var bValue = b2[key];
          if (schemaProps.indexOf(key) !== -1) {
            return compare(aValue, bValue, options);
          }
          var comparer = comparers[key];
          if (!comparer) {
            comparer = isEqual;
          }
          if (isEqual(aValue, bValue)) {
            return true;
          }
          if (acceptsUndefined.indexOf(key) === -1) {
            if (!has2(a2, key) && has2(b2, key) || has2(a2, key) && !has2(b2, key)) {
              return aValue === bValue;
            }
          }
          var result = comparer(aValue, bValue, key, innerCompare);
          if (!isBoolean2(result)) {
            throw new Error("Comparer must return true or false");
          }
          return result;
        });
      }
      module2.exports = compare;
    }
  });

  // react-user-mgmt/node_modules/validate.io-array/lib/index.js
  var require_lib = __commonJS({
    "react-user-mgmt/node_modules/validate.io-array/lib/index.js"(exports2, module2) {
      "use strict";
      function isArray2(value) {
        return Object.prototype.toString.call(value) === "[object Array]";
      }
      module2.exports = Array.isArray || isArray2;
    }
  });

  // react-user-mgmt/node_modules/validate.io-number/lib/index.js
  var require_lib2 = __commonJS({
    "react-user-mgmt/node_modules/validate.io-number/lib/index.js"(exports2, module2) {
      "use strict";
      function isNumber2(value) {
        return (typeof value === "number" || Object.prototype.toString.call(value) === "[object Number]") && value.valueOf() === value.valueOf();
      }
      module2.exports = isNumber2;
    }
  });

  // react-user-mgmt/node_modules/validate.io-integer/lib/index.js
  var require_lib3 = __commonJS({
    "react-user-mgmt/node_modules/validate.io-integer/lib/index.js"(exports2, module2) {
      "use strict";
      var isNumber2 = require_lib2();
      function isInteger(value) {
        return isNumber2(value) && value % 1 === 0;
      }
      module2.exports = isInteger;
    }
  });

  // react-user-mgmt/node_modules/validate.io-integer-array/lib/index.js
  var require_lib4 = __commonJS({
    "react-user-mgmt/node_modules/validate.io-integer-array/lib/index.js"(exports2, module2) {
      "use strict";
      var isArray2 = require_lib();
      var isInteger = require_lib3();
      function isIntegerArray(value) {
        var len;
        if (!isArray2(value)) {
          return false;
        }
        len = value.length;
        if (!len) {
          return false;
        }
        for (var i2 = 0; i2 < len; i2++) {
          if (!isInteger(value[i2])) {
            return false;
          }
        }
        return true;
      }
      module2.exports = isIntegerArray;
    }
  });

  // react-user-mgmt/node_modules/validate.io-function/lib/index.js
  var require_lib5 = __commonJS({
    "react-user-mgmt/node_modules/validate.io-function/lib/index.js"(exports2, module2) {
      "use strict";
      function isFunction3(value) {
        return typeof value === "function";
      }
      module2.exports = isFunction3;
    }
  });

  // react-user-mgmt/node_modules/compute-gcd/lib/index.js
  var require_lib6 = __commonJS({
    "react-user-mgmt/node_modules/compute-gcd/lib/index.js"(exports2, module2) {
      "use strict";
      var isArray2 = require_lib();
      var isIntegerArray = require_lib4();
      var isFunction3 = require_lib5();
      var MAXINT = Math.pow(2, 31) - 1;
      function gcd(a2, b2) {
        var k2 = 1, t2;
        if (a2 === 0) {
          return b2;
        }
        if (b2 === 0) {
          return a2;
        }
        while (a2 % 2 === 0 && b2 % 2 === 0) {
          a2 = a2 / 2;
          b2 = b2 / 2;
          k2 = k2 * 2;
        }
        while (a2 % 2 === 0) {
          a2 = a2 / 2;
        }
        while (b2) {
          while (b2 % 2 === 0) {
            b2 = b2 / 2;
          }
          if (a2 > b2) {
            t2 = b2;
            b2 = a2;
            a2 = t2;
          }
          b2 = b2 - a2;
        }
        return k2 * a2;
      }
      function bitwise(a2, b2) {
        var k2 = 0, t2;
        if (a2 === 0) {
          return b2;
        }
        if (b2 === 0) {
          return a2;
        }
        while ((a2 & 1) === 0 && (b2 & 1) === 0) {
          a2 >>>= 1;
          b2 >>>= 1;
          k2++;
        }
        while ((a2 & 1) === 0) {
          a2 >>>= 1;
        }
        while (b2) {
          while ((b2 & 1) === 0) {
            b2 >>>= 1;
          }
          if (a2 > b2) {
            t2 = b2;
            b2 = a2;
            a2 = t2;
          }
          b2 = b2 - a2;
        }
        return a2 << k2;
      }
      function compute() {
        var nargs = arguments.length, args, clbk, arr, len, a2, b2, i2;
        args = new Array(nargs);
        for (i2 = 0; i2 < nargs; i2++) {
          args[i2] = arguments[i2];
        }
        if (isIntegerArray(args)) {
          if (nargs === 2) {
            a2 = args[0];
            b2 = args[1];
            if (a2 < 0) {
              a2 = -a2;
            }
            if (b2 < 0) {
              b2 = -b2;
            }
            if (a2 <= MAXINT && b2 <= MAXINT) {
              return bitwise(a2, b2);
            } else {
              return gcd(a2, b2);
            }
          }
          arr = args;
        } else if (!isArray2(args[0])) {
          throw new TypeError("gcd()::invalid input argument. Must provide an array of integers. Value: `" + args[0] + "`.");
        } else if (nargs > 1) {
          arr = args[0];
          clbk = args[1];
          if (!isFunction3(clbk)) {
            throw new TypeError("gcd()::invalid input argument. Accessor must be a function. Value: `" + clbk + "`.");
          }
        } else {
          arr = args[0];
        }
        len = arr.length;
        if (len < 2) {
          return null;
        }
        if (clbk) {
          a2 = new Array(len);
          for (i2 = 0; i2 < len; i2++) {
            a2[i2] = clbk(arr[i2], i2);
          }
          arr = a2;
        }
        if (nargs < 3) {
          if (!isIntegerArray(arr)) {
            throw new TypeError("gcd()::invalid input argument. Accessed array values must be integers. Value: `" + arr + "`.");
          }
        }
        for (i2 = 0; i2 < len; i2++) {
          a2 = arr[i2];
          if (a2 < 0) {
            arr[i2] = -a2;
          }
        }
        a2 = arr[0];
        for (i2 = 1; i2 < len; i2++) {
          b2 = arr[i2];
          if (b2 <= MAXINT && a2 <= MAXINT) {
            a2 = bitwise(a2, b2);
          } else {
            a2 = gcd(a2, b2);
          }
        }
        return a2;
      }
      module2.exports = compute;
    }
  });

  // react-user-mgmt/node_modules/compute-lcm/lib/index.js
  var require_lib7 = __commonJS({
    "react-user-mgmt/node_modules/compute-lcm/lib/index.js"(exports2, module2) {
      "use strict";
      var gcd = require_lib6();
      var isArray2 = require_lib();
      var isIntegerArray = require_lib4();
      var isFunction3 = require_lib5();
      function lcm() {
        var nargs = arguments.length, args, clbk, arr, len, a2, b2, i2;
        args = new Array(nargs);
        for (i2 = 0; i2 < nargs; i2++) {
          args[i2] = arguments[i2];
        }
        if (isIntegerArray(args)) {
          if (nargs === 2) {
            a2 = args[0];
            b2 = args[1];
            if (a2 < 0) {
              a2 = -a2;
            }
            if (b2 < 0) {
              b2 = -b2;
            }
            if (a2 === 0 || b2 === 0) {
              return 0;
            }
            return a2 / gcd(a2, b2) * b2;
          }
          arr = args;
        } else if (!isArray2(args[0])) {
          throw new TypeError("lcm()::invalid input argument. Must provide an array of integers. Value: `" + args[0] + "`.");
        } else if (nargs > 1) {
          arr = args[0];
          clbk = args[1];
          if (!isFunction3(clbk)) {
            throw new TypeError("lcm()::invalid input argument. Accessor must be a function. Value: `" + clbk + "`.");
          }
        } else {
          arr = args[0];
        }
        len = arr.length;
        if (len < 2) {
          return null;
        }
        if (clbk) {
          a2 = new Array(len);
          for (i2 = 0; i2 < len; i2++) {
            a2[i2] = clbk(arr[i2], i2);
          }
          arr = a2;
        }
        if (nargs < 3) {
          if (!isIntegerArray(arr)) {
            throw new TypeError("lcm()::invalid input argument. Accessed array values must be integers. Value: `" + arr + "`.");
          }
        }
        for (i2 = 0; i2 < len; i2++) {
          a2 = arr[i2];
          if (a2 < 0) {
            arr[i2] = -a2;
          }
        }
        a2 = arr[0];
        for (i2 = 1; i2 < len; i2++) {
          b2 = arr[i2];
          if (a2 === 0 || b2 === 0) {
            return 0;
          }
          a2 = a2 / gcd(a2, b2) * b2;
        }
        return a2;
      }
      module2.exports = lcm;
    }
  });

  // react-user-mgmt/node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS({
    "react-user-mgmt/node_modules/lodash/_assignMergeValue.js"(exports2, module2) {
      var baseAssignValue2 = require_baseAssignValue();
      var eq2 = require_eq();
      function assignMergeValue2(object, key, value) {
        if (value !== void 0 && !eq2(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue2(object, key, value);
        }
      }
      module2.exports = assignMergeValue2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS({
    "react-user-mgmt/node_modules/lodash/_safeGet.js"(exports2, module2) {
      function safeGet2(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      module2.exports = safeGet2;
    }
  });

  // react-user-mgmt/node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS({
    "react-user-mgmt/node_modules/lodash/toPlainObject.js"(exports2, module2) {
      var copyObject2 = require_copyObject();
      var keysIn2 = require_keysIn();
      function toPlainObject2(value) {
        return copyObject2(value, keysIn2(value));
      }
      module2.exports = toPlainObject2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseMergeDeep.js"(exports2, module2) {
      var assignMergeValue2 = require_assignMergeValue();
      var cloneBuffer2 = require_cloneBuffer();
      var cloneTypedArray2 = require_cloneTypedArray();
      var copyArray2 = require_copyArray();
      var initCloneObject2 = require_initCloneObject();
      var isArguments2 = require_isArguments();
      var isArray2 = require_isArray();
      var isArrayLikeObject2 = require_isArrayLikeObject();
      var isBuffer2 = require_isBuffer();
      var isFunction3 = require_isFunction();
      var isObject4 = require_isObject();
      var isPlainObject4 = require_isPlainObject();
      var isTypedArray2 = require_isTypedArray();
      var safeGet2 = require_safeGet();
      var toPlainObject2 = require_toPlainObject();
      function baseMergeDeep2(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet2(object, key), srcValue = safeGet2(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue2(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject2(objValue)) {
              newValue = copyArray2(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer2(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray2(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject4(srcValue) || isArguments2(srcValue)) {
            newValue = objValue;
            if (isArguments2(objValue)) {
              newValue = toPlainObject2(objValue);
            } else if (!isObject4(objValue) || isFunction3(objValue)) {
              newValue = initCloneObject2(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue2(object, key, newValue);
      }
      module2.exports = baseMergeDeep2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseMerge.js"(exports2, module2) {
      var Stack4 = require_Stack();
      var assignMergeValue2 = require_assignMergeValue();
      var baseFor2 = require_baseFor();
      var baseMergeDeep2 = require_baseMergeDeep();
      var isObject4 = require_isObject();
      var keysIn2 = require_keysIn();
      var safeGet2 = require_safeGet();
      function baseMerge2(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor2(source, function(srcValue, key) {
          stack || (stack = new Stack4());
          if (isObject4(srcValue)) {
            baseMergeDeep2(object, source, key, srcIndex, baseMerge2, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet2(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue2(object, key, newValue);
          }
        }, keysIn2);
      }
      module2.exports = baseMerge2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_customDefaultsMerge.js
  var require_customDefaultsMerge = __commonJS({
    "react-user-mgmt/node_modules/lodash/_customDefaultsMerge.js"(exports2, module2) {
      var baseMerge2 = require_baseMerge();
      var isObject4 = require_isObject();
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject4(objValue) && isObject4(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge2(objValue, srcValue, void 0, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      module2.exports = customDefaultsMerge;
    }
  });

  // react-user-mgmt/node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS({
    "react-user-mgmt/node_modules/lodash/_createAssigner.js"(exports2, module2) {
      var baseRest2 = require_baseRest();
      var isIterateeCall2 = require_isIterateeCall();
      function createAssigner2(assigner) {
        return baseRest2(function(object, sources) {
          var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
          if (guard && isIterateeCall2(sources[0], sources[1], guard)) {
            customizer = length2 < 3 ? void 0 : customizer;
            length2 = 1;
          }
          object = Object(object);
          while (++index < length2) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      module2.exports = createAssigner2;
    }
  });

  // react-user-mgmt/node_modules/lodash/mergeWith.js
  var require_mergeWith = __commonJS({
    "react-user-mgmt/node_modules/lodash/mergeWith.js"(exports2, module2) {
      var baseMerge2 = require_baseMerge();
      var createAssigner2 = require_createAssigner();
      var mergeWith = createAssigner2(function(object, source, srcIndex, customizer) {
        baseMerge2(object, source, srcIndex, customizer);
      });
      module2.exports = mergeWith;
    }
  });

  // react-user-mgmt/node_modules/lodash/defaultsDeep.js
  var require_defaultsDeep = __commonJS({
    "react-user-mgmt/node_modules/lodash/defaultsDeep.js"(exports2, module2) {
      var apply2 = require_apply();
      var baseRest2 = require_baseRest();
      var customDefaultsMerge = require_customDefaultsMerge();
      var mergeWith = require_mergeWith();
      var defaultsDeep = baseRest2(function(args) {
        args.push(void 0, customDefaultsMerge);
        return apply2(mergeWith, void 0, args);
      });
      module2.exports = defaultsDeep;
    }
  });

  // react-user-mgmt/node_modules/lodash/flatten.js
  var require_flatten = __commonJS({
    "react-user-mgmt/node_modules/lodash/flatten.js"(exports2, module2) {
      var baseFlatten2 = require_baseFlatten();
      function flatten2(array) {
        var length2 = array == null ? 0 : array.length;
        return length2 ? baseFlatten2(array, 1) : [];
      }
      module2.exports = flatten2;
    }
  });

  // react-user-mgmt/node_modules/lodash/flattenDeep.js
  var require_flattenDeep = __commonJS({
    "react-user-mgmt/node_modules/lodash/flattenDeep.js"(exports2, module2) {
      var baseFlatten2 = require_baseFlatten();
      var INFINITY6 = 1 / 0;
      function flattenDeep2(array) {
        var length2 = array == null ? 0 : array.length;
        return length2 ? baseFlatten2(array, INFINITY6) : [];
      }
      module2.exports = flattenDeep2;
    }
  });

  // react-user-mgmt/node_modules/lodash/intersection.js
  var require_intersection = __commonJS({
    "react-user-mgmt/node_modules/lodash/intersection.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIntersection = require_baseIntersection();
      var baseRest2 = require_baseRest();
      var castArrayLikeObject = require_castArrayLikeObject();
      var intersection = baseRest2(function(arrays) {
        var mapped = arrayMap2(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      module2.exports = intersection;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseIndexOfWith.js
  var require_baseIndexOfWith = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseIndexOfWith.js"(exports2, module2) {
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length2 = array.length;
        while (++index < length2) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      module2.exports = baseIndexOfWith;
    }
  });

  // react-user-mgmt/node_modules/lodash/_basePullAll.js
  var require_basePullAll = __commonJS({
    "react-user-mgmt/node_modules/lodash/_basePullAll.js"(exports2, module2) {
      var arrayMap2 = require_arrayMap();
      var baseIndexOf2 = require_baseIndexOf();
      var baseIndexOfWith = require_baseIndexOfWith();
      var baseUnary2 = require_baseUnary();
      var copyArray2 = require_copyArray();
      var arrayProto2 = Array.prototype;
      var splice2 = arrayProto2.splice;
      function basePullAll(array, values3, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf2, index = -1, length2 = values3.length, seen = array;
        if (array === values3) {
          values3 = copyArray2(values3);
        }
        if (iteratee) {
          seen = arrayMap2(array, baseUnary2(iteratee));
        }
        while (++index < length2) {
          var fromIndex = 0, value = values3[index], computed = iteratee ? iteratee(value) : value;
          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice2.call(seen, fromIndex, 1);
            }
            splice2.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      module2.exports = basePullAll;
    }
  });

  // react-user-mgmt/node_modules/lodash/pullAll.js
  var require_pullAll = __commonJS({
    "react-user-mgmt/node_modules/lodash/pullAll.js"(exports2, module2) {
      var basePullAll = require_basePullAll();
      function pullAll(array, values3) {
        return array && array.length && values3 && values3.length ? basePullAll(array, values3) : array;
      }
      module2.exports = pullAll;
    }
  });

  // react-user-mgmt/node_modules/lodash/_castFunction.js
  var require_castFunction = __commonJS({
    "react-user-mgmt/node_modules/lodash/_castFunction.js"(exports2, module2) {
      var identity2 = require_identity();
      function castFunction2(value) {
        return typeof value == "function" ? value : identity2;
      }
      module2.exports = castFunction2;
    }
  });

  // react-user-mgmt/node_modules/lodash/forEach.js
  var require_forEach = __commonJS({
    "react-user-mgmt/node_modules/lodash/forEach.js"(exports2, module2) {
      var arrayEach2 = require_arrayEach();
      var baseEach2 = require_baseEach();
      var castFunction2 = require_castFunction();
      var isArray2 = require_isArray();
      function forEach2(collection, iteratee) {
        var func = isArray2(collection) ? arrayEach2 : baseEach2;
        return func(collection, castFunction2(iteratee));
      }
      module2.exports = forEach2;
    }
  });

  // react-user-mgmt/node_modules/lodash/_baseDifference.js
  var require_baseDifference = __commonJS({
    "react-user-mgmt/node_modules/lodash/_baseDifference.js"(exports2, module2) {
      var SetCache2 = require_SetCache();
      var arrayIncludes2 = require_arrayIncludes();
      var arrayIncludesWith2 = require_arrayIncludesWith();
      var arrayMap2 = require_arrayMap();
      var baseUnary2 = require_baseUnary();
      var cacheHas2 = require_cacheHas();
      var LARGE_ARRAY_SIZE4 = 200;
      function baseDifference2(array, values3, iteratee, comparator) {
        var index = -1, includes = arrayIncludes2, isCommon = true, length2 = array.length, result = [], valuesLength = values3.length;
        if (!length2) {
          return result;
        }
        if (iteratee) {
          values3 = arrayMap2(values3, baseUnary2(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith2;
          isCommon = false;
        } else if (values3.length >= LARGE_ARRAY_SIZE4) {
          includes = cacheHas2;
          isCommon = false;
          values3 = new SetCache2(values3);
        }
        outer:
          while (++index < length2) {
            var value = array[index], computed = iteratee == null ? value : iteratee(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values3[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            } else if (!includes(values3, computed, comparator)) {
              result.push(value);
            }
          }
        return result;
      }
      module2.exports = baseDifference2;
    }
  });

  // react-user-mgmt/node_modules/lodash/without.js
  var require_without = __commonJS({
    "react-user-mgmt/node_modules/lodash/without.js"(exports2, module2) {
      var baseDifference2 = require_baseDifference();
      var baseRest2 = require_baseRest();
      var isArrayLikeObject2 = require_isArrayLikeObject();
      var without = baseRest2(function(array, values3) {
        return isArrayLikeObject2(array) ? baseDifference2(array, values3) : [];
      });
      module2.exports = without;
    }
  });

  // react-user-mgmt/node_modules/json-schema-merge-allof/src/common.js
  var require_common = __commonJS({
    "react-user-mgmt/node_modules/json-schema-merge-allof/src/common.js"(exports2, module2) {
      var flatten2 = require_flatten();
      var flattenDeep2 = require_flattenDeep();
      var isPlainObject4 = require_isPlainObject();
      var uniq2 = require_uniq();
      var uniqWith = require_uniqWith();
      var without = require_without();
      function deleteUndefinedProps(returnObject) {
        for (const prop in returnObject) {
          if (has2(returnObject, prop) && isEmptySchema(returnObject[prop])) {
            delete returnObject[prop];
          }
        }
        return returnObject;
      }
      var allUniqueKeys = (arr) => uniq2(flattenDeep2(arr.map(keys2)));
      var getValues = (schemas, key) => schemas.map((schema) => schema && schema[key]);
      var has2 = (obj, propName) => Object.prototype.hasOwnProperty.call(obj, propName);
      var keys2 = (obj) => {
        if (isPlainObject4(obj) || Array.isArray(obj)) {
          return Object.keys(obj);
        } else {
          return [];
        }
      };
      var notUndefined = (val) => val !== void 0;
      var isSchema = (val) => isPlainObject4(val) || val === true || val === false;
      var isEmptySchema = (obj) => !keys2(obj).length && obj !== false && obj !== true;
      var withoutArr = (arr, ...rest) => without.apply(null, [arr].concat(flatten2(rest)));
      module2.exports = {
        allUniqueKeys,
        deleteUndefinedProps,
        getValues,
        has: has2,
        isEmptySchema,
        isSchema,
        keys: keys2,
        notUndefined,
        uniqWith,
        withoutArr
      };
    }
  });

  // react-user-mgmt/node_modules/json-schema-merge-allof/src/complex-resolvers/properties.js
  var require_properties = __commonJS({
    "react-user-mgmt/node_modules/json-schema-merge-allof/src/complex-resolvers/properties.js"(exports2, module2) {
      var compare = require_src();
      var forEach2 = require_forEach();
      var {
        allUniqueKeys,
        deleteUndefinedProps,
        getValues,
        keys: keys2,
        notUndefined,
        uniqWith,
        withoutArr
      } = require_common();
      function removeFalseSchemas(target) {
        forEach2(target, function(schema, prop) {
          if (schema === false) {
            delete target[prop];
          }
        });
      }
      function mergeSchemaGroup(group, mergeSchemas2) {
        const allKeys = allUniqueKeys(group);
        return allKeys.reduce(function(all, key) {
          const schemas = getValues(group, key);
          const compacted = uniqWith(schemas.filter(notUndefined), compare);
          all[key] = mergeSchemas2(compacted, key);
          return all;
        }, {});
      }
      module2.exports = {
        keywords: ["properties", "patternProperties", "additionalProperties"],
        resolver(values3, parents, mergers, options) {
          if (!options.ignoreAdditionalProperties) {
            values3.forEach(function(subSchema) {
              const otherSubSchemas = values3.filter((s2) => s2 !== subSchema);
              const ownKeys = keys2(subSchema.properties);
              const ownPatternKeys = keys2(subSchema.patternProperties);
              const ownPatterns = ownPatternKeys.map((k2) => new RegExp(k2));
              otherSubSchemas.forEach(function(other) {
                const allOtherKeys = keys2(other.properties);
                const keysMatchingPattern = allOtherKeys.filter((k2) => ownPatterns.some((pk) => pk.test(k2)));
                const additionalKeys = withoutArr(allOtherKeys, ownKeys, keysMatchingPattern);
                additionalKeys.forEach(function(key) {
                  other.properties[key] = mergers.properties([
                    other.properties[key],
                    subSchema.additionalProperties
                  ], key);
                });
              });
            });
            values3.forEach(function(subSchema) {
              const otherSubSchemas = values3.filter((s2) => s2 !== subSchema);
              const ownPatternKeys = keys2(subSchema.patternProperties);
              if (subSchema.additionalProperties === false) {
                otherSubSchemas.forEach(function(other) {
                  const allOtherPatterns = keys2(other.patternProperties);
                  const additionalPatternKeys = withoutArr(allOtherPatterns, ownPatternKeys);
                  additionalPatternKeys.forEach((key) => delete other.patternProperties[key]);
                });
              }
            });
          }
          const returnObject = {
            additionalProperties: mergers.additionalProperties(values3.map((s2) => s2.additionalProperties)),
            patternProperties: mergeSchemaGroup(values3.map((s2) => s2.patternProperties), mergers.patternProperties),
            properties: mergeSchemaGroup(values3.map((s2) => s2.properties), mergers.properties)
          };
          if (returnObject.additionalProperties === false) {
            removeFalseSchemas(returnObject.properties);
          }
          return deleteUndefinedProps(returnObject);
        }
      };
    }
  });

  // react-user-mgmt/node_modules/json-schema-merge-allof/src/complex-resolvers/items.js
  var require_items = __commonJS({
    "react-user-mgmt/node_modules/json-schema-merge-allof/src/complex-resolvers/items.js"(exports2, module2) {
      var compare = require_src();
      var forEach2 = require_forEach();
      var {
        allUniqueKeys,
        deleteUndefinedProps,
        has: has2,
        isSchema,
        notUndefined,
        uniqWith
      } = require_common();
      function removeFalseSchemasFromArray(target) {
        forEach2(target, function(schema, index) {
          if (schema === false) {
            target.splice(index, 1);
          }
        });
      }
      function getItemSchemas(subSchemas, key) {
        return subSchemas.map(function(sub) {
          if (!sub) {
            return void 0;
          }
          if (Array.isArray(sub.items)) {
            const schemaAtPos = sub.items[key];
            if (isSchema(schemaAtPos)) {
              return schemaAtPos;
            } else if (has2(sub, "additionalItems")) {
              return sub.additionalItems;
            }
          } else {
            return sub.items;
          }
          return void 0;
        });
      }
      function getAdditionalSchemas(subSchemas) {
        return subSchemas.map(function(sub) {
          if (!sub) {
            return void 0;
          }
          if (Array.isArray(sub.items)) {
            return sub.additionalItems;
          }
          return sub.items;
        });
      }
      function mergeItems(group, mergeSchemas2, items) {
        const allKeys = allUniqueKeys(items);
        return allKeys.reduce(function(all, key) {
          const schemas = getItemSchemas(group, key);
          const compacted = uniqWith(schemas.filter(notUndefined), compare);
          all[key] = mergeSchemas2(compacted, key);
          return all;
        }, []);
      }
      module2.exports = {
        keywords: ["items", "additionalItems"],
        resolver(values3, parents, mergers) {
          const items = values3.map((s2) => s2.items);
          const itemsCompacted = items.filter(notUndefined);
          const returnObject = {};
          if (itemsCompacted.every(isSchema)) {
            returnObject.items = mergers.items(items);
          } else {
            returnObject.items = mergeItems(values3, mergers.items, items);
          }
          let schemasAtLastPos;
          if (itemsCompacted.every(Array.isArray)) {
            schemasAtLastPos = values3.map((s2) => s2.additionalItems);
          } else if (itemsCompacted.some(Array.isArray)) {
            schemasAtLastPos = getAdditionalSchemas(values3);
          }
          if (schemasAtLastPos) {
            returnObject.additionalItems = mergers.additionalItems(schemasAtLastPos);
          }
          if (returnObject.additionalItems === false && Array.isArray(returnObject.items)) {
            removeFalseSchemasFromArray(returnObject.items);
          }
          return deleteUndefinedProps(returnObject);
        }
      };
    }
  });

  // react-user-mgmt/node_modules/json-schema-merge-allof/src/index.js
  var require_src2 = __commonJS({
    "react-user-mgmt/node_modules/json-schema-merge-allof/src/index.js"(exports2, module2) {
      var cloneDeep2 = require_cloneDeep();
      var compare = require_src();
      var computeLcm = require_lib7();
      var defaultsDeep = require_defaultsDeep();
      var flatten2 = require_flatten();
      var flattenDeep2 = require_flattenDeep();
      var intersection = require_intersection();
      var intersectionWith = require_intersectionWith();
      var isEqual = require_isEqual();
      var isPlainObject4 = require_isPlainObject();
      var pullAll = require_pullAll();
      var sortBy = require_sortBy();
      var uniq2 = require_uniq();
      var uniqWith = require_uniqWith();
      var propertiesResolver = require_properties();
      var itemsResolver = require_items();
      var contains = (arr, val) => arr.indexOf(val) !== -1;
      var isSchema = (val) => isPlainObject4(val) || val === true || val === false;
      var isFalse = (val) => val === false;
      var isTrue = (val) => val === true;
      var schemaResolver = (compacted, key, mergeSchemas2) => mergeSchemas2(compacted);
      var stringArray = (values3) => sortBy(uniq2(flattenDeep2(values3)));
      var notUndefined = (val) => val !== void 0;
      var allUniqueKeys = (arr) => uniq2(flattenDeep2(arr.map(keys2)));
      var first = (compacted) => compacted[0];
      var required = (compacted) => stringArray(compacted);
      var maximumValue = (compacted) => Math.max.apply(Math, compacted);
      var minimumValue = (compacted) => Math.min.apply(Math, compacted);
      var uniqueItems = (compacted) => compacted.some(isTrue);
      var examples = (compacted) => uniqWith(flatten2(compacted), isEqual);
      function compareProp(key) {
        return function(a2, b2) {
          return compare({
            [key]: a2
          }, { [key]: b2 });
        };
      }
      function getAllOf(schema) {
        let { allOf = [], ...copy2 } = schema;
        copy2 = isPlainObject4(schema) ? copy2 : schema;
        return [copy2, ...allOf.map(getAllOf)];
      }
      function getValues(schemas, key) {
        return schemas.map((schema) => schema && schema[key]);
      }
      function tryMergeSchemaGroups(schemaGroups, mergeSchemas2) {
        return schemaGroups.map(function(schemas, index) {
          try {
            return mergeSchemas2(schemas, index);
          } catch (e2) {
            return void 0;
          }
        }).filter(notUndefined);
      }
      function keys2(obj) {
        if (isPlainObject4(obj) || Array.isArray(obj)) {
          return Object.keys(obj);
        } else {
          return [];
        }
      }
      function getAnyOfCombinations(arrOfArrays, combinations) {
        combinations = combinations || [];
        if (!arrOfArrays.length) {
          return combinations;
        }
        const values3 = arrOfArrays.slice(0).shift();
        const rest = arrOfArrays.slice(1);
        if (combinations.length) {
          return getAnyOfCombinations(rest, flatten2(combinations.map((combination) => values3.map((item) => [item].concat(combination)))));
        }
        return getAnyOfCombinations(rest, values3.map((item) => item));
      }
      function throwIncompatible(values3, paths) {
        let asJSON;
        try {
          asJSON = values3.map(function(val) {
            return JSON.stringify(val, null, 2);
          }).join("\n");
        } catch (variable) {
          asJSON = values3.join(", ");
        }
        throw new Error('Could not resolve values for path:"' + paths.join(".") + '". They are probably incompatible. Values: \n' + asJSON);
      }
      function callGroupResolver(complexKeywords, resolverName, schemas, mergeSchemas2, options, parents) {
        if (complexKeywords.length) {
          const resolverConfig = options.complexResolvers[resolverName];
          if (!resolverConfig || !resolverConfig.resolver) {
            throw new Error("No resolver found for " + resolverName);
          }
          const extractedKeywordsOnly = schemas.map((schema) => complexKeywords.reduce((all, key) => {
            if (schema[key] !== void 0) all[key] = schema[key];
            return all;
          }, {}));
          const unique = uniqWith(extractedKeywordsOnly, compare);
          const mergers = resolverConfig.keywords.reduce((all, key) => ({
            ...all,
            [key]: (schemas2, extraKey = []) => mergeSchemas2(schemas2, null, parents.concat(key, extraKey))
          }), {});
          const result = resolverConfig.resolver(unique, parents.concat(resolverName), mergers, options);
          if (!isPlainObject4(result)) {
            throwIncompatible(unique, parents.concat(resolverName));
          }
          return result;
        }
      }
      function createRequiredMetaArray(arr) {
        return { required: arr };
      }
      var schemaGroupProps = ["properties", "patternProperties", "definitions", "dependencies"];
      var schemaArrays = ["anyOf", "oneOf"];
      var schemaProps = [
        "additionalProperties",
        "additionalItems",
        "contains",
        "propertyNames",
        "not",
        "items"
      ];
      var defaultResolvers = {
        type(compacted) {
          if (compacted.some(Array.isArray)) {
            const normalized = compacted.map(function(val) {
              return Array.isArray(val) ? val : [val];
            });
            const common2 = intersection.apply(null, normalized);
            if (common2.length === 1) {
              return common2[0];
            } else if (common2.length > 1) {
              return uniq2(common2);
            }
          }
        },
        dependencies(compacted, paths, mergeSchemas2) {
          const allChildren = allUniqueKeys(compacted);
          return allChildren.reduce(function(all, childKey) {
            const childSchemas = getValues(compacted, childKey);
            let innerCompacted = uniqWith(childSchemas.filter(notUndefined), isEqual);
            const innerArrays = innerCompacted.filter(Array.isArray);
            if (innerArrays.length) {
              if (innerArrays.length === innerCompacted.length) {
                all[childKey] = stringArray(innerCompacted);
              } else {
                const innerSchemas = innerCompacted.filter(isSchema);
                const arrayMetaScheams = innerArrays.map(createRequiredMetaArray);
                all[childKey] = mergeSchemas2(innerSchemas.concat(arrayMetaScheams), childKey);
              }
              return all;
            }
            innerCompacted = uniqWith(innerCompacted, compare);
            all[childKey] = mergeSchemas2(innerCompacted, childKey);
            return all;
          }, {});
        },
        oneOf(compacted, paths, mergeSchemas2) {
          const combinations = getAnyOfCombinations(cloneDeep2(compacted));
          const result = tryMergeSchemaGroups(combinations, mergeSchemas2);
          const unique = uniqWith(result, compare);
          if (unique.length) {
            return unique;
          }
        },
        not(compacted) {
          return { anyOf: compacted };
        },
        pattern(compacted) {
          return compacted.map((r3) => "(?=" + r3 + ")").join("");
        },
        multipleOf(compacted) {
          let integers = compacted.slice(0);
          let factor = 1;
          while (integers.some((n2) => !Number.isInteger(n2))) {
            integers = integers.map((n2) => n2 * 10);
            factor = factor * 10;
          }
          return computeLcm(integers) / factor;
        },
        enum(compacted) {
          const enums = intersectionWith.apply(null, compacted.concat(isEqual));
          if (enums.length) {
            return sortBy(enums);
          }
        }
      };
      defaultResolvers.$id = first;
      defaultResolvers.$ref = first;
      defaultResolvers.$schema = first;
      defaultResolvers.additionalItems = schemaResolver;
      defaultResolvers.additionalProperties = schemaResolver;
      defaultResolvers.anyOf = defaultResolvers.oneOf;
      defaultResolvers.contains = schemaResolver;
      defaultResolvers.default = first;
      defaultResolvers.definitions = defaultResolvers.dependencies;
      defaultResolvers.description = first;
      defaultResolvers.examples = examples;
      defaultResolvers.exclusiveMaximum = minimumValue;
      defaultResolvers.exclusiveMinimum = maximumValue;
      defaultResolvers.items = itemsResolver;
      defaultResolvers.maximum = minimumValue;
      defaultResolvers.maxItems = minimumValue;
      defaultResolvers.maxLength = minimumValue;
      defaultResolvers.maxProperties = minimumValue;
      defaultResolvers.minimum = maximumValue;
      defaultResolvers.minItems = maximumValue;
      defaultResolvers.minLength = maximumValue;
      defaultResolvers.minProperties = maximumValue;
      defaultResolvers.properties = propertiesResolver;
      defaultResolvers.propertyNames = schemaResolver;
      defaultResolvers.required = required;
      defaultResolvers.title = first;
      defaultResolvers.uniqueItems = uniqueItems;
      var defaultComplexResolvers = {
        properties: propertiesResolver,
        items: itemsResolver
      };
      function merger(rootSchema, options, totalSchemas) {
        totalSchemas = totalSchemas || [];
        options = defaultsDeep(options, {
          ignoreAdditionalProperties: false,
          resolvers: defaultResolvers,
          complexResolvers: defaultComplexResolvers,
          deep: true
        });
        const complexResolvers = Object.entries(options.complexResolvers);
        function mergeSchemas2(schemas, base, parents) {
          schemas = cloneDeep2(schemas.filter(notUndefined));
          parents = parents || [];
          const merged2 = isPlainObject4(base) ? base : {};
          if (!schemas.length) {
            return;
          }
          if (schemas.some(isFalse)) {
            return false;
          }
          if (schemas.every(isTrue)) {
            return true;
          }
          schemas = schemas.filter(isPlainObject4);
          const allKeys = allUniqueKeys(schemas);
          if (options.deep && contains(allKeys, "allOf")) {
            return merger({
              allOf: schemas
            }, options, totalSchemas);
          }
          const complexKeysArr = complexResolvers.map(([mainKeyWord, resolverConf]) => allKeys.filter((k2) => resolverConf.keywords.includes(k2)));
          complexKeysArr.forEach((keys3) => pullAll(allKeys, keys3));
          allKeys.forEach(function(key) {
            const values3 = getValues(schemas, key);
            const compacted = uniqWith(values3.filter(notUndefined), compareProp(key));
            if (compacted.length === 1 && contains(schemaArrays, key)) {
              merged2[key] = compacted[0].map((schema) => mergeSchemas2([schema], schema));
            } else if (compacted.length === 1 && !contains(schemaGroupProps, key) && !contains(schemaProps, key)) {
              merged2[key] = compacted[0];
            } else {
              const resolver = options.resolvers[key] || options.resolvers.defaultResolver;
              if (!resolver) throw new Error("No resolver found for key " + key + ". You can provide a resolver for this keyword in the options, or provide a default resolver.");
              const merger2 = (schemas2, extraKey = []) => mergeSchemas2(schemas2, null, parents.concat(key, extraKey));
              merged2[key] = resolver(compacted, parents.concat(key), merger2, options);
              if (merged2[key] === void 0) {
                throwIncompatible(compacted, parents.concat(key));
              } else if (merged2[key] === void 0) {
                delete merged2[key];
              }
            }
          });
          return complexResolvers.reduce((all, [resolverKeyword, config], index) => ({
            ...all,
            ...callGroupResolver(complexKeysArr[index], resolverKeyword, schemas, mergeSchemas2, options, parents)
          }), merged2);
        }
        const allSchemas = flattenDeep2(getAllOf(rootSchema));
        const merged = mergeSchemas2(allSchemas);
        return merged;
      }
      merger.options = {
        resolvers: defaultResolvers
      };
      module2.exports = merger;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/utils/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development4 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/utils/node_modules/react-is/cjs/react-is.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment21 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports2.ContextConsumer = ContextConsumer;
          exports2.ContextProvider = ContextProvider;
          exports2.Element = Element2;
          exports2.ForwardRef = ForwardRef2;
          exports2.Fragment = Fragment21;
          exports2.Lazy = Lazy;
          exports2.Memo = Memo2;
          exports2.Portal = Portal3;
          exports2.Profiler = Profiler;
          exports2.StrictMode = StrictMode2;
          exports2.Suspense = Suspense;
          exports2.SuspenseList = SuspenseList;
          exports2.isAsyncMode = isAsyncMode;
          exports2.isConcurrentMode = isConcurrentMode;
          exports2.isContextConsumer = isContextConsumer;
          exports2.isContextProvider = isContextProvider;
          exports2.isElement = isElement;
          exports2.isForwardRef = isForwardRef;
          exports2.isFragment = isFragment4;
          exports2.isLazy = isLazy;
          exports2.isMemo = isMemo;
          exports2.isPortal = isPortal;
          exports2.isProfiler = isProfiler;
          exports2.isStrictMode = isStrictMode;
          exports2.isSuspense = isSuspense;
          exports2.isSuspenseList = isSuspenseList;
          exports2.isValidElementType = isValidElementType2;
          exports2.typeOf = typeOf;
        })();
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/utils/node_modules/react-is/index.js
  var require_react_is4 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/utils/node_modules/react-is/index.js"(exports2, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development4();
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/codegen/code.js
  var require_code = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/codegen/code.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.regexpCode = exports2.getEsmExportName = exports2.getProperty = exports2.safeStringify = exports2.stringify = exports2.strConcat = exports2.addCodeArg = exports2.str = exports2._ = exports2.nil = exports2._Code = exports2.Name = exports2.IDENTIFIER = exports2._CodeOrName = void 0;
      var _CodeOrName = class {
      };
      exports2._CodeOrName = _CodeOrName;
      exports2.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
      var Name = class extends _CodeOrName {
        constructor(s2) {
          super();
          if (!exports2.IDENTIFIER.test(s2))
            throw new Error("CodeGen: name must be a valid identifier");
          this.str = s2;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          return false;
        }
        get names() {
          return { [this.str]: 1 };
        }
      };
      exports2.Name = Name;
      var _Code = class extends _CodeOrName {
        constructor(code) {
          super();
          this._items = typeof code === "string" ? [code] : code;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          if (this._items.length > 1)
            return false;
          const item = this._items[0];
          return item === "" || item === '""';
        }
        get str() {
          var _a;
          return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s2, c2) => `${s2}${c2}`, "");
        }
        get names() {
          var _a;
          return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c2) => {
            if (c2 instanceof Name)
              names[c2.str] = (names[c2.str] || 0) + 1;
            return names;
          }, {});
        }
      };
      exports2._Code = _Code;
      exports2.nil = new _Code("");
      function _2(strs, ...args) {
        const code = [strs[0]];
        let i2 = 0;
        while (i2 < args.length) {
          addCodeArg(code, args[i2]);
          code.push(strs[++i2]);
        }
        return new _Code(code);
      }
      exports2._ = _2;
      var plus = new _Code("+");
      function str(strs, ...args) {
        const expr = [safeStringify(strs[0])];
        let i2 = 0;
        while (i2 < args.length) {
          expr.push(plus);
          addCodeArg(expr, args[i2]);
          expr.push(plus, safeStringify(strs[++i2]));
        }
        optimize(expr);
        return new _Code(expr);
      }
      exports2.str = str;
      function addCodeArg(code, arg2) {
        if (arg2 instanceof _Code)
          code.push(...arg2._items);
        else if (arg2 instanceof Name)
          code.push(arg2);
        else
          code.push(interpolate(arg2));
      }
      exports2.addCodeArg = addCodeArg;
      function optimize(expr) {
        let i2 = 1;
        while (i2 < expr.length - 1) {
          if (expr[i2] === plus) {
            const res = mergeExprItems(expr[i2 - 1], expr[i2 + 1]);
            if (res !== void 0) {
              expr.splice(i2 - 1, 3, res);
              continue;
            }
            expr[i2++] = "+";
          }
          i2++;
        }
      }
      function mergeExprItems(a2, b2) {
        if (b2 === '""')
          return a2;
        if (a2 === '""')
          return b2;
        if (typeof a2 == "string") {
          if (b2 instanceof Name || a2[a2.length - 1] !== '"')
            return;
          if (typeof b2 != "string")
            return `${a2.slice(0, -1)}${b2}"`;
          if (b2[0] === '"')
            return a2.slice(0, -1) + b2.slice(1);
          return;
        }
        if (typeof b2 == "string" && b2[0] === '"' && !(a2 instanceof Name))
          return `"${a2}${b2.slice(1)}`;
        return;
      }
      function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
      }
      exports2.strConcat = strConcat;
      function interpolate(x2) {
        return typeof x2 == "number" || typeof x2 == "boolean" || x2 === null ? x2 : safeStringify(Array.isArray(x2) ? x2.join(",") : x2);
      }
      function stringify2(x2) {
        return new _Code(safeStringify(x2));
      }
      exports2.stringify = stringify2;
      function safeStringify(x2) {
        return JSON.stringify(x2).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      exports2.safeStringify = safeStringify;
      function getProperty(key) {
        return typeof key == "string" && exports2.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _2`[${key}]`;
      }
      exports2.getProperty = getProperty;
      function getEsmExportName(key) {
        if (typeof key == "string" && exports2.IDENTIFIER.test(key)) {
          return new _Code(`${key}`);
        }
        throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
      }
      exports2.getEsmExportName = getEsmExportName;
      function regexpCode(rx) {
        return new _Code(rx.toString());
      }
      exports2.regexpCode = regexpCode;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/codegen/scope.js
  var require_scope = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/codegen/scope.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ValueScope = exports2.ValueScopeName = exports2.Scope = exports2.varKinds = exports2.UsedValueState = void 0;
      var code_1 = require_code();
      var ValueError = class extends Error {
        constructor(name) {
          super(`CodeGen: "code" for ${name} not defined`);
          this.value = name.value;
        }
      };
      var UsedValueState;
      (function(UsedValueState2) {
        UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
        UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
      })(UsedValueState || (exports2.UsedValueState = UsedValueState = {}));
      exports2.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var")
      };
      var Scope = class {
        constructor({ prefixes, parent: parent2 } = {}) {
          this._names = {};
          this._prefixes = prefixes;
          this._parent = parent2;
        }
        toName(nameOrPrefix) {
          return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
        }
        name(prefix2) {
          return new code_1.Name(this._newName(prefix2));
        }
        _newName(prefix2) {
          const ng = this._names[prefix2] || this._nameGroup(prefix2);
          return `${prefix2}${ng.index++}`;
        }
        _nameGroup(prefix2) {
          var _a, _b;
          if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix2)) || this._prefixes && !this._prefixes.has(prefix2)) {
            throw new Error(`CodeGen: prefix "${prefix2}" is not allowed in this scope`);
          }
          return this._names[prefix2] = { prefix: prefix2, index: 0 };
        }
      };
      exports2.Scope = Scope;
      var ValueScopeName = class extends code_1.Name {
        constructor(prefix2, nameStr) {
          super(nameStr);
          this.prefix = prefix2;
        }
        setValue(value, { property: property2, itemIndex }) {
          this.value = value;
          this.scopePath = (0, code_1._)`.${new code_1.Name(property2)}[${itemIndex}]`;
        }
      };
      exports2.ValueScopeName = ValueScopeName;
      var line2 = (0, code_1._)`\n`;
      var ValueScope = class extends Scope {
        constructor(opts) {
          super(opts);
          this._values = {};
          this._scope = opts.scope;
          this.opts = { ...opts, _n: opts.lines ? line2 : code_1.nil };
        }
        get() {
          return this._scope;
        }
        name(prefix2) {
          return new ValueScopeName(prefix2, this._newName(prefix2));
        }
        value(nameOrPrefix, value) {
          var _a;
          if (value.ref === void 0)
            throw new Error("CodeGen: ref must be passed in value");
          const name = this.toName(nameOrPrefix);
          const { prefix: prefix2 } = name;
          const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
          let vs = this._values[prefix2];
          if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
              return _name;
          } else {
            vs = this._values[prefix2] = /* @__PURE__ */ new Map();
          }
          vs.set(valueKey, name);
          const s2 = this._scope[prefix2] || (this._scope[prefix2] = []);
          const itemIndex = s2.length;
          s2[itemIndex] = value.ref;
          name.setValue(value, { property: prefix2, itemIndex });
          return name;
        }
        getValue(prefix2, keyOrRef) {
          const vs = this._values[prefix2];
          if (!vs)
            return;
          return vs.get(keyOrRef);
        }
        scopeRefs(scopeName, values3 = this._values) {
          return this._reduceValues(values3, (name) => {
            if (name.scopePath === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._)`${scopeName}${name.scopePath}`;
          });
        }
        scopeCode(values3 = this._values, usedValues, getCode) {
          return this._reduceValues(values3, (name) => {
            if (name.value === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
          }, usedValues, getCode);
        }
        _reduceValues(values3, valueCode, usedValues = {}, getCode) {
          let code = code_1.nil;
          for (const prefix2 in values3) {
            const vs = values3[prefix2];
            if (!vs)
              continue;
            const nameSet = usedValues[prefix2] = usedValues[prefix2] || /* @__PURE__ */ new Map();
            vs.forEach((name) => {
              if (nameSet.has(name))
                return;
              nameSet.set(name, UsedValueState.Started);
              let c2 = valueCode(name);
              if (c2) {
                const def = this.opts.es5 ? exports2.varKinds.var : exports2.varKinds.const;
                code = (0, code_1._)`${code}${def} ${name} = ${c2};${this.opts._n}`;
              } else if (c2 = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
                code = (0, code_1._)`${code}${c2}${this.opts._n}`;
              } else {
                throw new ValueError(name);
              }
              nameSet.set(name, UsedValueState.Completed);
            });
          }
          return code;
        }
      };
      exports2.ValueScope = ValueScope;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/codegen/index.js
  var require_codegen = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/codegen/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.or = exports2.and = exports2.not = exports2.CodeGen = exports2.operators = exports2.varKinds = exports2.ValueScopeName = exports2.ValueScope = exports2.Scope = exports2.Name = exports2.regexpCode = exports2.stringify = exports2.getProperty = exports2.nil = exports2.strConcat = exports2.str = exports2._ = void 0;
      var code_1 = require_code();
      var scope_1 = require_scope();
      var code_2 = require_code();
      Object.defineProperty(exports2, "_", { enumerable: true, get: function() {
        return code_2._;
      } });
      Object.defineProperty(exports2, "str", { enumerable: true, get: function() {
        return code_2.str;
      } });
      Object.defineProperty(exports2, "strConcat", { enumerable: true, get: function() {
        return code_2.strConcat;
      } });
      Object.defineProperty(exports2, "nil", { enumerable: true, get: function() {
        return code_2.nil;
      } });
      Object.defineProperty(exports2, "getProperty", { enumerable: true, get: function() {
        return code_2.getProperty;
      } });
      Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
        return code_2.stringify;
      } });
      Object.defineProperty(exports2, "regexpCode", { enumerable: true, get: function() {
        return code_2.regexpCode;
      } });
      Object.defineProperty(exports2, "Name", { enumerable: true, get: function() {
        return code_2.Name;
      } });
      var scope_2 = require_scope();
      Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
        return scope_2.Scope;
      } });
      Object.defineProperty(exports2, "ValueScope", { enumerable: true, get: function() {
        return scope_2.ValueScope;
      } });
      Object.defineProperty(exports2, "ValueScopeName", { enumerable: true, get: function() {
        return scope_2.ValueScopeName;
      } });
      Object.defineProperty(exports2, "varKinds", { enumerable: true, get: function() {
        return scope_2.varKinds;
      } });
      exports2.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+")
      };
      var Node = class {
        optimizeNodes() {
          return this;
        }
        optimizeNames(_names, _constants) {
          return this;
        }
      };
      var Def = class extends Node {
        constructor(varKind, name, rhs) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.rhs = rhs;
        }
        render({ es5, _n }) {
          const varKind = es5 ? scope_1.varKinds.var : this.varKind;
          const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
          return `${varKind} ${this.name}${rhs};` + _n;
        }
        optimizeNames(names, constants) {
          if (!names[this.name.str])
            return;
          if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names, constants);
          return this;
        }
        get names() {
          return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
        }
      };
      var Assign = class extends Node {
        constructor(lhs, rhs, sideEffects) {
          super();
          this.lhs = lhs;
          this.rhs = rhs;
          this.sideEffects = sideEffects;
        }
        render({ _n }) {
          return `${this.lhs} = ${this.rhs};` + _n;
        }
        optimizeNames(names, constants) {
          if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
            return;
          this.rhs = optimizeExpr(this.rhs, names, constants);
          return this;
        }
        get names() {
          const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
          return addExprNames(names, this.rhs);
        }
      };
      var AssignOp = class extends Assign {
        constructor(lhs, op, rhs, sideEffects) {
          super(lhs, rhs, sideEffects);
          this.op = op;
        }
        render({ _n }) {
          return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
        }
      };
      var Label2 = class extends Node {
        constructor(label) {
          super();
          this.label = label;
          this.names = {};
        }
        render({ _n }) {
          return `${this.label}:` + _n;
        }
      };
      var Break = class extends Node {
        constructor(label) {
          super();
          this.label = label;
          this.names = {};
        }
        render({ _n }) {
          const label = this.label ? ` ${this.label}` : "";
          return `break${label};` + _n;
        }
      };
      var Throw = class extends Node {
        constructor(error) {
          super();
          this.error = error;
        }
        render({ _n }) {
          return `throw ${this.error};` + _n;
        }
        get names() {
          return this.error.names;
        }
      };
      var AnyCode = class extends Node {
        constructor(code) {
          super();
          this.code = code;
        }
        render({ _n }) {
          return `${this.code};` + _n;
        }
        optimizeNodes() {
          return `${this.code}` ? this : void 0;
        }
        optimizeNames(names, constants) {
          this.code = optimizeExpr(this.code, names, constants);
          return this;
        }
        get names() {
          return this.code instanceof code_1._CodeOrName ? this.code.names : {};
        }
      };
      var ParentNode = class extends Node {
        constructor(nodes = []) {
          super();
          this.nodes = nodes;
        }
        render(opts) {
          return this.nodes.reduce((code, n2) => code + n2.render(opts), "");
        }
        optimizeNodes() {
          const { nodes } = this;
          let i2 = nodes.length;
          while (i2--) {
            const n2 = nodes[i2].optimizeNodes();
            if (Array.isArray(n2))
              nodes.splice(i2, 1, ...n2);
            else if (n2)
              nodes[i2] = n2;
            else
              nodes.splice(i2, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        optimizeNames(names, constants) {
          const { nodes } = this;
          let i2 = nodes.length;
          while (i2--) {
            const n2 = nodes[i2];
            if (n2.optimizeNames(names, constants))
              continue;
            subtractNames(names, n2.names);
            nodes.splice(i2, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        get names() {
          return this.nodes.reduce((names, n2) => addNames(names, n2.names), {});
        }
      };
      var BlockNode = class extends ParentNode {
        render(opts) {
          return "{" + opts._n + super.render(opts) + "}" + opts._n;
        }
      };
      var Root = class extends ParentNode {
      };
      var Else = class extends BlockNode {
      };
      Else.kind = "else";
      var If = class _If extends BlockNode {
        constructor(condition, nodes) {
          super(nodes);
          this.condition = condition;
        }
        render(opts) {
          let code = `if(${this.condition})` + super.render(opts);
          if (this.else)
            code += "else " + this.else.render(opts);
          return code;
        }
        optimizeNodes() {
          super.optimizeNodes();
          const cond = this.condition;
          if (cond === true)
            return this.nodes;
          let e2 = this.else;
          if (e2) {
            const ns = e2.optimizeNodes();
            e2 = this.else = Array.isArray(ns) ? new Else(ns) : ns;
          }
          if (e2) {
            if (cond === false)
              return e2 instanceof _If ? e2 : e2.nodes;
            if (this.nodes.length)
              return this;
            return new _If(not(cond), e2 instanceof _If ? [e2] : e2.nodes);
          }
          if (cond === false || !this.nodes.length)
            return void 0;
          return this;
        }
        optimizeNames(names, constants) {
          var _a;
          this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
          if (!(super.optimizeNames(names, constants) || this.else))
            return;
          this.condition = optimizeExpr(this.condition, names, constants);
          return this;
        }
        get names() {
          const names = super.names;
          addExprNames(names, this.condition);
          if (this.else)
            addNames(names, this.else.names);
          return names;
        }
      };
      If.kind = "if";
      var For = class extends BlockNode {
      };
      For.kind = "for";
      var ForLoop = class extends For {
        constructor(iteration) {
          super();
          this.iteration = iteration;
        }
        render(opts) {
          return `for(${this.iteration})` + super.render(opts);
        }
        optimizeNames(names, constants) {
          if (!super.optimizeNames(names, constants))
            return;
          this.iteration = optimizeExpr(this.iteration, names, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iteration.names);
        }
      };
      var ForRange = class extends For {
        constructor(varKind, name, from2, to) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.from = from2;
          this.to = to;
        }
        render(opts) {
          const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
          const { name, from: from2, to } = this;
          return `for(${varKind} ${name}=${from2}; ${name}<${to}; ${name}++)` + super.render(opts);
        }
        get names() {
          const names = addExprNames(super.names, this.from);
          return addExprNames(names, this.to);
        }
      };
      var ForIter = class extends For {
        constructor(loop, varKind, name, iterable) {
          super();
          this.loop = loop;
          this.varKind = varKind;
          this.name = name;
          this.iterable = iterable;
        }
        render(opts) {
          return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
        }
        optimizeNames(names, constants) {
          if (!super.optimizeNames(names, constants))
            return;
          this.iterable = optimizeExpr(this.iterable, names, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iterable.names);
        }
      };
      var Func = class extends BlockNode {
        constructor(name, args, async) {
          super();
          this.name = name;
          this.args = args;
          this.async = async;
        }
        render(opts) {
          const _async = this.async ? "async " : "";
          return `${_async}function ${this.name}(${this.args})` + super.render(opts);
        }
      };
      Func.kind = "func";
      var Return = class extends ParentNode {
        render(opts) {
          return "return " + super.render(opts);
        }
      };
      Return.kind = "return";
      var Try = class extends BlockNode {
        render(opts) {
          let code = "try" + super.render(opts);
          if (this.catch)
            code += this.catch.render(opts);
          if (this.finally)
            code += this.finally.render(opts);
          return code;
        }
        optimizeNodes() {
          var _a, _b;
          super.optimizeNodes();
          (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
          return this;
        }
        optimizeNames(names, constants) {
          var _a, _b;
          super.optimizeNames(names, constants);
          (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
          return this;
        }
        get names() {
          const names = super.names;
          if (this.catch)
            addNames(names, this.catch.names);
          if (this.finally)
            addNames(names, this.finally.names);
          return names;
        }
      };
      var Catch = class extends BlockNode {
        constructor(error) {
          super();
          this.error = error;
        }
        render(opts) {
          return `catch(${this.error})` + super.render(opts);
        }
      };
      Catch.kind = "catch";
      var Finally = class extends BlockNode {
        render(opts) {
          return "finally" + super.render(opts);
        }
      };
      Finally.kind = "finally";
      var CodeGen = class {
        constructor(extScope, opts = {}) {
          this._values = {};
          this._blockStarts = [];
          this._constants = {};
          this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
          this._extScope = extScope;
          this._scope = new scope_1.Scope({ parent: extScope });
          this._nodes = [new Root()];
        }
        toString() {
          return this._root.render(this.opts);
        }
        // returns unique name in the internal scope
        name(prefix2) {
          return this._scope.name(prefix2);
        }
        // reserves unique name in the external scope
        scopeName(prefix2) {
          return this._extScope.name(prefix2);
        }
        // reserves unique name in the external scope and assigns value to it
        scopeValue(prefixOrName, value) {
          const name = this._extScope.value(prefixOrName, value);
          const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
          vs.add(name);
          return name;
        }
        getScopeValue(prefix2, keyOrRef) {
          return this._extScope.getValue(prefix2, keyOrRef);
        }
        // return code that assigns values in the external scope to the names that are used internally
        // (same names that were returned by gen.scopeName or gen.scopeValue)
        scopeRefs(scopeName) {
          return this._extScope.scopeRefs(scopeName, this._values);
        }
        scopeCode() {
          return this._extScope.scopeCode(this._values);
        }
        _def(varKind, nameOrPrefix, rhs, constant2) {
          const name = this._scope.toName(nameOrPrefix);
          if (rhs !== void 0 && constant2)
            this._constants[name.str] = rhs;
          this._leafNode(new Def(varKind, name, rhs));
          return name;
        }
        // `const` declaration (`var` in es5 mode)
        const(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        }
        // `let` declaration with optional assignment (`var` in es5 mode)
        let(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        }
        // `var` declaration with optional assignment
        var(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        }
        // assignment code
        assign(lhs, rhs, sideEffects) {
          return this._leafNode(new Assign(lhs, rhs, sideEffects));
        }
        // `+=` code
        add(lhs, rhs) {
          return this._leafNode(new AssignOp(lhs, exports2.operators.ADD, rhs));
        }
        // appends passed SafeExpr to code or executes Block
        code(c2) {
          if (typeof c2 == "function")
            c2();
          else if (c2 !== code_1.nil)
            this._leafNode(new AnyCode(c2));
          return this;
        }
        // returns code for object literal for the passed argument list of key-value pairs
        object(...keyValues) {
          const code = ["{"];
          for (const [key, value] of keyValues) {
            if (code.length > 1)
              code.push(",");
            code.push(key);
            if (key !== value || this.opts.es5) {
              code.push(":");
              (0, code_1.addCodeArg)(code, value);
            }
          }
          code.push("}");
          return new code_1._Code(code);
        }
        // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
        if(condition, thenBody, elseBody) {
          this._blockNode(new If(condition));
          if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
          } else if (thenBody) {
            this.code(thenBody).endIf();
          } else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
          }
          return this;
        }
        // `else if` clause - invalid without `if` or after `else` clauses
        elseIf(condition) {
          return this._elseNode(new If(condition));
        }
        // `else` clause - only valid after `if` or `else if` clauses
        else() {
          return this._elseNode(new Else());
        }
        // end `if` statement (needed if gen.if was used only with condition)
        endIf() {
          return this._endBlockNode(If, Else);
        }
        _for(node2, forBody) {
          this._blockNode(node2);
          if (forBody)
            this.code(forBody).endFor();
          return this;
        }
        // a generic `for` clause (or statement if `forBody` is passed)
        for(iteration, forBody) {
          return this._for(new ForLoop(iteration), forBody);
        }
        // `for` statement for a range of values
        forRange(nameOrPrefix, from2, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForRange(varKind, name, from2, to), () => forBody(name));
        }
        // `for-of` statement (in es5 mode replace with a normal for loop)
        forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
          const name = this._scope.toName(nameOrPrefix);
          if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i2) => {
              this.var(name, (0, code_1._)`${arr}[${i2}]`);
              forBody(name);
            });
          }
          return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
        }
        // `for-in` statement.
        // With option `ownProperties` replaced with a `for-of` loop for object keys
        forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
          if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
          }
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
        }
        // end `for` loop
        endFor() {
          return this._endBlockNode(For);
        }
        // `label` statement
        label(label) {
          return this._leafNode(new Label2(label));
        }
        // `break` statement
        break(label) {
          return this._leafNode(new Break(label));
        }
        // `return` statement
        return(value) {
          const node2 = new Return();
          this._blockNode(node2);
          this.code(value);
          if (node2.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
          return this._endBlockNode(Return);
        }
        // `try` statement
        try(tryBody, catchCode, finallyCode) {
          if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
          const node2 = new Try();
          this._blockNode(node2);
          this.code(tryBody);
          if (catchCode) {
            const error = this.name("e");
            this._currNode = node2.catch = new Catch(error);
            catchCode(error);
          }
          if (finallyCode) {
            this._currNode = node2.finally = new Finally();
            this.code(finallyCode);
          }
          return this._endBlockNode(Catch, Finally);
        }
        // `throw` statement
        throw(error) {
          return this._leafNode(new Throw(error));
        }
        // start self-balancing block
        block(body2, nodeCount) {
          this._blockStarts.push(this._nodes.length);
          if (body2)
            this.code(body2).endBlock(nodeCount);
          return this;
        }
        // end the current self-balancing block
        endBlock(nodeCount) {
          const len = this._blockStarts.pop();
          if (len === void 0)
            throw new Error("CodeGen: not in self-balancing block");
          const toClose = this._nodes.length - len;
          if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
          }
          this._nodes.length = len;
          return this;
        }
        // `function` heading (or definition if funcBody is passed)
        func(name, args = code_1.nil, async, funcBody) {
          this._blockNode(new Func(name, args, async));
          if (funcBody)
            this.code(funcBody).endFunc();
          return this;
        }
        // end function definition
        endFunc() {
          return this._endBlockNode(Func);
        }
        optimize(n2 = 1) {
          while (n2-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
          }
        }
        _leafNode(node2) {
          this._currNode.nodes.push(node2);
          return this;
        }
        _blockNode(node2) {
          this._currNode.nodes.push(node2);
          this._nodes.push(node2);
        }
        _endBlockNode(N1, N2) {
          const n2 = this._currNode;
          if (n2 instanceof N1 || N2 && n2 instanceof N2) {
            this._nodes.pop();
            return this;
          }
          throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
        }
        _elseNode(node2) {
          const n2 = this._currNode;
          if (!(n2 instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
          }
          this._currNode = n2.else = node2;
          return this;
        }
        get _root() {
          return this._nodes[0];
        }
        get _currNode() {
          const ns = this._nodes;
          return ns[ns.length - 1];
        }
        set _currNode(node2) {
          const ns = this._nodes;
          ns[ns.length - 1] = node2;
        }
      };
      exports2.CodeGen = CodeGen;
      function addNames(names, from2) {
        for (const n2 in from2)
          names[n2] = (names[n2] || 0) + (from2[n2] || 0);
        return names;
      }
      function addExprNames(names, from2) {
        return from2 instanceof code_1._CodeOrName ? addNames(names, from2.names) : names;
      }
      function optimizeExpr(expr, names, constants) {
        if (expr instanceof code_1.Name)
          return replaceName(expr);
        if (!canOptimize(expr))
          return expr;
        return new code_1._Code(expr._items.reduce((items, c2) => {
          if (c2 instanceof code_1.Name)
            c2 = replaceName(c2);
          if (c2 instanceof code_1._Code)
            items.push(...c2._items);
          else
            items.push(c2);
          return items;
        }, []));
        function replaceName(n2) {
          const c2 = constants[n2.str];
          if (c2 === void 0 || names[n2.str] !== 1)
            return n2;
          delete names[n2.str];
          return c2;
        }
        function canOptimize(e2) {
          return e2 instanceof code_1._Code && e2._items.some((c2) => c2 instanceof code_1.Name && names[c2.str] === 1 && constants[c2.str] !== void 0);
        }
      }
      function subtractNames(names, from2) {
        for (const n2 in from2)
          names[n2] = (names[n2] || 0) - (from2[n2] || 0);
      }
      function not(x2) {
        return typeof x2 == "boolean" || typeof x2 == "number" || x2 === null ? !x2 : (0, code_1._)`!${par(x2)}`;
      }
      exports2.not = not;
      var andCode = mappend(exports2.operators.AND);
      function and(...args) {
        return args.reduce(andCode);
      }
      exports2.and = and;
      var orCode = mappend(exports2.operators.OR);
      function or(...args) {
        return args.reduce(orCode);
      }
      exports2.or = or;
      function mappend(op) {
        return (x2, y2) => x2 === code_1.nil ? y2 : y2 === code_1.nil ? x2 : (0, code_1._)`${par(x2)} ${op} ${par(y2)}`;
      }
      function par(x2) {
        return x2 instanceof code_1.Name ? x2 : (0, code_1._)`(${x2})`;
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/util.js
  var require_util = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/util.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.checkStrictMode = exports2.getErrorPath = exports2.Type = exports2.useFunc = exports2.setEvaluated = exports2.evaluatedPropsToName = exports2.mergeEvaluated = exports2.eachItem = exports2.unescapeJsonPointer = exports2.escapeJsonPointer = exports2.escapeFragment = exports2.unescapeFragment = exports2.schemaRefOrVal = exports2.schemaHasRulesButRef = exports2.schemaHasRules = exports2.checkUnknownRules = exports2.alwaysValidSchema = exports2.toHash = void 0;
      var codegen_1 = require_codegen();
      var code_1 = require_code();
      function toHash(arr) {
        const hash2 = {};
        for (const item of arr)
          hash2[item] = true;
        return hash2;
      }
      exports2.toHash = toHash;
      function alwaysValidSchema(it, schema) {
        if (typeof schema == "boolean")
          return schema;
        if (Object.keys(schema).length === 0)
          return true;
        checkUnknownRules(it, schema);
        return !schemaHasRules(schema, it.self.RULES.all);
      }
      exports2.alwaysValidSchema = alwaysValidSchema;
      function checkUnknownRules(it, schema = it.schema) {
        const { opts, self: self2 } = it;
        if (!opts.strictSchema)
          return;
        if (typeof schema === "boolean")
          return;
        const rules = self2.RULES.keywords;
        for (const key in schema) {
          if (!rules[key])
            checkStrictMode(it, `unknown keyword: "${key}"`);
        }
      }
      exports2.checkUnknownRules = checkUnknownRules;
      function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean")
          return !schema;
        for (const key in schema)
          if (rules[key])
            return true;
        return false;
      }
      exports2.schemaHasRules = schemaHasRules;
      function schemaHasRulesButRef(schema, RULES) {
        if (typeof schema == "boolean")
          return !schema;
        for (const key in schema)
          if (key !== "$ref" && RULES.all[key])
            return true;
        return false;
      }
      exports2.schemaHasRulesButRef = schemaHasRulesButRef;
      function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
        if (!$data) {
          if (typeof schema == "number" || typeof schema == "boolean")
            return schema;
          if (typeof schema == "string")
            return (0, codegen_1._)`${schema}`;
        }
        return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
      }
      exports2.schemaRefOrVal = schemaRefOrVal;
      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
      }
      exports2.unescapeFragment = unescapeFragment;
      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
      }
      exports2.escapeFragment = escapeFragment;
      function escapeJsonPointer(str) {
        if (typeof str == "number")
          return `${str}`;
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
      exports2.escapeJsonPointer = escapeJsonPointer;
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      exports2.unescapeJsonPointer = unescapeJsonPointer;
      function eachItem(xs, f2) {
        if (Array.isArray(xs)) {
          for (const x2 of xs)
            f2(x2);
        } else {
          f2(xs);
        }
      }
      exports2.eachItem = eachItem;
      function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
        return (gen, from2, to, toName) => {
          const res = to === void 0 ? from2 : to instanceof codegen_1.Name ? (from2 instanceof codegen_1.Name ? mergeNames(gen, from2, to) : mergeToName(gen, from2, to), to) : from2 instanceof codegen_1.Name ? (mergeToName(gen, to, from2), from2) : mergeValues(from2, to);
          return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
        };
      }
      exports2.mergeEvaluated = {
        props: makeMergeEvaluated({
          mergeNames: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true && ${from2} !== undefined`, () => {
            gen.if((0, codegen_1._)`${from2} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from2})`));
          }),
          mergeToName: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
            if (from2 === true) {
              gen.assign(to, true);
            } else {
              gen.assign(to, (0, codegen_1._)`${to} || {}`);
              setEvaluated(gen, to, from2);
            }
          }),
          mergeValues: (from2, to) => from2 === true ? true : { ...from2, ...to },
          resultToName: evaluatedPropsToName
        }),
        items: makeMergeEvaluated({
          mergeNames: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true && ${from2} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from2} === true ? true : ${to} > ${from2} ? ${to} : ${from2}`)),
          mergeToName: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from2 === true ? true : (0, codegen_1._)`${to} > ${from2} ? ${to} : ${from2}`)),
          mergeValues: (from2, to) => from2 === true ? true : Math.max(from2, to),
          resultToName: (gen, items) => gen.var("items", items)
        })
      };
      function evaluatedPropsToName(gen, ps) {
        if (ps === true)
          return gen.var("props", true);
        const props = gen.var("props", (0, codegen_1._)`{}`);
        if (ps !== void 0)
          setEvaluated(gen, props, ps);
        return props;
      }
      exports2.evaluatedPropsToName = evaluatedPropsToName;
      function setEvaluated(gen, props, ps) {
        Object.keys(ps).forEach((p2) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p2)}`, true));
      }
      exports2.setEvaluated = setEvaluated;
      var snippets = {};
      function useFunc(gen, f2) {
        return gen.scopeValue("func", {
          ref: f2,
          code: snippets[f2.code] || (snippets[f2.code] = new code_1._Code(f2.code))
        });
      }
      exports2.useFunc = useFunc;
      var Type;
      (function(Type2) {
        Type2[Type2["Num"] = 0] = "Num";
        Type2[Type2["Str"] = 1] = "Str";
      })(Type || (exports2.Type = Type = {}));
      function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
        if (dataProp instanceof codegen_1.Name) {
          const isNumber2 = dataPropType === Type.Num;
          return jsPropertySyntax ? isNumber2 ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber2 ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
        }
        return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
      }
      exports2.getErrorPath = getErrorPath;
      function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
        if (!mode)
          return;
        msg = `strict mode: ${msg}`;
        if (mode === true)
          throw new Error(msg);
        it.self.logger.warn(msg);
      }
      exports2.checkStrictMode = checkStrictMode;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/names.js
  var require_names = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/names.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var names = {
        // validation function arguments
        data: new codegen_1.Name("data"),
        // data passed to validation function
        // args passed from referencing schema
        valCxt: new codegen_1.Name("valCxt"),
        // validation/data context - should not be used directly, it is destructured to the names below
        instancePath: new codegen_1.Name("instancePath"),
        parentData: new codegen_1.Name("parentData"),
        parentDataProperty: new codegen_1.Name("parentDataProperty"),
        rootData: new codegen_1.Name("rootData"),
        // root data - same as the data passed to the first/top validation function
        dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
        // used to support recursiveRef and dynamicRef
        // function scoped variables
        vErrors: new codegen_1.Name("vErrors"),
        // null or array of validation errors
        errors: new codegen_1.Name("errors"),
        // counter of validation errors
        this: new codegen_1.Name("this"),
        // "globals"
        self: new codegen_1.Name("self"),
        scope: new codegen_1.Name("scope"),
        // JTD serialize/parse name for JSON string and position
        json: new codegen_1.Name("json"),
        jsonPos: new codegen_1.Name("jsonPos"),
        jsonLen: new codegen_1.Name("jsonLen"),
        jsonPart: new codegen_1.Name("jsonPart")
      };
      exports2.default = names;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/errors.js
  var require_errors = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/errors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.extendErrors = exports2.resetErrorsCount = exports2.reportExtraError = exports2.reportError = exports2.keyword$DataError = exports2.keywordError = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var names_1 = require_names();
      exports2.keywordError = {
        message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
      };
      exports2.keyword$DataError = {
        message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
      };
      function reportError2(cxt, error = exports2.keywordError, errorPaths, overrideAllErrors) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
          addError(gen, errObj);
        } else {
          returnErrors(it, (0, codegen_1._)`[${errObj}]`);
        }
      }
      exports2.reportError = reportError2;
      function reportExtraError(cxt, error = exports2.keywordError, errorPaths) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        addError(gen, errObj);
        if (!(compositeRule || allErrors)) {
          returnErrors(it, names_1.default.vErrors);
        }
      }
      exports2.reportExtraError = reportExtraError;
      function resetErrorsCount(gen, errsCount) {
        gen.assign(names_1.default.errors, errsCount);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
      }
      exports2.resetErrorsCount = resetErrorsCount;
      function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
        if (errsCount === void 0)
          throw new Error("ajv implementation error");
        const err = gen.name("err");
        gen.forRange("i", errsCount, names_1.default.errors, (i2) => {
          gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i2}]`);
          gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
          gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
          if (it.opts.verbose) {
            gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._)`${err}.data`, data);
          }
        });
      }
      exports2.extendErrors = extendErrors;
      function addError(gen, errObj) {
        const err = gen.const("err", errObj);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
        gen.code((0, codegen_1._)`${names_1.default.errors}++`);
      }
      function returnErrors(it, errs) {
        const { gen, validateName, schemaEnv } = it;
        if (schemaEnv.$async) {
          gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
          gen.return(false);
        }
      }
      var E2 = {
        keyword: new codegen_1.Name("keyword"),
        schemaPath: new codegen_1.Name("schemaPath"),
        // also used in JTD errors
        params: new codegen_1.Name("params"),
        propertyName: new codegen_1.Name("propertyName"),
        message: new codegen_1.Name("message"),
        schema: new codegen_1.Name("schema"),
        parentSchema: new codegen_1.Name("parentSchema")
      };
      function errorObjectCode(cxt, error, errorPaths) {
        const { createErrors } = cxt.it;
        if (createErrors === false)
          return (0, codegen_1._)`{}`;
        return errorObject(cxt, error, errorPaths);
      }
      function errorObject(cxt, error, errorPaths = {}) {
        const { gen, it } = cxt;
        const keyValues = [
          errorInstancePath(it, errorPaths),
          errorSchemaPath(cxt, errorPaths)
        ];
        extraErrorProps(cxt, error, keyValues);
        return gen.object(...keyValues);
      }
      function errorInstancePath({ errorPath }, { instancePath }) {
        const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
        return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
      }
      function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
        let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
        if (schemaPath) {
          schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
        }
        return [E2.schemaPath, schPath];
      }
      function extraErrorProps(cxt, { params, message }, keyValues) {
        const { keyword, data, schemaValue, it } = cxt;
        const { opts, propertyName, topSchemaRef, schemaPath } = it;
        keyValues.push([E2.keyword, keyword], [E2.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
        if (opts.messages) {
          keyValues.push([E2.message, typeof message == "function" ? message(cxt) : message]);
        }
        if (opts.verbose) {
          keyValues.push([E2.schema, schemaValue], [E2.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
        }
        if (propertyName)
          keyValues.push([E2.propertyName, propertyName]);
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/boolSchema.js
  var require_boolSchema = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/boolSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.boolOrEmptySchema = exports2.topBoolOrEmptySchema = void 0;
      var errors_1 = require_errors();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var boolError = {
        message: "boolean schema is false"
      };
      function topBoolOrEmptySchema(it) {
        const { gen, schema, validateName } = it;
        if (schema === false) {
          falseSchemaError(it, false);
        } else if (typeof schema == "object" && schema.$async === true) {
          gen.return(names_1.default.data);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, null);
          gen.return(true);
        }
      }
      exports2.topBoolOrEmptySchema = topBoolOrEmptySchema;
      function boolOrEmptySchema(it, valid) {
        const { gen, schema } = it;
        if (schema === false) {
          gen.var(valid, false);
          falseSchemaError(it);
        } else {
          gen.var(valid, true);
        }
      }
      exports2.boolOrEmptySchema = boolOrEmptySchema;
      function falseSchemaError(it, overrideAllErrors) {
        const { gen, data } = it;
        const cxt = {
          gen,
          keyword: "false schema",
          data,
          schema: false,
          schemaCode: false,
          schemaValue: false,
          params: {},
          it
        };
        (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/rules.js
  var require_rules = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/rules.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getRules = exports2.isJSONType = void 0;
      var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
      var jsonTypes = new Set(_jsonTypes);
      function isJSONType(x2) {
        return typeof x2 == "string" && jsonTypes.has(x2);
      }
      exports2.isJSONType = isJSONType;
      function getRules3() {
        const groups = {
          number: { type: "number", rules: [] },
          string: { type: "string", rules: [] },
          array: { type: "array", rules: [] },
          object: { type: "object", rules: [] }
        };
        return {
          types: { ...groups, integer: true, boolean: true, null: true },
          rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
          post: { rules: [] },
          all: {},
          keywords: {}
        };
      }
      exports2.getRules = getRules3;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/applicability.js
  var require_applicability = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/applicability.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.shouldUseRule = exports2.shouldUseGroup = exports2.schemaHasRulesForType = void 0;
      function schemaHasRulesForType({ schema, self: self2 }, type) {
        const group = self2.RULES.types[type];
        return group && group !== true && shouldUseGroup(schema, group);
      }
      exports2.schemaHasRulesForType = schemaHasRulesForType;
      function shouldUseGroup(schema, group) {
        return group.rules.some((rule) => shouldUseRule(schema, rule));
      }
      exports2.shouldUseGroup = shouldUseGroup;
      function shouldUseRule(schema, rule) {
        var _a;
        return schema[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== void 0));
      }
      exports2.shouldUseRule = shouldUseRule;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/dataType.js
  var require_dataType = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/dataType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.reportTypeError = exports2.checkDataTypes = exports2.checkDataType = exports2.coerceAndCheckDataType = exports2.getJSONTypes = exports2.getSchemaTypes = exports2.DataType = void 0;
      var rules_1 = require_rules();
      var applicability_1 = require_applicability();
      var errors_1 = require_errors();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var DataType;
      (function(DataType2) {
        DataType2[DataType2["Correct"] = 0] = "Correct";
        DataType2[DataType2["Wrong"] = 1] = "Wrong";
      })(DataType || (exports2.DataType = DataType = {}));
      function getSchemaTypes(schema) {
        const types = getJSONTypes(schema.type);
        const hasNull = types.includes("null");
        if (hasNull) {
          if (schema.nullable === false)
            throw new Error("type: null contradicts nullable: false");
        } else {
          if (!types.length && schema.nullable !== void 0) {
            throw new Error('"nullable" cannot be used without "type"');
          }
          if (schema.nullable === true)
            types.push("null");
        }
        return types;
      }
      exports2.getSchemaTypes = getSchemaTypes;
      function getJSONTypes(ts) {
        const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
        if (types.every(rules_1.isJSONType))
          return types;
        throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
      }
      exports2.getJSONTypes = getJSONTypes;
      function coerceAndCheckDataType(it, types) {
        const { gen, data, opts } = it;
        const coerceTo = coerceToTypes(types, opts.coerceTypes);
        const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
        if (checkTypes) {
          const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
          gen.if(wrongType, () => {
            if (coerceTo.length)
              coerceData(it, types, coerceTo);
            else
              reportTypeError(it);
          });
        }
        return checkTypes;
      }
      exports2.coerceAndCheckDataType = coerceAndCheckDataType;
      var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
      function coerceToTypes(types, coerceTypes) {
        return coerceTypes ? types.filter((t2) => COERCIBLE.has(t2) || coerceTypes === "array" && t2 === "array") : [];
      }
      function coerceData(it, types, coerceTo) {
        const { gen, data, opts } = it;
        const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
        const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
        if (opts.coerceTypes === "array") {
          gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
        }
        gen.if((0, codegen_1._)`${coerced} !== undefined`);
        for (const t2 of coerceTo) {
          if (COERCIBLE.has(t2) || t2 === "array" && opts.coerceTypes === "array") {
            coerceSpecificType(t2);
          }
        }
        gen.else();
        reportTypeError(it);
        gen.endIf();
        gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
          gen.assign(data, coerced);
          assignParentData(it, coerced);
        });
        function coerceSpecificType(t2) {
          switch (t2) {
            case "string":
              gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
              return;
            case "number":
              gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "integer":
              gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "boolean":
              gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
              return;
            case "null":
              gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
              gen.assign(coerced, null);
              return;
            case "array":
              gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
          }
        }
      }
      function assignParentData({ gen, parentData, parentDataProperty }, expr) {
        gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
      }
      function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
        const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
        let cond;
        switch (dataType) {
          case "null":
            return (0, codegen_1._)`${data} ${EQ} null`;
          case "array":
            cond = (0, codegen_1._)`Array.isArray(${data})`;
            break;
          case "object":
            cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
          case "integer":
            cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
            break;
          case "number":
            cond = numCond();
            break;
          default:
            return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
        }
        return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
        function numCond(_cond = codegen_1.nil) {
          return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
        }
      }
      exports2.checkDataType = checkDataType;
      function checkDataTypes(dataTypes, data, strictNums, correct) {
        if (dataTypes.length === 1) {
          return checkDataType(dataTypes[0], data, strictNums, correct);
        }
        let cond;
        const types = (0, util_1.toHash)(dataTypes);
        if (types.array && types.object) {
          const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
          cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
          delete types.null;
          delete types.array;
          delete types.object;
        } else {
          cond = codegen_1.nil;
        }
        if (types.number)
          delete types.integer;
        for (const t2 in types)
          cond = (0, codegen_1.and)(cond, checkDataType(t2, data, strictNums, correct));
        return cond;
      }
      exports2.checkDataTypes = checkDataTypes;
      var typeError = {
        message: ({ schema }) => `must be ${schema}`,
        params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
      };
      function reportTypeError(it) {
        const cxt = getTypeErrorContext(it);
        (0, errors_1.reportError)(cxt, typeError);
      }
      exports2.reportTypeError = reportTypeError;
      function getTypeErrorContext(it) {
        const { gen, data, schema } = it;
        const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
        return {
          gen,
          keyword: "type",
          data,
          schema: schema.type,
          schemaCode,
          schemaValue: schemaCode,
          parentSchema: schema,
          params: {},
          it
        };
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/defaults.js
  var require_defaults2 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/defaults.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.assignDefaults = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      function assignDefaults(it, ty) {
        const { properties: properties2, items } = it.schema;
        if (ty === "object" && properties2) {
          for (const key in properties2) {
            assignDefault(it, key, properties2[key].default);
          }
        } else if (ty === "array" && Array.isArray(items)) {
          items.forEach((sch, i2) => assignDefault(it, i2, sch.default));
        }
      }
      exports2.assignDefaults = assignDefaults;
      function assignDefault(it, prop, defaultValue) {
        const { gen, compositeRule, data, opts } = it;
        if (defaultValue === void 0)
          return;
        const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
        if (compositeRule) {
          (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
          return;
        }
        let condition = (0, codegen_1._)`${childData} === undefined`;
        if (opts.useDefaults === "empty") {
          condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
        }
        gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/code.js
  var require_code2 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/code.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateUnion = exports2.validateArray = exports2.usePattern = exports2.callValidateCode = exports2.schemaProperties = exports2.allSchemaProperties = exports2.noPropertyInData = exports2.propertyInData = exports2.isOwnProperty = exports2.hasPropFunc = exports2.reportMissingProp = exports2.checkMissingProp = exports2.checkReportMissingProp = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var names_1 = require_names();
      var util_2 = require_util();
      function checkReportMissingProp(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
          cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
          cxt.error();
        });
      }
      exports2.checkReportMissingProp = checkReportMissingProp;
      function checkMissingProp({ gen, data, it: { opts } }, properties2, missing) {
        return (0, codegen_1.or)(...properties2.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
      }
      exports2.checkMissingProp = checkMissingProp;
      function reportMissingProp(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
      }
      exports2.reportMissingProp = reportMissingProp;
      function hasPropFunc(gen) {
        return gen.scopeValue("func", {
          // eslint-disable-next-line @typescript-eslint/unbound-method
          ref: Object.prototype.hasOwnProperty,
          code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
        });
      }
      exports2.hasPropFunc = hasPropFunc;
      function isOwnProperty(gen, data, property2) {
        return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property2})`;
      }
      exports2.isOwnProperty = isOwnProperty;
      function propertyInData(gen, data, property2, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property2)} !== undefined`;
        return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property2)}` : cond;
      }
      exports2.propertyInData = propertyInData;
      function noPropertyInData(gen, data, property2, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property2)} === undefined`;
        return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property2))) : cond;
      }
      exports2.noPropertyInData = noPropertyInData;
      function allSchemaProperties(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p2) => p2 !== "__proto__") : [];
      }
      exports2.allSchemaProperties = allSchemaProperties;
      function schemaProperties(it, schemaMap) {
        return allSchemaProperties(schemaMap).filter((p2) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p2]));
      }
      exports2.schemaProperties = schemaProperties;
      function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
          [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
          [names_1.default.parentData, it.parentData],
          [names_1.default.parentDataProperty, it.parentDataProperty],
          [names_1.default.rootData, names_1.default.rootData]
        ];
        if (it.opts.dynamicRef)
          valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
        const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
      }
      exports2.callValidateCode = callValidateCode;
      var newRegExp = (0, codegen_1._)`new RegExp`;
      function usePattern({ gen, it: { opts } }, pattern) {
        const u2 = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u2);
        return gen.scopeValue("pattern", {
          key: rx.toString(),
          ref: rx,
          code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u2})`
        });
      }
      exports2.usePattern = usePattern;
      function validateArray(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        if (it.allErrors) {
          const validArr = gen.let("valid", true);
          validateItems(() => gen.assign(validArr, false));
          return validArr;
        }
        gen.var(valid, true);
        validateItems(() => gen.break());
        return valid;
        function validateItems(notValid) {
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          gen.forRange("i", 0, len, (i2) => {
            cxt.subschema({
              keyword,
              dataProp: i2,
              dataPropType: util_1.Type.Num
            }, valid);
            gen.if((0, codegen_1.not)(valid), notValid);
          });
        }
      }
      exports2.validateArray = validateArray;
      function validateUnion(cxt) {
        const { gen, schema, keyword, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
          return;
        const valid = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema.forEach((_sch, i2) => {
          const schCxt = cxt.subschema({
            keyword,
            schemaProp: i2,
            compositeRule: true
          }, schValid);
          gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
          const merged = cxt.mergeValidEvaluated(schCxt, schValid);
          if (!merged)
            gen.if((0, codegen_1.not)(valid));
        }));
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
      }
      exports2.validateUnion = validateUnion;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/keyword.js
  var require_keyword = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/keyword.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateKeywordUsage = exports2.validSchemaType = exports2.funcKeywordCode = exports2.macroKeywordCode = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var code_1 = require_code2();
      var errors_1 = require_errors();
      function macroKeywordCode(cxt, def) {
        const { gen, keyword, schema, parentSchema, it } = cxt;
        const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
        const schemaRef = useKeyword(gen, keyword, macroSchema);
        if (it.opts.validateSchema !== false)
          it.self.validateSchema(macroSchema, true);
        const valid = gen.name("valid");
        cxt.subschema({
          schema: macroSchema,
          schemaPath: codegen_1.nil,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`,
          topSchemaRef: schemaRef,
          compositeRule: true
        }, valid);
        cxt.pass(valid, () => cxt.error(true));
      }
      exports2.macroKeywordCode = macroKeywordCode;
      function funcKeywordCode(cxt, def) {
        var _a;
        const { gen, keyword, schema, parentSchema, $data, it } = cxt;
        checkAsyncKeyword(it, def);
        const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
        const validateRef = useKeyword(gen, keyword, validate);
        const valid = gen.let("valid");
        cxt.block$data(valid, validateKeyword);
        cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
        function validateKeyword() {
          if (def.errors === false) {
            assignValid();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => cxt.error());
          } else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
          }
        }
        function validateAsync() {
          const ruleErrs = gen.let("ruleErrs", null);
          gen.try(() => assignValid((0, codegen_1._)`await `), (e2) => gen.assign(valid, false).if((0, codegen_1._)`${e2} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e2}.errors`), () => gen.throw(e2)));
          return ruleErrs;
        }
        function validateSync() {
          const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
          gen.assign(validateErrs, null);
          assignValid(codegen_1.nil);
          return validateErrs;
        }
        function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
          const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
          const passSchema = !("compile" in def && !$data || def.schema === false);
          gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
        }
        function reportErrs(errors) {
          var _a2;
          gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid), errors);
        }
      }
      exports2.funcKeywordCode = funcKeywordCode;
      function modifyData(cxt) {
        const { gen, data, it } = cxt;
        gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
      }
      function addErrs(cxt, errs) {
        const { gen } = cxt;
        gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
          (0, errors_1.extendErrors)(cxt);
        }, () => cxt.error());
      }
      function checkAsyncKeyword({ schemaEnv }, def) {
        if (def.async && !schemaEnv.$async)
          throw new Error("async keyword in sync schema");
      }
      function useKeyword(gen, keyword, result) {
        if (result === void 0)
          throw new Error(`keyword "${keyword}" failed to compile`);
        return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
      }
      function validSchemaType(schema, schemaType, allowUndefined = false) {
        return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
      }
      exports2.validSchemaType = validSchemaType;
      function validateKeywordUsage({ schema, opts, self: self2, errSchemaPath }, def, keyword) {
        if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
          throw new Error("ajv implementation error");
        }
        const deps = def.dependencies;
        if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
          throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
        }
        if (def.validateSchema) {
          const valid = def.validateSchema(schema[keyword]);
          if (!valid) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
              self2.logger.error(msg);
            else
              throw new Error(msg);
          }
        }
      }
      exports2.validateKeywordUsage = validateKeywordUsage;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/subschema.js
  var require_subschema = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/subschema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.extendSubschemaMode = exports2.extendSubschemaData = exports2.getSubschema = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
        if (keyword !== void 0 && schema !== void 0) {
          throw new Error('both "keyword" and "schema" passed, only one allowed');
        }
        if (keyword !== void 0) {
          const sch = it.schema[keyword];
          return schemaProp === void 0 ? {
            schema: sch,
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`
          } : {
            schema: sch[schemaProp],
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
          };
        }
        if (schema !== void 0) {
          if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
          }
          return {
            schema,
            schemaPath,
            topSchemaRef,
            errSchemaPath
          };
        }
        throw new Error('either "keyword" or "schema" must be passed');
      }
      exports2.getSubschema = getSubschema;
      function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
        if (data !== void 0 && dataProp !== void 0) {
          throw new Error('both "data" and "dataProp" passed, only one allowed');
        }
        const { gen } = it;
        if (dataProp !== void 0) {
          const { errorPath, dataPathArr, opts } = it;
          const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
          dataContextProps(nextData);
          subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
          subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
          subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
        }
        if (data !== void 0) {
          const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
          dataContextProps(nextData);
          if (propertyName !== void 0)
            subschema.propertyName = propertyName;
        }
        if (dataTypes)
          subschema.dataTypes = dataTypes;
        function dataContextProps(_nextData) {
          subschema.data = _nextData;
          subschema.dataLevel = it.dataLevel + 1;
          subschema.dataTypes = [];
          it.definedProperties = /* @__PURE__ */ new Set();
          subschema.parentData = it.data;
          subschema.dataNames = [...it.dataNames, _nextData];
        }
      }
      exports2.extendSubschemaData = extendSubschemaData;
      function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
        if (compositeRule !== void 0)
          subschema.compositeRule = compositeRule;
        if (createErrors !== void 0)
          subschema.createErrors = createErrors;
        if (allErrors !== void 0)
          subschema.allErrors = allErrors;
        subschema.jtdDiscriminator = jtdDiscriminator;
        subschema.jtdMetadata = jtdMetadata;
      }
      exports2.extendSubschemaMode = extendSubschemaMode;
    }
  });

  // react-user-mgmt/node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "react-user-mgmt/node_modules/fast-deep-equal/index.js"(exports2, module2) {
      "use strict";
      module2.exports = function equal(a2, b2) {
        if (a2 === b2) return true;
        if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
          if (a2.constructor !== b2.constructor) return false;
          var length2, i2, keys2;
          if (Array.isArray(a2)) {
            length2 = a2.length;
            if (length2 != b2.length) return false;
            for (i2 = length2; i2-- !== 0; )
              if (!equal(a2[i2], b2[i2])) return false;
            return true;
          }
          if (a2.constructor === RegExp) return a2.source === b2.source && a2.flags === b2.flags;
          if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b2.valueOf();
          if (a2.toString !== Object.prototype.toString) return a2.toString() === b2.toString();
          keys2 = Object.keys(a2);
          length2 = keys2.length;
          if (length2 !== Object.keys(b2).length) return false;
          for (i2 = length2; i2-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b2, keys2[i2])) return false;
          for (i2 = length2; i2-- !== 0; ) {
            var key = keys2[i2];
            if (!equal(a2[key], b2[key])) return false;
          }
          return true;
        }
        return a2 !== a2 && b2 !== b2;
      };
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/json-schema-traverse/index.js
  var require_json_schema_traverse = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/json-schema-traverse/index.js"(exports2, module2) {
      "use strict";
      var traverse = module2.exports = function(schema, opts, cb) {
        if (typeof opts == "function") {
          cb = opts;
          opts = {};
        }
        cb = opts.cb || cb;
        var pre = typeof cb == "function" ? cb : cb.pre || function() {
        };
        var post = cb.post || function() {
        };
        _traverse(opts, pre, post, schema, "", schema);
      };
      traverse.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true,
        if: true,
        then: true,
        else: true
      };
      traverse.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      traverse.propsKeywords = {
        $defs: true,
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      };
      traverse.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      };
      function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (schema && typeof schema == "object" && !Array.isArray(schema)) {
          pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
          for (var key in schema) {
            var sch = schema[key];
            if (Array.isArray(sch)) {
              if (key in traverse.arrayKeywords) {
                for (var i2 = 0; i2 < sch.length; i2++)
                  _traverse(opts, pre, post, sch[i2], jsonPtr + "/" + key + "/" + i2, rootSchema, jsonPtr, key, schema, i2);
              }
            } else if (key in traverse.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
              }
            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
            }
          }
          post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        }
      }
      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/resolve.js
  var require_resolve = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/resolve.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getSchemaRefs = exports2.resolveUrl = exports2.normalizeId = exports2._getFullPath = exports2.getFullPath = exports2.inlineRef = void 0;
      var util_1 = require_util();
      var equal = require_fast_deep_equal();
      var traverse = require_json_schema_traverse();
      var SIMPLE_INLINED = /* @__PURE__ */ new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const"
      ]);
      function inlineRef(schema, limit = true) {
        if (typeof schema == "boolean")
          return true;
        if (limit === true)
          return !hasRef(schema);
        if (!limit)
          return false;
        return countKeys(schema) <= limit;
      }
      exports2.inlineRef = inlineRef;
      var REF_KEYWORDS = /* @__PURE__ */ new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor"
      ]);
      function hasRef(schema) {
        for (const key in schema) {
          if (REF_KEYWORDS.has(key))
            return true;
          const sch = schema[key];
          if (Array.isArray(sch) && sch.some(hasRef))
            return true;
          if (typeof sch == "object" && hasRef(sch))
            return true;
        }
        return false;
      }
      function countKeys(schema) {
        let count = 0;
        for (const key in schema) {
          if (key === "$ref")
            return Infinity;
          count++;
          if (SIMPLE_INLINED.has(key))
            continue;
          if (typeof schema[key] == "object") {
            (0, util_1.eachItem)(schema[key], (sch) => count += countKeys(sch));
          }
          if (count === Infinity)
            return Infinity;
        }
        return count;
      }
      function getFullPath(resolver, id = "", normalize) {
        if (normalize !== false)
          id = normalizeId(id);
        const p2 = resolver.parse(id);
        return _getFullPath(resolver, p2);
      }
      exports2.getFullPath = getFullPath;
      function _getFullPath(resolver, p2) {
        const serialized = resolver.serialize(p2);
        return serialized.split("#")[0] + "#";
      }
      exports2._getFullPath = _getFullPath;
      var TRAILING_SLASH_HASH = /#\/?$/;
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
      }
      exports2.normalizeId = normalizeId;
      function resolveUrl(resolver, baseId, id) {
        id = normalizeId(id);
        return resolver.resolve(baseId, id);
      }
      exports2.resolveUrl = resolveUrl;
      var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
      function getSchemaRefs(schema, baseId) {
        if (typeof schema == "boolean")
          return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId(schema[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = /* @__PURE__ */ new Set();
        traverse(schema, { allKeys: true }, (sch, jsonPtr, _2, parentJsonPtr) => {
          if (parentJsonPtr === void 0)
            return;
          const fullPath = pathPrefix + jsonPtr;
          let innerBaseId = baseIds[parentJsonPtr];
          if (typeof sch[schemaId] == "string")
            innerBaseId = addRef.call(this, sch[schemaId]);
          addAnchor.call(this, sch.$anchor);
          addAnchor.call(this, sch.$dynamicAnchor);
          baseIds[jsonPtr] = innerBaseId;
          function addRef(ref) {
            const _resolve2 = this.opts.uriResolver.resolve;
            ref = normalizeId(innerBaseId ? _resolve2(innerBaseId, ref) : ref);
            if (schemaRefs.has(ref))
              throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
              schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
              checkAmbiguosRef(sch, schOrRef.schema, ref);
            } else if (ref !== normalizeId(fullPath)) {
              if (ref[0] === "#") {
                checkAmbiguosRef(sch, localRefs[ref], ref);
                localRefs[ref] = sch;
              } else {
                this.refs[ref] = fullPath;
              }
            }
            return ref;
          }
          function addAnchor(anchor) {
            if (typeof anchor == "string") {
              if (!ANCHOR.test(anchor))
                throw new Error(`invalid anchor "${anchor}"`);
              addRef.call(this, `#${anchor}`);
            }
          }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
          if (sch2 !== void 0 && !equal(sch1, sch2))
            throw ambiguos(ref);
        }
        function ambiguos(ref) {
          return new Error(`reference "${ref}" resolves to more than one schema`);
        }
      }
      exports2.getSchemaRefs = getSchemaRefs;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/index.js
  var require_validate = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/validate/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getData = exports2.KeywordCxt = exports2.validateFunctionCode = void 0;
      var boolSchema_1 = require_boolSchema();
      var dataType_1 = require_dataType();
      var applicability_1 = require_applicability();
      var dataType_2 = require_dataType();
      var defaults_1 = require_defaults2();
      var keyword_1 = require_keyword();
      var subschema_1 = require_subschema();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var resolve_1 = require_resolve();
      var util_1 = require_util();
      var errors_1 = require_errors();
      function validateFunctionCode(it) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
          }
        }
        validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
      }
      exports2.validateFunctionCode = validateFunctionCode;
      function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body2) {
        if (opts.code.es5) {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body2);
          });
        } else {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body2));
        }
      }
      function destructureValCxt(opts) {
        return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
      }
      function destructureValCxtES5(gen, opts) {
        gen.if(names_1.default.valCxt, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
          gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
        }, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.rootData, names_1.default.data);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
        });
      }
      function topSchemaObjCode(it) {
        const { schema, opts, gen } = it;
        validateFunction(it, () => {
          if (opts.$comment && schema.$comment)
            commentKeyword(it);
          checkNoDefault(it);
          gen.let(names_1.default.vErrors, null);
          gen.let(names_1.default.errors, 0);
          if (opts.unevaluated)
            resetEvaluated(it);
          typeAndKeywords(it);
          returnResults(it);
        });
        return;
      }
      function resetEvaluated(it) {
        const { gen, validateName } = it;
        it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
      }
      function funcSourceUrl(schema, opts) {
        const schId = typeof schema == "object" && schema[opts.schemaId];
        return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
      }
      function subschemaCode(it, valid) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
          }
        }
        (0, boolSchema_1.boolOrEmptySchema)(it, valid);
      }
      function schemaCxtHasRules({ schema, self: self2 }) {
        if (typeof schema == "boolean")
          return !schema;
        for (const key in schema)
          if (self2.RULES.all[key])
            return true;
        return false;
      }
      function isSchemaObj(it) {
        return typeof it.schema != "boolean";
      }
      function subSchemaObjCode(it, valid) {
        const { schema, gen, opts } = it;
        if (opts.$comment && schema.$comment)
          commentKeyword(it);
        updateContext(it);
        checkAsyncSchema(it);
        const errsCount = gen.const("_errs", names_1.default.errors);
        typeAndKeywords(it, errsCount);
        gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
      }
      function checkKeywords(it) {
        (0, util_1.checkUnknownRules)(it);
        checkRefsAndKeywords(it);
      }
      function typeAndKeywords(it, errsCount) {
        if (it.opts.jtd)
          return schemaKeywords(it, [], false, errsCount);
        const types = (0, dataType_1.getSchemaTypes)(it.schema);
        const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
        schemaKeywords(it, types, !checkedTypes, errsCount);
      }
      function checkRefsAndKeywords(it) {
        const { schema, errSchemaPath, opts, self: self2 } = it;
        if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self2.RULES)) {
          self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
        }
      }
      function checkNoDefault(it) {
        const { schema, opts } = it;
        if (schema.default !== void 0 && opts.useDefaults && opts.strictSchema) {
          (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
        }
      }
      function updateContext(it) {
        const schId = it.schema[it.opts.schemaId];
        if (schId)
          it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
      }
      function checkAsyncSchema(it) {
        if (it.schema.$async && !it.schemaEnv.$async)
          throw new Error("async schema in sync schema");
      }
      function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
        const msg = schema.$comment;
        if (opts.$comment === true) {
          gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
        } else if (typeof opts.$comment == "function") {
          const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
          const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
          gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
        }
      }
      function returnResults(it) {
        const { gen, schemaEnv, validateName, ValidationError, opts } = it;
        if (schemaEnv.$async) {
          gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
          if (opts.unevaluated)
            assignEvaluated(it);
          gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
        }
      }
      function assignEvaluated({ gen, evaluated, props, items }) {
        if (props instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.props`, props);
        if (items instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.items`, items);
      }
      function schemaKeywords(it, types, typeErrors, errsCount) {
        const { gen, schema, data, allErrors, opts, self: self2 } = it;
        const { RULES } = self2;
        if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
          gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
          return;
        }
        if (!opts.jtd)
          checkStrictTypes(it, types);
        gen.block(() => {
          for (const group of RULES.rules)
            groupKeywords(group);
          groupKeywords(RULES.post);
        });
        function groupKeywords(group) {
          if (!(0, applicability_1.shouldUseGroup)(schema, group))
            return;
          if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
              gen.else();
              (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
          } else {
            iterateKeywords(it, group);
          }
          if (!allErrors)
            gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
        }
      }
      function iterateKeywords(it, group) {
        const { gen, schema, opts: { useDefaults } } = it;
        if (useDefaults)
          (0, defaults_1.assignDefaults)(it, group.type);
        gen.block(() => {
          for (const rule of group.rules) {
            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
              keywordCode(it, rule.keyword, rule.definition, group.type);
            }
          }
        });
      }
      function checkStrictTypes(it, types) {
        if (it.schemaEnv.meta || !it.opts.strictTypes)
          return;
        checkContextTypes(it, types);
        if (!it.opts.allowUnionTypes)
          checkMultipleTypes(it, types);
        checkKeywordTypes(it, it.dataTypes);
      }
      function checkContextTypes(it, types) {
        if (!types.length)
          return;
        if (!it.dataTypes.length) {
          it.dataTypes = types;
          return;
        }
        types.forEach((t2) => {
          if (!includesType(it.dataTypes, t2)) {
            strictTypesError(it, `type "${t2}" not allowed by context "${it.dataTypes.join(",")}"`);
          }
        });
        narrowSchemaTypes(it, types);
      }
      function checkMultipleTypes(it, ts) {
        if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
          strictTypesError(it, "use allowUnionTypes to allow union type keyword");
        }
      }
      function checkKeywordTypes(it, ts) {
        const rules = it.self.RULES.all;
        for (const keyword in rules) {
          const rule = rules[keyword];
          if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type } = rule.definition;
            if (type.length && !type.some((t2) => hasApplicableType(ts, t2))) {
              strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
            }
          }
        }
      }
      function hasApplicableType(schTs, kwdT) {
        return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
      }
      function includesType(ts, t2) {
        return ts.includes(t2) || t2 === "integer" && ts.includes("number");
      }
      function narrowSchemaTypes(it, withTypes) {
        const ts = [];
        for (const t2 of it.dataTypes) {
          if (includesType(withTypes, t2))
            ts.push(t2);
          else if (withTypes.includes("integer") && t2 === "number")
            ts.push("integer");
        }
        it.dataTypes = ts;
      }
      function strictTypesError(it, msg) {
        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
        msg += ` at "${schemaPath}" (strictTypes)`;
        (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
      }
      var KeywordCxt = class {
        constructor(it, def, keyword) {
          (0, keyword_1.validateKeywordUsage)(it, def, keyword);
          this.gen = it.gen;
          this.allErrors = it.allErrors;
          this.keyword = keyword;
          this.data = it.data;
          this.schema = it.schema[keyword];
          this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
          this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
          this.schemaType = def.schemaType;
          this.parentSchema = it.schema;
          this.params = {};
          this.it = it;
          this.def = def;
          if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
          } else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
              throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
          }
          if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
          }
        }
        result(condition, successAction, failAction) {
          this.failResult((0, codegen_1.not)(condition), successAction, failAction);
        }
        failResult(condition, successAction, failAction) {
          this.gen.if(condition);
          if (failAction)
            failAction();
          else
            this.error();
          if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
              this.gen.endIf();
          } else {
            if (this.allErrors)
              this.gen.endIf();
            else
              this.gen.else();
          }
        }
        pass(condition, failAction) {
          this.failResult((0, codegen_1.not)(condition), void 0, failAction);
        }
        fail(condition) {
          if (condition === void 0) {
            this.error();
            if (!this.allErrors)
              this.gen.if(false);
            return;
          }
          this.gen.if(condition);
          this.error();
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
        fail$data(condition) {
          if (!this.$data)
            return this.fail(condition);
          const { schemaCode } = this;
          this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
        }
        error(append2, errorParams, errorPaths) {
          if (errorParams) {
            this.setParams(errorParams);
            this._error(append2, errorPaths);
            this.setParams({});
            return;
          }
          this._error(append2, errorPaths);
        }
        _error(append2, errorPaths) {
          ;
          (append2 ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
        }
        $dataError() {
          (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
        }
        reset() {
          if (this.errsCount === void 0)
            throw new Error('add "trackErrors" to keyword definition');
          (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
        }
        ok(cond) {
          if (!this.allErrors)
            this.gen.if(cond);
        }
        setParams(obj, assign2) {
          if (assign2)
            Object.assign(this.params, obj);
          else
            this.params = obj;
        }
        block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
          this.gen.block(() => {
            this.check$data(valid, $dataValid);
            codeBlock();
          });
        }
        check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
          if (!this.$data)
            return;
          const { gen, schemaCode, schemaType, def } = this;
          gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
          if (valid !== codegen_1.nil)
            gen.assign(valid, true);
          if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil)
              gen.assign(valid, false);
          }
          gen.else();
        }
        invalid$data() {
          const { gen, schemaCode, schemaType, def, it } = this;
          return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
          function wrong$DataType() {
            if (schemaType.length) {
              if (!(schemaCode instanceof codegen_1.Name))
                throw new Error("ajv implementation error");
              const st = Array.isArray(schemaType) ? schemaType : [schemaType];
              return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
          }
          function invalid$DataSchema() {
            if (def.validateSchema) {
              const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
              return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
          }
        }
        subschema(appl, valid) {
          const subschema = (0, subschema_1.getSubschema)(this.it, appl);
          (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
          (0, subschema_1.extendSubschemaMode)(subschema, appl);
          const nextContext = { ...this.it, ...subschema, items: void 0, props: void 0 };
          subschemaCode(nextContext, valid);
          return nextContext;
        }
        mergeEvaluated(schemaCxt, toName) {
          const { it, gen } = this;
          if (!it.opts.unevaluated)
            return;
          if (it.props !== true && schemaCxt.props !== void 0) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
          }
          if (it.items !== true && schemaCxt.items !== void 0) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
          }
        }
        mergeValidEvaluated(schemaCxt, valid) {
          const { it, gen } = this;
          if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
          }
        }
      };
      exports2.KeywordCxt = KeywordCxt;
      function keywordCode(it, keyword, def, ruleType) {
        const cxt = new KeywordCxt(it, def, keyword);
        if ("code" in def) {
          def.code(cxt, ruleType);
        } else if (cxt.$data && def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        } else if ("macro" in def) {
          (0, keyword_1.macroKeywordCode)(cxt, def);
        } else if (def.compile || def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        }
      }
      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
      function getData($data, { dataLevel, dataNames, dataPathArr }) {
        let jsonPointer;
        let data;
        if ($data === "")
          return names_1.default.rootData;
        if ($data[0] === "/") {
          if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          jsonPointer = $data;
          data = names_1.default.rootData;
        } else {
          const matches = RELATIVE_JSON_POINTER.exec($data);
          if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          const up = +matches[1];
          jsonPointer = matches[2];
          if (jsonPointer === "#") {
            if (up >= dataLevel)
              throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
          }
          if (up > dataLevel)
            throw new Error(errorMsg("data", up));
          data = dataNames[dataLevel - up];
          if (!jsonPointer)
            return data;
        }
        let expr = data;
        const segments = jsonPointer.split("/");
        for (const segment of segments) {
          if (segment) {
            data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
            expr = (0, codegen_1._)`${expr} && ${data}`;
          }
        }
        return expr;
        function errorMsg(pointerType, up) {
          return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
        }
      }
      exports2.getData = getData;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/validation_error.js
  var require_validation_error = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/validation_error.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var ValidationError = class extends Error {
        constructor(errors) {
          super("validation failed");
          this.errors = errors;
          this.ajv = this.validation = true;
        }
      };
      exports2.default = ValidationError;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/ref_error.js
  var require_ref_error = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/ref_error.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var resolve_1 = require_resolve();
      var MissingRefError = class extends Error {
        constructor(resolver, baseId, ref, msg) {
          super(msg || `can't resolve reference ${ref} from id ${baseId}`);
          this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
          this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
        }
      };
      exports2.default = MissingRefError;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/index.js
  var require_compile = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/compile/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.resolveSchema = exports2.getCompilingSchema = exports2.resolveRef = exports2.compileSchema = exports2.SchemaEnv = void 0;
      var codegen_1 = require_codegen();
      var validation_error_1 = require_validation_error();
      var names_1 = require_names();
      var resolve_1 = require_resolve();
      var util_1 = require_util();
      var validate_1 = require_validate();
      var SchemaEnv = class {
        constructor(env) {
          var _a;
          this.refs = {};
          this.dynamicAnchors = {};
          let schema;
          if (typeof env.schema == "object")
            schema = env.schema;
          this.schema = env.schema;
          this.schemaId = env.schemaId;
          this.root = env.root || this;
          this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
          this.schemaPath = env.schemaPath;
          this.localRefs = env.localRefs;
          this.meta = env.meta;
          this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
          this.refs = {};
        }
      };
      exports2.SchemaEnv = SchemaEnv;
      function compileSchema(sch) {
        const _sch = getCompilingSchema.call(this, sch);
        if (_sch)
          return _sch;
        const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
          _ValidationError = gen.scopeValue("Error", {
            ref: validation_error_1.default,
            code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
          });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
          gen,
          allErrors: this.opts.allErrors,
          data: names_1.default.data,
          parentData: names_1.default.parentData,
          parentDataProperty: names_1.default.parentDataProperty,
          dataNames: [names_1.default.data],
          dataPathArr: [codegen_1.nil],
          // TODO can its length be used as dataLevel if nil is removed?
          dataLevel: 0,
          dataTypes: [],
          definedProperties: /* @__PURE__ */ new Set(),
          topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
          validateName,
          ValidationError: _ValidationError,
          schema: sch.schema,
          schemaEnv: sch,
          rootId,
          baseId: sch.baseId || rootId,
          schemaPath: codegen_1.nil,
          errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
          errorPath: (0, codegen_1._)`""`,
          opts: this.opts,
          self: this
        };
        let sourceCode;
        try {
          this._compilations.add(sch);
          (0, validate_1.validateFunctionCode)(schemaCxt);
          gen.optimize(this.opts.code.optimize);
          const validateCode = gen.toString();
          sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
          if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
          const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
          const validate = makeValidate(this, this.scope.get());
          this.scope.value(validateName, { ref: validate });
          validate.errors = null;
          validate.schema = sch.schema;
          validate.schemaEnv = sch;
          if (sch.$async)
            validate.$async = true;
          if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
          }
          if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
              props: props instanceof codegen_1.Name ? void 0 : props,
              items: items instanceof codegen_1.Name ? void 0 : items,
              dynamicProps: props instanceof codegen_1.Name,
              dynamicItems: items instanceof codegen_1.Name
            };
            if (validate.source)
              validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
          }
          sch.validate = validate;
          return sch;
        } catch (e2) {
          delete sch.validate;
          delete sch.validateName;
          if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
          throw e2;
        } finally {
          this._compilations.delete(sch);
        }
      }
      exports2.compileSchema = compileSchema;
      function resolveRef(root2, baseId, ref) {
        var _a;
        ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root2.refs[ref];
        if (schOrFunc)
          return schOrFunc;
        let _sch = resolve.call(this, root2, ref);
        if (_sch === void 0) {
          const schema = (_a = root2.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
          const { schemaId } = this.opts;
          if (schema)
            _sch = new SchemaEnv({ schema, schemaId, root: root2, baseId });
        }
        if (_sch === void 0)
          return;
        return root2.refs[ref] = inlineOrCompile.call(this, _sch);
      }
      exports2.resolveRef = resolveRef;
      function inlineOrCompile(sch) {
        if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
          return sch.schema;
        return sch.validate ? sch : compileSchema.call(this, sch);
      }
      function getCompilingSchema(schEnv) {
        for (const sch of this._compilations) {
          if (sameSchemaEnv(sch, schEnv))
            return sch;
        }
      }
      exports2.getCompilingSchema = getCompilingSchema;
      function sameSchemaEnv(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
      }
      function resolve(root2, ref) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
          ref = sch;
        return sch || this.schemas[ref] || resolveSchema2.call(this, root2, ref);
      }
      function resolveSchema2(root2, ref) {
        const p2 = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p2);
        let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root2.baseId, void 0);
        if (Object.keys(root2.schema).length > 0 && refPath === baseId) {
          return getJsonPointer.call(this, p2, root2);
        }
        const id = (0, resolve_1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
          const sch = resolveSchema2.call(this, root2, schOrRef);
          if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
          return getJsonPointer.call(this, p2, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
          return;
        if (!schOrRef.validate)
          compileSchema.call(this, schOrRef);
        if (id === (0, resolve_1.normalizeId)(ref)) {
          const { schema } = schOrRef;
          const { schemaId } = this.opts;
          const schId = schema[schemaId];
          if (schId)
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          return new SchemaEnv({ schema, schemaId, root: root2, baseId });
        }
        return getJsonPointer.call(this, p2, schOrRef);
      }
      exports2.resolveSchema = resolveSchema2;
      var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions"
      ]);
      function getJsonPointer(parsedRef, { baseId, schema, root: root2 }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
          return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
          if (typeof schema === "boolean")
            return;
          const partSchema = schema[(0, util_1.unescapeFragment)(part)];
          if (partSchema === void 0)
            return;
          schema = partSchema;
          const schId = typeof schema === "object" && schema[this.opts.schemaId];
          if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          }
        }
        let env;
        if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
          const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
          env = resolveSchema2.call(this, root2, $ref);
        }
        const { schemaId } = this.opts;
        env = env || new SchemaEnv({ schema, schemaId, root: root2, baseId });
        if (env.schema !== env.root.schema)
          return env;
        return void 0;
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/refs/data.json
  var require_data = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/refs/data.json"(exports2, module2) {
      module2.exports = {
        $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
        type: "object",
        required: ["$data"],
        properties: {
          $data: {
            type: "string",
            anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
          }
        },
        additionalProperties: false
      };
    }
  });

  // react-user-mgmt/node_modules/fast-uri/lib/scopedChars.js
  var require_scopedChars = __commonJS({
    "react-user-mgmt/node_modules/fast-uri/lib/scopedChars.js"(exports2, module2) {
      "use strict";
      var HEX = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        a: 10,
        A: 10,
        b: 11,
        B: 11,
        c: 12,
        C: 12,
        d: 13,
        D: 13,
        e: 14,
        E: 14,
        f: 15,
        F: 15
      };
      module2.exports = {
        HEX
      };
    }
  });

  // react-user-mgmt/node_modules/fast-uri/lib/utils.js
  var require_utils = __commonJS({
    "react-user-mgmt/node_modules/fast-uri/lib/utils.js"(exports2, module2) {
      "use strict";
      var { HEX } = require_scopedChars();
      var IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u;
      function normalizeIPv4(host) {
        if (findToken(host, ".") < 3) {
          return { host, isIPV4: false };
        }
        const matches = host.match(IPV4_REG) || [];
        const [address] = matches;
        if (address) {
          return { host: stripLeadingZeros(address, "."), isIPV4: true };
        } else {
          return { host, isIPV4: false };
        }
      }
      function stringArrayToHexStripped(input, keepZero = false) {
        let acc = "";
        let strip = true;
        for (const c2 of input) {
          if (HEX[c2] === void 0) return void 0;
          if (c2 !== "0" && strip === true) strip = false;
          if (!strip) acc += c2;
        }
        if (keepZero && acc.length === 0) acc = "0";
        return acc;
      }
      function getIPV6(input) {
        let tokenCount = 0;
        const output = { error: false, address: "", zone: "" };
        const address = [];
        const buffer = [];
        let isZone = false;
        let endipv6Encountered = false;
        let endIpv6 = false;
        function consume() {
          if (buffer.length) {
            if (isZone === false) {
              const hex = stringArrayToHexStripped(buffer);
              if (hex !== void 0) {
                address.push(hex);
              } else {
                output.error = true;
                return false;
              }
            }
            buffer.length = 0;
          }
          return true;
        }
        for (let i2 = 0; i2 < input.length; i2++) {
          const cursor2 = input[i2];
          if (cursor2 === "[" || cursor2 === "]") {
            continue;
          }
          if (cursor2 === ":") {
            if (endipv6Encountered === true) {
              endIpv6 = true;
            }
            if (!consume()) {
              break;
            }
            tokenCount++;
            address.push(":");
            if (tokenCount > 7) {
              output.error = true;
              break;
            }
            if (i2 - 1 >= 0 && input[i2 - 1] === ":") {
              endipv6Encountered = true;
            }
            continue;
          } else if (cursor2 === "%") {
            if (!consume()) {
              break;
            }
            isZone = true;
          } else {
            buffer.push(cursor2);
            continue;
          }
        }
        if (buffer.length) {
          if (isZone) {
            output.zone = buffer.join("");
          } else if (endIpv6) {
            address.push(buffer.join(""));
          } else {
            address.push(stringArrayToHexStripped(buffer));
          }
        }
        output.address = address.join("");
        return output;
      }
      function normalizeIPv6(host) {
        if (findToken(host, ":") < 2) {
          return { host, isIPV6: false };
        }
        const ipv6 = getIPV6(host);
        if (!ipv6.error) {
          let newHost = ipv6.address;
          let escapedHost = ipv6.address;
          if (ipv6.zone) {
            newHost += "%" + ipv6.zone;
            escapedHost += "%25" + ipv6.zone;
          }
          return { host: newHost, escapedHost, isIPV6: true };
        } else {
          return { host, isIPV6: false };
        }
      }
      function stripLeadingZeros(str, token2) {
        let out = "";
        let skip = true;
        const l2 = str.length;
        for (let i2 = 0; i2 < l2; i2++) {
          const c2 = str[i2];
          if (c2 === "0" && skip) {
            if (i2 + 1 <= l2 && str[i2 + 1] === token2 || i2 + 1 === l2) {
              out += c2;
              skip = false;
            }
          } else {
            if (c2 === token2) {
              skip = true;
            } else {
              skip = false;
            }
            out += c2;
          }
        }
        return out;
      }
      function findToken(str, token2) {
        let ind = 0;
        for (let i2 = 0; i2 < str.length; i2++) {
          if (str[i2] === token2) ind++;
        }
        return ind;
      }
      var RDS1 = /^\.\.?\//u;
      var RDS2 = /^\/\.(?:\/|$)/u;
      var RDS3 = /^\/\.\.(?:\/|$)/u;
      var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/u;
      function removeDotSegments(input) {
        const output = [];
        while (input.length) {
          if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
          } else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
          } else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
          } else if (input === "." || input === "..") {
            input = "";
          } else {
            const im = input.match(RDS5);
            if (im) {
              const s2 = im[0];
              input = input.slice(s2.length);
              output.push(s2);
            } else {
              throw new Error("Unexpected dot segment condition");
            }
          }
        }
        return output.join("");
      }
      function normalizeComponentEncoding(components, esc) {
        const func = esc !== true ? escape : unescape;
        if (components.scheme !== void 0) {
          components.scheme = func(components.scheme);
        }
        if (components.userinfo !== void 0) {
          components.userinfo = func(components.userinfo);
        }
        if (components.host !== void 0) {
          components.host = func(components.host);
        }
        if (components.path !== void 0) {
          components.path = func(components.path);
        }
        if (components.query !== void 0) {
          components.query = func(components.query);
        }
        if (components.fragment !== void 0) {
          components.fragment = func(components.fragment);
        }
        return components;
      }
      function recomposeAuthority(components) {
        const uriTokens = [];
        if (components.userinfo !== void 0) {
          uriTokens.push(components.userinfo);
          uriTokens.push("@");
        }
        if (components.host !== void 0) {
          let host = unescape(components.host);
          const ipV4res = normalizeIPv4(host);
          if (ipV4res.isIPV4) {
            host = ipV4res.host;
          } else {
            const ipV6res = normalizeIPv6(ipV4res.host);
            if (ipV6res.isIPV6 === true) {
              host = `[${ipV6res.escapedHost}]`;
            } else {
              host = components.host;
            }
          }
          uriTokens.push(host);
        }
        if (typeof components.port === "number" || typeof components.port === "string") {
          uriTokens.push(":");
          uriTokens.push(String(components.port));
        }
        return uriTokens.length ? uriTokens.join("") : void 0;
      }
      module2.exports = {
        recomposeAuthority,
        normalizeComponentEncoding,
        removeDotSegments,
        normalizeIPv4,
        normalizeIPv6,
        stringArrayToHexStripped
      };
    }
  });

  // react-user-mgmt/node_modules/fast-uri/lib/schemes.js
  var require_schemes = __commonJS({
    "react-user-mgmt/node_modules/fast-uri/lib/schemes.js"(exports2, module2) {
      "use strict";
      var UUID_REG = /^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu;
      var URN_REG = /([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;
      function isSecure(wsComponents) {
        return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
      }
      function httpParse(components) {
        if (!components.host) {
          components.error = components.error || "HTTP URIs must have a host.";
        }
        return components;
      }
      function httpSerialize(components) {
        const secure = String(components.scheme).toLowerCase() === "https";
        if (components.port === (secure ? 443 : 80) || components.port === "") {
          components.port = void 0;
        }
        if (!components.path) {
          components.path = "/";
        }
        return components;
      }
      function wsParse(wsComponents) {
        wsComponents.secure = isSecure(wsComponents);
        wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
        wsComponents.path = void 0;
        wsComponents.query = void 0;
        return wsComponents;
      }
      function wsSerialize(wsComponents) {
        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
          wsComponents.port = void 0;
        }
        if (typeof wsComponents.secure === "boolean") {
          wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
          wsComponents.secure = void 0;
        }
        if (wsComponents.resourceName) {
          const [path, query] = wsComponents.resourceName.split("?");
          wsComponents.path = path && path !== "/" ? path : void 0;
          wsComponents.query = query;
          wsComponents.resourceName = void 0;
        }
        wsComponents.fragment = void 0;
        return wsComponents;
      }
      function urnParse(urnComponents, options) {
        if (!urnComponents.path) {
          urnComponents.error = "URN can not be parsed";
          return urnComponents;
        }
        const matches = urnComponents.path.match(URN_REG);
        if (matches) {
          const scheme = options.scheme || urnComponents.scheme || "urn";
          urnComponents.nid = matches[1].toLowerCase();
          urnComponents.nss = matches[2];
          const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;
          const schemeHandler = SCHEMES[urnScheme];
          urnComponents.path = void 0;
          if (schemeHandler) {
            urnComponents = schemeHandler.parse(urnComponents, options);
          }
        } else {
          urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }
        return urnComponents;
      }
      function urnSerialize(urnComponents, options) {
        const scheme = options.scheme || urnComponents.scheme || "urn";
        const nid = urnComponents.nid.toLowerCase();
        const urnScheme = `${scheme}:${options.nid || nid}`;
        const schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) {
          urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        const uriComponents = urnComponents;
        const nss = urnComponents.nss;
        uriComponents.path = `${nid || options.nid}:${nss}`;
        options.skipEscape = true;
        return uriComponents;
      }
      function urnuuidParse(urnComponents, options) {
        const uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = void 0;
        if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {
          uuidComponents.error = uuidComponents.error || "UUID is not valid.";
        }
        return uuidComponents;
      }
      function urnuuidSerialize(uuidComponents) {
        const urnComponents = uuidComponents;
        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
        return urnComponents;
      }
      var http = {
        scheme: "http",
        domainHost: true,
        parse: httpParse,
        serialize: httpSerialize
      };
      var https = {
        scheme: "https",
        domainHost: http.domainHost,
        parse: httpParse,
        serialize: httpSerialize
      };
      var ws = {
        scheme: "ws",
        domainHost: true,
        parse: wsParse,
        serialize: wsSerialize
      };
      var wss = {
        scheme: "wss",
        domainHost: ws.domainHost,
        parse: ws.parse,
        serialize: ws.serialize
      };
      var urn = {
        scheme: "urn",
        parse: urnParse,
        serialize: urnSerialize,
        skipNormalize: true
      };
      var urnuuid = {
        scheme: "urn:uuid",
        parse: urnuuidParse,
        serialize: urnuuidSerialize,
        skipNormalize: true
      };
      var SCHEMES = {
        http,
        https,
        ws,
        wss,
        urn,
        "urn:uuid": urnuuid
      };
      module2.exports = SCHEMES;
    }
  });

  // react-user-mgmt/node_modules/fast-uri/index.js
  var require_fast_uri = __commonJS({
    "react-user-mgmt/node_modules/fast-uri/index.js"(exports2, module2) {
      "use strict";
      var { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require_utils();
      var SCHEMES = require_schemes();
      function normalize(uri, options) {
        if (typeof uri === "string") {
          uri = serialize2(parse2(uri, options), options);
        } else if (typeof uri === "object") {
          uri = parse2(serialize2(uri, options), options);
        }
        return uri;
      }
      function resolve(baseURI, relativeURI, options) {
        const schemelessOptions = Object.assign({ scheme: "null" }, options);
        const resolved = resolveComponents(parse2(baseURI, schemelessOptions), parse2(relativeURI, schemelessOptions), schemelessOptions, true);
        return serialize2(resolved, { ...schemelessOptions, skipEscape: true });
      }
      function resolveComponents(base, relative, options, skipNormalization) {
        const target = {};
        if (!skipNormalization) {
          base = parse2(serialize2(base, options), options);
          relative = parse2(serialize2(relative, options), options);
        }
        options = options || {};
        if (!options.tolerant && relative.scheme) {
          target.scheme = relative.scheme;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (!relative.path) {
              target.path = base.path;
              if (relative.query !== void 0) {
                target.query = relative.query;
              } else {
                target.query = base.query;
              }
            } else {
              if (relative.path.charAt(0) === "/") {
                target.path = removeDotSegments(relative.path);
              } else {
                if ((base.userinfo !== void 0 || base.host !== void 0 || base.port !== void 0) && !base.path) {
                  target.path = "/" + relative.path;
                } else if (!base.path) {
                  target.path = relative.path;
                } else {
                  target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                }
                target.path = removeDotSegments(target.path);
              }
              target.query = relative.query;
            }
            target.userinfo = base.userinfo;
            target.host = base.host;
            target.port = base.port;
          }
          target.scheme = base.scheme;
        }
        target.fragment = relative.fragment;
        return target;
      }
      function equal(uriA, uriB, options) {
        if (typeof uriA === "string") {
          uriA = unescape(uriA);
          uriA = serialize2(normalizeComponentEncoding(parse2(uriA, options), true), { ...options, skipEscape: true });
        } else if (typeof uriA === "object") {
          uriA = serialize2(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true });
        }
        if (typeof uriB === "string") {
          uriB = unescape(uriB);
          uriB = serialize2(normalizeComponentEncoding(parse2(uriB, options), true), { ...options, skipEscape: true });
        } else if (typeof uriB === "object") {
          uriB = serialize2(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true });
        }
        return uriA.toLowerCase() === uriB.toLowerCase();
      }
      function serialize2(cmpts, opts) {
        const components = {
          host: cmpts.host,
          scheme: cmpts.scheme,
          userinfo: cmpts.userinfo,
          port: cmpts.port,
          path: cmpts.path,
          query: cmpts.query,
          nid: cmpts.nid,
          nss: cmpts.nss,
          uuid: cmpts.uuid,
          fragment: cmpts.fragment,
          reference: cmpts.reference,
          resourceName: cmpts.resourceName,
          secure: cmpts.secure,
          error: ""
        };
        const options = Object.assign({}, opts);
        const uriTokens = [];
        const schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
        if (components.path !== void 0) {
          if (!options.skipEscape) {
            components.path = escape(components.path);
            if (components.scheme !== void 0) {
              components.path = components.path.split("%3A").join(":");
            }
          } else {
            components.path = unescape(components.path);
          }
        }
        if (options.reference !== "suffix" && components.scheme) {
          uriTokens.push(components.scheme, ":");
        }
        const authority = recomposeAuthority(components);
        if (authority !== void 0) {
          if (options.reference !== "suffix") {
            uriTokens.push("//");
          }
          uriTokens.push(authority);
          if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
          }
        }
        if (components.path !== void 0) {
          let s2 = components.path;
          if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s2 = removeDotSegments(s2);
          }
          if (authority === void 0) {
            s2 = s2.replace(/^\/\//u, "/%2F");
          }
          uriTokens.push(s2);
        }
        if (components.query !== void 0) {
          uriTokens.push("?", components.query);
        }
        if (components.fragment !== void 0) {
          uriTokens.push("#", components.fragment);
        }
        return uriTokens.join("");
      }
      var hexLookUp = Array.from({ length: 127 }, (_v, k2) => /[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k2)));
      function nonSimpleDomain(value) {
        let code = 0;
        for (let i2 = 0, len = value.length; i2 < len; ++i2) {
          code = value.charCodeAt(i2);
          if (code > 126 || hexLookUp[code]) {
            return true;
          }
        }
        return false;
      }
      var URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;
      function parse2(uri, opts) {
        const options = Object.assign({}, opts);
        const parsed = {
          scheme: void 0,
          userinfo: void 0,
          host: "",
          port: void 0,
          path: "",
          query: void 0,
          fragment: void 0
        };
        const gotEncoding = uri.indexOf("%") !== -1;
        let isIP = false;
        if (options.reference === "suffix") uri = (options.scheme ? options.scheme + ":" : "") + "//" + uri;
        const matches = uri.match(URI_PARSE);
        if (matches) {
          parsed.scheme = matches[1];
          parsed.userinfo = matches[3];
          parsed.host = matches[4];
          parsed.port = parseInt(matches[5], 10);
          parsed.path = matches[6] || "";
          parsed.query = matches[7];
          parsed.fragment = matches[8];
          if (isNaN(parsed.port)) {
            parsed.port = matches[5];
          }
          if (parsed.host) {
            const ipv4result = normalizeIPv4(parsed.host);
            if (ipv4result.isIPV4 === false) {
              const ipv6result = normalizeIPv6(ipv4result.host);
              parsed.host = ipv6result.host.toLowerCase();
              isIP = ipv6result.isIPV6;
            } else {
              parsed.host = ipv4result.host;
              isIP = true;
            }
          }
          if (parsed.scheme === void 0 && parsed.userinfo === void 0 && parsed.host === void 0 && parsed.port === void 0 && parsed.query === void 0 && !parsed.path) {
            parsed.reference = "same-document";
          } else if (parsed.scheme === void 0) {
            parsed.reference = "relative";
          } else if (parsed.fragment === void 0) {
            parsed.reference = "absolute";
          } else {
            parsed.reference = "uri";
          }
          if (options.reference && options.reference !== "suffix" && options.reference !== parsed.reference) {
            parsed.error = parsed.error || "URI is not a " + options.reference + " reference.";
          }
          const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || "").toLowerCase()];
          if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) {
              try {
                parsed.host = URL.domainToASCII(parsed.host.toLowerCase());
              } catch (e2) {
                parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e2;
              }
            }
          }
          if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {
            if (gotEncoding && parsed.scheme !== void 0) {
              parsed.scheme = unescape(parsed.scheme);
            }
            if (gotEncoding && parsed.host !== void 0) {
              parsed.host = unescape(parsed.host);
            }
            if (parsed.path) {
              parsed.path = escape(unescape(parsed.path));
            }
            if (parsed.fragment) {
              parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));
            }
          }
          if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(parsed, options);
          }
        } else {
          parsed.error = parsed.error || "URI can not be parsed.";
        }
        return parsed;
      }
      var fastUri = {
        SCHEMES,
        normalize,
        resolve,
        resolveComponents,
        equal,
        serialize: serialize2,
        parse: parse2
      };
      module2.exports = fastUri;
      module2.exports.default = fastUri;
      module2.exports.fastUri = fastUri;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/uri.js
  var require_uri = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/uri.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var uri = require_fast_uri();
      uri.code = 'require("ajv/dist/runtime/uri").default';
      exports2.default = uri;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/core.js
  var require_core = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/core.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CodeGen = exports2.Name = exports2.nil = exports2.stringify = exports2.str = exports2._ = exports2.KeywordCxt = void 0;
      var validate_1 = require_validate();
      Object.defineProperty(exports2, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen();
      Object.defineProperty(exports2, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports2, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports2, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports2, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports2, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
      var validation_error_1 = require_validation_error();
      var ref_error_1 = require_ref_error();
      var rules_1 = require_rules();
      var compile_1 = require_compile();
      var codegen_2 = require_codegen();
      var resolve_1 = require_resolve();
      var dataType_1 = require_dataType();
      var util_1 = require_util();
      var $dataRefSchema = require_data();
      var uri_1 = require_uri();
      var defaultRegExp = (str, flags) => new RegExp(str, flags);
      defaultRegExp.code = "new RegExp";
      var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
      var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
        "validate",
        "serialize",
        "parse",
        "wrapper",
        "root",
        "schema",
        "keyword",
        "pattern",
        "formats",
        "validate$data",
        "func",
        "obj",
        "Error"
      ]);
      var removedOptions = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now."
      };
      var deprecatedOptions = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.'
      };
      var MAX_EXPRESSION = 200;
      function requiredOptions(o2) {
        var _a, _b, _c, _d, _e2, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const s2 = o2.strict;
        const _optz = (_a = o2.code) === null || _a === void 0 ? void 0 : _a.optimize;
        const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
        const regExp = (_c = (_b = o2.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
        const uriResolver = (_d = o2.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
        return {
          strictSchema: (_f = (_e2 = o2.strictSchema) !== null && _e2 !== void 0 ? _e2 : s2) !== null && _f !== void 0 ? _f : true,
          strictNumbers: (_h = (_g = o2.strictNumbers) !== null && _g !== void 0 ? _g : s2) !== null && _h !== void 0 ? _h : true,
          strictTypes: (_k = (_j = o2.strictTypes) !== null && _j !== void 0 ? _j : s2) !== null && _k !== void 0 ? _k : "log",
          strictTuples: (_m = (_l = o2.strictTuples) !== null && _l !== void 0 ? _l : s2) !== null && _m !== void 0 ? _m : "log",
          strictRequired: (_p = (_o = o2.strictRequired) !== null && _o !== void 0 ? _o : s2) !== null && _p !== void 0 ? _p : false,
          code: o2.code ? { ...o2.code, optimize, regExp } : { optimize, regExp },
          loopRequired: (_q = o2.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
          loopEnum: (_r = o2.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
          meta: (_s = o2.meta) !== null && _s !== void 0 ? _s : true,
          messages: (_t = o2.messages) !== null && _t !== void 0 ? _t : true,
          inlineRefs: (_u = o2.inlineRefs) !== null && _u !== void 0 ? _u : true,
          schemaId: (_v = o2.schemaId) !== null && _v !== void 0 ? _v : "$id",
          addUsedSchema: (_w = o2.addUsedSchema) !== null && _w !== void 0 ? _w : true,
          validateSchema: (_x = o2.validateSchema) !== null && _x !== void 0 ? _x : true,
          validateFormats: (_y = o2.validateFormats) !== null && _y !== void 0 ? _y : true,
          unicodeRegExp: (_z = o2.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
          int32range: (_0 = o2.int32range) !== null && _0 !== void 0 ? _0 : true,
          uriResolver
        };
      }
      var Ajv2 = class {
        constructor(opts = {}) {
          this.schemas = {};
          this.refs = {};
          this.formats = {};
          this._compilations = /* @__PURE__ */ new Set();
          this._loading = {};
          this._cache = /* @__PURE__ */ new Map();
          opts = this.opts = { ...opts, ...requiredOptions(opts) };
          const { es5, lines } = this.opts.code;
          this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
          this.logger = getLogger(opts.logger);
          const formatOpt = opts.validateFormats;
          opts.validateFormats = false;
          this.RULES = (0, rules_1.getRules)();
          checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
          checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
          this._metaOpts = getMetaSchemaOptions.call(this);
          if (opts.formats)
            addInitialFormats.call(this);
          this._addVocabularies();
          this._addDefaultMetaSchema();
          if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
          if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
          addInitialSchemas.call(this);
          opts.validateFormats = formatOpt;
        }
        _addVocabularies() {
          this.addKeyword("$async");
        }
        _addDefaultMetaSchema() {
          const { $data, meta, schemaId } = this.opts;
          let _dataRefSchema = $dataRefSchema;
          if (schemaId === "id") {
            _dataRefSchema = { ...$dataRefSchema };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
          }
          if (meta && $data)
            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
        }
        defaultMeta() {
          const { meta, schemaId } = this.opts;
          return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
        }
        validate(schemaKeyRef, data) {
          let v2;
          if (typeof schemaKeyRef == "string") {
            v2 = this.getSchema(schemaKeyRef);
            if (!v2)
              throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
          } else {
            v2 = this.compile(schemaKeyRef);
          }
          const valid = v2(data);
          if (!("$async" in v2))
            this.errors = v2.errors;
          return valid;
        }
        compile(schema, _meta) {
          const sch = this._addSchema(schema, _meta);
          return sch.validate || this._compileSchemaEnv(sch);
        }
        compileAsync(schema, meta) {
          if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
          }
          const { loadSchema } = this.opts;
          return runCompileAsync.call(this, schema, meta);
          async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
          }
          async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
              await runCompileAsync.call(this, { $ref }, true);
            }
          }
          async function _compileAsync(sch) {
            try {
              return this._compileSchemaEnv(sch);
            } catch (e2) {
              if (!(e2 instanceof ref_error_1.default))
                throw e2;
              checkLoaded.call(this, e2);
              await loadMissingSchema.call(this, e2.missingSchema);
              return _compileAsync.call(this, sch);
            }
          }
          function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
              throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
          }
          async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
              await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
              this.addSchema(_schema, ref, meta);
          }
          async function _loadSchema(ref) {
            const p2 = this._loading[ref];
            if (p2)
              return p2;
            try {
              return await (this._loading[ref] = loadSchema(ref));
            } finally {
              delete this._loading[ref];
            }
          }
        }
        // Adds schema to the instance
        addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema) {
          if (Array.isArray(schema)) {
            for (const sch of schema)
              this.addSchema(sch, void 0, _meta, _validateSchema);
            return this;
          }
          let id;
          if (typeof schema === "object") {
            const { schemaId } = this.opts;
            id = schema[schemaId];
            if (id !== void 0 && typeof id != "string") {
              throw new Error(`schema ${schemaId} must be string`);
            }
          }
          key = (0, resolve_1.normalizeId)(key || id);
          this._checkUnique(key);
          this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
          return this;
        }
        // Add schema that will be used to validate other schemas
        // options in META_IGNORE_OPTIONS are alway set to false
        addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
          this.addSchema(schema, key, true, _validateSchema);
          return this;
        }
        //  Validate schema against its meta-schema
        validateSchema(schema, throwOrLogError) {
          if (typeof schema == "boolean")
            return true;
          let $schema;
          $schema = schema.$schema;
          if ($schema !== void 0 && typeof $schema != "string") {
            throw new Error("$schema must be a string");
          }
          $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
          if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
          }
          const valid = this.validate($schema, schema);
          if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
              this.logger.error(message);
            else
              throw new Error(message);
          }
          return valid;
        }
        // Get compiled schema by `key` or `ref`.
        // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
        getSchema(keyRef) {
          let sch;
          while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
          if (sch === void 0) {
            const { schemaId } = this.opts;
            const root2 = new compile_1.SchemaEnv({ schema: {}, schemaId });
            sch = compile_1.resolveSchema.call(this, root2, keyRef);
            if (!sch)
              return;
            this.refs[keyRef] = sch;
          }
          return sch.validate || this._compileSchemaEnv(sch);
        }
        // Remove cached schema(s).
        // If no parameter is passed all schemas but meta-schemas are removed.
        // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
        // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
        removeSchema(schemaKeyRef) {
          if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
          }
          switch (typeof schemaKeyRef) {
            case "undefined":
              this._removeAllSchemas(this.schemas);
              this._removeAllSchemas(this.refs);
              this._cache.clear();
              return this;
            case "string": {
              const sch = getSchEnv.call(this, schemaKeyRef);
              if (typeof sch == "object")
                this._cache.delete(sch.schema);
              delete this.schemas[schemaKeyRef];
              delete this.refs[schemaKeyRef];
              return this;
            }
            case "object": {
              const cacheKey = schemaKeyRef;
              this._cache.delete(cacheKey);
              let id = schemaKeyRef[this.opts.schemaId];
              if (id) {
                id = (0, resolve_1.normalizeId)(id);
                delete this.schemas[id];
                delete this.refs[id];
              }
              return this;
            }
            default:
              throw new Error("ajv.removeSchema: invalid parameter");
          }
        }
        // add "vocabulary" - a collection of keywords
        addVocabulary(definitions) {
          for (const def of definitions)
            this.addKeyword(def);
          return this;
        }
        addKeyword(kwdOrDef, def) {
          let keyword;
          if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
              this.logger.warn("these parameters are deprecated, see docs for addKeyword");
              def.keyword = keyword;
            }
          } else if (typeof kwdOrDef == "object" && def === void 0) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
              throw new Error("addKeywords: keyword must be string or non-empty array");
            }
          } else {
            throw new Error("invalid addKeywords parameters");
          }
          checkKeyword.call(this, keyword, def);
          if (!def) {
            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
            return this;
          }
          keywordMetaschema.call(this, def);
          const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
          };
          (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k2) => addRule.call(this, k2, definition) : (k2) => definition.type.forEach((t2) => addRule.call(this, k2, definition, t2)));
          return this;
        }
        getKeyword(keyword) {
          const rule = this.RULES.all[keyword];
          return typeof rule == "object" ? rule.definition : !!rule;
        }
        // Remove keyword
        removeKeyword(keyword) {
          const { RULES } = this;
          delete RULES.keywords[keyword];
          delete RULES.all[keyword];
          for (const group of RULES.rules) {
            const i2 = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i2 >= 0)
              group.rules.splice(i2, 1);
          }
          return this;
        }
        // Add format
        addFormat(name, format) {
          if (typeof format == "string")
            format = new RegExp(format);
          this.formats[name] = format;
          return this;
        }
        errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
          if (!errors || errors.length === 0)
            return "No errors";
          return errors.map((e2) => `${dataVar}${e2.instancePath} ${e2.message}`).reduce((text, msg) => text + separator + msg);
        }
        $dataMetaSchema(metaSchema, keywordsJsonPointers) {
          const rules = this.RULES.all;
          metaSchema = JSON.parse(JSON.stringify(metaSchema));
          for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1);
            let keywords = metaSchema;
            for (const seg of segments)
              keywords = keywords[seg];
            for (const key in rules) {
              const rule = rules[key];
              if (typeof rule != "object")
                continue;
              const { $data } = rule.definition;
              const schema = keywords[key];
              if ($data && schema)
                keywords[key] = schemaOrData(schema);
            }
          }
          return metaSchema;
        }
        _removeAllSchemas(schemas, regex) {
          for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
              if (typeof sch == "string") {
                delete schemas[keyRef];
              } else if (sch && !sch.meta) {
                this._cache.delete(sch.schema);
                delete schemas[keyRef];
              }
            }
          }
        }
        _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
          let id;
          const { schemaId } = this.opts;
          if (typeof schema == "object") {
            id = schema[schemaId];
          } else {
            if (this.opts.jtd)
              throw new Error("schema must be object");
            else if (typeof schema != "boolean")
              throw new Error("schema must be object or boolean");
          }
          let sch = this._cache.get(schema);
          if (sch !== void 0)
            return sch;
          baseId = (0, resolve_1.normalizeId)(id || baseId);
          const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
          sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
          this._cache.set(sch.schema, sch);
          if (addSchema && !baseId.startsWith("#")) {
            if (baseId)
              this._checkUnique(baseId);
            this.refs[baseId] = sch;
          }
          if (validateSchema)
            this.validateSchema(schema, true);
          return sch;
        }
        _checkUnique(id) {
          if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
          }
        }
        _compileSchemaEnv(sch) {
          if (sch.meta)
            this._compileMetaSchema(sch);
          else
            compile_1.compileSchema.call(this, sch);
          if (!sch.validate)
            throw new Error("ajv implementation error");
          return sch.validate;
        }
        _compileMetaSchema(sch) {
          const currentOpts = this.opts;
          this.opts = this._metaOpts;
          try {
            compile_1.compileSchema.call(this, sch);
          } finally {
            this.opts = currentOpts;
          }
        }
      };
      Ajv2.ValidationError = validation_error_1.default;
      Ajv2.MissingRefError = ref_error_1.default;
      exports2.default = Ajv2;
      function checkOptions(checkOpts, options, msg, log = "error") {
        for (const key in checkOpts) {
          const opt = key;
          if (opt in options)
            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
        }
      }
      function getSchEnv(keyRef) {
        keyRef = (0, resolve_1.normalizeId)(keyRef);
        return this.schemas[keyRef] || this.refs[keyRef];
      }
      function addInitialSchemas() {
        const optsSchemas = this.opts.schemas;
        if (!optsSchemas)
          return;
        if (Array.isArray(optsSchemas))
          this.addSchema(optsSchemas);
        else
          for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
      }
      function addInitialFormats() {
        for (const name in this.opts.formats) {
          const format = this.opts.formats[name];
          if (format)
            this.addFormat(name, format);
        }
      }
      function addInitialKeywords(defs) {
        if (Array.isArray(defs)) {
          this.addVocabulary(defs);
          return;
        }
        this.logger.warn("keywords option as map is deprecated, pass array");
        for (const keyword in defs) {
          const def = defs[keyword];
          if (!def.keyword)
            def.keyword = keyword;
          this.addKeyword(def);
        }
      }
      function getMetaSchemaOptions() {
        const metaOpts = { ...this.opts };
        for (const opt of META_IGNORE_OPTIONS)
          delete metaOpts[opt];
        return metaOpts;
      }
      var noLogs = { log() {
      }, warn() {
      }, error() {
      } };
      function getLogger(logger) {
        if (logger === false)
          return noLogs;
        if (logger === void 0)
          return console;
        if (logger.log && logger.warn && logger.error)
          return logger;
        throw new Error("logger must implement log, warn and error methods");
      }
      var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
      function checkKeyword(keyword, def) {
        const { RULES } = this;
        (0, util_1.eachItem)(keyword, (kwd) => {
          if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
          if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
        });
        if (!def)
          return;
        if (def.$data && !("code" in def || "validate" in def)) {
          throw new Error('$data keyword must have "code" or "validate" function');
        }
      }
      function addRule(keyword, definition, dataType) {
        var _a;
        const post = definition === null || definition === void 0 ? void 0 : definition.post;
        if (dataType && post)
          throw new Error('keyword with "post" flag cannot have "type"');
        const { RULES } = this;
        let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t2 }) => t2 === dataType);
        if (!ruleGroup) {
          ruleGroup = { type: dataType, rules: [] };
          RULES.rules.push(ruleGroup);
        }
        RULES.keywords[keyword] = true;
        if (!definition)
          return;
        const rule = {
          keyword,
          definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
          }
        };
        if (definition.before)
          addBeforeRule.call(this, ruleGroup, rule, definition.before);
        else
          ruleGroup.rules.push(rule);
        RULES.all[keyword] = rule;
        (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
      }
      function addBeforeRule(ruleGroup, rule, before) {
        const i2 = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
        if (i2 >= 0) {
          ruleGroup.rules.splice(i2, 0, rule);
        } else {
          ruleGroup.rules.push(rule);
          this.logger.warn(`rule ${before} is not defined`);
        }
      }
      function keywordMetaschema(def) {
        let { metaSchema } = def;
        if (metaSchema === void 0)
          return;
        if (def.$data && this.opts.$data)
          metaSchema = schemaOrData(metaSchema);
        def.validateSchema = this.compile(metaSchema, true);
      }
      var $dataRef = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
      };
      function schemaOrData(schema) {
        return { anyOf: [schema, $dataRef] };
      }
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/core/id.js
  var require_id = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/core/id.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var def = {
        keyword: "id",
        code() {
          throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/core/ref.js
  var require_ref = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/core/ref.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.callRef = exports2.getValidate = void 0;
      var ref_error_1 = require_ref_error();
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var compile_1 = require_compile();
      var util_1 = require_util();
      var def = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
          const { gen, schema: $ref, it } = cxt;
          const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
          const { root: root2 } = env;
          if (($ref === "#" || $ref === "#/") && baseId === root2.baseId)
            return callRootRef();
          const schOrEnv = compile_1.resolveRef.call(self2, root2, baseId, $ref);
          if (schOrEnv === void 0)
            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
          if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
          return inlineRefSchema(schOrEnv);
          function callRootRef() {
            if (env === root2)
              return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: root2 });
            return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root2, root2.$async);
          }
          function callValidate(sch) {
            const v2 = getValidate(cxt, sch);
            callRef(cxt, v2, sch, sch.$async);
          }
          function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
              schema: sch,
              dataTypes: [],
              schemaPath: codegen_1.nil,
              topSchemaRef: schName,
              errSchemaPath: $ref
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
          }
        }
      };
      function getValidate(cxt, sch) {
        const { gen } = cxt;
        return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
      }
      exports2.getValidate = getValidate;
      function callRef(cxt, v2, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
        if ($async)
          callAsyncRef();
        else
          callSyncRef();
        function callAsyncRef() {
          if (!env.$async)
            throw new Error("async schema referenced by sync schema");
          const valid = gen.let("valid");
          gen.try(() => {
            gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v2, passCxt)}`);
            addEvaluatedFrom(v2);
            if (!allErrors)
              gen.assign(valid, true);
          }, (e2) => {
            gen.if((0, codegen_1._)`!(${e2} instanceof ${it.ValidationError})`, () => gen.throw(e2));
            addErrorsFrom(e2);
            if (!allErrors)
              gen.assign(valid, false);
          });
          cxt.ok(valid);
        }
        function callSyncRef() {
          cxt.result((0, code_1.callValidateCode)(cxt, v2, passCxt), () => addEvaluatedFrom(v2), () => addErrorsFrom(v2));
        }
        function addErrorsFrom(source) {
          const errs = (0, codegen_1._)`${source}.errors`;
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
          gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source) {
          var _a;
          if (!it.opts.unevaluated)
            return;
          const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
          if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
              if (schEvaluated.props !== void 0) {
                it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
              }
            } else {
              const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
              it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
          }
          if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
              if (schEvaluated.items !== void 0) {
                it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
              }
            } else {
              const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
              it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
          }
        }
      }
      exports2.callRef = callRef;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/core/index.js
  var require_core2 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/core/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var id_1 = require_id();
      var ref_1 = require_ref();
      var core = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1.default,
        ref_1.default
      ];
      exports2.default = core;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitNumber.js
  var require_limitNumber = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var ops = codegen_1.operators;
      var KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
      };
      var error = {
        message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
      };
      var def = {
        keyword: Object.keys(KWDs),
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/multipleOf.js
  var require_multipleOf = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
      };
      var def = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, schemaCode, it } = cxt;
          const prec = it.opts.multipleOfPrecision;
          const res = gen.let("res");
          const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
          cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/ucs2length.js
  var require_ucs2length = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/ucs2length.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      function ucs2length(str) {
        const len = str.length;
        let length2 = 0;
        let pos = 0;
        let value;
        while (pos < len) {
          length2++;
          value = str.charCodeAt(pos++);
          if (value >= 55296 && value <= 56319 && pos < len) {
            value = str.charCodeAt(pos);
            if ((value & 64512) === 56320)
              pos++;
          }
        }
        return length2;
      }
      exports2.default = ucs2length;
      ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitLength.js
  var require_limitLength = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var ucs2length_1 = require_ucs2length();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxLength" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode, it } = cxt;
          const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
          const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
          cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/pattern.js
  var require_pattern = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
      };
      var def = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error,
        code(cxt) {
          const { data, $data, schema, schemaCode, it } = cxt;
          const u2 = it.opts.unicodeRegExp ? "u" : "";
          const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u2}))` : (0, code_1.usePattern)(cxt, schema);
          cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitProperties.js
  var require_limitProperties = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxProperties" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/required.js
  var require_required = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/required.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
      };
      var def = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, schema, schemaCode, data, $data, it } = cxt;
          const { opts } = it;
          if (!$data && schema.length === 0)
            return;
          const useLoop = schema.length >= opts.loopRequired;
          if (it.allErrors)
            allErrorsMode();
          else
            exitOnErrorMode();
          if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema) {
              if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
                const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
              }
            }
          }
          function allErrorsMode() {
            if (useLoop || $data) {
              cxt.block$data(codegen_1.nil, loopAllRequired);
            } else {
              for (const prop of schema) {
                (0, code_1.checkReportMissingProp)(cxt, prop);
              }
            }
          }
          function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
              const valid = gen.let("valid", true);
              cxt.block$data(valid, () => loopUntilMissing(missing, valid));
              cxt.ok(valid);
            } else {
              gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
              (0, code_1.reportMissingProp)(cxt, missing);
              gen.else();
            }
          }
          function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
              cxt.setParams({ missingProperty: prop });
              gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
          }
          function loopUntilMissing(missing, valid) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
              gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
              gen.if((0, codegen_1.not)(valid), () => {
                cxt.error();
                gen.break();
              });
            }, codegen_1.nil);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitItems.js
  var require_limitItems = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxItems" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/equal.js
  var require_equal = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/runtime/equal.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var equal = require_fast_deep_equal();
      equal.code = 'require("ajv/dist/runtime/equal").default';
      exports2.default = equal;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
  var require_uniqueItems = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var dataType_1 = require_dataType();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var equal_1 = require_equal();
      var error = {
        message: ({ params: { i: i2, j: j2 } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j2} and ${i2} are identical)`,
        params: ({ params: { i: i2, j: j2 } }) => (0, codegen_1._)`{i: ${i2}, j: ${j2}}`
      };
      var def = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
          if (!$data && !schema)
            return;
          const valid = gen.let("valid");
          const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
          cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
          cxt.ok(valid);
          function validateUniqueItems() {
            const i2 = gen.let("i", (0, codegen_1._)`${data}.length`);
            const j2 = gen.let("j");
            cxt.setParams({ i: i2, j: j2 });
            gen.assign(valid, true);
            gen.if((0, codegen_1._)`${i2} > 1`, () => (canOptimize() ? loopN : loopN2)(i2, j2));
          }
          function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t2) => t2 === "object" || t2 === "array");
          }
          function loopN(i2, j2) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._)`{}`);
            gen.for((0, codegen_1._)`;${i2}--;`, () => {
              gen.let(item, (0, codegen_1._)`${data}[${i2}]`);
              gen.if(wrongType, (0, codegen_1._)`continue`);
              if (itemTypes.length > 1)
                gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
              gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
                gen.assign(j2, (0, codegen_1._)`${indices}[${item}]`);
                cxt.error();
                gen.assign(valid, false).break();
              }).code((0, codegen_1._)`${indices}[${item}] = ${i2}`);
            });
          }
          function loopN2(i2, j2) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._)`;${i2}--;`, () => gen.for((0, codegen_1._)`${j2} = ${i2}; ${j2}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i2}], ${data}[${j2}])`, () => {
              cxt.error();
              gen.assign(valid, false).break(outer);
            })));
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/const.js
  var require_const = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var equal_1 = require_equal();
      var error = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
      };
      var def = {
        keyword: "const",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schemaCode, schema } = cxt;
          if ($data || schema && typeof schema == "object") {
            cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
          } else {
            cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/enum.js
  var require_enum = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/enum.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var equal_1 = require_equal();
      var error = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
      };
      var def = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema, schemaCode, it } = cxt;
          if (!$data && schema.length === 0)
            throw new Error("enum must have non-empty array");
          const useLoop = schema.length >= it.opts.loopEnum;
          let eql;
          const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
          let valid;
          if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
          } else {
            if (!Array.isArray(schema))
              throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = (0, codegen_1.or)(...schema.map((_x, i2) => equalCode(vSchema, i2)));
          }
          cxt.pass(valid);
          function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v2) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v2})`, () => gen.assign(valid, true).break()));
          }
          function equalCode(vSchema, i2) {
            const sch = schema[i2];
            return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i2}])` : (0, codegen_1._)`${data} === ${sch}`;
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/index.js
  var require_validation = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/validation/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var limitNumber_1 = require_limitNumber();
      var multipleOf_1 = require_multipleOf();
      var limitLength_1 = require_limitLength();
      var pattern_1 = require_pattern();
      var limitProperties_1 = require_limitProperties();
      var required_1 = require_required();
      var limitItems_1 = require_limitItems();
      var uniqueItems_1 = require_uniqueItems();
      var const_1 = require_const();
      var enum_1 = require_enum();
      var validation = [
        // number
        limitNumber_1.default,
        multipleOf_1.default,
        // string
        limitLength_1.default,
        pattern_1.default,
        // object
        limitProperties_1.default,
        required_1.default,
        // array
        limitItems_1.default,
        uniqueItems_1.default,
        // any
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1.default,
        enum_1.default
      ];
      exports2.default = validation;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
  var require_additionalItems = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateAdditionalItems = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { parentSchema, it } = cxt;
          const { items } = parentSchema;
          if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
          }
          validateAdditionalItems(cxt, items);
        }
      };
      function validateAdditionalItems(cxt, items) {
        const { gen, schema, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        if (schema === false) {
          cxt.setParams({ len: items.length });
          cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
        } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
          const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
          gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
          cxt.ok(valid);
        }
        function validateItems(valid) {
          gen.forRange("i", items.length, len, (i2) => {
            cxt.subschema({ keyword, dataProp: i2, dataPropType: util_1.Type.Num }, valid);
            if (!it.allErrors)
              gen.if((0, codegen_1.not)(valid), () => gen.break());
          });
        }
      }
      exports2.validateAdditionalItems = validateAdditionalItems;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/items.js
  var require_items2 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/items.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateTuple = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var code_1 = require_code2();
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
          const { schema, it } = cxt;
          if (Array.isArray(schema))
            return validateTuple(cxt, "additionalItems", schema);
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
          cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      function validateTuple(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
          it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        schArr.forEach((sch, i2) => {
          if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
          gen.if((0, codegen_1._)`${len} > ${i2}`, () => cxt.subschema({
            keyword,
            schemaProp: i2,
            dataProp: i2
          }, valid));
          cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
          const { opts, errSchemaPath } = it;
          const l2 = schArr.length;
          const fullTuple = l2 === sch.minItems && (l2 === sch.maxItems || sch[extraItems] === false);
          if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l2}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
          }
        }
      }
      exports2.validateTuple = validateTuple;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
  var require_prefixItems = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var items_1 = require_items2();
      var def = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/items2020.js
  var require_items2020 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/items2020.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var code_1 = require_code2();
      var additionalItems_1 = require_additionalItems();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { schema, parentSchema, it } = cxt;
          const { prefixItems } = parentSchema;
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
          if (prefixItems)
            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
          else
            cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/contains.js
  var require_contains = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
      };
      var def = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema, parentSchema, data, it } = cxt;
          let min;
          let max;
          const { minContains, maxContains } = parentSchema;
          if (it.opts.next) {
            min = minContains === void 0 ? 1 : minContains;
            max = maxContains;
          } else {
            min = 1;
          }
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          cxt.setParams({ min, max });
          if (max === void 0 && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
          }
          if (max !== void 0 && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
          }
          if ((0, util_1.alwaysValidSchema)(it, schema)) {
            let cond = (0, codegen_1._)`${len} >= ${min}`;
            if (max !== void 0)
              cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
          }
          it.items = true;
          const valid = gen.name("valid");
          if (max === void 0 && min === 1) {
            validateItems(valid, () => gen.if(valid, () => gen.break()));
          } else if (min === 0) {
            gen.let(valid, true);
            if (max !== void 0)
              gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
          } else {
            gen.let(valid, false);
            validateItemsWithCount();
          }
          cxt.result(valid, () => cxt.reset());
          function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
          }
          function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i2) => {
              cxt.subschema({
                keyword: "contains",
                dataProp: i2,
                dataPropType: util_1.Type.Num,
                compositeRule: true
              }, _valid);
              block();
            });
          }
          function checkLimits(count) {
            gen.code((0, codegen_1._)`${count}++`);
            if (max === void 0) {
              gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
            } else {
              gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());
              if (min === 1)
                gen.assign(valid, true);
              else
                gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));
            }
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/dependencies.js
  var require_dependencies = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateSchemaDeps = exports2.validatePropertyDeps = exports2.error = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var code_1 = require_code2();
      exports2.error = {
        message: ({ params: { property: property2, depsCount, deps } }) => {
          const property_ies = depsCount === 1 ? "property" : "properties";
          return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property2} is present`;
        },
        params: ({ params: { property: property2, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property2},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
        // TODO change to reference
      };
      var def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports2.error,
        code(cxt) {
          const [propDeps, schDeps] = splitDependencies(cxt);
          validatePropertyDeps(cxt, propDeps);
          validateSchemaDeps(cxt, schDeps);
        }
      };
      function splitDependencies({ schema }) {
        const propertyDeps = {};
        const schemaDeps = {};
        for (const key in schema) {
          if (key === "__proto__")
            continue;
          const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
          deps[key] = schema[key];
        }
        return [propertyDeps, schemaDeps];
      }
      function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
        const { gen, data, it } = cxt;
        if (Object.keys(propertyDeps).length === 0)
          return;
        const missing = gen.let("missing");
        for (const prop in propertyDeps) {
          const deps = propertyDeps[prop];
          if (deps.length === 0)
            continue;
          const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
          cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", ")
          });
          if (it.allErrors) {
            gen.if(hasProperty, () => {
              for (const depProp of deps) {
                (0, code_1.checkReportMissingProp)(cxt, depProp);
              }
            });
          } else {
            gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
      }
      exports2.validatePropertyDeps = validatePropertyDeps;
      function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        for (const prop in schemaDeps) {
          if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
            continue;
          gen.if(
            (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties),
            () => {
              const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
              cxt.mergeValidEvaluated(schCxt, valid);
            },
            () => gen.var(valid, true)
            // TODO var
          );
          cxt.ok(valid);
        }
      }
      exports2.validateSchemaDeps = validateSchemaDeps;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
  var require_propertyNames = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
      };
      var def = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error,
        code(cxt) {
          const { gen, schema, data, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
          const valid = gen.name("valid");
          gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
              keyword: "propertyNames",
              data: key,
              dataTypes: ["string"],
              propertyName: key,
              compositeRule: true
            }, valid);
            gen.if((0, codegen_1.not)(valid), () => {
              cxt.error(true);
              if (!it.allErrors)
                gen.break();
            });
          });
          cxt.ok(valid);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
  var require_additionalProperties = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var util_1 = require_util();
      var error = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
      };
      var def = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema, parentSchema, data, errsCount, it } = cxt;
          if (!errsCount)
            throw new Error("ajv implementation error");
          const { allErrors, opts } = it;
          it.props = true;
          if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
            return;
          const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
          const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
          checkAdditionalProperties();
          cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
          function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
              if (!props.length && !patProps.length)
                additionalPropertyCode(key);
              else
                gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
          }
          function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
              const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
              definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            } else if (props.length) {
              definedProp = (0, codegen_1.or)(...props.map((p2) => (0, codegen_1._)`${key} === ${p2}`));
            } else {
              definedProp = codegen_1.nil;
            }
            if (patProps.length) {
              definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p2) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p2)}.test(${key})`));
            }
            return (0, codegen_1.not)(definedProp);
          }
          function deleteAdditional(key) {
            gen.code((0, codegen_1._)`delete ${data}[${key}]`);
          }
          function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
              deleteAdditional(key);
              return;
            }
            if (schema === false) {
              cxt.setParams({ additionalProperty: key });
              cxt.error();
              if (!allErrors)
                gen.break();
              return;
            }
            if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
              const valid = gen.name("valid");
              if (opts.removeAdditional === "failing") {
                applyAdditionalSchema(key, valid, false);
                gen.if((0, codegen_1.not)(valid), () => {
                  cxt.reset();
                  deleteAdditional(key);
                });
              } else {
                applyAdditionalSchema(key, valid);
                if (!allErrors)
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
              }
            }
          }
          function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
              keyword: "additionalProperties",
              dataProp: key,
              dataPropType: util_1.Type.Str
            };
            if (errors === false) {
              Object.assign(subschema, {
                compositeRule: true,
                createErrors: false,
                allErrors: false
              });
            }
            cxt.subschema(subschema, valid);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/properties.js
  var require_properties2 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var validate_1 = require_validate();
      var code_1 = require_code2();
      var util_1 = require_util();
      var additionalProperties_1 = require_additionalProperties();
      var def = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema, parentSchema, data, it } = cxt;
          if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
          }
          const allProps = (0, code_1.allSchemaProperties)(schema);
          for (const prop of allProps) {
            it.definedProperties.add(prop);
          }
          if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
          }
          const properties2 = allProps.filter((p2) => !(0, util_1.alwaysValidSchema)(it, schema[p2]));
          if (properties2.length === 0)
            return;
          const valid = gen.name("valid");
          for (const prop of properties2) {
            if (hasDefault(prop)) {
              applyPropertySchema(prop);
            } else {
              gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
              applyPropertySchema(prop);
              if (!it.allErrors)
                gen.else().var(valid, true);
              gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
          }
          function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== void 0;
          }
          function applyPropertySchema(prop) {
            cxt.subschema({
              keyword: "properties",
              schemaProp: prop,
              dataProp: prop
            }, valid);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
  var require_patternProperties = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var util_2 = require_util();
      var def = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema, data, parentSchema, it } = cxt;
          const { opts } = it;
          const patterns = (0, code_1.allSchemaProperties)(schema);
          const alwaysValidPatterns = patterns.filter((p2) => (0, util_1.alwaysValidSchema)(it, schema[p2]));
          if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
            return;
          }
          const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
          const valid = gen.name("valid");
          if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
          }
          const { props } = it;
          validatePatternProperties();
          function validatePatternProperties() {
            for (const pat of patterns) {
              if (checkProperties)
                checkMatchingProperties(pat);
              if (it.allErrors) {
                validateProperties(pat);
              } else {
                gen.var(valid, true);
                validateProperties(pat);
                gen.if(valid);
              }
            }
          }
          function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
              if (new RegExp(pat).test(prop)) {
                (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
              }
            }
          }
          function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
              gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
                const alwaysValid = alwaysValidPatterns.includes(pat);
                if (!alwaysValid) {
                  cxt.subschema({
                    keyword: "patternProperties",
                    schemaProp: pat,
                    dataProp: key,
                    dataPropType: util_2.Type.Str
                  }, valid);
                }
                if (it.opts.unevaluated && props !== true) {
                  gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                } else if (!alwaysValid && !it.allErrors) {
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
                }
              });
            });
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/not.js
  var require_not = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/not.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
          const { gen, schema, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema)) {
            cxt.fail();
            return;
          }
          const valid = gen.name("valid");
          cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, valid);
          cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/anyOf.js
  var require_anyOf = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code2();
      var def = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1.validateUnion,
        error: { message: "must match a schema in anyOf" }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/oneOf.js
  var require_oneOf = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
      };
      var def = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema, parentSchema, it } = cxt;
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          if (it.opts.discriminator && parentSchema.discriminator)
            return;
          const schArr = schema;
          const valid = gen.let("valid", false);
          const passing = gen.let("passing", null);
          const schValid = gen.name("_valid");
          cxt.setParams({ passing });
          gen.block(validateOneOf);
          cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
          function validateOneOf() {
            schArr.forEach((sch, i2) => {
              let schCxt;
              if ((0, util_1.alwaysValidSchema)(it, sch)) {
                gen.var(schValid, true);
              } else {
                schCxt = cxt.subschema({
                  keyword: "oneOf",
                  schemaProp: i2,
                  compositeRule: true
                }, schValid);
              }
              if (i2 > 0) {
                gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i2}]`).else();
              }
              gen.if(schValid, () => {
                gen.assign(valid, true);
                gen.assign(passing, i2);
                if (schCxt)
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
              });
            });
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/allOf.js
  var require_allOf = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
          const { gen, schema, it } = cxt;
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          const valid = gen.name("valid");
          schema.forEach((sch, i2) => {
            if ((0, util_1.alwaysValidSchema)(it, sch))
              return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i2 }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
          });
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/if.js
  var require_if = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/if.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
      };
      var def = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, parentSchema, it } = cxt;
          if (parentSchema.then === void 0 && parentSchema.else === void 0) {
            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
          }
          const hasThen = hasSchema(it, "then");
          const hasElse = hasSchema(it, "else");
          if (!hasThen && !hasElse)
            return;
          const valid = gen.let("valid", true);
          const schValid = gen.name("_valid");
          validateIf();
          cxt.reset();
          if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
          } else if (hasThen) {
            gen.if(schValid, validateClause("then"));
          } else {
            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
          }
          cxt.pass(valid, () => cxt.error(true));
          function validateIf() {
            const schCxt = cxt.subschema({
              keyword: "if",
              compositeRule: true,
              createErrors: false,
              allErrors: false
            }, schValid);
            cxt.mergeEvaluated(schCxt);
          }
          function validateClause(keyword, ifClause) {
            return () => {
              const schCxt = cxt.subschema({ keyword }, schValid);
              gen.assign(valid, schValid);
              cxt.mergeValidEvaluated(schCxt, valid);
              if (ifClause)
                gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
              else
                cxt.setParams({ ifClause: keyword });
            };
          }
        }
      };
      function hasSchema(it, keyword) {
        const schema = it.schema[keyword];
        return schema !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema);
      }
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/thenElse.js
  var require_thenElse = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
          if (parentSchema.if === void 0)
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/index.js
  var require_applicator = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/applicator/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var additionalItems_1 = require_additionalItems();
      var prefixItems_1 = require_prefixItems();
      var items_1 = require_items2();
      var items2020_1 = require_items2020();
      var contains_1 = require_contains();
      var dependencies_1 = require_dependencies();
      var propertyNames_1 = require_propertyNames();
      var additionalProperties_1 = require_additionalProperties();
      var properties_1 = require_properties2();
      var patternProperties_1 = require_patternProperties();
      var not_1 = require_not();
      var anyOf_1 = require_anyOf();
      var oneOf_1 = require_oneOf();
      var allOf_1 = require_allOf();
      var if_1 = require_if();
      var thenElse_1 = require_thenElse();
      function getApplicator(draft2020 = false) {
        const applicator = [
          // any
          not_1.default,
          anyOf_1.default,
          oneOf_1.default,
          allOf_1.default,
          if_1.default,
          thenElse_1.default,
          // object
          propertyNames_1.default,
          additionalProperties_1.default,
          dependencies_1.default,
          properties_1.default,
          patternProperties_1.default
        ];
        if (draft2020)
          applicator.push(prefixItems_1.default, items2020_1.default);
        else
          applicator.push(additionalItems_1.default, items_1.default);
        applicator.push(contains_1.default);
        return applicator;
      }
      exports2.default = getApplicator;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/format/format.js
  var require_format = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/format/format.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
      };
      var def = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error,
        code(cxt, ruleType) {
          const { gen, data, $data, schema, schemaCode, it } = cxt;
          const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
          if (!opts.validateFormats)
            return;
          if ($data)
            validate$DataFormat();
          else
            validateFormat();
          function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
              ref: self2.formats,
              code: opts.code.formats
            });
            const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
              if (opts.strictSchema === false)
                return codegen_1.nil;
              return (0, codegen_1._)`${schemaCode} && !${format}`;
            }
            function invalidFmt() {
              const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
              const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
              return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
          }
          function validateFormat() {
            const formatDef = self2.formats[schema];
            if (!formatDef) {
              unknownFormat();
              return;
            }
            if (formatDef === true)
              return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
              cxt.pass(validCondition());
            function unknownFormat() {
              if (opts.strictSchema === false) {
                self2.logger.warn(unknownMsg());
                return;
              }
              throw new Error(unknownMsg());
              function unknownMsg() {
                return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
              }
            }
            function getFormat(fmtDef) {
              const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : void 0;
              const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
              if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
              }
              return ["string", fmtDef, fmt];
            }
            function validCondition() {
              if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                if (!schemaEnv.$async)
                  throw new Error("async format in sync schema");
                return (0, codegen_1._)`await ${fmtRef}(${data})`;
              }
              return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
            }
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/format/index.js
  var require_format2 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/format/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var format_1 = require_format();
      var format = [format_1.default];
      exports2.default = format;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/metadata.js
  var require_metadata = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/metadata.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.contentVocabulary = exports2.metadataVocabulary = void 0;
      exports2.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples"
      ];
      exports2.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema"
      ];
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/draft7.js
  var require_draft7 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/draft7.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var core_1 = require_core2();
      var validation_1 = require_validation();
      var applicator_1 = require_applicator();
      var format_1 = require_format2();
      var metadata_1 = require_metadata();
      var draft7Vocabularies = [
        core_1.default,
        validation_1.default,
        (0, applicator_1.default)(),
        format_1.default,
        metadata_1.metadataVocabulary,
        metadata_1.contentVocabulary
      ];
      exports2.default = draft7Vocabularies;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/discriminator/types.js
  var require_types = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/discriminator/types.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DiscrError = void 0;
      var DiscrError;
      (function(DiscrError2) {
        DiscrError2["Tag"] = "tag";
        DiscrError2["Mapping"] = "mapping";
      })(DiscrError || (exports2.DiscrError = DiscrError = {}));
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/discriminator/index.js
  var require_discriminator = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/vocabularies/discriminator/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var types_1 = require_types();
      var compile_1 = require_compile();
      var ref_error_1 = require_ref_error();
      var util_1 = require_util();
      var error = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
      };
      var def = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error,
        code(cxt) {
          const { gen, data, schema, parentSchema, it } = cxt;
          const { oneOf } = parentSchema;
          if (!it.opts.discriminator) {
            throw new Error("discriminator: requires discriminator option");
          }
          const tagName = schema.propertyName;
          if (typeof tagName != "string")
            throw new Error("discriminator: requires propertyName");
          if (schema.mapping)
            throw new Error("discriminator: mapping is not supported");
          if (!oneOf)
            throw new Error("discriminator: requires oneOf keyword");
          const valid = gen.let("valid", false);
          const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
          gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
          cxt.ok(valid);
          function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for (const tagValue in mapping) {
              gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
              gen.assign(valid, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
            gen.endIf();
          }
          function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
          }
          function getMapping() {
            var _a;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for (let i2 = 0; i2 < oneOf.length; i2++) {
              let sch = oneOf[i2];
              if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                const ref = sch.$ref;
                sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
                if (sch instanceof compile_1.SchemaEnv)
                  sch = sch.schema;
                if (sch === void 0)
                  throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
              }
              const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
              if (typeof propSch != "object") {
                throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
              }
              tagRequired = tagRequired && (topRequired || hasRequired(sch));
              addMappings(propSch, i2);
            }
            if (!tagRequired)
              throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
              return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i2) {
              if (sch.const) {
                addMapping(sch.const, i2);
              } else if (sch.enum) {
                for (const tagValue of sch.enum) {
                  addMapping(tagValue, i2);
                }
              } else {
                throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
              }
            }
            function addMapping(tagValue, i2) {
              if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                throw new Error(`discriminator: "${tagName}" values must be unique strings`);
              }
              oneOfMapping[tagValue] = i2;
            }
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/refs/json-schema-draft-07.json
  var require_json_schema_draft_07 = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/refs/json-schema-draft-07.json"(exports2, module2) {
      module2.exports = {
        $schema: "http://json-schema.org/draft-07/schema#",
        $id: "http://json-schema.org/draft-07/schema#",
        title: "Core schema meta-schema",
        definitions: {
          schemaArray: {
            type: "array",
            minItems: 1,
            items: { $ref: "#" }
          },
          nonNegativeInteger: {
            type: "integer",
            minimum: 0
          },
          nonNegativeIntegerDefault0: {
            allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
          },
          simpleTypes: {
            enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
          },
          stringArray: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true,
            default: []
          }
        },
        type: ["object", "boolean"],
        properties: {
          $id: {
            type: "string",
            format: "uri-reference"
          },
          $schema: {
            type: "string",
            format: "uri"
          },
          $ref: {
            type: "string",
            format: "uri-reference"
          },
          $comment: {
            type: "string"
          },
          title: {
            type: "string"
          },
          description: {
            type: "string"
          },
          default: true,
          readOnly: {
            type: "boolean",
            default: false
          },
          examples: {
            type: "array",
            items: true
          },
          multipleOf: {
            type: "number",
            exclusiveMinimum: 0
          },
          maximum: {
            type: "number"
          },
          exclusiveMaximum: {
            type: "number"
          },
          minimum: {
            type: "number"
          },
          exclusiveMinimum: {
            type: "number"
          },
          maxLength: { $ref: "#/definitions/nonNegativeInteger" },
          minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          pattern: {
            type: "string",
            format: "regex"
          },
          additionalItems: { $ref: "#" },
          items: {
            anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
            default: true
          },
          maxItems: { $ref: "#/definitions/nonNegativeInteger" },
          minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          uniqueItems: {
            type: "boolean",
            default: false
          },
          contains: { $ref: "#" },
          maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
          minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          required: { $ref: "#/definitions/stringArray" },
          additionalProperties: { $ref: "#" },
          definitions: {
            type: "object",
            additionalProperties: { $ref: "#" },
            default: {}
          },
          properties: {
            type: "object",
            additionalProperties: { $ref: "#" },
            default: {}
          },
          patternProperties: {
            type: "object",
            additionalProperties: { $ref: "#" },
            propertyNames: { format: "regex" },
            default: {}
          },
          dependencies: {
            type: "object",
            additionalProperties: {
              anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
            }
          },
          propertyNames: { $ref: "#" },
          const: true,
          enum: {
            type: "array",
            items: true,
            minItems: 1,
            uniqueItems: true
          },
          type: {
            anyOf: [
              { $ref: "#/definitions/simpleTypes" },
              {
                type: "array",
                items: { $ref: "#/definitions/simpleTypes" },
                minItems: 1,
                uniqueItems: true
              }
            ]
          },
          format: { type: "string" },
          contentMediaType: { type: "string" },
          contentEncoding: { type: "string" },
          if: { $ref: "#" },
          then: { $ref: "#" },
          else: { $ref: "#" },
          allOf: { $ref: "#/definitions/schemaArray" },
          anyOf: { $ref: "#/definitions/schemaArray" },
          oneOf: { $ref: "#/definitions/schemaArray" },
          not: { $ref: "#" }
        },
        default: true
      };
    }
  });

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/ajv.js
  var require_ajv = __commonJS({
    "react-user-mgmt/node_modules/@rjsf/validator-ajv8/node_modules/ajv/dist/ajv.js"(exports2, module2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.MissingRefError = exports2.ValidationError = exports2.CodeGen = exports2.Name = exports2.nil = exports2.stringify = exports2.str = exports2._ = exports2.KeywordCxt = exports2.Ajv = void 0;
      var core_1 = require_core();
      var draft7_1 = require_draft7();
      var discriminator_1 = require_discriminator();
      var draft7MetaSchema = require_json_schema_draft_07();
      var META_SUPPORT_DATA = ["/properties"];
      var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
      var Ajv2 = class extends core_1.default {
        _addVocabularies() {
          super._addVocabularies();
          draft7_1.default.forEach((v2) => this.addVocabulary(v2));
          if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
        }
        _addDefaultMetaSchema() {
          super._addDefaultMetaSchema();
          if (!this.opts.meta)
            return;
          const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
          this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
          this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        }
        defaultMeta() {
          return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
        }
      };
      exports2.Ajv = Ajv2;
      module2.exports = exports2 = Ajv2;
      module2.exports.Ajv = Ajv2;
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.default = Ajv2;
      var validate_1 = require_validate();
      Object.defineProperty(exports2, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen();
      Object.defineProperty(exports2, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports2, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports2, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports2, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports2, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
      var validation_error_1 = require_validation_error();
      Object.defineProperty(exports2, "ValidationError", { enumerable: true, get: function() {
        return validation_error_1.default;
      } });
      var ref_error_1 = require_ref_error();
      Object.defineProperty(exports2, "MissingRefError", { enumerable: true, get: function() {
        return ref_error_1.default;
      } });
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/dist/formats.js
  var require_formats = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/dist/formats.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.formatNames = exports2.fastFormats = exports2.fullFormats = void 0;
      function fmtDef(validate, compare) {
        return { validate, compare };
      }
      exports2.fullFormats = {
        // date: http://tools.ietf.org/html/rfc3339#section-5.6
        date: fmtDef(date, compareDate),
        // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
        time: fmtDef(time, compareTime),
        "date-time": fmtDef(date_time, compareDateTime),
        // duration: https://tools.ietf.org/html/rfc3339#appendix-A
        duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
        uri,
        "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
        // uri-template: https://tools.ietf.org/html/rfc6570
        "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
        // For the source: https://gist.github.com/dperini/729294
        // For test cases: https://mathiasbynens.be/demo/url-regex
        url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
        email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
        hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
        // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
        regex,
        // uuid: http://tools.ietf.org/html/rfc4122
        uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
        // JSON-pointer: https://tools.ietf.org/html/rfc6901
        // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
        "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
        "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
        // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
        "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
        // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types
        // byte: https://github.com/miguelmota/is-base64
        byte,
        // signed 32 bit integer
        int32: { type: "number", validate: validateInt32 },
        // signed 64 bit integer
        int64: { type: "number", validate: validateInt64 },
        // C-type float
        float: { type: "number", validate: validateNumber },
        // C-type double
        double: { type: "number", validate: validateNumber },
        // hint to the UI to hide input strings
        password: true,
        // unchecked string payload
        binary: true
      };
      exports2.fastFormats = {
        ...exports2.fullFormats,
        date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
        time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareTime),
        "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
        // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
        uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
        "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
        // email (sources from jsen validator):
        // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
        // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')
        email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i
      };
      exports2.formatNames = Object.keys(exports2.fullFormats);
      function isLeapYear(year) {
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
      }
      var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
      var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function date(str) {
        const matches = DATE.exec(str);
        if (!matches)
          return false;
        const year = +matches[1];
        const month = +matches[2];
        const day = +matches[3];
        return month >= 1 && month <= 12 && day >= 1 && day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]);
      }
      function compareDate(d1, d2) {
        if (!(d1 && d2))
          return void 0;
        if (d1 > d2)
          return 1;
        if (d1 < d2)
          return -1;
        return 0;
      }
      var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
      function time(str, withTimeZone) {
        const matches = TIME.exec(str);
        if (!matches)
          return false;
        const hour = +matches[1];
        const minute = +matches[2];
        const second = +matches[3];
        const timeZone = matches[5];
        return (hour <= 23 && minute <= 59 && second <= 59 || hour === 23 && minute === 59 && second === 60) && (!withTimeZone || timeZone !== "");
      }
      function compareTime(t1, t2) {
        if (!(t1 && t2))
          return void 0;
        const a1 = TIME.exec(t1);
        const a2 = TIME.exec(t2);
        if (!(a1 && a2))
          return void 0;
        t1 = a1[1] + a1[2] + a1[3] + (a1[4] || "");
        t2 = a2[1] + a2[2] + a2[3] + (a2[4] || "");
        if (t1 > t2)
          return 1;
        if (t1 < t2)
          return -1;
        return 0;
      }
      var DATE_TIME_SEPARATOR = /t|\s/i;
      function date_time(str) {
        const dateTime = str.split(DATE_TIME_SEPARATOR);
        return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1], true);
      }
      function compareDateTime(dt1, dt2) {
        if (!(dt1 && dt2))
          return void 0;
        const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
        const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
        const res = compareDate(d1, d2);
        if (res === void 0)
          return void 0;
        return res || compareTime(t1, t2);
      }
      var NOT_URI_FRAGMENT = /\/|:/;
      var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
      function uri(str) {
        return NOT_URI_FRAGMENT.test(str) && URI.test(str);
      }
      var BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
      function byte(str) {
        BYTE.lastIndex = 0;
        return BYTE.test(str);
      }
      var MIN_INT32 = -(2 ** 31);
      var MAX_INT32 = 2 ** 31 - 1;
      function validateInt32(value) {
        return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
      }
      function validateInt64(value) {
        return Number.isInteger(value);
      }
      function validateNumber() {
        return true;
      }
      var Z_ANCHOR = /[^\\]\\Z/;
      function regex(str) {
        if (Z_ANCHOR.test(str))
          return false;
        try {
          new RegExp(str);
          return true;
        } catch (e2) {
          return false;
        }
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/codegen/code.js
  var require_code3 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/codegen/code.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.regexpCode = exports2.getEsmExportName = exports2.getProperty = exports2.safeStringify = exports2.stringify = exports2.strConcat = exports2.addCodeArg = exports2.str = exports2._ = exports2.nil = exports2._Code = exports2.Name = exports2.IDENTIFIER = exports2._CodeOrName = void 0;
      var _CodeOrName = class {
      };
      exports2._CodeOrName = _CodeOrName;
      exports2.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
      var Name = class extends _CodeOrName {
        constructor(s2) {
          super();
          if (!exports2.IDENTIFIER.test(s2))
            throw new Error("CodeGen: name must be a valid identifier");
          this.str = s2;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          return false;
        }
        get names() {
          return { [this.str]: 1 };
        }
      };
      exports2.Name = Name;
      var _Code = class extends _CodeOrName {
        constructor(code) {
          super();
          this._items = typeof code === "string" ? [code] : code;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          if (this._items.length > 1)
            return false;
          const item = this._items[0];
          return item === "" || item === '""';
        }
        get str() {
          var _a;
          return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s2, c2) => `${s2}${c2}`, "");
        }
        get names() {
          var _a;
          return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c2) => {
            if (c2 instanceof Name)
              names[c2.str] = (names[c2.str] || 0) + 1;
            return names;
          }, {});
        }
      };
      exports2._Code = _Code;
      exports2.nil = new _Code("");
      function _2(strs, ...args) {
        const code = [strs[0]];
        let i2 = 0;
        while (i2 < args.length) {
          addCodeArg(code, args[i2]);
          code.push(strs[++i2]);
        }
        return new _Code(code);
      }
      exports2._ = _2;
      var plus = new _Code("+");
      function str(strs, ...args) {
        const expr = [safeStringify(strs[0])];
        let i2 = 0;
        while (i2 < args.length) {
          expr.push(plus);
          addCodeArg(expr, args[i2]);
          expr.push(plus, safeStringify(strs[++i2]));
        }
        optimize(expr);
        return new _Code(expr);
      }
      exports2.str = str;
      function addCodeArg(code, arg2) {
        if (arg2 instanceof _Code)
          code.push(...arg2._items);
        else if (arg2 instanceof Name)
          code.push(arg2);
        else
          code.push(interpolate(arg2));
      }
      exports2.addCodeArg = addCodeArg;
      function optimize(expr) {
        let i2 = 1;
        while (i2 < expr.length - 1) {
          if (expr[i2] === plus) {
            const res = mergeExprItems(expr[i2 - 1], expr[i2 + 1]);
            if (res !== void 0) {
              expr.splice(i2 - 1, 3, res);
              continue;
            }
            expr[i2++] = "+";
          }
          i2++;
        }
      }
      function mergeExprItems(a2, b2) {
        if (b2 === '""')
          return a2;
        if (a2 === '""')
          return b2;
        if (typeof a2 == "string") {
          if (b2 instanceof Name || a2[a2.length - 1] !== '"')
            return;
          if (typeof b2 != "string")
            return `${a2.slice(0, -1)}${b2}"`;
          if (b2[0] === '"')
            return a2.slice(0, -1) + b2.slice(1);
          return;
        }
        if (typeof b2 == "string" && b2[0] === '"' && !(a2 instanceof Name))
          return `"${a2}${b2.slice(1)}`;
        return;
      }
      function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
      }
      exports2.strConcat = strConcat;
      function interpolate(x2) {
        return typeof x2 == "number" || typeof x2 == "boolean" || x2 === null ? x2 : safeStringify(Array.isArray(x2) ? x2.join(",") : x2);
      }
      function stringify2(x2) {
        return new _Code(safeStringify(x2));
      }
      exports2.stringify = stringify2;
      function safeStringify(x2) {
        return JSON.stringify(x2).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      exports2.safeStringify = safeStringify;
      function getProperty(key) {
        return typeof key == "string" && exports2.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _2`[${key}]`;
      }
      exports2.getProperty = getProperty;
      function getEsmExportName(key) {
        if (typeof key == "string" && exports2.IDENTIFIER.test(key)) {
          return new _Code(`${key}`);
        }
        throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
      }
      exports2.getEsmExportName = getEsmExportName;
      function regexpCode(rx) {
        return new _Code(rx.toString());
      }
      exports2.regexpCode = regexpCode;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/codegen/scope.js
  var require_scope2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/codegen/scope.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ValueScope = exports2.ValueScopeName = exports2.Scope = exports2.varKinds = exports2.UsedValueState = void 0;
      var code_1 = require_code3();
      var ValueError = class extends Error {
        constructor(name) {
          super(`CodeGen: "code" for ${name} not defined`);
          this.value = name.value;
        }
      };
      var UsedValueState;
      (function(UsedValueState2) {
        UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
        UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
      })(UsedValueState || (exports2.UsedValueState = UsedValueState = {}));
      exports2.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var")
      };
      var Scope = class {
        constructor({ prefixes, parent: parent2 } = {}) {
          this._names = {};
          this._prefixes = prefixes;
          this._parent = parent2;
        }
        toName(nameOrPrefix) {
          return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
        }
        name(prefix2) {
          return new code_1.Name(this._newName(prefix2));
        }
        _newName(prefix2) {
          const ng = this._names[prefix2] || this._nameGroup(prefix2);
          return `${prefix2}${ng.index++}`;
        }
        _nameGroup(prefix2) {
          var _a, _b;
          if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix2)) || this._prefixes && !this._prefixes.has(prefix2)) {
            throw new Error(`CodeGen: prefix "${prefix2}" is not allowed in this scope`);
          }
          return this._names[prefix2] = { prefix: prefix2, index: 0 };
        }
      };
      exports2.Scope = Scope;
      var ValueScopeName = class extends code_1.Name {
        constructor(prefix2, nameStr) {
          super(nameStr);
          this.prefix = prefix2;
        }
        setValue(value, { property: property2, itemIndex }) {
          this.value = value;
          this.scopePath = (0, code_1._)`.${new code_1.Name(property2)}[${itemIndex}]`;
        }
      };
      exports2.ValueScopeName = ValueScopeName;
      var line2 = (0, code_1._)`\n`;
      var ValueScope = class extends Scope {
        constructor(opts) {
          super(opts);
          this._values = {};
          this._scope = opts.scope;
          this.opts = { ...opts, _n: opts.lines ? line2 : code_1.nil };
        }
        get() {
          return this._scope;
        }
        name(prefix2) {
          return new ValueScopeName(prefix2, this._newName(prefix2));
        }
        value(nameOrPrefix, value) {
          var _a;
          if (value.ref === void 0)
            throw new Error("CodeGen: ref must be passed in value");
          const name = this.toName(nameOrPrefix);
          const { prefix: prefix2 } = name;
          const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
          let vs = this._values[prefix2];
          if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
              return _name;
          } else {
            vs = this._values[prefix2] = /* @__PURE__ */ new Map();
          }
          vs.set(valueKey, name);
          const s2 = this._scope[prefix2] || (this._scope[prefix2] = []);
          const itemIndex = s2.length;
          s2[itemIndex] = value.ref;
          name.setValue(value, { property: prefix2, itemIndex });
          return name;
        }
        getValue(prefix2, keyOrRef) {
          const vs = this._values[prefix2];
          if (!vs)
            return;
          return vs.get(keyOrRef);
        }
        scopeRefs(scopeName, values3 = this._values) {
          return this._reduceValues(values3, (name) => {
            if (name.scopePath === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._)`${scopeName}${name.scopePath}`;
          });
        }
        scopeCode(values3 = this._values, usedValues, getCode) {
          return this._reduceValues(values3, (name) => {
            if (name.value === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
          }, usedValues, getCode);
        }
        _reduceValues(values3, valueCode, usedValues = {}, getCode) {
          let code = code_1.nil;
          for (const prefix2 in values3) {
            const vs = values3[prefix2];
            if (!vs)
              continue;
            const nameSet = usedValues[prefix2] = usedValues[prefix2] || /* @__PURE__ */ new Map();
            vs.forEach((name) => {
              if (nameSet.has(name))
                return;
              nameSet.set(name, UsedValueState.Started);
              let c2 = valueCode(name);
              if (c2) {
                const def = this.opts.es5 ? exports2.varKinds.var : exports2.varKinds.const;
                code = (0, code_1._)`${code}${def} ${name} = ${c2};${this.opts._n}`;
              } else if (c2 = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
                code = (0, code_1._)`${code}${c2}${this.opts._n}`;
              } else {
                throw new ValueError(name);
              }
              nameSet.set(name, UsedValueState.Completed);
            });
          }
          return code;
        }
      };
      exports2.ValueScope = ValueScope;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/codegen/index.js
  var require_codegen2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/codegen/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.or = exports2.and = exports2.not = exports2.CodeGen = exports2.operators = exports2.varKinds = exports2.ValueScopeName = exports2.ValueScope = exports2.Scope = exports2.Name = exports2.regexpCode = exports2.stringify = exports2.getProperty = exports2.nil = exports2.strConcat = exports2.str = exports2._ = void 0;
      var code_1 = require_code3();
      var scope_1 = require_scope2();
      var code_2 = require_code3();
      Object.defineProperty(exports2, "_", { enumerable: true, get: function() {
        return code_2._;
      } });
      Object.defineProperty(exports2, "str", { enumerable: true, get: function() {
        return code_2.str;
      } });
      Object.defineProperty(exports2, "strConcat", { enumerable: true, get: function() {
        return code_2.strConcat;
      } });
      Object.defineProperty(exports2, "nil", { enumerable: true, get: function() {
        return code_2.nil;
      } });
      Object.defineProperty(exports2, "getProperty", { enumerable: true, get: function() {
        return code_2.getProperty;
      } });
      Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
        return code_2.stringify;
      } });
      Object.defineProperty(exports2, "regexpCode", { enumerable: true, get: function() {
        return code_2.regexpCode;
      } });
      Object.defineProperty(exports2, "Name", { enumerable: true, get: function() {
        return code_2.Name;
      } });
      var scope_2 = require_scope2();
      Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
        return scope_2.Scope;
      } });
      Object.defineProperty(exports2, "ValueScope", { enumerable: true, get: function() {
        return scope_2.ValueScope;
      } });
      Object.defineProperty(exports2, "ValueScopeName", { enumerable: true, get: function() {
        return scope_2.ValueScopeName;
      } });
      Object.defineProperty(exports2, "varKinds", { enumerable: true, get: function() {
        return scope_2.varKinds;
      } });
      exports2.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+")
      };
      var Node = class {
        optimizeNodes() {
          return this;
        }
        optimizeNames(_names, _constants) {
          return this;
        }
      };
      var Def = class extends Node {
        constructor(varKind, name, rhs) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.rhs = rhs;
        }
        render({ es5, _n }) {
          const varKind = es5 ? scope_1.varKinds.var : this.varKind;
          const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
          return `${varKind} ${this.name}${rhs};` + _n;
        }
        optimizeNames(names, constants) {
          if (!names[this.name.str])
            return;
          if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names, constants);
          return this;
        }
        get names() {
          return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
        }
      };
      var Assign = class extends Node {
        constructor(lhs, rhs, sideEffects) {
          super();
          this.lhs = lhs;
          this.rhs = rhs;
          this.sideEffects = sideEffects;
        }
        render({ _n }) {
          return `${this.lhs} = ${this.rhs};` + _n;
        }
        optimizeNames(names, constants) {
          if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
            return;
          this.rhs = optimizeExpr(this.rhs, names, constants);
          return this;
        }
        get names() {
          const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
          return addExprNames(names, this.rhs);
        }
      };
      var AssignOp = class extends Assign {
        constructor(lhs, op, rhs, sideEffects) {
          super(lhs, rhs, sideEffects);
          this.op = op;
        }
        render({ _n }) {
          return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
        }
      };
      var Label2 = class extends Node {
        constructor(label) {
          super();
          this.label = label;
          this.names = {};
        }
        render({ _n }) {
          return `${this.label}:` + _n;
        }
      };
      var Break = class extends Node {
        constructor(label) {
          super();
          this.label = label;
          this.names = {};
        }
        render({ _n }) {
          const label = this.label ? ` ${this.label}` : "";
          return `break${label};` + _n;
        }
      };
      var Throw = class extends Node {
        constructor(error) {
          super();
          this.error = error;
        }
        render({ _n }) {
          return `throw ${this.error};` + _n;
        }
        get names() {
          return this.error.names;
        }
      };
      var AnyCode = class extends Node {
        constructor(code) {
          super();
          this.code = code;
        }
        render({ _n }) {
          return `${this.code};` + _n;
        }
        optimizeNodes() {
          return `${this.code}` ? this : void 0;
        }
        optimizeNames(names, constants) {
          this.code = optimizeExpr(this.code, names, constants);
          return this;
        }
        get names() {
          return this.code instanceof code_1._CodeOrName ? this.code.names : {};
        }
      };
      var ParentNode = class extends Node {
        constructor(nodes = []) {
          super();
          this.nodes = nodes;
        }
        render(opts) {
          return this.nodes.reduce((code, n2) => code + n2.render(opts), "");
        }
        optimizeNodes() {
          const { nodes } = this;
          let i2 = nodes.length;
          while (i2--) {
            const n2 = nodes[i2].optimizeNodes();
            if (Array.isArray(n2))
              nodes.splice(i2, 1, ...n2);
            else if (n2)
              nodes[i2] = n2;
            else
              nodes.splice(i2, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        optimizeNames(names, constants) {
          const { nodes } = this;
          let i2 = nodes.length;
          while (i2--) {
            const n2 = nodes[i2];
            if (n2.optimizeNames(names, constants))
              continue;
            subtractNames(names, n2.names);
            nodes.splice(i2, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        get names() {
          return this.nodes.reduce((names, n2) => addNames(names, n2.names), {});
        }
      };
      var BlockNode = class extends ParentNode {
        render(opts) {
          return "{" + opts._n + super.render(opts) + "}" + opts._n;
        }
      };
      var Root = class extends ParentNode {
      };
      var Else = class extends BlockNode {
      };
      Else.kind = "else";
      var If = class _If extends BlockNode {
        constructor(condition, nodes) {
          super(nodes);
          this.condition = condition;
        }
        render(opts) {
          let code = `if(${this.condition})` + super.render(opts);
          if (this.else)
            code += "else " + this.else.render(opts);
          return code;
        }
        optimizeNodes() {
          super.optimizeNodes();
          const cond = this.condition;
          if (cond === true)
            return this.nodes;
          let e2 = this.else;
          if (e2) {
            const ns = e2.optimizeNodes();
            e2 = this.else = Array.isArray(ns) ? new Else(ns) : ns;
          }
          if (e2) {
            if (cond === false)
              return e2 instanceof _If ? e2 : e2.nodes;
            if (this.nodes.length)
              return this;
            return new _If(not(cond), e2 instanceof _If ? [e2] : e2.nodes);
          }
          if (cond === false || !this.nodes.length)
            return void 0;
          return this;
        }
        optimizeNames(names, constants) {
          var _a;
          this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
          if (!(super.optimizeNames(names, constants) || this.else))
            return;
          this.condition = optimizeExpr(this.condition, names, constants);
          return this;
        }
        get names() {
          const names = super.names;
          addExprNames(names, this.condition);
          if (this.else)
            addNames(names, this.else.names);
          return names;
        }
      };
      If.kind = "if";
      var For = class extends BlockNode {
      };
      For.kind = "for";
      var ForLoop = class extends For {
        constructor(iteration) {
          super();
          this.iteration = iteration;
        }
        render(opts) {
          return `for(${this.iteration})` + super.render(opts);
        }
        optimizeNames(names, constants) {
          if (!super.optimizeNames(names, constants))
            return;
          this.iteration = optimizeExpr(this.iteration, names, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iteration.names);
        }
      };
      var ForRange = class extends For {
        constructor(varKind, name, from2, to) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.from = from2;
          this.to = to;
        }
        render(opts) {
          const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
          const { name, from: from2, to } = this;
          return `for(${varKind} ${name}=${from2}; ${name}<${to}; ${name}++)` + super.render(opts);
        }
        get names() {
          const names = addExprNames(super.names, this.from);
          return addExprNames(names, this.to);
        }
      };
      var ForIter = class extends For {
        constructor(loop, varKind, name, iterable) {
          super();
          this.loop = loop;
          this.varKind = varKind;
          this.name = name;
          this.iterable = iterable;
        }
        render(opts) {
          return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
        }
        optimizeNames(names, constants) {
          if (!super.optimizeNames(names, constants))
            return;
          this.iterable = optimizeExpr(this.iterable, names, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iterable.names);
        }
      };
      var Func = class extends BlockNode {
        constructor(name, args, async) {
          super();
          this.name = name;
          this.args = args;
          this.async = async;
        }
        render(opts) {
          const _async = this.async ? "async " : "";
          return `${_async}function ${this.name}(${this.args})` + super.render(opts);
        }
      };
      Func.kind = "func";
      var Return = class extends ParentNode {
        render(opts) {
          return "return " + super.render(opts);
        }
      };
      Return.kind = "return";
      var Try = class extends BlockNode {
        render(opts) {
          let code = "try" + super.render(opts);
          if (this.catch)
            code += this.catch.render(opts);
          if (this.finally)
            code += this.finally.render(opts);
          return code;
        }
        optimizeNodes() {
          var _a, _b;
          super.optimizeNodes();
          (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
          return this;
        }
        optimizeNames(names, constants) {
          var _a, _b;
          super.optimizeNames(names, constants);
          (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
          return this;
        }
        get names() {
          const names = super.names;
          if (this.catch)
            addNames(names, this.catch.names);
          if (this.finally)
            addNames(names, this.finally.names);
          return names;
        }
      };
      var Catch = class extends BlockNode {
        constructor(error) {
          super();
          this.error = error;
        }
        render(opts) {
          return `catch(${this.error})` + super.render(opts);
        }
      };
      Catch.kind = "catch";
      var Finally = class extends BlockNode {
        render(opts) {
          return "finally" + super.render(opts);
        }
      };
      Finally.kind = "finally";
      var CodeGen = class {
        constructor(extScope, opts = {}) {
          this._values = {};
          this._blockStarts = [];
          this._constants = {};
          this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
          this._extScope = extScope;
          this._scope = new scope_1.Scope({ parent: extScope });
          this._nodes = [new Root()];
        }
        toString() {
          return this._root.render(this.opts);
        }
        // returns unique name in the internal scope
        name(prefix2) {
          return this._scope.name(prefix2);
        }
        // reserves unique name in the external scope
        scopeName(prefix2) {
          return this._extScope.name(prefix2);
        }
        // reserves unique name in the external scope and assigns value to it
        scopeValue(prefixOrName, value) {
          const name = this._extScope.value(prefixOrName, value);
          const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
          vs.add(name);
          return name;
        }
        getScopeValue(prefix2, keyOrRef) {
          return this._extScope.getValue(prefix2, keyOrRef);
        }
        // return code that assigns values in the external scope to the names that are used internally
        // (same names that were returned by gen.scopeName or gen.scopeValue)
        scopeRefs(scopeName) {
          return this._extScope.scopeRefs(scopeName, this._values);
        }
        scopeCode() {
          return this._extScope.scopeCode(this._values);
        }
        _def(varKind, nameOrPrefix, rhs, constant2) {
          const name = this._scope.toName(nameOrPrefix);
          if (rhs !== void 0 && constant2)
            this._constants[name.str] = rhs;
          this._leafNode(new Def(varKind, name, rhs));
          return name;
        }
        // `const` declaration (`var` in es5 mode)
        const(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        }
        // `let` declaration with optional assignment (`var` in es5 mode)
        let(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        }
        // `var` declaration with optional assignment
        var(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        }
        // assignment code
        assign(lhs, rhs, sideEffects) {
          return this._leafNode(new Assign(lhs, rhs, sideEffects));
        }
        // `+=` code
        add(lhs, rhs) {
          return this._leafNode(new AssignOp(lhs, exports2.operators.ADD, rhs));
        }
        // appends passed SafeExpr to code or executes Block
        code(c2) {
          if (typeof c2 == "function")
            c2();
          else if (c2 !== code_1.nil)
            this._leafNode(new AnyCode(c2));
          return this;
        }
        // returns code for object literal for the passed argument list of key-value pairs
        object(...keyValues) {
          const code = ["{"];
          for (const [key, value] of keyValues) {
            if (code.length > 1)
              code.push(",");
            code.push(key);
            if (key !== value || this.opts.es5) {
              code.push(":");
              (0, code_1.addCodeArg)(code, value);
            }
          }
          code.push("}");
          return new code_1._Code(code);
        }
        // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
        if(condition, thenBody, elseBody) {
          this._blockNode(new If(condition));
          if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
          } else if (thenBody) {
            this.code(thenBody).endIf();
          } else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
          }
          return this;
        }
        // `else if` clause - invalid without `if` or after `else` clauses
        elseIf(condition) {
          return this._elseNode(new If(condition));
        }
        // `else` clause - only valid after `if` or `else if` clauses
        else() {
          return this._elseNode(new Else());
        }
        // end `if` statement (needed if gen.if was used only with condition)
        endIf() {
          return this._endBlockNode(If, Else);
        }
        _for(node2, forBody) {
          this._blockNode(node2);
          if (forBody)
            this.code(forBody).endFor();
          return this;
        }
        // a generic `for` clause (or statement if `forBody` is passed)
        for(iteration, forBody) {
          return this._for(new ForLoop(iteration), forBody);
        }
        // `for` statement for a range of values
        forRange(nameOrPrefix, from2, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForRange(varKind, name, from2, to), () => forBody(name));
        }
        // `for-of` statement (in es5 mode replace with a normal for loop)
        forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
          const name = this._scope.toName(nameOrPrefix);
          if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i2) => {
              this.var(name, (0, code_1._)`${arr}[${i2}]`);
              forBody(name);
            });
          }
          return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
        }
        // `for-in` statement.
        // With option `ownProperties` replaced with a `for-of` loop for object keys
        forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
          if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
          }
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
        }
        // end `for` loop
        endFor() {
          return this._endBlockNode(For);
        }
        // `label` statement
        label(label) {
          return this._leafNode(new Label2(label));
        }
        // `break` statement
        break(label) {
          return this._leafNode(new Break(label));
        }
        // `return` statement
        return(value) {
          const node2 = new Return();
          this._blockNode(node2);
          this.code(value);
          if (node2.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
          return this._endBlockNode(Return);
        }
        // `try` statement
        try(tryBody, catchCode, finallyCode) {
          if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
          const node2 = new Try();
          this._blockNode(node2);
          this.code(tryBody);
          if (catchCode) {
            const error = this.name("e");
            this._currNode = node2.catch = new Catch(error);
            catchCode(error);
          }
          if (finallyCode) {
            this._currNode = node2.finally = new Finally();
            this.code(finallyCode);
          }
          return this._endBlockNode(Catch, Finally);
        }
        // `throw` statement
        throw(error) {
          return this._leafNode(new Throw(error));
        }
        // start self-balancing block
        block(body2, nodeCount) {
          this._blockStarts.push(this._nodes.length);
          if (body2)
            this.code(body2).endBlock(nodeCount);
          return this;
        }
        // end the current self-balancing block
        endBlock(nodeCount) {
          const len = this._blockStarts.pop();
          if (len === void 0)
            throw new Error("CodeGen: not in self-balancing block");
          const toClose = this._nodes.length - len;
          if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
          }
          this._nodes.length = len;
          return this;
        }
        // `function` heading (or definition if funcBody is passed)
        func(name, args = code_1.nil, async, funcBody) {
          this._blockNode(new Func(name, args, async));
          if (funcBody)
            this.code(funcBody).endFunc();
          return this;
        }
        // end function definition
        endFunc() {
          return this._endBlockNode(Func);
        }
        optimize(n2 = 1) {
          while (n2-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
          }
        }
        _leafNode(node2) {
          this._currNode.nodes.push(node2);
          return this;
        }
        _blockNode(node2) {
          this._currNode.nodes.push(node2);
          this._nodes.push(node2);
        }
        _endBlockNode(N1, N2) {
          const n2 = this._currNode;
          if (n2 instanceof N1 || N2 && n2 instanceof N2) {
            this._nodes.pop();
            return this;
          }
          throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
        }
        _elseNode(node2) {
          const n2 = this._currNode;
          if (!(n2 instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
          }
          this._currNode = n2.else = node2;
          return this;
        }
        get _root() {
          return this._nodes[0];
        }
        get _currNode() {
          const ns = this._nodes;
          return ns[ns.length - 1];
        }
        set _currNode(node2) {
          const ns = this._nodes;
          ns[ns.length - 1] = node2;
        }
      };
      exports2.CodeGen = CodeGen;
      function addNames(names, from2) {
        for (const n2 in from2)
          names[n2] = (names[n2] || 0) + (from2[n2] || 0);
        return names;
      }
      function addExprNames(names, from2) {
        return from2 instanceof code_1._CodeOrName ? addNames(names, from2.names) : names;
      }
      function optimizeExpr(expr, names, constants) {
        if (expr instanceof code_1.Name)
          return replaceName(expr);
        if (!canOptimize(expr))
          return expr;
        return new code_1._Code(expr._items.reduce((items, c2) => {
          if (c2 instanceof code_1.Name)
            c2 = replaceName(c2);
          if (c2 instanceof code_1._Code)
            items.push(...c2._items);
          else
            items.push(c2);
          return items;
        }, []));
        function replaceName(n2) {
          const c2 = constants[n2.str];
          if (c2 === void 0 || names[n2.str] !== 1)
            return n2;
          delete names[n2.str];
          return c2;
        }
        function canOptimize(e2) {
          return e2 instanceof code_1._Code && e2._items.some((c2) => c2 instanceof code_1.Name && names[c2.str] === 1 && constants[c2.str] !== void 0);
        }
      }
      function subtractNames(names, from2) {
        for (const n2 in from2)
          names[n2] = (names[n2] || 0) - (from2[n2] || 0);
      }
      function not(x2) {
        return typeof x2 == "boolean" || typeof x2 == "number" || x2 === null ? !x2 : (0, code_1._)`!${par(x2)}`;
      }
      exports2.not = not;
      var andCode = mappend(exports2.operators.AND);
      function and(...args) {
        return args.reduce(andCode);
      }
      exports2.and = and;
      var orCode = mappend(exports2.operators.OR);
      function or(...args) {
        return args.reduce(orCode);
      }
      exports2.or = or;
      function mappend(op) {
        return (x2, y2) => x2 === code_1.nil ? y2 : y2 === code_1.nil ? x2 : (0, code_1._)`${par(x2)} ${op} ${par(y2)}`;
      }
      function par(x2) {
        return x2 instanceof code_1.Name ? x2 : (0, code_1._)`(${x2})`;
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/util.js
  var require_util2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/util.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.checkStrictMode = exports2.getErrorPath = exports2.Type = exports2.useFunc = exports2.setEvaluated = exports2.evaluatedPropsToName = exports2.mergeEvaluated = exports2.eachItem = exports2.unescapeJsonPointer = exports2.escapeJsonPointer = exports2.escapeFragment = exports2.unescapeFragment = exports2.schemaRefOrVal = exports2.schemaHasRulesButRef = exports2.schemaHasRules = exports2.checkUnknownRules = exports2.alwaysValidSchema = exports2.toHash = void 0;
      var codegen_1 = require_codegen2();
      var code_1 = require_code3();
      function toHash(arr) {
        const hash2 = {};
        for (const item of arr)
          hash2[item] = true;
        return hash2;
      }
      exports2.toHash = toHash;
      function alwaysValidSchema(it, schema) {
        if (typeof schema == "boolean")
          return schema;
        if (Object.keys(schema).length === 0)
          return true;
        checkUnknownRules(it, schema);
        return !schemaHasRules(schema, it.self.RULES.all);
      }
      exports2.alwaysValidSchema = alwaysValidSchema;
      function checkUnknownRules(it, schema = it.schema) {
        const { opts, self: self2 } = it;
        if (!opts.strictSchema)
          return;
        if (typeof schema === "boolean")
          return;
        const rules = self2.RULES.keywords;
        for (const key in schema) {
          if (!rules[key])
            checkStrictMode(it, `unknown keyword: "${key}"`);
        }
      }
      exports2.checkUnknownRules = checkUnknownRules;
      function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean")
          return !schema;
        for (const key in schema)
          if (rules[key])
            return true;
        return false;
      }
      exports2.schemaHasRules = schemaHasRules;
      function schemaHasRulesButRef(schema, RULES) {
        if (typeof schema == "boolean")
          return !schema;
        for (const key in schema)
          if (key !== "$ref" && RULES.all[key])
            return true;
        return false;
      }
      exports2.schemaHasRulesButRef = schemaHasRulesButRef;
      function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
        if (!$data) {
          if (typeof schema == "number" || typeof schema == "boolean")
            return schema;
          if (typeof schema == "string")
            return (0, codegen_1._)`${schema}`;
        }
        return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
      }
      exports2.schemaRefOrVal = schemaRefOrVal;
      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
      }
      exports2.unescapeFragment = unescapeFragment;
      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
      }
      exports2.escapeFragment = escapeFragment;
      function escapeJsonPointer(str) {
        if (typeof str == "number")
          return `${str}`;
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
      exports2.escapeJsonPointer = escapeJsonPointer;
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      exports2.unescapeJsonPointer = unescapeJsonPointer;
      function eachItem(xs, f2) {
        if (Array.isArray(xs)) {
          for (const x2 of xs)
            f2(x2);
        } else {
          f2(xs);
        }
      }
      exports2.eachItem = eachItem;
      function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
        return (gen, from2, to, toName) => {
          const res = to === void 0 ? from2 : to instanceof codegen_1.Name ? (from2 instanceof codegen_1.Name ? mergeNames(gen, from2, to) : mergeToName(gen, from2, to), to) : from2 instanceof codegen_1.Name ? (mergeToName(gen, to, from2), from2) : mergeValues(from2, to);
          return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
        };
      }
      exports2.mergeEvaluated = {
        props: makeMergeEvaluated({
          mergeNames: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true && ${from2} !== undefined`, () => {
            gen.if((0, codegen_1._)`${from2} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from2})`));
          }),
          mergeToName: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
            if (from2 === true) {
              gen.assign(to, true);
            } else {
              gen.assign(to, (0, codegen_1._)`${to} || {}`);
              setEvaluated(gen, to, from2);
            }
          }),
          mergeValues: (from2, to) => from2 === true ? true : { ...from2, ...to },
          resultToName: evaluatedPropsToName
        }),
        items: makeMergeEvaluated({
          mergeNames: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true && ${from2} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from2} === true ? true : ${to} > ${from2} ? ${to} : ${from2}`)),
          mergeToName: (gen, from2, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from2 === true ? true : (0, codegen_1._)`${to} > ${from2} ? ${to} : ${from2}`)),
          mergeValues: (from2, to) => from2 === true ? true : Math.max(from2, to),
          resultToName: (gen, items) => gen.var("items", items)
        })
      };
      function evaluatedPropsToName(gen, ps) {
        if (ps === true)
          return gen.var("props", true);
        const props = gen.var("props", (0, codegen_1._)`{}`);
        if (ps !== void 0)
          setEvaluated(gen, props, ps);
        return props;
      }
      exports2.evaluatedPropsToName = evaluatedPropsToName;
      function setEvaluated(gen, props, ps) {
        Object.keys(ps).forEach((p2) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p2)}`, true));
      }
      exports2.setEvaluated = setEvaluated;
      var snippets = {};
      function useFunc(gen, f2) {
        return gen.scopeValue("func", {
          ref: f2,
          code: snippets[f2.code] || (snippets[f2.code] = new code_1._Code(f2.code))
        });
      }
      exports2.useFunc = useFunc;
      var Type;
      (function(Type2) {
        Type2[Type2["Num"] = 0] = "Num";
        Type2[Type2["Str"] = 1] = "Str";
      })(Type || (exports2.Type = Type = {}));
      function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
        if (dataProp instanceof codegen_1.Name) {
          const isNumber2 = dataPropType === Type.Num;
          return jsPropertySyntax ? isNumber2 ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber2 ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
        }
        return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
      }
      exports2.getErrorPath = getErrorPath;
      function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
        if (!mode)
          return;
        msg = `strict mode: ${msg}`;
        if (mode === true)
          throw new Error(msg);
        it.self.logger.warn(msg);
      }
      exports2.checkStrictMode = checkStrictMode;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/names.js
  var require_names2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/names.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var names = {
        // validation function arguments
        data: new codegen_1.Name("data"),
        // data passed to validation function
        // args passed from referencing schema
        valCxt: new codegen_1.Name("valCxt"),
        // validation/data context - should not be used directly, it is destructured to the names below
        instancePath: new codegen_1.Name("instancePath"),
        parentData: new codegen_1.Name("parentData"),
        parentDataProperty: new codegen_1.Name("parentDataProperty"),
        rootData: new codegen_1.Name("rootData"),
        // root data - same as the data passed to the first/top validation function
        dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
        // used to support recursiveRef and dynamicRef
        // function scoped variables
        vErrors: new codegen_1.Name("vErrors"),
        // null or array of validation errors
        errors: new codegen_1.Name("errors"),
        // counter of validation errors
        this: new codegen_1.Name("this"),
        // "globals"
        self: new codegen_1.Name("self"),
        scope: new codegen_1.Name("scope"),
        // JTD serialize/parse name for JSON string and position
        json: new codegen_1.Name("json"),
        jsonPos: new codegen_1.Name("jsonPos"),
        jsonLen: new codegen_1.Name("jsonLen"),
        jsonPart: new codegen_1.Name("jsonPart")
      };
      exports2.default = names;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/errors.js
  var require_errors2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/errors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.extendErrors = exports2.resetErrorsCount = exports2.reportExtraError = exports2.reportError = exports2.keyword$DataError = exports2.keywordError = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var names_1 = require_names2();
      exports2.keywordError = {
        message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
      };
      exports2.keyword$DataError = {
        message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
      };
      function reportError2(cxt, error = exports2.keywordError, errorPaths, overrideAllErrors) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
          addError(gen, errObj);
        } else {
          returnErrors(it, (0, codegen_1._)`[${errObj}]`);
        }
      }
      exports2.reportError = reportError2;
      function reportExtraError(cxt, error = exports2.keywordError, errorPaths) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        addError(gen, errObj);
        if (!(compositeRule || allErrors)) {
          returnErrors(it, names_1.default.vErrors);
        }
      }
      exports2.reportExtraError = reportExtraError;
      function resetErrorsCount(gen, errsCount) {
        gen.assign(names_1.default.errors, errsCount);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
      }
      exports2.resetErrorsCount = resetErrorsCount;
      function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
        if (errsCount === void 0)
          throw new Error("ajv implementation error");
        const err = gen.name("err");
        gen.forRange("i", errsCount, names_1.default.errors, (i2) => {
          gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i2}]`);
          gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
          gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
          if (it.opts.verbose) {
            gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._)`${err}.data`, data);
          }
        });
      }
      exports2.extendErrors = extendErrors;
      function addError(gen, errObj) {
        const err = gen.const("err", errObj);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
        gen.code((0, codegen_1._)`${names_1.default.errors}++`);
      }
      function returnErrors(it, errs) {
        const { gen, validateName, schemaEnv } = it;
        if (schemaEnv.$async) {
          gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
          gen.return(false);
        }
      }
      var E2 = {
        keyword: new codegen_1.Name("keyword"),
        schemaPath: new codegen_1.Name("schemaPath"),
        // also used in JTD errors
        params: new codegen_1.Name("params"),
        propertyName: new codegen_1.Name("propertyName"),
        message: new codegen_1.Name("message"),
        schema: new codegen_1.Name("schema"),
        parentSchema: new codegen_1.Name("parentSchema")
      };
      function errorObjectCode(cxt, error, errorPaths) {
        const { createErrors } = cxt.it;
        if (createErrors === false)
          return (0, codegen_1._)`{}`;
        return errorObject(cxt, error, errorPaths);
      }
      function errorObject(cxt, error, errorPaths = {}) {
        const { gen, it } = cxt;
        const keyValues = [
          errorInstancePath(it, errorPaths),
          errorSchemaPath(cxt, errorPaths)
        ];
        extraErrorProps(cxt, error, keyValues);
        return gen.object(...keyValues);
      }
      function errorInstancePath({ errorPath }, { instancePath }) {
        const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
        return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
      }
      function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
        let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
        if (schemaPath) {
          schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
        }
        return [E2.schemaPath, schPath];
      }
      function extraErrorProps(cxt, { params, message }, keyValues) {
        const { keyword, data, schemaValue, it } = cxt;
        const { opts, propertyName, topSchemaRef, schemaPath } = it;
        keyValues.push([E2.keyword, keyword], [E2.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
        if (opts.messages) {
          keyValues.push([E2.message, typeof message == "function" ? message(cxt) : message]);
        }
        if (opts.verbose) {
          keyValues.push([E2.schema, schemaValue], [E2.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
        }
        if (propertyName)
          keyValues.push([E2.propertyName, propertyName]);
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/boolSchema.js
  var require_boolSchema2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/boolSchema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.boolOrEmptySchema = exports2.topBoolOrEmptySchema = void 0;
      var errors_1 = require_errors2();
      var codegen_1 = require_codegen2();
      var names_1 = require_names2();
      var boolError = {
        message: "boolean schema is false"
      };
      function topBoolOrEmptySchema(it) {
        const { gen, schema, validateName } = it;
        if (schema === false) {
          falseSchemaError(it, false);
        } else if (typeof schema == "object" && schema.$async === true) {
          gen.return(names_1.default.data);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, null);
          gen.return(true);
        }
      }
      exports2.topBoolOrEmptySchema = topBoolOrEmptySchema;
      function boolOrEmptySchema(it, valid) {
        const { gen, schema } = it;
        if (schema === false) {
          gen.var(valid, false);
          falseSchemaError(it);
        } else {
          gen.var(valid, true);
        }
      }
      exports2.boolOrEmptySchema = boolOrEmptySchema;
      function falseSchemaError(it, overrideAllErrors) {
        const { gen, data } = it;
        const cxt = {
          gen,
          keyword: "false schema",
          data,
          schema: false,
          schemaCode: false,
          schemaValue: false,
          params: {},
          it
        };
        (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/rules.js
  var require_rules2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/rules.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getRules = exports2.isJSONType = void 0;
      var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
      var jsonTypes = new Set(_jsonTypes);
      function isJSONType(x2) {
        return typeof x2 == "string" && jsonTypes.has(x2);
      }
      exports2.isJSONType = isJSONType;
      function getRules3() {
        const groups = {
          number: { type: "number", rules: [] },
          string: { type: "string", rules: [] },
          array: { type: "array", rules: [] },
          object: { type: "object", rules: [] }
        };
        return {
          types: { ...groups, integer: true, boolean: true, null: true },
          rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
          post: { rules: [] },
          all: {},
          keywords: {}
        };
      }
      exports2.getRules = getRules3;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/applicability.js
  var require_applicability2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/applicability.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.shouldUseRule = exports2.shouldUseGroup = exports2.schemaHasRulesForType = void 0;
      function schemaHasRulesForType({ schema, self: self2 }, type) {
        const group = self2.RULES.types[type];
        return group && group !== true && shouldUseGroup(schema, group);
      }
      exports2.schemaHasRulesForType = schemaHasRulesForType;
      function shouldUseGroup(schema, group) {
        return group.rules.some((rule) => shouldUseRule(schema, rule));
      }
      exports2.shouldUseGroup = shouldUseGroup;
      function shouldUseRule(schema, rule) {
        var _a;
        return schema[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== void 0));
      }
      exports2.shouldUseRule = shouldUseRule;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/dataType.js
  var require_dataType2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/dataType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.reportTypeError = exports2.checkDataTypes = exports2.checkDataType = exports2.coerceAndCheckDataType = exports2.getJSONTypes = exports2.getSchemaTypes = exports2.DataType = void 0;
      var rules_1 = require_rules2();
      var applicability_1 = require_applicability2();
      var errors_1 = require_errors2();
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var DataType;
      (function(DataType2) {
        DataType2[DataType2["Correct"] = 0] = "Correct";
        DataType2[DataType2["Wrong"] = 1] = "Wrong";
      })(DataType || (exports2.DataType = DataType = {}));
      function getSchemaTypes(schema) {
        const types = getJSONTypes(schema.type);
        const hasNull = types.includes("null");
        if (hasNull) {
          if (schema.nullable === false)
            throw new Error("type: null contradicts nullable: false");
        } else {
          if (!types.length && schema.nullable !== void 0) {
            throw new Error('"nullable" cannot be used without "type"');
          }
          if (schema.nullable === true)
            types.push("null");
        }
        return types;
      }
      exports2.getSchemaTypes = getSchemaTypes;
      function getJSONTypes(ts) {
        const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
        if (types.every(rules_1.isJSONType))
          return types;
        throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
      }
      exports2.getJSONTypes = getJSONTypes;
      function coerceAndCheckDataType(it, types) {
        const { gen, data, opts } = it;
        const coerceTo = coerceToTypes(types, opts.coerceTypes);
        const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
        if (checkTypes) {
          const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
          gen.if(wrongType, () => {
            if (coerceTo.length)
              coerceData(it, types, coerceTo);
            else
              reportTypeError(it);
          });
        }
        return checkTypes;
      }
      exports2.coerceAndCheckDataType = coerceAndCheckDataType;
      var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
      function coerceToTypes(types, coerceTypes) {
        return coerceTypes ? types.filter((t2) => COERCIBLE.has(t2) || coerceTypes === "array" && t2 === "array") : [];
      }
      function coerceData(it, types, coerceTo) {
        const { gen, data, opts } = it;
        const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
        const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
        if (opts.coerceTypes === "array") {
          gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
        }
        gen.if((0, codegen_1._)`${coerced} !== undefined`);
        for (const t2 of coerceTo) {
          if (COERCIBLE.has(t2) || t2 === "array" && opts.coerceTypes === "array") {
            coerceSpecificType(t2);
          }
        }
        gen.else();
        reportTypeError(it);
        gen.endIf();
        gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
          gen.assign(data, coerced);
          assignParentData(it, coerced);
        });
        function coerceSpecificType(t2) {
          switch (t2) {
            case "string":
              gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
              return;
            case "number":
              gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "integer":
              gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "boolean":
              gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
              return;
            case "null":
              gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
              gen.assign(coerced, null);
              return;
            case "array":
              gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
          }
        }
      }
      function assignParentData({ gen, parentData, parentDataProperty }, expr) {
        gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
      }
      function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
        const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
        let cond;
        switch (dataType) {
          case "null":
            return (0, codegen_1._)`${data} ${EQ} null`;
          case "array":
            cond = (0, codegen_1._)`Array.isArray(${data})`;
            break;
          case "object":
            cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
          case "integer":
            cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
            break;
          case "number":
            cond = numCond();
            break;
          default:
            return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
        }
        return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
        function numCond(_cond = codegen_1.nil) {
          return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
        }
      }
      exports2.checkDataType = checkDataType;
      function checkDataTypes(dataTypes, data, strictNums, correct) {
        if (dataTypes.length === 1) {
          return checkDataType(dataTypes[0], data, strictNums, correct);
        }
        let cond;
        const types = (0, util_1.toHash)(dataTypes);
        if (types.array && types.object) {
          const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
          cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
          delete types.null;
          delete types.array;
          delete types.object;
        } else {
          cond = codegen_1.nil;
        }
        if (types.number)
          delete types.integer;
        for (const t2 in types)
          cond = (0, codegen_1.and)(cond, checkDataType(t2, data, strictNums, correct));
        return cond;
      }
      exports2.checkDataTypes = checkDataTypes;
      var typeError = {
        message: ({ schema }) => `must be ${schema}`,
        params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
      };
      function reportTypeError(it) {
        const cxt = getTypeErrorContext(it);
        (0, errors_1.reportError)(cxt, typeError);
      }
      exports2.reportTypeError = reportTypeError;
      function getTypeErrorContext(it) {
        const { gen, data, schema } = it;
        const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
        return {
          gen,
          keyword: "type",
          data,
          schema: schema.type,
          schemaCode,
          schemaValue: schemaCode,
          parentSchema: schema,
          params: {},
          it
        };
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/defaults.js
  var require_defaults3 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/defaults.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.assignDefaults = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      function assignDefaults(it, ty) {
        const { properties: properties2, items } = it.schema;
        if (ty === "object" && properties2) {
          for (const key in properties2) {
            assignDefault(it, key, properties2[key].default);
          }
        } else if (ty === "array" && Array.isArray(items)) {
          items.forEach((sch, i2) => assignDefault(it, i2, sch.default));
        }
      }
      exports2.assignDefaults = assignDefaults;
      function assignDefault(it, prop, defaultValue) {
        const { gen, compositeRule, data, opts } = it;
        if (defaultValue === void 0)
          return;
        const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
        if (compositeRule) {
          (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
          return;
        }
        let condition = (0, codegen_1._)`${childData} === undefined`;
        if (opts.useDefaults === "empty") {
          condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
        }
        gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/code.js
  var require_code4 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/code.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateUnion = exports2.validateArray = exports2.usePattern = exports2.callValidateCode = exports2.schemaProperties = exports2.allSchemaProperties = exports2.noPropertyInData = exports2.propertyInData = exports2.isOwnProperty = exports2.hasPropFunc = exports2.reportMissingProp = exports2.checkMissingProp = exports2.checkReportMissingProp = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var names_1 = require_names2();
      var util_2 = require_util2();
      function checkReportMissingProp(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
          cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
          cxt.error();
        });
      }
      exports2.checkReportMissingProp = checkReportMissingProp;
      function checkMissingProp({ gen, data, it: { opts } }, properties2, missing) {
        return (0, codegen_1.or)(...properties2.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
      }
      exports2.checkMissingProp = checkMissingProp;
      function reportMissingProp(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
      }
      exports2.reportMissingProp = reportMissingProp;
      function hasPropFunc(gen) {
        return gen.scopeValue("func", {
          // eslint-disable-next-line @typescript-eslint/unbound-method
          ref: Object.prototype.hasOwnProperty,
          code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
        });
      }
      exports2.hasPropFunc = hasPropFunc;
      function isOwnProperty(gen, data, property2) {
        return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property2})`;
      }
      exports2.isOwnProperty = isOwnProperty;
      function propertyInData(gen, data, property2, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property2)} !== undefined`;
        return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property2)}` : cond;
      }
      exports2.propertyInData = propertyInData;
      function noPropertyInData(gen, data, property2, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property2)} === undefined`;
        return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property2))) : cond;
      }
      exports2.noPropertyInData = noPropertyInData;
      function allSchemaProperties(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p2) => p2 !== "__proto__") : [];
      }
      exports2.allSchemaProperties = allSchemaProperties;
      function schemaProperties(it, schemaMap) {
        return allSchemaProperties(schemaMap).filter((p2) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p2]));
      }
      exports2.schemaProperties = schemaProperties;
      function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
          [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
          [names_1.default.parentData, it.parentData],
          [names_1.default.parentDataProperty, it.parentDataProperty],
          [names_1.default.rootData, names_1.default.rootData]
        ];
        if (it.opts.dynamicRef)
          valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
        const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
      }
      exports2.callValidateCode = callValidateCode;
      var newRegExp = (0, codegen_1._)`new RegExp`;
      function usePattern({ gen, it: { opts } }, pattern) {
        const u2 = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u2);
        return gen.scopeValue("pattern", {
          key: rx.toString(),
          ref: rx,
          code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u2})`
        });
      }
      exports2.usePattern = usePattern;
      function validateArray(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        if (it.allErrors) {
          const validArr = gen.let("valid", true);
          validateItems(() => gen.assign(validArr, false));
          return validArr;
        }
        gen.var(valid, true);
        validateItems(() => gen.break());
        return valid;
        function validateItems(notValid) {
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          gen.forRange("i", 0, len, (i2) => {
            cxt.subschema({
              keyword,
              dataProp: i2,
              dataPropType: util_1.Type.Num
            }, valid);
            gen.if((0, codegen_1.not)(valid), notValid);
          });
        }
      }
      exports2.validateArray = validateArray;
      function validateUnion(cxt) {
        const { gen, schema, keyword, it } = cxt;
        if (!Array.isArray(schema))
          throw new Error("ajv implementation error");
        const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
          return;
        const valid = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema.forEach((_sch, i2) => {
          const schCxt = cxt.subschema({
            keyword,
            schemaProp: i2,
            compositeRule: true
          }, schValid);
          gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
          const merged = cxt.mergeValidEvaluated(schCxt, schValid);
          if (!merged)
            gen.if((0, codegen_1.not)(valid));
        }));
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
      }
      exports2.validateUnion = validateUnion;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/keyword.js
  var require_keyword2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/keyword.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateKeywordUsage = exports2.validSchemaType = exports2.funcKeywordCode = exports2.macroKeywordCode = void 0;
      var codegen_1 = require_codegen2();
      var names_1 = require_names2();
      var code_1 = require_code4();
      var errors_1 = require_errors2();
      function macroKeywordCode(cxt, def) {
        const { gen, keyword, schema, parentSchema, it } = cxt;
        const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
        const schemaRef = useKeyword(gen, keyword, macroSchema);
        if (it.opts.validateSchema !== false)
          it.self.validateSchema(macroSchema, true);
        const valid = gen.name("valid");
        cxt.subschema({
          schema: macroSchema,
          schemaPath: codegen_1.nil,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`,
          topSchemaRef: schemaRef,
          compositeRule: true
        }, valid);
        cxt.pass(valid, () => cxt.error(true));
      }
      exports2.macroKeywordCode = macroKeywordCode;
      function funcKeywordCode(cxt, def) {
        var _a;
        const { gen, keyword, schema, parentSchema, $data, it } = cxt;
        checkAsyncKeyword(it, def);
        const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
        const validateRef = useKeyword(gen, keyword, validate);
        const valid = gen.let("valid");
        cxt.block$data(valid, validateKeyword);
        cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
        function validateKeyword() {
          if (def.errors === false) {
            assignValid();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => cxt.error());
          } else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
          }
        }
        function validateAsync() {
          const ruleErrs = gen.let("ruleErrs", null);
          gen.try(() => assignValid((0, codegen_1._)`await `), (e2) => gen.assign(valid, false).if((0, codegen_1._)`${e2} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e2}.errors`), () => gen.throw(e2)));
          return ruleErrs;
        }
        function validateSync() {
          const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
          gen.assign(validateErrs, null);
          assignValid(codegen_1.nil);
          return validateErrs;
        }
        function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
          const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
          const passSchema = !("compile" in def && !$data || def.schema === false);
          gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
        }
        function reportErrs(errors) {
          var _a2;
          gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid), errors);
        }
      }
      exports2.funcKeywordCode = funcKeywordCode;
      function modifyData(cxt) {
        const { gen, data, it } = cxt;
        gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
      }
      function addErrs(cxt, errs) {
        const { gen } = cxt;
        gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
          (0, errors_1.extendErrors)(cxt);
        }, () => cxt.error());
      }
      function checkAsyncKeyword({ schemaEnv }, def) {
        if (def.async && !schemaEnv.$async)
          throw new Error("async keyword in sync schema");
      }
      function useKeyword(gen, keyword, result) {
        if (result === void 0)
          throw new Error(`keyword "${keyword}" failed to compile`);
        return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
      }
      function validSchemaType(schema, schemaType, allowUndefined = false) {
        return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
      }
      exports2.validSchemaType = validSchemaType;
      function validateKeywordUsage({ schema, opts, self: self2, errSchemaPath }, def, keyword) {
        if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
          throw new Error("ajv implementation error");
        }
        const deps = def.dependencies;
        if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
          throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
        }
        if (def.validateSchema) {
          const valid = def.validateSchema(schema[keyword]);
          if (!valid) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
              self2.logger.error(msg);
            else
              throw new Error(msg);
          }
        }
      }
      exports2.validateKeywordUsage = validateKeywordUsage;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/subschema.js
  var require_subschema2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/subschema.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.extendSubschemaMode = exports2.extendSubschemaData = exports2.getSubschema = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
        if (keyword !== void 0 && schema !== void 0) {
          throw new Error('both "keyword" and "schema" passed, only one allowed');
        }
        if (keyword !== void 0) {
          const sch = it.schema[keyword];
          return schemaProp === void 0 ? {
            schema: sch,
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`
          } : {
            schema: sch[schemaProp],
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
          };
        }
        if (schema !== void 0) {
          if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
          }
          return {
            schema,
            schemaPath,
            topSchemaRef,
            errSchemaPath
          };
        }
        throw new Error('either "keyword" or "schema" must be passed');
      }
      exports2.getSubschema = getSubschema;
      function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
        if (data !== void 0 && dataProp !== void 0) {
          throw new Error('both "data" and "dataProp" passed, only one allowed');
        }
        const { gen } = it;
        if (dataProp !== void 0) {
          const { errorPath, dataPathArr, opts } = it;
          const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
          dataContextProps(nextData);
          subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
          subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
          subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
        }
        if (data !== void 0) {
          const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
          dataContextProps(nextData);
          if (propertyName !== void 0)
            subschema.propertyName = propertyName;
        }
        if (dataTypes)
          subschema.dataTypes = dataTypes;
        function dataContextProps(_nextData) {
          subschema.data = _nextData;
          subschema.dataLevel = it.dataLevel + 1;
          subschema.dataTypes = [];
          it.definedProperties = /* @__PURE__ */ new Set();
          subschema.parentData = it.data;
          subschema.dataNames = [...it.dataNames, _nextData];
        }
      }
      exports2.extendSubschemaData = extendSubschemaData;
      function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
        if (compositeRule !== void 0)
          subschema.compositeRule = compositeRule;
        if (createErrors !== void 0)
          subschema.createErrors = createErrors;
        if (allErrors !== void 0)
          subschema.allErrors = allErrors;
        subschema.jtdDiscriminator = jtdDiscriminator;
        subschema.jtdMetadata = jtdMetadata;
      }
      exports2.extendSubschemaMode = extendSubschemaMode;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/json-schema-traverse/index.js
  var require_json_schema_traverse2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/json-schema-traverse/index.js"(exports2, module2) {
      "use strict";
      var traverse = module2.exports = function(schema, opts, cb) {
        if (typeof opts == "function") {
          cb = opts;
          opts = {};
        }
        cb = opts.cb || cb;
        var pre = typeof cb == "function" ? cb : cb.pre || function() {
        };
        var post = cb.post || function() {
        };
        _traverse(opts, pre, post, schema, "", schema);
      };
      traverse.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true,
        if: true,
        then: true,
        else: true
      };
      traverse.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      traverse.propsKeywords = {
        $defs: true,
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      };
      traverse.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      };
      function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (schema && typeof schema == "object" && !Array.isArray(schema)) {
          pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
          for (var key in schema) {
            var sch = schema[key];
            if (Array.isArray(sch)) {
              if (key in traverse.arrayKeywords) {
                for (var i2 = 0; i2 < sch.length; i2++)
                  _traverse(opts, pre, post, sch[i2], jsonPtr + "/" + key + "/" + i2, rootSchema, jsonPtr, key, schema, i2);
              }
            } else if (key in traverse.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
              }
            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
            }
          }
          post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        }
      }
      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/resolve.js
  var require_resolve2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/resolve.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getSchemaRefs = exports2.resolveUrl = exports2.normalizeId = exports2._getFullPath = exports2.getFullPath = exports2.inlineRef = void 0;
      var util_1 = require_util2();
      var equal = require_fast_deep_equal();
      var traverse = require_json_schema_traverse2();
      var SIMPLE_INLINED = /* @__PURE__ */ new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const"
      ]);
      function inlineRef(schema, limit = true) {
        if (typeof schema == "boolean")
          return true;
        if (limit === true)
          return !hasRef(schema);
        if (!limit)
          return false;
        return countKeys(schema) <= limit;
      }
      exports2.inlineRef = inlineRef;
      var REF_KEYWORDS = /* @__PURE__ */ new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor"
      ]);
      function hasRef(schema) {
        for (const key in schema) {
          if (REF_KEYWORDS.has(key))
            return true;
          const sch = schema[key];
          if (Array.isArray(sch) && sch.some(hasRef))
            return true;
          if (typeof sch == "object" && hasRef(sch))
            return true;
        }
        return false;
      }
      function countKeys(schema) {
        let count = 0;
        for (const key in schema) {
          if (key === "$ref")
            return Infinity;
          count++;
          if (SIMPLE_INLINED.has(key))
            continue;
          if (typeof schema[key] == "object") {
            (0, util_1.eachItem)(schema[key], (sch) => count += countKeys(sch));
          }
          if (count === Infinity)
            return Infinity;
        }
        return count;
      }
      function getFullPath(resolver, id = "", normalize) {
        if (normalize !== false)
          id = normalizeId(id);
        const p2 = resolver.parse(id);
        return _getFullPath(resolver, p2);
      }
      exports2.getFullPath = getFullPath;
      function _getFullPath(resolver, p2) {
        const serialized = resolver.serialize(p2);
        return serialized.split("#")[0] + "#";
      }
      exports2._getFullPath = _getFullPath;
      var TRAILING_SLASH_HASH = /#\/?$/;
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
      }
      exports2.normalizeId = normalizeId;
      function resolveUrl(resolver, baseId, id) {
        id = normalizeId(id);
        return resolver.resolve(baseId, id);
      }
      exports2.resolveUrl = resolveUrl;
      var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
      function getSchemaRefs(schema, baseId) {
        if (typeof schema == "boolean")
          return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId(schema[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = /* @__PURE__ */ new Set();
        traverse(schema, { allKeys: true }, (sch, jsonPtr, _2, parentJsonPtr) => {
          if (parentJsonPtr === void 0)
            return;
          const fullPath = pathPrefix + jsonPtr;
          let innerBaseId = baseIds[parentJsonPtr];
          if (typeof sch[schemaId] == "string")
            innerBaseId = addRef.call(this, sch[schemaId]);
          addAnchor.call(this, sch.$anchor);
          addAnchor.call(this, sch.$dynamicAnchor);
          baseIds[jsonPtr] = innerBaseId;
          function addRef(ref) {
            const _resolve2 = this.opts.uriResolver.resolve;
            ref = normalizeId(innerBaseId ? _resolve2(innerBaseId, ref) : ref);
            if (schemaRefs.has(ref))
              throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
              schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
              checkAmbiguosRef(sch, schOrRef.schema, ref);
            } else if (ref !== normalizeId(fullPath)) {
              if (ref[0] === "#") {
                checkAmbiguosRef(sch, localRefs[ref], ref);
                localRefs[ref] = sch;
              } else {
                this.refs[ref] = fullPath;
              }
            }
            return ref;
          }
          function addAnchor(anchor) {
            if (typeof anchor == "string") {
              if (!ANCHOR.test(anchor))
                throw new Error(`invalid anchor "${anchor}"`);
              addRef.call(this, `#${anchor}`);
            }
          }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
          if (sch2 !== void 0 && !equal(sch1, sch2))
            throw ambiguos(ref);
        }
        function ambiguos(ref) {
          return new Error(`reference "${ref}" resolves to more than one schema`);
        }
      }
      exports2.getSchemaRefs = getSchemaRefs;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/index.js
  var require_validate2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/validate/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getData = exports2.KeywordCxt = exports2.validateFunctionCode = void 0;
      var boolSchema_1 = require_boolSchema2();
      var dataType_1 = require_dataType2();
      var applicability_1 = require_applicability2();
      var dataType_2 = require_dataType2();
      var defaults_1 = require_defaults3();
      var keyword_1 = require_keyword2();
      var subschema_1 = require_subschema2();
      var codegen_1 = require_codegen2();
      var names_1 = require_names2();
      var resolve_1 = require_resolve2();
      var util_1 = require_util2();
      var errors_1 = require_errors2();
      function validateFunctionCode(it) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
          }
        }
        validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
      }
      exports2.validateFunctionCode = validateFunctionCode;
      function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body2) {
        if (opts.code.es5) {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body2);
          });
        } else {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body2));
        }
      }
      function destructureValCxt(opts) {
        return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
      }
      function destructureValCxtES5(gen, opts) {
        gen.if(names_1.default.valCxt, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
          gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
        }, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.rootData, names_1.default.data);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
        });
      }
      function topSchemaObjCode(it) {
        const { schema, opts, gen } = it;
        validateFunction(it, () => {
          if (opts.$comment && schema.$comment)
            commentKeyword(it);
          checkNoDefault(it);
          gen.let(names_1.default.vErrors, null);
          gen.let(names_1.default.errors, 0);
          if (opts.unevaluated)
            resetEvaluated(it);
          typeAndKeywords(it);
          returnResults(it);
        });
        return;
      }
      function resetEvaluated(it) {
        const { gen, validateName } = it;
        it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
      }
      function funcSourceUrl(schema, opts) {
        const schId = typeof schema == "object" && schema[opts.schemaId];
        return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
      }
      function subschemaCode(it, valid) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
          }
        }
        (0, boolSchema_1.boolOrEmptySchema)(it, valid);
      }
      function schemaCxtHasRules({ schema, self: self2 }) {
        if (typeof schema == "boolean")
          return !schema;
        for (const key in schema)
          if (self2.RULES.all[key])
            return true;
        return false;
      }
      function isSchemaObj(it) {
        return typeof it.schema != "boolean";
      }
      function subSchemaObjCode(it, valid) {
        const { schema, gen, opts } = it;
        if (opts.$comment && schema.$comment)
          commentKeyword(it);
        updateContext(it);
        checkAsyncSchema(it);
        const errsCount = gen.const("_errs", names_1.default.errors);
        typeAndKeywords(it, errsCount);
        gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
      }
      function checkKeywords(it) {
        (0, util_1.checkUnknownRules)(it);
        checkRefsAndKeywords(it);
      }
      function typeAndKeywords(it, errsCount) {
        if (it.opts.jtd)
          return schemaKeywords(it, [], false, errsCount);
        const types = (0, dataType_1.getSchemaTypes)(it.schema);
        const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
        schemaKeywords(it, types, !checkedTypes, errsCount);
      }
      function checkRefsAndKeywords(it) {
        const { schema, errSchemaPath, opts, self: self2 } = it;
        if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self2.RULES)) {
          self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
        }
      }
      function checkNoDefault(it) {
        const { schema, opts } = it;
        if (schema.default !== void 0 && opts.useDefaults && opts.strictSchema) {
          (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
        }
      }
      function updateContext(it) {
        const schId = it.schema[it.opts.schemaId];
        if (schId)
          it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
      }
      function checkAsyncSchema(it) {
        if (it.schema.$async && !it.schemaEnv.$async)
          throw new Error("async schema in sync schema");
      }
      function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
        const msg = schema.$comment;
        if (opts.$comment === true) {
          gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
        } else if (typeof opts.$comment == "function") {
          const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
          const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
          gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
        }
      }
      function returnResults(it) {
        const { gen, schemaEnv, validateName, ValidationError, opts } = it;
        if (schemaEnv.$async) {
          gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
          if (opts.unevaluated)
            assignEvaluated(it);
          gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
        }
      }
      function assignEvaluated({ gen, evaluated, props, items }) {
        if (props instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.props`, props);
        if (items instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.items`, items);
      }
      function schemaKeywords(it, types, typeErrors, errsCount) {
        const { gen, schema, data, allErrors, opts, self: self2 } = it;
        const { RULES } = self2;
        if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
          gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
          return;
        }
        if (!opts.jtd)
          checkStrictTypes(it, types);
        gen.block(() => {
          for (const group of RULES.rules)
            groupKeywords(group);
          groupKeywords(RULES.post);
        });
        function groupKeywords(group) {
          if (!(0, applicability_1.shouldUseGroup)(schema, group))
            return;
          if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
              gen.else();
              (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
          } else {
            iterateKeywords(it, group);
          }
          if (!allErrors)
            gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
        }
      }
      function iterateKeywords(it, group) {
        const { gen, schema, opts: { useDefaults } } = it;
        if (useDefaults)
          (0, defaults_1.assignDefaults)(it, group.type);
        gen.block(() => {
          for (const rule of group.rules) {
            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
              keywordCode(it, rule.keyword, rule.definition, group.type);
            }
          }
        });
      }
      function checkStrictTypes(it, types) {
        if (it.schemaEnv.meta || !it.opts.strictTypes)
          return;
        checkContextTypes(it, types);
        if (!it.opts.allowUnionTypes)
          checkMultipleTypes(it, types);
        checkKeywordTypes(it, it.dataTypes);
      }
      function checkContextTypes(it, types) {
        if (!types.length)
          return;
        if (!it.dataTypes.length) {
          it.dataTypes = types;
          return;
        }
        types.forEach((t2) => {
          if (!includesType(it.dataTypes, t2)) {
            strictTypesError(it, `type "${t2}" not allowed by context "${it.dataTypes.join(",")}"`);
          }
        });
        narrowSchemaTypes(it, types);
      }
      function checkMultipleTypes(it, ts) {
        if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
          strictTypesError(it, "use allowUnionTypes to allow union type keyword");
        }
      }
      function checkKeywordTypes(it, ts) {
        const rules = it.self.RULES.all;
        for (const keyword in rules) {
          const rule = rules[keyword];
          if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type } = rule.definition;
            if (type.length && !type.some((t2) => hasApplicableType(ts, t2))) {
              strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
            }
          }
        }
      }
      function hasApplicableType(schTs, kwdT) {
        return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
      }
      function includesType(ts, t2) {
        return ts.includes(t2) || t2 === "integer" && ts.includes("number");
      }
      function narrowSchemaTypes(it, withTypes) {
        const ts = [];
        for (const t2 of it.dataTypes) {
          if (includesType(withTypes, t2))
            ts.push(t2);
          else if (withTypes.includes("integer") && t2 === "number")
            ts.push("integer");
        }
        it.dataTypes = ts;
      }
      function strictTypesError(it, msg) {
        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
        msg += ` at "${schemaPath}" (strictTypes)`;
        (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
      }
      var KeywordCxt = class {
        constructor(it, def, keyword) {
          (0, keyword_1.validateKeywordUsage)(it, def, keyword);
          this.gen = it.gen;
          this.allErrors = it.allErrors;
          this.keyword = keyword;
          this.data = it.data;
          this.schema = it.schema[keyword];
          this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
          this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
          this.schemaType = def.schemaType;
          this.parentSchema = it.schema;
          this.params = {};
          this.it = it;
          this.def = def;
          if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
          } else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
              throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
          }
          if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
          }
        }
        result(condition, successAction, failAction) {
          this.failResult((0, codegen_1.not)(condition), successAction, failAction);
        }
        failResult(condition, successAction, failAction) {
          this.gen.if(condition);
          if (failAction)
            failAction();
          else
            this.error();
          if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
              this.gen.endIf();
          } else {
            if (this.allErrors)
              this.gen.endIf();
            else
              this.gen.else();
          }
        }
        pass(condition, failAction) {
          this.failResult((0, codegen_1.not)(condition), void 0, failAction);
        }
        fail(condition) {
          if (condition === void 0) {
            this.error();
            if (!this.allErrors)
              this.gen.if(false);
            return;
          }
          this.gen.if(condition);
          this.error();
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
        fail$data(condition) {
          if (!this.$data)
            return this.fail(condition);
          const { schemaCode } = this;
          this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
        }
        error(append2, errorParams, errorPaths) {
          if (errorParams) {
            this.setParams(errorParams);
            this._error(append2, errorPaths);
            this.setParams({});
            return;
          }
          this._error(append2, errorPaths);
        }
        _error(append2, errorPaths) {
          ;
          (append2 ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
        }
        $dataError() {
          (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
        }
        reset() {
          if (this.errsCount === void 0)
            throw new Error('add "trackErrors" to keyword definition');
          (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
        }
        ok(cond) {
          if (!this.allErrors)
            this.gen.if(cond);
        }
        setParams(obj, assign2) {
          if (assign2)
            Object.assign(this.params, obj);
          else
            this.params = obj;
        }
        block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
          this.gen.block(() => {
            this.check$data(valid, $dataValid);
            codeBlock();
          });
        }
        check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
          if (!this.$data)
            return;
          const { gen, schemaCode, schemaType, def } = this;
          gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
          if (valid !== codegen_1.nil)
            gen.assign(valid, true);
          if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil)
              gen.assign(valid, false);
          }
          gen.else();
        }
        invalid$data() {
          const { gen, schemaCode, schemaType, def, it } = this;
          return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
          function wrong$DataType() {
            if (schemaType.length) {
              if (!(schemaCode instanceof codegen_1.Name))
                throw new Error("ajv implementation error");
              const st = Array.isArray(schemaType) ? schemaType : [schemaType];
              return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
          }
          function invalid$DataSchema() {
            if (def.validateSchema) {
              const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
              return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
          }
        }
        subschema(appl, valid) {
          const subschema = (0, subschema_1.getSubschema)(this.it, appl);
          (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
          (0, subschema_1.extendSubschemaMode)(subschema, appl);
          const nextContext = { ...this.it, ...subschema, items: void 0, props: void 0 };
          subschemaCode(nextContext, valid);
          return nextContext;
        }
        mergeEvaluated(schemaCxt, toName) {
          const { it, gen } = this;
          if (!it.opts.unevaluated)
            return;
          if (it.props !== true && schemaCxt.props !== void 0) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
          }
          if (it.items !== true && schemaCxt.items !== void 0) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
          }
        }
        mergeValidEvaluated(schemaCxt, valid) {
          const { it, gen } = this;
          if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
          }
        }
      };
      exports2.KeywordCxt = KeywordCxt;
      function keywordCode(it, keyword, def, ruleType) {
        const cxt = new KeywordCxt(it, def, keyword);
        if ("code" in def) {
          def.code(cxt, ruleType);
        } else if (cxt.$data && def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        } else if ("macro" in def) {
          (0, keyword_1.macroKeywordCode)(cxt, def);
        } else if (def.compile || def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        }
      }
      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
      function getData($data, { dataLevel, dataNames, dataPathArr }) {
        let jsonPointer;
        let data;
        if ($data === "")
          return names_1.default.rootData;
        if ($data[0] === "/") {
          if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          jsonPointer = $data;
          data = names_1.default.rootData;
        } else {
          const matches = RELATIVE_JSON_POINTER.exec($data);
          if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          const up = +matches[1];
          jsonPointer = matches[2];
          if (jsonPointer === "#") {
            if (up >= dataLevel)
              throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
          }
          if (up > dataLevel)
            throw new Error(errorMsg("data", up));
          data = dataNames[dataLevel - up];
          if (!jsonPointer)
            return data;
        }
        let expr = data;
        const segments = jsonPointer.split("/");
        for (const segment of segments) {
          if (segment) {
            data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
            expr = (0, codegen_1._)`${expr} && ${data}`;
          }
        }
        return expr;
        function errorMsg(pointerType, up) {
          return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
        }
      }
      exports2.getData = getData;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/validation_error.js
  var require_validation_error2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/validation_error.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var ValidationError = class extends Error {
        constructor(errors) {
          super("validation failed");
          this.errors = errors;
          this.ajv = this.validation = true;
        }
      };
      exports2.default = ValidationError;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/ref_error.js
  var require_ref_error2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/ref_error.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var resolve_1 = require_resolve2();
      var MissingRefError = class extends Error {
        constructor(resolver, baseId, ref, msg) {
          super(msg || `can't resolve reference ${ref} from id ${baseId}`);
          this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
          this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
        }
      };
      exports2.default = MissingRefError;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/index.js
  var require_compile2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/compile/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.resolveSchema = exports2.getCompilingSchema = exports2.resolveRef = exports2.compileSchema = exports2.SchemaEnv = void 0;
      var codegen_1 = require_codegen2();
      var validation_error_1 = require_validation_error2();
      var names_1 = require_names2();
      var resolve_1 = require_resolve2();
      var util_1 = require_util2();
      var validate_1 = require_validate2();
      var SchemaEnv = class {
        constructor(env) {
          var _a;
          this.refs = {};
          this.dynamicAnchors = {};
          let schema;
          if (typeof env.schema == "object")
            schema = env.schema;
          this.schema = env.schema;
          this.schemaId = env.schemaId;
          this.root = env.root || this;
          this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
          this.schemaPath = env.schemaPath;
          this.localRefs = env.localRefs;
          this.meta = env.meta;
          this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
          this.refs = {};
        }
      };
      exports2.SchemaEnv = SchemaEnv;
      function compileSchema(sch) {
        const _sch = getCompilingSchema.call(this, sch);
        if (_sch)
          return _sch;
        const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
          _ValidationError = gen.scopeValue("Error", {
            ref: validation_error_1.default,
            code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
          });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
          gen,
          allErrors: this.opts.allErrors,
          data: names_1.default.data,
          parentData: names_1.default.parentData,
          parentDataProperty: names_1.default.parentDataProperty,
          dataNames: [names_1.default.data],
          dataPathArr: [codegen_1.nil],
          // TODO can its length be used as dataLevel if nil is removed?
          dataLevel: 0,
          dataTypes: [],
          definedProperties: /* @__PURE__ */ new Set(),
          topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
          validateName,
          ValidationError: _ValidationError,
          schema: sch.schema,
          schemaEnv: sch,
          rootId,
          baseId: sch.baseId || rootId,
          schemaPath: codegen_1.nil,
          errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
          errorPath: (0, codegen_1._)`""`,
          opts: this.opts,
          self: this
        };
        let sourceCode;
        try {
          this._compilations.add(sch);
          (0, validate_1.validateFunctionCode)(schemaCxt);
          gen.optimize(this.opts.code.optimize);
          const validateCode = gen.toString();
          sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
          if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
          const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
          const validate = makeValidate(this, this.scope.get());
          this.scope.value(validateName, { ref: validate });
          validate.errors = null;
          validate.schema = sch.schema;
          validate.schemaEnv = sch;
          if (sch.$async)
            validate.$async = true;
          if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
          }
          if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
              props: props instanceof codegen_1.Name ? void 0 : props,
              items: items instanceof codegen_1.Name ? void 0 : items,
              dynamicProps: props instanceof codegen_1.Name,
              dynamicItems: items instanceof codegen_1.Name
            };
            if (validate.source)
              validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
          }
          sch.validate = validate;
          return sch;
        } catch (e2) {
          delete sch.validate;
          delete sch.validateName;
          if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
          throw e2;
        } finally {
          this._compilations.delete(sch);
        }
      }
      exports2.compileSchema = compileSchema;
      function resolveRef(root2, baseId, ref) {
        var _a;
        ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root2.refs[ref];
        if (schOrFunc)
          return schOrFunc;
        let _sch = resolve.call(this, root2, ref);
        if (_sch === void 0) {
          const schema = (_a = root2.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
          const { schemaId } = this.opts;
          if (schema)
            _sch = new SchemaEnv({ schema, schemaId, root: root2, baseId });
        }
        if (_sch === void 0)
          return;
        return root2.refs[ref] = inlineOrCompile.call(this, _sch);
      }
      exports2.resolveRef = resolveRef;
      function inlineOrCompile(sch) {
        if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
          return sch.schema;
        return sch.validate ? sch : compileSchema.call(this, sch);
      }
      function getCompilingSchema(schEnv) {
        for (const sch of this._compilations) {
          if (sameSchemaEnv(sch, schEnv))
            return sch;
        }
      }
      exports2.getCompilingSchema = getCompilingSchema;
      function sameSchemaEnv(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
      }
      function resolve(root2, ref) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
          ref = sch;
        return sch || this.schemas[ref] || resolveSchema2.call(this, root2, ref);
      }
      function resolveSchema2(root2, ref) {
        const p2 = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p2);
        let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root2.baseId, void 0);
        if (Object.keys(root2.schema).length > 0 && refPath === baseId) {
          return getJsonPointer.call(this, p2, root2);
        }
        const id = (0, resolve_1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
          const sch = resolveSchema2.call(this, root2, schOrRef);
          if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
          return getJsonPointer.call(this, p2, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
          return;
        if (!schOrRef.validate)
          compileSchema.call(this, schOrRef);
        if (id === (0, resolve_1.normalizeId)(ref)) {
          const { schema } = schOrRef;
          const { schemaId } = this.opts;
          const schId = schema[schemaId];
          if (schId)
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          return new SchemaEnv({ schema, schemaId, root: root2, baseId });
        }
        return getJsonPointer.call(this, p2, schOrRef);
      }
      exports2.resolveSchema = resolveSchema2;
      var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions"
      ]);
      function getJsonPointer(parsedRef, { baseId, schema, root: root2 }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
          return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
          if (typeof schema === "boolean")
            return;
          const partSchema = schema[(0, util_1.unescapeFragment)(part)];
          if (partSchema === void 0)
            return;
          schema = partSchema;
          const schId = typeof schema === "object" && schema[this.opts.schemaId];
          if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          }
        }
        let env;
        if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
          const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
          env = resolveSchema2.call(this, root2, $ref);
        }
        const { schemaId } = this.opts;
        env = env || new SchemaEnv({ schema, schemaId, root: root2, baseId });
        if (env.schema !== env.root.schema)
          return env;
        return void 0;
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/refs/data.json
  var require_data2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/refs/data.json"(exports2, module2) {
      module2.exports = {
        $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
        type: "object",
        required: ["$data"],
        properties: {
          $data: {
            type: "string",
            anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
          }
        },
        additionalProperties: false
      };
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/uri.js
  var require_uri2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/uri.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var uri = require_fast_uri();
      uri.code = 'require("ajv/dist/runtime/uri").default';
      exports2.default = uri;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/core.js
  var require_core3 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/core.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CodeGen = exports2.Name = exports2.nil = exports2.stringify = exports2.str = exports2._ = exports2.KeywordCxt = void 0;
      var validate_1 = require_validate2();
      Object.defineProperty(exports2, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen2();
      Object.defineProperty(exports2, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports2, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports2, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports2, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports2, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
      var validation_error_1 = require_validation_error2();
      var ref_error_1 = require_ref_error2();
      var rules_1 = require_rules2();
      var compile_1 = require_compile2();
      var codegen_2 = require_codegen2();
      var resolve_1 = require_resolve2();
      var dataType_1 = require_dataType2();
      var util_1 = require_util2();
      var $dataRefSchema = require_data2();
      var uri_1 = require_uri2();
      var defaultRegExp = (str, flags) => new RegExp(str, flags);
      defaultRegExp.code = "new RegExp";
      var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
      var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
        "validate",
        "serialize",
        "parse",
        "wrapper",
        "root",
        "schema",
        "keyword",
        "pattern",
        "formats",
        "validate$data",
        "func",
        "obj",
        "Error"
      ]);
      var removedOptions = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now."
      };
      var deprecatedOptions = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.'
      };
      var MAX_EXPRESSION = 200;
      function requiredOptions(o2) {
        var _a, _b, _c, _d, _e2, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const s2 = o2.strict;
        const _optz = (_a = o2.code) === null || _a === void 0 ? void 0 : _a.optimize;
        const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
        const regExp = (_c = (_b = o2.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
        const uriResolver = (_d = o2.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
        return {
          strictSchema: (_f = (_e2 = o2.strictSchema) !== null && _e2 !== void 0 ? _e2 : s2) !== null && _f !== void 0 ? _f : true,
          strictNumbers: (_h = (_g = o2.strictNumbers) !== null && _g !== void 0 ? _g : s2) !== null && _h !== void 0 ? _h : true,
          strictTypes: (_k = (_j = o2.strictTypes) !== null && _j !== void 0 ? _j : s2) !== null && _k !== void 0 ? _k : "log",
          strictTuples: (_m = (_l = o2.strictTuples) !== null && _l !== void 0 ? _l : s2) !== null && _m !== void 0 ? _m : "log",
          strictRequired: (_p = (_o = o2.strictRequired) !== null && _o !== void 0 ? _o : s2) !== null && _p !== void 0 ? _p : false,
          code: o2.code ? { ...o2.code, optimize, regExp } : { optimize, regExp },
          loopRequired: (_q = o2.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
          loopEnum: (_r = o2.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
          meta: (_s = o2.meta) !== null && _s !== void 0 ? _s : true,
          messages: (_t = o2.messages) !== null && _t !== void 0 ? _t : true,
          inlineRefs: (_u = o2.inlineRefs) !== null && _u !== void 0 ? _u : true,
          schemaId: (_v = o2.schemaId) !== null && _v !== void 0 ? _v : "$id",
          addUsedSchema: (_w = o2.addUsedSchema) !== null && _w !== void 0 ? _w : true,
          validateSchema: (_x = o2.validateSchema) !== null && _x !== void 0 ? _x : true,
          validateFormats: (_y = o2.validateFormats) !== null && _y !== void 0 ? _y : true,
          unicodeRegExp: (_z = o2.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
          int32range: (_0 = o2.int32range) !== null && _0 !== void 0 ? _0 : true,
          uriResolver
        };
      }
      var Ajv2 = class {
        constructor(opts = {}) {
          this.schemas = {};
          this.refs = {};
          this.formats = {};
          this._compilations = /* @__PURE__ */ new Set();
          this._loading = {};
          this._cache = /* @__PURE__ */ new Map();
          opts = this.opts = { ...opts, ...requiredOptions(opts) };
          const { es5, lines } = this.opts.code;
          this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
          this.logger = getLogger(opts.logger);
          const formatOpt = opts.validateFormats;
          opts.validateFormats = false;
          this.RULES = (0, rules_1.getRules)();
          checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
          checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
          this._metaOpts = getMetaSchemaOptions.call(this);
          if (opts.formats)
            addInitialFormats.call(this);
          this._addVocabularies();
          this._addDefaultMetaSchema();
          if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
          if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
          addInitialSchemas.call(this);
          opts.validateFormats = formatOpt;
        }
        _addVocabularies() {
          this.addKeyword("$async");
        }
        _addDefaultMetaSchema() {
          const { $data, meta, schemaId } = this.opts;
          let _dataRefSchema = $dataRefSchema;
          if (schemaId === "id") {
            _dataRefSchema = { ...$dataRefSchema };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
          }
          if (meta && $data)
            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
        }
        defaultMeta() {
          const { meta, schemaId } = this.opts;
          return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
        }
        validate(schemaKeyRef, data) {
          let v2;
          if (typeof schemaKeyRef == "string") {
            v2 = this.getSchema(schemaKeyRef);
            if (!v2)
              throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
          } else {
            v2 = this.compile(schemaKeyRef);
          }
          const valid = v2(data);
          if (!("$async" in v2))
            this.errors = v2.errors;
          return valid;
        }
        compile(schema, _meta) {
          const sch = this._addSchema(schema, _meta);
          return sch.validate || this._compileSchemaEnv(sch);
        }
        compileAsync(schema, meta) {
          if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
          }
          const { loadSchema } = this.opts;
          return runCompileAsync.call(this, schema, meta);
          async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
          }
          async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
              await runCompileAsync.call(this, { $ref }, true);
            }
          }
          async function _compileAsync(sch) {
            try {
              return this._compileSchemaEnv(sch);
            } catch (e2) {
              if (!(e2 instanceof ref_error_1.default))
                throw e2;
              checkLoaded.call(this, e2);
              await loadMissingSchema.call(this, e2.missingSchema);
              return _compileAsync.call(this, sch);
            }
          }
          function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
              throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
          }
          async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
              await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
              this.addSchema(_schema, ref, meta);
          }
          async function _loadSchema(ref) {
            const p2 = this._loading[ref];
            if (p2)
              return p2;
            try {
              return await (this._loading[ref] = loadSchema(ref));
            } finally {
              delete this._loading[ref];
            }
          }
        }
        // Adds schema to the instance
        addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema) {
          if (Array.isArray(schema)) {
            for (const sch of schema)
              this.addSchema(sch, void 0, _meta, _validateSchema);
            return this;
          }
          let id;
          if (typeof schema === "object") {
            const { schemaId } = this.opts;
            id = schema[schemaId];
            if (id !== void 0 && typeof id != "string") {
              throw new Error(`schema ${schemaId} must be string`);
            }
          }
          key = (0, resolve_1.normalizeId)(key || id);
          this._checkUnique(key);
          this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
          return this;
        }
        // Add schema that will be used to validate other schemas
        // options in META_IGNORE_OPTIONS are alway set to false
        addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
          this.addSchema(schema, key, true, _validateSchema);
          return this;
        }
        //  Validate schema against its meta-schema
        validateSchema(schema, throwOrLogError) {
          if (typeof schema == "boolean")
            return true;
          let $schema;
          $schema = schema.$schema;
          if ($schema !== void 0 && typeof $schema != "string") {
            throw new Error("$schema must be a string");
          }
          $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
          if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
          }
          const valid = this.validate($schema, schema);
          if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
              this.logger.error(message);
            else
              throw new Error(message);
          }
          return valid;
        }
        // Get compiled schema by `key` or `ref`.
        // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
        getSchema(keyRef) {
          let sch;
          while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
          if (sch === void 0) {
            const { schemaId } = this.opts;
            const root2 = new compile_1.SchemaEnv({ schema: {}, schemaId });
            sch = compile_1.resolveSchema.call(this, root2, keyRef);
            if (!sch)
              return;
            this.refs[keyRef] = sch;
          }
          return sch.validate || this._compileSchemaEnv(sch);
        }
        // Remove cached schema(s).
        // If no parameter is passed all schemas but meta-schemas are removed.
        // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
        // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
        removeSchema(schemaKeyRef) {
          if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
          }
          switch (typeof schemaKeyRef) {
            case "undefined":
              this._removeAllSchemas(this.schemas);
              this._removeAllSchemas(this.refs);
              this._cache.clear();
              return this;
            case "string": {
              const sch = getSchEnv.call(this, schemaKeyRef);
              if (typeof sch == "object")
                this._cache.delete(sch.schema);
              delete this.schemas[schemaKeyRef];
              delete this.refs[schemaKeyRef];
              return this;
            }
            case "object": {
              const cacheKey = schemaKeyRef;
              this._cache.delete(cacheKey);
              let id = schemaKeyRef[this.opts.schemaId];
              if (id) {
                id = (0, resolve_1.normalizeId)(id);
                delete this.schemas[id];
                delete this.refs[id];
              }
              return this;
            }
            default:
              throw new Error("ajv.removeSchema: invalid parameter");
          }
        }
        // add "vocabulary" - a collection of keywords
        addVocabulary(definitions) {
          for (const def of definitions)
            this.addKeyword(def);
          return this;
        }
        addKeyword(kwdOrDef, def) {
          let keyword;
          if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
              this.logger.warn("these parameters are deprecated, see docs for addKeyword");
              def.keyword = keyword;
            }
          } else if (typeof kwdOrDef == "object" && def === void 0) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
              throw new Error("addKeywords: keyword must be string or non-empty array");
            }
          } else {
            throw new Error("invalid addKeywords parameters");
          }
          checkKeyword.call(this, keyword, def);
          if (!def) {
            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
            return this;
          }
          keywordMetaschema.call(this, def);
          const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
          };
          (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k2) => addRule.call(this, k2, definition) : (k2) => definition.type.forEach((t2) => addRule.call(this, k2, definition, t2)));
          return this;
        }
        getKeyword(keyword) {
          const rule = this.RULES.all[keyword];
          return typeof rule == "object" ? rule.definition : !!rule;
        }
        // Remove keyword
        removeKeyword(keyword) {
          const { RULES } = this;
          delete RULES.keywords[keyword];
          delete RULES.all[keyword];
          for (const group of RULES.rules) {
            const i2 = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i2 >= 0)
              group.rules.splice(i2, 1);
          }
          return this;
        }
        // Add format
        addFormat(name, format) {
          if (typeof format == "string")
            format = new RegExp(format);
          this.formats[name] = format;
          return this;
        }
        errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
          if (!errors || errors.length === 0)
            return "No errors";
          return errors.map((e2) => `${dataVar}${e2.instancePath} ${e2.message}`).reduce((text, msg) => text + separator + msg);
        }
        $dataMetaSchema(metaSchema, keywordsJsonPointers) {
          const rules = this.RULES.all;
          metaSchema = JSON.parse(JSON.stringify(metaSchema));
          for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1);
            let keywords = metaSchema;
            for (const seg of segments)
              keywords = keywords[seg];
            for (const key in rules) {
              const rule = rules[key];
              if (typeof rule != "object")
                continue;
              const { $data } = rule.definition;
              const schema = keywords[key];
              if ($data && schema)
                keywords[key] = schemaOrData(schema);
            }
          }
          return metaSchema;
        }
        _removeAllSchemas(schemas, regex) {
          for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
              if (typeof sch == "string") {
                delete schemas[keyRef];
              } else if (sch && !sch.meta) {
                this._cache.delete(sch.schema);
                delete schemas[keyRef];
              }
            }
          }
        }
        _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
          let id;
          const { schemaId } = this.opts;
          if (typeof schema == "object") {
            id = schema[schemaId];
          } else {
            if (this.opts.jtd)
              throw new Error("schema must be object");
            else if (typeof schema != "boolean")
              throw new Error("schema must be object or boolean");
          }
          let sch = this._cache.get(schema);
          if (sch !== void 0)
            return sch;
          baseId = (0, resolve_1.normalizeId)(id || baseId);
          const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
          sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
          this._cache.set(sch.schema, sch);
          if (addSchema && !baseId.startsWith("#")) {
            if (baseId)
              this._checkUnique(baseId);
            this.refs[baseId] = sch;
          }
          if (validateSchema)
            this.validateSchema(schema, true);
          return sch;
        }
        _checkUnique(id) {
          if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
          }
        }
        _compileSchemaEnv(sch) {
          if (sch.meta)
            this._compileMetaSchema(sch);
          else
            compile_1.compileSchema.call(this, sch);
          if (!sch.validate)
            throw new Error("ajv implementation error");
          return sch.validate;
        }
        _compileMetaSchema(sch) {
          const currentOpts = this.opts;
          this.opts = this._metaOpts;
          try {
            compile_1.compileSchema.call(this, sch);
          } finally {
            this.opts = currentOpts;
          }
        }
      };
      Ajv2.ValidationError = validation_error_1.default;
      Ajv2.MissingRefError = ref_error_1.default;
      exports2.default = Ajv2;
      function checkOptions(checkOpts, options, msg, log = "error") {
        for (const key in checkOpts) {
          const opt = key;
          if (opt in options)
            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
        }
      }
      function getSchEnv(keyRef) {
        keyRef = (0, resolve_1.normalizeId)(keyRef);
        return this.schemas[keyRef] || this.refs[keyRef];
      }
      function addInitialSchemas() {
        const optsSchemas = this.opts.schemas;
        if (!optsSchemas)
          return;
        if (Array.isArray(optsSchemas))
          this.addSchema(optsSchemas);
        else
          for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
      }
      function addInitialFormats() {
        for (const name in this.opts.formats) {
          const format = this.opts.formats[name];
          if (format)
            this.addFormat(name, format);
        }
      }
      function addInitialKeywords(defs) {
        if (Array.isArray(defs)) {
          this.addVocabulary(defs);
          return;
        }
        this.logger.warn("keywords option as map is deprecated, pass array");
        for (const keyword in defs) {
          const def = defs[keyword];
          if (!def.keyword)
            def.keyword = keyword;
          this.addKeyword(def);
        }
      }
      function getMetaSchemaOptions() {
        const metaOpts = { ...this.opts };
        for (const opt of META_IGNORE_OPTIONS)
          delete metaOpts[opt];
        return metaOpts;
      }
      var noLogs = { log() {
      }, warn() {
      }, error() {
      } };
      function getLogger(logger) {
        if (logger === false)
          return noLogs;
        if (logger === void 0)
          return console;
        if (logger.log && logger.warn && logger.error)
          return logger;
        throw new Error("logger must implement log, warn and error methods");
      }
      var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
      function checkKeyword(keyword, def) {
        const { RULES } = this;
        (0, util_1.eachItem)(keyword, (kwd) => {
          if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
          if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
        });
        if (!def)
          return;
        if (def.$data && !("code" in def || "validate" in def)) {
          throw new Error('$data keyword must have "code" or "validate" function');
        }
      }
      function addRule(keyword, definition, dataType) {
        var _a;
        const post = definition === null || definition === void 0 ? void 0 : definition.post;
        if (dataType && post)
          throw new Error('keyword with "post" flag cannot have "type"');
        const { RULES } = this;
        let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t2 }) => t2 === dataType);
        if (!ruleGroup) {
          ruleGroup = { type: dataType, rules: [] };
          RULES.rules.push(ruleGroup);
        }
        RULES.keywords[keyword] = true;
        if (!definition)
          return;
        const rule = {
          keyword,
          definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
          }
        };
        if (definition.before)
          addBeforeRule.call(this, ruleGroup, rule, definition.before);
        else
          ruleGroup.rules.push(rule);
        RULES.all[keyword] = rule;
        (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
      }
      function addBeforeRule(ruleGroup, rule, before) {
        const i2 = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
        if (i2 >= 0) {
          ruleGroup.rules.splice(i2, 0, rule);
        } else {
          ruleGroup.rules.push(rule);
          this.logger.warn(`rule ${before} is not defined`);
        }
      }
      function keywordMetaschema(def) {
        let { metaSchema } = def;
        if (metaSchema === void 0)
          return;
        if (def.$data && this.opts.$data)
          metaSchema = schemaOrData(metaSchema);
        def.validateSchema = this.compile(metaSchema, true);
      }
      var $dataRef = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
      };
      function schemaOrData(schema) {
        return { anyOf: [schema, $dataRef] };
      }
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/core/id.js
  var require_id2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/core/id.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var def = {
        keyword: "id",
        code() {
          throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/core/ref.js
  var require_ref2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/core/ref.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.callRef = exports2.getValidate = void 0;
      var ref_error_1 = require_ref_error2();
      var code_1 = require_code4();
      var codegen_1 = require_codegen2();
      var names_1 = require_names2();
      var compile_1 = require_compile2();
      var util_1 = require_util2();
      var def = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
          const { gen, schema: $ref, it } = cxt;
          const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
          const { root: root2 } = env;
          if (($ref === "#" || $ref === "#/") && baseId === root2.baseId)
            return callRootRef();
          const schOrEnv = compile_1.resolveRef.call(self2, root2, baseId, $ref);
          if (schOrEnv === void 0)
            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
          if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
          return inlineRefSchema(schOrEnv);
          function callRootRef() {
            if (env === root2)
              return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: root2 });
            return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root2, root2.$async);
          }
          function callValidate(sch) {
            const v2 = getValidate(cxt, sch);
            callRef(cxt, v2, sch, sch.$async);
          }
          function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
              schema: sch,
              dataTypes: [],
              schemaPath: codegen_1.nil,
              topSchemaRef: schName,
              errSchemaPath: $ref
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
          }
        }
      };
      function getValidate(cxt, sch) {
        const { gen } = cxt;
        return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
      }
      exports2.getValidate = getValidate;
      function callRef(cxt, v2, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
        if ($async)
          callAsyncRef();
        else
          callSyncRef();
        function callAsyncRef() {
          if (!env.$async)
            throw new Error("async schema referenced by sync schema");
          const valid = gen.let("valid");
          gen.try(() => {
            gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v2, passCxt)}`);
            addEvaluatedFrom(v2);
            if (!allErrors)
              gen.assign(valid, true);
          }, (e2) => {
            gen.if((0, codegen_1._)`!(${e2} instanceof ${it.ValidationError})`, () => gen.throw(e2));
            addErrorsFrom(e2);
            if (!allErrors)
              gen.assign(valid, false);
          });
          cxt.ok(valid);
        }
        function callSyncRef() {
          cxt.result((0, code_1.callValidateCode)(cxt, v2, passCxt), () => addEvaluatedFrom(v2), () => addErrorsFrom(v2));
        }
        function addErrorsFrom(source) {
          const errs = (0, codegen_1._)`${source}.errors`;
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
          gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source) {
          var _a;
          if (!it.opts.unevaluated)
            return;
          const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
          if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
              if (schEvaluated.props !== void 0) {
                it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
              }
            } else {
              const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
              it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
          }
          if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
              if (schEvaluated.items !== void 0) {
                it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
              }
            } else {
              const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
              it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
          }
        }
      }
      exports2.callRef = callRef;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/core/index.js
  var require_core4 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/core/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var id_1 = require_id2();
      var ref_1 = require_ref2();
      var core = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1.default,
        ref_1.default
      ];
      exports2.default = core;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitNumber.js
  var require_limitNumber2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var ops = codegen_1.operators;
      var KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
      };
      var error = {
        message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
      };
      var def = {
        keyword: Object.keys(KWDs),
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/multipleOf.js
  var require_multipleOf2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
      };
      var def = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, schemaCode, it } = cxt;
          const prec = it.opts.multipleOfPrecision;
          const res = gen.let("res");
          const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
          cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/ucs2length.js
  var require_ucs2length2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/ucs2length.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      function ucs2length(str) {
        const len = str.length;
        let length2 = 0;
        let pos = 0;
        let value;
        while (pos < len) {
          length2++;
          value = str.charCodeAt(pos++);
          if (value >= 55296 && value <= 56319 && pos < len) {
            value = str.charCodeAt(pos);
            if ((value & 64512) === 56320)
              pos++;
          }
        }
        return length2;
      }
      exports2.default = ucs2length;
      ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitLength.js
  var require_limitLength2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var ucs2length_1 = require_ucs2length2();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxLength" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode, it } = cxt;
          const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
          const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
          cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/pattern.js
  var require_pattern2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code4();
      var codegen_1 = require_codegen2();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
      };
      var def = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error,
        code(cxt) {
          const { data, $data, schema, schemaCode, it } = cxt;
          const u2 = it.opts.unicodeRegExp ? "u" : "";
          const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u2}))` : (0, code_1.usePattern)(cxt, schema);
          cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitProperties.js
  var require_limitProperties2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxProperties" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/required.js
  var require_required2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/required.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code4();
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var error = {
        message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
      };
      var def = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, schema, schemaCode, data, $data, it } = cxt;
          const { opts } = it;
          if (!$data && schema.length === 0)
            return;
          const useLoop = schema.length >= opts.loopRequired;
          if (it.allErrors)
            allErrorsMode();
          else
            exitOnErrorMode();
          if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema) {
              if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
                const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
              }
            }
          }
          function allErrorsMode() {
            if (useLoop || $data) {
              cxt.block$data(codegen_1.nil, loopAllRequired);
            } else {
              for (const prop of schema) {
                (0, code_1.checkReportMissingProp)(cxt, prop);
              }
            }
          }
          function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
              const valid = gen.let("valid", true);
              cxt.block$data(valid, () => loopUntilMissing(missing, valid));
              cxt.ok(valid);
            } else {
              gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
              (0, code_1.reportMissingProp)(cxt, missing);
              gen.else();
            }
          }
          function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
              cxt.setParams({ missingProperty: prop });
              gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
          }
          function loopUntilMissing(missing, valid) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
              gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
              gen.if((0, codegen_1.not)(valid), () => {
                cxt.error();
                gen.break();
              });
            }, codegen_1.nil);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitItems.js
  var require_limitItems2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxItems" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/equal.js
  var require_equal2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/runtime/equal.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var equal = require_fast_deep_equal();
      equal.code = 'require("ajv/dist/runtime/equal").default';
      exports2.default = equal;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
  var require_uniqueItems2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var dataType_1 = require_dataType2();
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var equal_1 = require_equal2();
      var error = {
        message: ({ params: { i: i2, j: j2 } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j2} and ${i2} are identical)`,
        params: ({ params: { i: i2, j: j2 } }) => (0, codegen_1._)`{i: ${i2}, j: ${j2}}`
      };
      var def = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
          if (!$data && !schema)
            return;
          const valid = gen.let("valid");
          const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
          cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
          cxt.ok(valid);
          function validateUniqueItems() {
            const i2 = gen.let("i", (0, codegen_1._)`${data}.length`);
            const j2 = gen.let("j");
            cxt.setParams({ i: i2, j: j2 });
            gen.assign(valid, true);
            gen.if((0, codegen_1._)`${i2} > 1`, () => (canOptimize() ? loopN : loopN2)(i2, j2));
          }
          function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t2) => t2 === "object" || t2 === "array");
          }
          function loopN(i2, j2) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._)`{}`);
            gen.for((0, codegen_1._)`;${i2}--;`, () => {
              gen.let(item, (0, codegen_1._)`${data}[${i2}]`);
              gen.if(wrongType, (0, codegen_1._)`continue`);
              if (itemTypes.length > 1)
                gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
              gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
                gen.assign(j2, (0, codegen_1._)`${indices}[${item}]`);
                cxt.error();
                gen.assign(valid, false).break();
              }).code((0, codegen_1._)`${indices}[${item}] = ${i2}`);
            });
          }
          function loopN2(i2, j2) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._)`;${i2}--;`, () => gen.for((0, codegen_1._)`${j2} = ${i2}; ${j2}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i2}], ${data}[${j2}])`, () => {
              cxt.error();
              gen.assign(valid, false).break(outer);
            })));
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/const.js
  var require_const2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var equal_1 = require_equal2();
      var error = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
      };
      var def = {
        keyword: "const",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schemaCode, schema } = cxt;
          if ($data || schema && typeof schema == "object") {
            cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
          } else {
            cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/enum.js
  var require_enum2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/enum.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var equal_1 = require_equal2();
      var error = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
      };
      var def = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema, schemaCode, it } = cxt;
          if (!$data && schema.length === 0)
            throw new Error("enum must have non-empty array");
          const useLoop = schema.length >= it.opts.loopEnum;
          let eql;
          const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
          let valid;
          if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
          } else {
            if (!Array.isArray(schema))
              throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = (0, codegen_1.or)(...schema.map((_x, i2) => equalCode(vSchema, i2)));
          }
          cxt.pass(valid);
          function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v2) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v2})`, () => gen.assign(valid, true).break()));
          }
          function equalCode(vSchema, i2) {
            const sch = schema[i2];
            return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i2}])` : (0, codegen_1._)`${data} === ${sch}`;
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/index.js
  var require_validation2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/validation/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var limitNumber_1 = require_limitNumber2();
      var multipleOf_1 = require_multipleOf2();
      var limitLength_1 = require_limitLength2();
      var pattern_1 = require_pattern2();
      var limitProperties_1 = require_limitProperties2();
      var required_1 = require_required2();
      var limitItems_1 = require_limitItems2();
      var uniqueItems_1 = require_uniqueItems2();
      var const_1 = require_const2();
      var enum_1 = require_enum2();
      var validation = [
        // number
        limitNumber_1.default,
        multipleOf_1.default,
        // string
        limitLength_1.default,
        pattern_1.default,
        // object
        limitProperties_1.default,
        required_1.default,
        // array
        limitItems_1.default,
        uniqueItems_1.default,
        // any
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1.default,
        enum_1.default
      ];
      exports2.default = validation;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
  var require_additionalItems2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateAdditionalItems = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { parentSchema, it } = cxt;
          const { items } = parentSchema;
          if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
          }
          validateAdditionalItems(cxt, items);
        }
      };
      function validateAdditionalItems(cxt, items) {
        const { gen, schema, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        if (schema === false) {
          cxt.setParams({ len: items.length });
          cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
        } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
          const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
          gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
          cxt.ok(valid);
        }
        function validateItems(valid) {
          gen.forRange("i", items.length, len, (i2) => {
            cxt.subschema({ keyword, dataProp: i2, dataPropType: util_1.Type.Num }, valid);
            if (!it.allErrors)
              gen.if((0, codegen_1.not)(valid), () => gen.break());
          });
        }
      }
      exports2.validateAdditionalItems = validateAdditionalItems;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/items.js
  var require_items3 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/items.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateTuple = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var code_1 = require_code4();
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
          const { schema, it } = cxt;
          if (Array.isArray(schema))
            return validateTuple(cxt, "additionalItems", schema);
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
          cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      function validateTuple(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
          it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        schArr.forEach((sch, i2) => {
          if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
          gen.if((0, codegen_1._)`${len} > ${i2}`, () => cxt.subschema({
            keyword,
            schemaProp: i2,
            dataProp: i2
          }, valid));
          cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
          const { opts, errSchemaPath } = it;
          const l2 = schArr.length;
          const fullTuple = l2 === sch.minItems && (l2 === sch.maxItems || sch[extraItems] === false);
          if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l2}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
          }
        }
      }
      exports2.validateTuple = validateTuple;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
  var require_prefixItems2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var items_1 = require_items3();
      var def = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/items2020.js
  var require_items20202 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/items2020.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var code_1 = require_code4();
      var additionalItems_1 = require_additionalItems2();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { schema, parentSchema, it } = cxt;
          const { prefixItems } = parentSchema;
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
          if (prefixItems)
            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
          else
            cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/contains.js
  var require_contains2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var error = {
        message: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
      };
      var def = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema, parentSchema, data, it } = cxt;
          let min;
          let max;
          const { minContains, maxContains } = parentSchema;
          if (it.opts.next) {
            min = minContains === void 0 ? 1 : minContains;
            max = maxContains;
          } else {
            min = 1;
          }
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          cxt.setParams({ min, max });
          if (max === void 0 && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
          }
          if (max !== void 0 && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
          }
          if ((0, util_1.alwaysValidSchema)(it, schema)) {
            let cond = (0, codegen_1._)`${len} >= ${min}`;
            if (max !== void 0)
              cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
          }
          it.items = true;
          const valid = gen.name("valid");
          if (max === void 0 && min === 1) {
            validateItems(valid, () => gen.if(valid, () => gen.break()));
          } else if (min === 0) {
            gen.let(valid, true);
            if (max !== void 0)
              gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
          } else {
            gen.let(valid, false);
            validateItemsWithCount();
          }
          cxt.result(valid, () => cxt.reset());
          function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
          }
          function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i2) => {
              cxt.subschema({
                keyword: "contains",
                dataProp: i2,
                dataPropType: util_1.Type.Num,
                compositeRule: true
              }, _valid);
              block();
            });
          }
          function checkLimits(count) {
            gen.code((0, codegen_1._)`${count}++`);
            if (max === void 0) {
              gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
            } else {
              gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());
              if (min === 1)
                gen.assign(valid, true);
              else
                gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));
            }
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/dependencies.js
  var require_dependencies2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateSchemaDeps = exports2.validatePropertyDeps = exports2.error = void 0;
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var code_1 = require_code4();
      exports2.error = {
        message: ({ params: { property: property2, depsCount, deps } }) => {
          const property_ies = depsCount === 1 ? "property" : "properties";
          return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property2} is present`;
        },
        params: ({ params: { property: property2, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property2},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
        // TODO change to reference
      };
      var def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports2.error,
        code(cxt) {
          const [propDeps, schDeps] = splitDependencies(cxt);
          validatePropertyDeps(cxt, propDeps);
          validateSchemaDeps(cxt, schDeps);
        }
      };
      function splitDependencies({ schema }) {
        const propertyDeps = {};
        const schemaDeps = {};
        for (const key in schema) {
          if (key === "__proto__")
            continue;
          const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
          deps[key] = schema[key];
        }
        return [propertyDeps, schemaDeps];
      }
      function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
        const { gen, data, it } = cxt;
        if (Object.keys(propertyDeps).length === 0)
          return;
        const missing = gen.let("missing");
        for (const prop in propertyDeps) {
          const deps = propertyDeps[prop];
          if (deps.length === 0)
            continue;
          const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
          cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", ")
          });
          if (it.allErrors) {
            gen.if(hasProperty, () => {
              for (const depProp of deps) {
                (0, code_1.checkReportMissingProp)(cxt, depProp);
              }
            });
          } else {
            gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
      }
      exports2.validatePropertyDeps = validatePropertyDeps;
      function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        for (const prop in schemaDeps) {
          if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
            continue;
          gen.if(
            (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties),
            () => {
              const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
              cxt.mergeValidEvaluated(schCxt, valid);
            },
            () => gen.var(valid, true)
            // TODO var
          );
          cxt.ok(valid);
        }
      }
      exports2.validateSchemaDeps = validateSchemaDeps;
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
  var require_propertyNames2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var error = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
      };
      var def = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error,
        code(cxt) {
          const { gen, schema, data, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema))
            return;
          const valid = gen.name("valid");
          gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
              keyword: "propertyNames",
              data: key,
              dataTypes: ["string"],
              propertyName: key,
              compositeRule: true
            }, valid);
            gen.if((0, codegen_1.not)(valid), () => {
              cxt.error(true);
              if (!it.allErrors)
                gen.break();
            });
          });
          cxt.ok(valid);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
  var require_additionalProperties2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code4();
      var codegen_1 = require_codegen2();
      var names_1 = require_names2();
      var util_1 = require_util2();
      var error = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
      };
      var def = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema, parentSchema, data, errsCount, it } = cxt;
          if (!errsCount)
            throw new Error("ajv implementation error");
          const { allErrors, opts } = it;
          it.props = true;
          if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
            return;
          const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
          const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
          checkAdditionalProperties();
          cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
          function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
              if (!props.length && !patProps.length)
                additionalPropertyCode(key);
              else
                gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
          }
          function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
              const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
              definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            } else if (props.length) {
              definedProp = (0, codegen_1.or)(...props.map((p2) => (0, codegen_1._)`${key} === ${p2}`));
            } else {
              definedProp = codegen_1.nil;
            }
            if (patProps.length) {
              definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p2) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p2)}.test(${key})`));
            }
            return (0, codegen_1.not)(definedProp);
          }
          function deleteAdditional(key) {
            gen.code((0, codegen_1._)`delete ${data}[${key}]`);
          }
          function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
              deleteAdditional(key);
              return;
            }
            if (schema === false) {
              cxt.setParams({ additionalProperty: key });
              cxt.error();
              if (!allErrors)
                gen.break();
              return;
            }
            if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
              const valid = gen.name("valid");
              if (opts.removeAdditional === "failing") {
                applyAdditionalSchema(key, valid, false);
                gen.if((0, codegen_1.not)(valid), () => {
                  cxt.reset();
                  deleteAdditional(key);
                });
              } else {
                applyAdditionalSchema(key, valid);
                if (!allErrors)
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
              }
            }
          }
          function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
              keyword: "additionalProperties",
              dataProp: key,
              dataPropType: util_1.Type.Str
            };
            if (errors === false) {
              Object.assign(subschema, {
                compositeRule: true,
                createErrors: false,
                allErrors: false
              });
            }
            cxt.subschema(subschema, valid);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/properties.js
  var require_properties3 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var validate_1 = require_validate2();
      var code_1 = require_code4();
      var util_1 = require_util2();
      var additionalProperties_1 = require_additionalProperties2();
      var def = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema, parentSchema, data, it } = cxt;
          if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
          }
          const allProps = (0, code_1.allSchemaProperties)(schema);
          for (const prop of allProps) {
            it.definedProperties.add(prop);
          }
          if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
          }
          const properties2 = allProps.filter((p2) => !(0, util_1.alwaysValidSchema)(it, schema[p2]));
          if (properties2.length === 0)
            return;
          const valid = gen.name("valid");
          for (const prop of properties2) {
            if (hasDefault(prop)) {
              applyPropertySchema(prop);
            } else {
              gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
              applyPropertySchema(prop);
              if (!it.allErrors)
                gen.else().var(valid, true);
              gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
          }
          function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== void 0;
          }
          function applyPropertySchema(prop) {
            cxt.subschema({
              keyword: "properties",
              schemaProp: prop,
              dataProp: prop
            }, valid);
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
  var require_patternProperties2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code4();
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var util_2 = require_util2();
      var def = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema, data, parentSchema, it } = cxt;
          const { opts } = it;
          const patterns = (0, code_1.allSchemaProperties)(schema);
          const alwaysValidPatterns = patterns.filter((p2) => (0, util_1.alwaysValidSchema)(it, schema[p2]));
          if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
            return;
          }
          const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
          const valid = gen.name("valid");
          if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
          }
          const { props } = it;
          validatePatternProperties();
          function validatePatternProperties() {
            for (const pat of patterns) {
              if (checkProperties)
                checkMatchingProperties(pat);
              if (it.allErrors) {
                validateProperties(pat);
              } else {
                gen.var(valid, true);
                validateProperties(pat);
                gen.if(valid);
              }
            }
          }
          function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
              if (new RegExp(pat).test(prop)) {
                (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
              }
            }
          }
          function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
              gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
                const alwaysValid = alwaysValidPatterns.includes(pat);
                if (!alwaysValid) {
                  cxt.subschema({
                    keyword: "patternProperties",
                    schemaProp: pat,
                    dataProp: key,
                    dataPropType: util_2.Type.Str
                  }, valid);
                }
                if (it.opts.unevaluated && props !== true) {
                  gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                } else if (!alwaysValid && !it.allErrors) {
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
                }
              });
            });
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/not.js
  var require_not2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/not.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var util_1 = require_util2();
      var def = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
          const { gen, schema, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema)) {
            cxt.fail();
            return;
          }
          const valid = gen.name("valid");
          cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, valid);
          cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/anyOf.js
  var require_anyOf2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var code_1 = require_code4();
      var def = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1.validateUnion,
        error: { message: "must match a schema in anyOf" }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/oneOf.js
  var require_oneOf2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var error = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
      };
      var def = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema, parentSchema, it } = cxt;
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          if (it.opts.discriminator && parentSchema.discriminator)
            return;
          const schArr = schema;
          const valid = gen.let("valid", false);
          const passing = gen.let("passing", null);
          const schValid = gen.name("_valid");
          cxt.setParams({ passing });
          gen.block(validateOneOf);
          cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
          function validateOneOf() {
            schArr.forEach((sch, i2) => {
              let schCxt;
              if ((0, util_1.alwaysValidSchema)(it, sch)) {
                gen.var(schValid, true);
              } else {
                schCxt = cxt.subschema({
                  keyword: "oneOf",
                  schemaProp: i2,
                  compositeRule: true
                }, schValid);
              }
              if (i2 > 0) {
                gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i2}]`).else();
              }
              gen.if(schValid, () => {
                gen.assign(valid, true);
                gen.assign(passing, i2);
                if (schCxt)
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
              });
            });
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/allOf.js
  var require_allOf2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var util_1 = require_util2();
      var def = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
          const { gen, schema, it } = cxt;
          if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
          const valid = gen.name("valid");
          schema.forEach((sch, i2) => {
            if ((0, util_1.alwaysValidSchema)(it, sch))
              return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i2 }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
          });
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/if.js
  var require_if2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/if.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var util_1 = require_util2();
      var error = {
        message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
      };
      var def = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, parentSchema, it } = cxt;
          if (parentSchema.then === void 0 && parentSchema.else === void 0) {
            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
          }
          const hasThen = hasSchema(it, "then");
          const hasElse = hasSchema(it, "else");
          if (!hasThen && !hasElse)
            return;
          const valid = gen.let("valid", true);
          const schValid = gen.name("_valid");
          validateIf();
          cxt.reset();
          if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
          } else if (hasThen) {
            gen.if(schValid, validateClause("then"));
          } else {
            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
          }
          cxt.pass(valid, () => cxt.error(true));
          function validateIf() {
            const schCxt = cxt.subschema({
              keyword: "if",
              compositeRule: true,
              createErrors: false,
              allErrors: false
            }, schValid);
            cxt.mergeEvaluated(schCxt);
          }
          function validateClause(keyword, ifClause) {
            return () => {
              const schCxt = cxt.subschema({ keyword }, schValid);
              gen.assign(valid, schValid);
              cxt.mergeValidEvaluated(schCxt, valid);
              if (ifClause)
                gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
              else
                cxt.setParams({ ifClause: keyword });
            };
          }
        }
      };
      function hasSchema(it, keyword) {
        const schema = it.schema[keyword];
        return schema !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema);
      }
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/thenElse.js
  var require_thenElse2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var util_1 = require_util2();
      var def = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
          if (parentSchema.if === void 0)
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/index.js
  var require_applicator2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/applicator/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var additionalItems_1 = require_additionalItems2();
      var prefixItems_1 = require_prefixItems2();
      var items_1 = require_items3();
      var items2020_1 = require_items20202();
      var contains_1 = require_contains2();
      var dependencies_1 = require_dependencies2();
      var propertyNames_1 = require_propertyNames2();
      var additionalProperties_1 = require_additionalProperties2();
      var properties_1 = require_properties3();
      var patternProperties_1 = require_patternProperties2();
      var not_1 = require_not2();
      var anyOf_1 = require_anyOf2();
      var oneOf_1 = require_oneOf2();
      var allOf_1 = require_allOf2();
      var if_1 = require_if2();
      var thenElse_1 = require_thenElse2();
      function getApplicator(draft2020 = false) {
        const applicator = [
          // any
          not_1.default,
          anyOf_1.default,
          oneOf_1.default,
          allOf_1.default,
          if_1.default,
          thenElse_1.default,
          // object
          propertyNames_1.default,
          additionalProperties_1.default,
          dependencies_1.default,
          properties_1.default,
          patternProperties_1.default
        ];
        if (draft2020)
          applicator.push(prefixItems_1.default, items2020_1.default);
        else
          applicator.push(additionalItems_1.default, items_1.default);
        applicator.push(contains_1.default);
        return applicator;
      }
      exports2.default = getApplicator;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/format/format.js
  var require_format3 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/format/format.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
      };
      var def = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error,
        code(cxt, ruleType) {
          const { gen, data, $data, schema, schemaCode, it } = cxt;
          const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
          if (!opts.validateFormats)
            return;
          if ($data)
            validate$DataFormat();
          else
            validateFormat();
          function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
              ref: self2.formats,
              code: opts.code.formats
            });
            const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
              if (opts.strictSchema === false)
                return codegen_1.nil;
              return (0, codegen_1._)`${schemaCode} && !${format}`;
            }
            function invalidFmt() {
              const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
              const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
              return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
          }
          function validateFormat() {
            const formatDef = self2.formats[schema];
            if (!formatDef) {
              unknownFormat();
              return;
            }
            if (formatDef === true)
              return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
              cxt.pass(validCondition());
            function unknownFormat() {
              if (opts.strictSchema === false) {
                self2.logger.warn(unknownMsg());
                return;
              }
              throw new Error(unknownMsg());
              function unknownMsg() {
                return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
              }
            }
            function getFormat(fmtDef) {
              const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : void 0;
              const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
              if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
              }
              return ["string", fmtDef, fmt];
            }
            function validCondition() {
              if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                if (!schemaEnv.$async)
                  throw new Error("async format in sync schema");
                return (0, codegen_1._)`await ${fmtRef}(${data})`;
              }
              return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
            }
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/format/index.js
  var require_format4 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/format/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var format_1 = require_format3();
      var format = [format_1.default];
      exports2.default = format;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/metadata.js
  var require_metadata2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/metadata.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.contentVocabulary = exports2.metadataVocabulary = void 0;
      exports2.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples"
      ];
      exports2.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema"
      ];
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/draft7.js
  var require_draft72 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/draft7.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var core_1 = require_core4();
      var validation_1 = require_validation2();
      var applicator_1 = require_applicator2();
      var format_1 = require_format4();
      var metadata_1 = require_metadata2();
      var draft7Vocabularies = [
        core_1.default,
        validation_1.default,
        (0, applicator_1.default)(),
        format_1.default,
        metadata_1.metadataVocabulary,
        metadata_1.contentVocabulary
      ];
      exports2.default = draft7Vocabularies;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/discriminator/types.js
  var require_types2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/discriminator/types.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DiscrError = void 0;
      var DiscrError;
      (function(DiscrError2) {
        DiscrError2["Tag"] = "tag";
        DiscrError2["Mapping"] = "mapping";
      })(DiscrError || (exports2.DiscrError = DiscrError = {}));
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/discriminator/index.js
  var require_discriminator2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/vocabularies/discriminator/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var codegen_1 = require_codegen2();
      var types_1 = require_types2();
      var compile_1 = require_compile2();
      var ref_error_1 = require_ref_error2();
      var util_1 = require_util2();
      var error = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
      };
      var def = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error,
        code(cxt) {
          const { gen, data, schema, parentSchema, it } = cxt;
          const { oneOf } = parentSchema;
          if (!it.opts.discriminator) {
            throw new Error("discriminator: requires discriminator option");
          }
          const tagName = schema.propertyName;
          if (typeof tagName != "string")
            throw new Error("discriminator: requires propertyName");
          if (schema.mapping)
            throw new Error("discriminator: mapping is not supported");
          if (!oneOf)
            throw new Error("discriminator: requires oneOf keyword");
          const valid = gen.let("valid", false);
          const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
          gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
          cxt.ok(valid);
          function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for (const tagValue in mapping) {
              gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
              gen.assign(valid, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
            gen.endIf();
          }
          function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
          }
          function getMapping() {
            var _a;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for (let i2 = 0; i2 < oneOf.length; i2++) {
              let sch = oneOf[i2];
              if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                const ref = sch.$ref;
                sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
                if (sch instanceof compile_1.SchemaEnv)
                  sch = sch.schema;
                if (sch === void 0)
                  throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
              }
              const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
              if (typeof propSch != "object") {
                throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
              }
              tagRequired = tagRequired && (topRequired || hasRequired(sch));
              addMappings(propSch, i2);
            }
            if (!tagRequired)
              throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
              return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i2) {
              if (sch.const) {
                addMapping(sch.const, i2);
              } else if (sch.enum) {
                for (const tagValue of sch.enum) {
                  addMapping(tagValue, i2);
                }
              } else {
                throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
              }
            }
            function addMapping(tagValue, i2) {
              if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                throw new Error(`discriminator: "${tagName}" values must be unique strings`);
              }
              oneOfMapping[tagValue] = i2;
            }
          }
        }
      };
      exports2.default = def;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/refs/json-schema-draft-07.json
  var require_json_schema_draft_072 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/refs/json-schema-draft-07.json"(exports2, module2) {
      module2.exports = {
        $schema: "http://json-schema.org/draft-07/schema#",
        $id: "http://json-schema.org/draft-07/schema#",
        title: "Core schema meta-schema",
        definitions: {
          schemaArray: {
            type: "array",
            minItems: 1,
            items: { $ref: "#" }
          },
          nonNegativeInteger: {
            type: "integer",
            minimum: 0
          },
          nonNegativeIntegerDefault0: {
            allOf: [{ $ref: "#/definitions/nonNegativeInteger" }, { default: 0 }]
          },
          simpleTypes: {
            enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
          },
          stringArray: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true,
            default: []
          }
        },
        type: ["object", "boolean"],
        properties: {
          $id: {
            type: "string",
            format: "uri-reference"
          },
          $schema: {
            type: "string",
            format: "uri"
          },
          $ref: {
            type: "string",
            format: "uri-reference"
          },
          $comment: {
            type: "string"
          },
          title: {
            type: "string"
          },
          description: {
            type: "string"
          },
          default: true,
          readOnly: {
            type: "boolean",
            default: false
          },
          examples: {
            type: "array",
            items: true
          },
          multipleOf: {
            type: "number",
            exclusiveMinimum: 0
          },
          maximum: {
            type: "number"
          },
          exclusiveMaximum: {
            type: "number"
          },
          minimum: {
            type: "number"
          },
          exclusiveMinimum: {
            type: "number"
          },
          maxLength: { $ref: "#/definitions/nonNegativeInteger" },
          minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          pattern: {
            type: "string",
            format: "regex"
          },
          additionalItems: { $ref: "#" },
          items: {
            anyOf: [{ $ref: "#" }, { $ref: "#/definitions/schemaArray" }],
            default: true
          },
          maxItems: { $ref: "#/definitions/nonNegativeInteger" },
          minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          uniqueItems: {
            type: "boolean",
            default: false
          },
          contains: { $ref: "#" },
          maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
          minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
          required: { $ref: "#/definitions/stringArray" },
          additionalProperties: { $ref: "#" },
          definitions: {
            type: "object",
            additionalProperties: { $ref: "#" },
            default: {}
          },
          properties: {
            type: "object",
            additionalProperties: { $ref: "#" },
            default: {}
          },
          patternProperties: {
            type: "object",
            additionalProperties: { $ref: "#" },
            propertyNames: { format: "regex" },
            default: {}
          },
          dependencies: {
            type: "object",
            additionalProperties: {
              anyOf: [{ $ref: "#" }, { $ref: "#/definitions/stringArray" }]
            }
          },
          propertyNames: { $ref: "#" },
          const: true,
          enum: {
            type: "array",
            items: true,
            minItems: 1,
            uniqueItems: true
          },
          type: {
            anyOf: [
              { $ref: "#/definitions/simpleTypes" },
              {
                type: "array",
                items: { $ref: "#/definitions/simpleTypes" },
                minItems: 1,
                uniqueItems: true
              }
            ]
          },
          format: { type: "string" },
          contentMediaType: { type: "string" },
          contentEncoding: { type: "string" },
          if: { $ref: "#" },
          then: { $ref: "#" },
          else: { $ref: "#" },
          allOf: { $ref: "#/definitions/schemaArray" },
          anyOf: { $ref: "#/definitions/schemaArray" },
          oneOf: { $ref: "#/definitions/schemaArray" },
          not: { $ref: "#" }
        },
        default: true
      };
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/ajv.js
  var require_ajv2 = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/node_modules/ajv/dist/ajv.js"(exports2, module2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.MissingRefError = exports2.ValidationError = exports2.CodeGen = exports2.Name = exports2.nil = exports2.stringify = exports2.str = exports2._ = exports2.KeywordCxt = exports2.Ajv = void 0;
      var core_1 = require_core3();
      var draft7_1 = require_draft72();
      var discriminator_1 = require_discriminator2();
      var draft7MetaSchema = require_json_schema_draft_072();
      var META_SUPPORT_DATA = ["/properties"];
      var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
      var Ajv2 = class extends core_1.default {
        _addVocabularies() {
          super._addVocabularies();
          draft7_1.default.forEach((v2) => this.addVocabulary(v2));
          if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
        }
        _addDefaultMetaSchema() {
          super._addDefaultMetaSchema();
          if (!this.opts.meta)
            return;
          const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
          this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
          this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        }
        defaultMeta() {
          return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
        }
      };
      exports2.Ajv = Ajv2;
      module2.exports = exports2 = Ajv2;
      module2.exports.Ajv = Ajv2;
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.default = Ajv2;
      var validate_1 = require_validate2();
      Object.defineProperty(exports2, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen2();
      Object.defineProperty(exports2, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports2, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports2, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports2, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports2, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
      var validation_error_1 = require_validation_error2();
      Object.defineProperty(exports2, "ValidationError", { enumerable: true, get: function() {
        return validation_error_1.default;
      } });
      var ref_error_1 = require_ref_error2();
      Object.defineProperty(exports2, "MissingRefError", { enumerable: true, get: function() {
        return ref_error_1.default;
      } });
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/dist/limit.js
  var require_limit = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/dist/limit.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.formatLimitDefinition = void 0;
      var ajv_1 = require_ajv2();
      var codegen_1 = require_codegen2();
      var ops = codegen_1.operators;
      var KWDs = {
        formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
      };
      var error = {
        message: ({ keyword, schemaCode }) => codegen_1.str`should be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => codegen_1._`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
      };
      exports2.formatLimitDefinition = {
        keyword: Object.keys(KWDs),
        type: "string",
        schemaType: "string",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, schemaCode, keyword, it } = cxt;
          const { opts, self: self2 } = it;
          if (!opts.validateFormats)
            return;
          const fCxt = new ajv_1.KeywordCxt(it, self2.RULES.all.format.definition, "format");
          if (fCxt.$data)
            validate$DataFormat();
          else
            validateFormat();
          function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
              ref: self2.formats,
              code: opts.code.formats
            });
            const fmt = gen.const("fmt", codegen_1._`${fmts}[${fCxt.schemaCode}]`);
            cxt.fail$data(codegen_1.or(codegen_1._`typeof ${fmt} != "object"`, codegen_1._`${fmt} instanceof RegExp`, codegen_1._`typeof ${fmt}.compare != "function"`, compareCode(fmt)));
          }
          function validateFormat() {
            const format = fCxt.schema;
            const fmtDef = self2.formats[format];
            if (!fmtDef || fmtDef === true)
              return;
            if (typeof fmtDef != "object" || fmtDef instanceof RegExp || typeof fmtDef.compare != "function") {
              throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
            }
            const fmt = gen.scopeValue("formats", {
              key: format,
              ref: fmtDef,
              code: opts.code.formats ? codegen_1._`${opts.code.formats}${codegen_1.getProperty(format)}` : void 0
            });
            cxt.fail$data(compareCode(fmt));
          }
          function compareCode(fmt) {
            return codegen_1._`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
          }
        },
        dependencies: ["format"]
      };
      var formatLimitPlugin = (ajv) => {
        ajv.addKeyword(exports2.formatLimitDefinition);
        return ajv;
      };
      exports2.default = formatLimitPlugin;
    }
  });

  // react-user-mgmt/node_modules/ajv-formats/dist/index.js
  var require_dist = __commonJS({
    "react-user-mgmt/node_modules/ajv-formats/dist/index.js"(exports2, module2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var formats_1 = require_formats();
      var limit_1 = require_limit();
      var codegen_1 = require_codegen2();
      var fullName = new codegen_1.Name("fullFormats");
      var fastName = new codegen_1.Name("fastFormats");
      var formatsPlugin = (ajv, opts = { keywords: true }) => {
        if (Array.isArray(opts)) {
          addFormats2(ajv, opts, formats_1.fullFormats, fullName);
          return ajv;
        }
        const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
        const list = opts.formats || formats_1.formatNames;
        addFormats2(ajv, list, formats, exportName);
        if (opts.keywords)
          limit_1.default(ajv);
        return ajv;
      };
      formatsPlugin.get = (name, mode = "full") => {
        const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
        const f2 = formats[name];
        if (!f2)
          throw new Error(`Unknown format "${name}"`);
        return f2;
      };
      function addFormats2(ajv, list, fs, exportName) {
        var _a;
        var _b;
        (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : _b.formats = codegen_1._`require("ajv-formats/dist/formats").${exportName}`;
        for (const f2 of list)
          ajv.addFormat(f2, fs[f2]);
      }
      module2.exports = exports2 = formatsPlugin;
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.default = formatsPlugin;
    }
  });

  // react-user-mgmt/src/main.tsx
  var import_react41 = __toESM(require_react(), 1);
  var import_client2 = __toESM(require_client(), 1);

  // react-user-mgmt/src/components/Login.tsx
  var import_react33 = __toESM(require_react(), 1);

  // node_modules/@serenity-kit/opaque/esm/index.js
  function _loadWasmModule(sync, filepath, src, imports) {
    function _instantiateOrCompile(source, imports2, stream) {
      var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;
      var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;
      if (imports2) {
        return instantiateFunc(source, imports2);
      } else {
        return compileFunc(source);
      }
    }
    var buf = null;
    var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    if (isNode) {
      buf = Buffer.from(src, "base64");
    } else {
      var raw = globalThis.atob(src);
      var rawLength = raw.length;
      buf = new Uint8Array(new ArrayBuffer(rawLength));
      for (var i2 = 0; i2 < rawLength; i2++) {
        buf[i2] = raw.charCodeAt(i2);
      }
    }
    if (sync) {
      var mod = new WebAssembly.Module(buf);
      return imports ? new WebAssembly.Instance(mod, imports) : mod;
    } else {
      return _instantiateOrCompile(buf, imports, false);
    }
  }
  function wasmData(imports) {
    return _loadWasmModule(0, null, "", imports);
  }
  var wasm;
  var heap = new Array(128).fill(void 0);
  heap.push(void 0, null, true, false);
  function getObject(idx) {
    return heap[idx];
  }
  var heap_next = heap.length;
  function dropObject(idx) {
    if (idx < 132) return;
    heap[idx] = heap_next;
    heap_next = idx;
  }
  function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
  }
  function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];
    heap[idx] = obj;
    return idx;
  }
  var WASM_VECTOR_LEN = 0;
  var cachedUint8Memory0 = null;
  function getUint8Memory0() {
    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
      cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8Memory0;
  }
  var cachedTextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder("utf-8") : { encode: () => {
    throw Error("TextEncoder not available");
  } };
  var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg2, view) {
    return cachedTextEncoder.encodeInto(arg2, view);
  } : function(arg2, view) {
    const buf = cachedTextEncoder.encode(arg2);
    view.set(buf);
    return {
      read: arg2.length,
      written: buf.length
    };
  };
  function passStringToWasm0(arg2, malloc, realloc) {
    if (realloc === void 0) {
      const buf = cachedTextEncoder.encode(arg2);
      const ptr2 = malloc(buf.length, 1) >>> 0;
      getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
      WASM_VECTOR_LEN = buf.length;
      return ptr2;
    }
    let len = arg2.length;
    let ptr = malloc(len, 1) >>> 0;
    const mem = getUint8Memory0();
    let offset = 0;
    for (; offset < len; offset++) {
      const code = arg2.charCodeAt(offset);
      if (code > 127) break;
      mem[ptr + offset] = code;
    }
    if (offset !== len) {
      if (offset !== 0) {
        arg2 = arg2.slice(offset);
      }
      ptr = realloc(ptr, len, len = offset + arg2.length * 3, 1) >>> 0;
      const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
      const ret = encodeString(arg2, view);
      offset += ret.written;
      ptr = realloc(ptr, len, offset, 1) >>> 0;
    }
    WASM_VECTOR_LEN = offset;
    return ptr;
  }
  function isLikeNone(x2) {
    return x2 === void 0 || x2 === null;
  }
  var cachedInt32Memory0 = null;
  function getInt32Memory0() {
    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
      cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachedInt32Memory0;
  }
  var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
    throw Error("TextDecoder not available");
  } };
  if (typeof TextDecoder !== "undefined") {
    cachedTextDecoder.decode();
  }
  function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
  }
  var cachedFloat64Memory0 = null;
  function getFloat64Memory0() {
    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {
      cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);
    }
    return cachedFloat64Memory0;
  }
  function debugString(val) {
    const type = typeof val;
    if (type == "number" || type == "boolean" || val == null) {
      return `${val}`;
    }
    if (type == "string") {
      return `"${val}"`;
    }
    if (type == "symbol") {
      const description = val.description;
      if (description == null) {
        return "Symbol";
      } else {
        return `Symbol(${description})`;
      }
    }
    if (type == "function") {
      const name = val.name;
      if (typeof name == "string" && name.length > 0) {
        return `Function(${name})`;
      } else {
        return "Function";
      }
    }
    if (Array.isArray(val)) {
      const length2 = val.length;
      let debug = "[";
      if (length2 > 0) {
        debug += debugString(val[0]);
      }
      for (let i2 = 1; i2 < length2; i2++) {
        debug += ", " + debugString(val[i2]);
      }
      debug += "]";
      return debug;
    }
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
      className = builtInMatches[1];
    } else {
      return toString.call(val);
    }
    if (className == "Object") {
      try {
        return "Object(" + JSON.stringify(val) + ")";
      } catch (_2) {
        return "Object";
      }
    }
    if (val instanceof Error) {
      return `${val.name}: ${val.message}
${val.stack}`;
    }
    return className;
  }
  function startClientLogin(params) {
    try {
      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
      wasm.startClientLogin(retptr, addHeapObject(params));
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r22 = getInt32Memory0()[retptr / 4 + 2];
      if (r22) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      wasm.__wbindgen_add_to_stack_pointer(16);
    }
  }
  function finishClientLogin(params) {
    try {
      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
      wasm.finishClientLogin(retptr, addHeapObject(params));
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r22 = getInt32Memory0()[retptr / 4 + 2];
      if (r22) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      wasm.__wbindgen_add_to_stack_pointer(16);
    }
  }
  function startClientRegistration(params) {
    try {
      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
      wasm.startClientRegistration(retptr, addHeapObject(params));
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r22 = getInt32Memory0()[retptr / 4 + 2];
      if (r22) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      wasm.__wbindgen_add_to_stack_pointer(16);
    }
  }
  function finishClientRegistration(params) {
    try {
      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
      wasm.finishClientRegistration(retptr, addHeapObject(params));
      var r0 = getInt32Memory0()[retptr / 4 + 0];
      var r1 = getInt32Memory0()[retptr / 4 + 1];
      var r22 = getInt32Memory0()[retptr / 4 + 2];
      if (r22) {
        throw takeObject(r1);
      }
      return takeObject(r0);
    } finally {
      wasm.__wbindgen_add_to_stack_pointer(16);
    }
  }
  function handleError(f2, args) {
    try {
      return f2.apply(this, args);
    } catch (e2) {
      wasm.__wbindgen_exn_store(addHeapObject(e2));
    }
  }
  async function __wbg_load(module2, imports) {
    if (typeof Response === "function" && module2 instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module2, imports);
        } catch (e2) {
          if (module2.headers.get("Content-Type") != "application/wasm") {
            console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e2);
          } else {
            throw e2;
          }
        }
      }
      const bytes = await module2.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module2, imports);
      if (instance instanceof WebAssembly.Instance) {
        return { instance, module: module2 };
      } else {
        return instance;
      }
    }
  }
  function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
      takeObject(arg0);
    };
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
      const ret = getObject(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
      const ret = getObject(arg0) === void 0;
      return ret;
    };
    imports.wbg.__wbindgen_in = function(arg0, arg1) {
      const ret = getObject(arg0) in getObject(arg1);
      return ret;
    };
    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
      const obj = getObject(arg1);
      const ret = typeof obj === "string" ? obj : void 0;
      var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
      var len1 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len1;
      getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbindgen_is_object = function(arg0) {
      const val = getObject(arg0);
      const ret = typeof val === "object" && val !== null;
      return ret;
    };
    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {
      const ret = new Error(getStringFromWasm0(arg0, arg1));
      return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {
      const ret = getObject(arg0) == getObject(arg1);
      return ret;
    };
    imports.wbg.__wbindgen_boolean_get = function(arg0) {
      const v2 = getObject(arg0);
      const ret = typeof v2 === "boolean" ? v2 ? 1 : 0 : 2;
      return ret;
    };
    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {
      const obj = getObject(arg1);
      const ret = typeof obj === "number" ? obj : void 0;
      getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;
      getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);
    };
    imports.wbg.__wbg_String_88810dfeb4021902 = function(arg0, arg1) {
      const ret = String(getObject(arg1));
      const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
      const len1 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len1;
      getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
      const ret = getStringFromWasm0(arg0, arg1);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_getwithrefkey_5e6d9547403deab8 = function(arg0, arg1) {
      const ret = getObject(arg0)[getObject(arg1)];
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_841ac57cff3d672b = function(arg0, arg1, arg2) {
      getObject(arg0)[takeObject(arg1)] = takeObject(arg2);
    };
    imports.wbg.__wbg_crypto_d05b68a3572bb8ca = function(arg0) {
      const ret = getObject(arg0).crypto;
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_process_b02b3570280d0366 = function(arg0) {
      const ret = getObject(arg0).process;
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_versions_c1cb42213cedf0f5 = function(arg0) {
      const ret = getObject(arg0).versions;
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_node_43b1089f407e4ec2 = function(arg0) {
      const ret = getObject(arg0).node;
      return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_string = function(arg0) {
      const ret = typeof getObject(arg0) === "string";
      return ret;
    };
    imports.wbg.__wbg_require_9a7e0f667ead4995 = function() {
      return handleError(function() {
        const ret = module.require;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_msCrypto_10fc94afee92bd76 = function(arg0) {
      const ret = getObject(arg0).msCrypto;
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_randomFillSync_b70ccbdf4926a99d = function() {
      return handleError(function(arg0, arg1) {
        getObject(arg0).randomFillSync(takeObject(arg1));
      }, arguments);
    };
    imports.wbg.__wbg_getRandomValues_7e42b4fb8779dc6d = function() {
      return handleError(function(arg0, arg1) {
        getObject(arg0).getRandomValues(getObject(arg1));
      }, arguments);
    };
    imports.wbg.__wbindgen_is_function = function(arg0) {
      const ret = typeof getObject(arg0) === "function";
      return ret;
    };
    imports.wbg.__wbg_newnoargs_cfecb3965268594c = function(arg0, arg1) {
      const ret = new Function(getStringFromWasm0(arg0, arg1));
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_call_3f093dd26d5569f8 = function() {
      return handleError(function(arg0, arg1) {
        const ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_new_632630b5cec17f21 = function() {
      const ret = new Object();
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_self_05040bd9523805b9 = function() {
      return handleError(function() {
        const ret = self.self;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_window_adc720039f2cb14f = function() {
      return handleError(function() {
        const ret = window.window;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_globalThis_622105db80c1457d = function() {
      return handleError(function() {
        const ret = globalThis.globalThis;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_global_f56b013ed9bcf359 = function() {
      return handleError(function() {
        const ret = global.global;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_instanceof_ArrayBuffer_9221fa854ffb71b5 = function(arg0) {
      let result;
      try {
        result = getObject(arg0) instanceof ArrayBuffer;
      } catch (_2) {
        result = false;
      }
      const ret = result;
      return ret;
    };
    imports.wbg.__wbg_call_67f2111acd2dfdb6 = function() {
      return handleError(function(arg0, arg1, arg2) {
        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_buffer_b914fb8b50ebbc3e = function(arg0) {
      const ret = getObject(arg0).buffer;
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_0de9ee56e9f6ee6e = function(arg0, arg1, arg2) {
      const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_b1f2d6842d615181 = function(arg0) {
      const ret = new Uint8Array(getObject(arg0));
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_7d988c98e6ced92d = function(arg0, arg1, arg2) {
      getObject(arg0).set(getObject(arg1), arg2 >>> 0);
    };
    imports.wbg.__wbg_length_21c4b0ae73cba59d = function(arg0) {
      const ret = getObject(arg0).length;
      return ret;
    };
    imports.wbg.__wbg_instanceof_Uint8Array_c299a4ee232e76ba = function(arg0) {
      let result;
      try {
        result = getObject(arg0) instanceof Uint8Array;
      } catch (_2) {
        result = false;
      }
      const ret = result;
      return ret;
    };
    imports.wbg.__wbg_newwithlength_0d03cef43b68a530 = function(arg0) {
      const ret = new Uint8Array(arg0 >>> 0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_subarray_adc418253d76e2f1 = function(arg0, arg1, arg2) {
      const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
      const ret = debugString(getObject(arg1));
      const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
      const len1 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len1;
      getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_memory = function() {
      const ret = wasm.memory;
      return addHeapObject(ret);
    };
    return imports;
  }
  function __wbg_finalize_init(instance, module2) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module2;
    cachedFloat64Memory0 = null;
    cachedInt32Memory0 = null;
    cachedUint8Memory0 = null;
    return wasm;
  }
  async function __wbg_init(input) {
    if (wasm !== void 0) return wasm;
    const imports = __wbg_get_imports();
    if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
      input = fetch(input);
    }
    const { instance, module: module2 } = await __wbg_load(await input, imports);
    return __wbg_finalize_init(instance, module2);
  }
  var client = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    finishLogin: finishClientLogin,
    finishRegistration: finishClientRegistration,
    startLogin: startClientLogin,
    startRegistration: startClientRegistration
  });
  var ready = __wbg_init(wasmData()).then(() => {
  });

  // react-user-mgmt/src/helpers/useAsyncEffect.tsx
  var import_react = __toESM(require_react(), 1);
  var catcher = (point, error) => {
    console.log(point, error);
  };
  function useAsyncEffect(mount, unmount = async () => {
  }, cancel = async () => {
  }, deps = []) {
    const componentActive = (0, import_react.useRef)(false);
    const [loading, setLoading] = (0, import_react.useState)(true);
    const [promise, setPromise] = (0, import_react.useState)(new PromiseSubject());
    const [error, setError] = (0, import_react.useState)();
    const [result, setResult] = (0, import_react.useState)();
    (0, import_react.useEffect)(() => {
      componentActive.current = true;
      return () => {
        componentActive.current = false;
      };
    }, []);
    (0, import_react.useEffect)(() => {
      let depsChanged = false;
      let mountStarted = false;
      let mountFinished = false;
      let mountSucceeded = false;
      let mountFailed = false;
      (async () => {
        await Promise.resolve();
        if (!componentActive.current || depsChanged) {
          return;
        }
        setLoading(true);
        try {
          mountStarted = true;
          const result2 = await mount();
          promise.resolve(result2);
          mountSucceeded = true;
          if (componentActive.current && !depsChanged) {
            setError(void 0);
            setResult(result2);
            setLoading(false);
          } else {
            unmount();
          }
        } catch (error2) {
          if (!componentActive.current) return;
          mountFailed = true;
          catcher("mount", error2);
          setLoading(false);
          setError(error2);
          promise.reject(error2);
        } finally {
          mountFinished = true;
        }
      })();
      return () => {
        depsChanged = true;
        (async () => {
          if (mountSucceeded) {
            try {
              await unmount();
              if (!componentActive.current) return;
              setResult(void 0);
            } catch (error2) {
              if (!componentActive.current) return;
              catcher("unmount", error2);
            }
          } else if (mountStarted && !mountFailed) {
            try {
              await cancel();
            } catch (error2) {
              if (!componentActive.current) return;
              catcher("cancel", error2);
            }
          }
        })();
        setPromise(new PromiseSubject());
      };
    }, deps);
    return { error, loading, result, promise };
  }
  var _resolve, _reject, _done;
  var PromiseSubject = class extends Promise {
    constructor(executor) {
      let _resolve2, _reject2;
      super((resolve, reject) => {
        _resolve2 = resolve;
        _reject2 = reject;
        if (typeof executor === "function") executor(resolve, reject);
      });
      __privateAdd(this, _resolve);
      __privateAdd(this, _reject);
      __privateAdd(this, _done, false);
      this.resolve = _resolve2;
      this.reject = _reject2;
      if (executor instanceof Promise) executor.then((e2) => this.resolve(e2));
    }
    get done() {
      return __privateGet(this, _done);
    }
    resolve(a2) {
      if (__privateGet(this, _done)) return;
      __privateSet(this, _done, true);
      __privateGet(this, _resolve).call(this, a2);
    }
    reject(a2) {
      if (__privateGet(this, _done)) return;
      __privateSet(this, _done, true);
      __privateGet(this, _reject).call(this, a2);
    }
  };
  _resolve = new WeakMap();
  _reject = new WeakMap();
  _done = new WeakMap();

  // react-user-mgmt/src/helpers/utils.tsx
  var import_react3 = __toESM(require_react(), 1);

  // react-user-mgmt/node_modules/react-hook-form/dist/index.esm.mjs
  var import_react2 = __toESM(require_react(), 1);
  var isCheckBoxInput = (element) => element.type === "checkbox";
  var isDateObject = (value) => value instanceof Date;
  var isNullOrUndefined = (value) => value == null;
  var isObjectType = (value) => typeof value === "object";
  var isObject = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
  var getEventValue = (event) => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
  var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
  var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
  var isPlainObject = (tempObject) => {
    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
    return isObject(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
  };
  var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
  function cloneObject(data) {
    let copy2;
    const isArray2 = Array.isArray(data);
    const isFileListInstance = typeof FileList !== "undefined" ? data instanceof FileList : false;
    if (data instanceof Date) {
      copy2 = new Date(data);
    } else if (data instanceof Set) {
      copy2 = new Set(data);
    } else if (!(isWeb && (data instanceof Blob || isFileListInstance)) && (isArray2 || isObject(data))) {
      copy2 = isArray2 ? [] : {};
      if (!isArray2 && !isPlainObject(data)) {
        copy2 = data;
      } else {
        for (const key in data) {
          if (data.hasOwnProperty(key)) {
            copy2[key] = cloneObject(data[key]);
          }
        }
      }
    } else {
      return data;
    }
    return copy2;
  }
  var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
  var isUndefined = (val) => val === void 0;
  var get = (object, path, defaultValue) => {
    if (!path || !isObject(object)) {
      return defaultValue;
    }
    const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
    return isUndefined(result) || result === object ? isUndefined(object[path]) ? defaultValue : object[path] : result;
  };
  var isBoolean = (value) => typeof value === "boolean";
  var isKey = (value) => /^\w*$/.test(value);
  var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
  var set = (object, path, value) => {
    let index = -1;
    const tempPath = isKey(path) ? [path] : stringToPath(path);
    const length2 = tempPath.length;
    const lastIndex = length2 - 1;
    while (++index < length2) {
      const key = tempPath[index];
      let newValue = value;
      if (index !== lastIndex) {
        const objValue = object[key];
        newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};
      }
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return;
      }
      object[key] = newValue;
      object = object[key];
    }
    return object;
  };
  var EVENTS = {
    BLUR: "blur",
    FOCUS_OUT: "focusout",
    CHANGE: "change"
  };
  var VALIDATION_MODE = {
    onBlur: "onBlur",
    onChange: "onChange",
    onSubmit: "onSubmit",
    onTouched: "onTouched",
    all: "all"
  };
  var INPUT_VALIDATION_RULES = {
    max: "max",
    min: "min",
    maxLength: "maxLength",
    minLength: "minLength",
    pattern: "pattern",
    required: "required",
    validate: "validate"
  };
  var HookFormContext = import_react2.default.createContext(null);
  var useFormContext = () => import_react2.default.useContext(HookFormContext);
  var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
    const result = {
      defaultValues: control._defaultValues
    };
    for (const key in formState) {
      Object.defineProperty(result, key, {
        get: () => {
          const _key = key;
          if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
            control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
          }
          localProxyFormState && (localProxyFormState[_key] = true);
          return formState[_key];
        }
      });
    }
    return result;
  };
  var isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;
  var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
    updateFormState(formStateData);
    const { name, ...formState } = formStateData;
    return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
  };
  var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
  var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
  function useSubscribe(props) {
    const _props = import_react2.default.useRef(props);
    _props.current = props;
    import_react2.default.useEffect(() => {
      const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
        next: _props.current.next
      });
      return () => {
        subscription && subscription.unsubscribe();
      };
    }, [props.disabled]);
  }
  function useFormState(props) {
    const methods = useFormContext();
    const { control = methods.control, disabled, name, exact } = props || {};
    const [formState, updateFormState] = import_react2.default.useState(control._formState);
    const _mounted = import_react2.default.useRef(true);
    const _localProxyFormState = import_react2.default.useRef({
      isDirty: false,
      isLoading: false,
      dirtyFields: false,
      touchedFields: false,
      validatingFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    });
    const _name = import_react2.default.useRef(name);
    _name.current = name;
    useSubscribe({
      disabled,
      next: (value) => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) && updateFormState({
        ...control._formState,
        ...value
      }),
      subject: control._subjects.state
    });
    import_react2.default.useEffect(() => {
      _mounted.current = true;
      _localProxyFormState.current.isValid && control._updateValid(true);
      return () => {
        _mounted.current = false;
      };
    }, [control]);
    return import_react2.default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);
  }
  var isString = (value) => typeof value === "string";
  var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
    if (isString(names)) {
      isGlobal && _names.watch.add(names);
      return get(formValues, names, defaultValue);
    }
    if (Array.isArray(names)) {
      return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
    }
    isGlobal && (_names.watchAll = true);
    return formValues;
  };
  function useWatch(props) {
    const methods = useFormContext();
    const { control = methods.control, name, defaultValue, disabled, exact } = props || {};
    const _name = import_react2.default.useRef(name);
    _name.current = name;
    useSubscribe({
      disabled,
      subject: control._subjects.values,
      next: (formState) => {
        if (shouldSubscribeByName(_name.current, formState.name, exact)) {
          updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));
        }
      }
    });
    const [value, updateValue] = import_react2.default.useState(control._getWatch(name, defaultValue));
    import_react2.default.useEffect(() => control._removeUnmounted());
    return value;
  }
  function useController(props) {
    const methods = useFormContext();
    const { name, disabled, control = methods.control, shouldUnregister } = props;
    const isArrayField = isNameInFieldArray(control._names.array, name);
    const value = useWatch({
      control,
      name,
      defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),
      exact: true
    });
    const formState = useFormState({
      control,
      name,
      exact: true
    });
    const _registerProps = import_react2.default.useRef(control.register(name, {
      ...props.rules,
      value,
      ...isBoolean(props.disabled) ? { disabled: props.disabled } : {}
    }));
    const fieldState = import_react2.default.useMemo(() => Object.defineProperties({}, {
      invalid: {
        enumerable: true,
        get: () => !!get(formState.errors, name)
      },
      isDirty: {
        enumerable: true,
        get: () => !!get(formState.dirtyFields, name)
      },
      isTouched: {
        enumerable: true,
        get: () => !!get(formState.touchedFields, name)
      },
      isValidating: {
        enumerable: true,
        get: () => !!get(formState.validatingFields, name)
      },
      error: {
        enumerable: true,
        get: () => get(formState.errors, name)
      }
    }), [formState, name]);
    const field = import_react2.default.useMemo(() => ({
      name,
      value,
      ...isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {},
      onChange: (event) => _registerProps.current.onChange({
        target: {
          value: getEventValue(event),
          name
        },
        type: EVENTS.CHANGE
      }),
      onBlur: () => _registerProps.current.onBlur({
        target: {
          value: get(control._formValues, name),
          name
        },
        type: EVENTS.BLUR
      }),
      ref: (elm) => {
        const field2 = get(control._fields, name);
        if (field2 && elm) {
          field2._f.ref = {
            focus: () => elm.focus(),
            select: () => elm.select(),
            setCustomValidity: (message) => elm.setCustomValidity(message),
            reportValidity: () => elm.reportValidity()
          };
        }
      }
    }), [
      name,
      control._formValues,
      disabled,
      formState.disabled,
      value,
      control._fields
    ]);
    import_react2.default.useEffect(() => {
      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
      const updateMounted = (name2, value2) => {
        const field2 = get(control._fields, name2);
        if (field2 && field2._f) {
          field2._f.mount = value2;
        }
      };
      updateMounted(name, true);
      if (_shouldUnregisterField) {
        const value2 = cloneObject(get(control._options.defaultValues, name));
        set(control._defaultValues, name, value2);
        if (isUndefined(get(control._formValues, name))) {
          set(control._formValues, name, value2);
        }
      }
      !isArrayField && control.register(name);
      return () => {
        (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
      };
    }, [name, control, isArrayField, shouldUnregister]);
    import_react2.default.useEffect(() => {
      control._updateDisabledField({
        disabled,
        fields: control._fields,
        name
      });
    }, [disabled, name, control]);
    return import_react2.default.useMemo(() => ({
      field,
      formState,
      fieldState
    }), [field, formState, fieldState]);
  }
  var Controller = (props) => props.render(useController(props));
  var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
    ...errors[name],
    types: {
      ...errors[name] && errors[name].types ? errors[name].types : {},
      [type]: message || true
    }
  } : {};
  var getValidationModes = (mode) => ({
    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
    isOnBlur: mode === VALIDATION_MODE.onBlur,
    isOnChange: mode === VALIDATION_MODE.onChange,
    isOnAll: mode === VALIDATION_MODE.all,
    isOnTouch: mode === VALIDATION_MODE.onTouched
  });
  var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
  var iterateFieldsByAction = (fields2, action, fieldsNames, abortEarly) => {
    for (const key of fieldsNames || Object.keys(fields2)) {
      const field = get(fields2, key);
      if (field) {
        const { _f, ...currentField } = field;
        if (_f) {
          if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
            return true;
          } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
            return true;
          } else {
            if (iterateFieldsByAction(currentField, action)) {
              break;
            }
          }
        } else if (isObject(currentField)) {
          if (iterateFieldsByAction(currentField, action)) {
            break;
          }
        }
      }
    }
    return;
  };
  var updateFieldArrayRootError = (errors, error, name) => {
    const fieldArrayErrors = convertToArrayPayload(get(errors, name));
    set(fieldArrayErrors, "root", error[name]);
    set(errors, name, fieldArrayErrors);
    return errors;
  };
  var isFileInput = (element) => element.type === "file";
  var isFunction = (value) => typeof value === "function";
  var isHTMLElement = (value) => {
    if (!isWeb) {
      return false;
    }
    const owner = value ? value.ownerDocument : 0;
    return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
  };
  var isMessage = (value) => isString(value);
  var isRadioInput = (element) => element.type === "radio";
  var isRegex = (value) => value instanceof RegExp;
  var defaultResult = {
    value: false,
    isValid: false
  };
  var validResult = { value: true, isValid: true };
  var getCheckboxValue = (options) => {
    if (Array.isArray(options)) {
      if (options.length > 1) {
        const values3 = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
        return { value: values3, isValid: !!values3.length };
      }
      return options[0].checked && !options[0].disabled ? (
        // @ts-expect-error expected to work in the browser
        options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
      ) : defaultResult;
    }
    return defaultResult;
  };
  var defaultReturn = {
    isValid: false,
    value: null
  };
  var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
    isValid: true,
    value: option.value
  } : previous, defaultReturn) : defaultReturn;
  function getValidateError(result, ref, type = "validate") {
    if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
      return {
        type,
        message: isMessage(result) ? result : "",
        ref
      };
    }
  }
  var getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData) ? validationData : {
    value: validationData,
    message: ""
  };
  var validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount } = field._f;
    const inputValue = get(formValues, name);
    if (!mount || disabledFieldNames.has(name)) {
      return {};
    }
    const inputRef = refs ? refs[0] : ref;
    const setCustomValidity = (message) => {
      if (shouldUseNativeValidation && inputRef.reportValidity) {
        inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
        inputRef.reportValidity();
      }
    };
    const error = {};
    const isRadio = isRadioInput(ref);
    const isCheckBox = isCheckBoxInput(ref);
    const isRadioOrCheckbox2 = isRadio || isCheckBox;
    const isEmpty5 = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
      const message = exceedMax ? maxLengthMessage : minLengthMessage;
      error[name] = {
        type: exceedMax ? maxType : minType,
        message,
        ref,
        ...appendErrorsCurry(exceedMax ? maxType : minType, message)
      };
    };
    if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty5 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
      const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
      if (value) {
        error[name] = {
          type: INPUT_VALIDATION_RULES.required,
          message,
          ref: inputRef,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (!isEmpty5 && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {
      let exceedMax;
      let exceedMin;
      const maxOutput = getValueAndMessage(max);
      const minOutput = getValueAndMessage(min);
      if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
        const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
        if (!isNullOrUndefined(maxOutput.value)) {
          exceedMax = valueNumber > maxOutput.value;
        }
        if (!isNullOrUndefined(minOutput.value)) {
          exceedMin = valueNumber < minOutput.value;
        }
      } else {
        const valueDate = ref.valueAsDate || new Date(inputValue);
        const convertTimeToDate = (time) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time);
        const isTime = ref.type == "time";
        const isWeek = ref.type == "week";
        if (isString(maxOutput.value) && inputValue) {
          exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
        }
        if (isString(minOutput.value) && inputValue) {
          exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
        }
      }
      if (exceedMax || exceedMin) {
        getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if ((maxLength || minLength) && !isEmpty5 && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
      const maxLengthOutput = getValueAndMessage(maxLength);
      const minLengthOutput = getValueAndMessage(minLength);
      const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
      const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
      if (exceedMax || exceedMin) {
        getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if (pattern && !isEmpty5 && isString(inputValue)) {
      const { value: patternValue, message } = getValueAndMessage(pattern);
      if (isRegex(patternValue) && !inputValue.match(patternValue)) {
        error[name] = {
          type: INPUT_VALIDATION_RULES.pattern,
          message,
          ref,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (validate) {
      if (isFunction(validate)) {
        const result = await validate(inputValue, formValues);
        const validateError = getValidateError(result, inputRef);
        if (validateError) {
          error[name] = {
            ...validateError,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(validateError.message);
            return error;
          }
        }
      } else if (isObject(validate)) {
        let validationResult = {};
        for (const key in validate) {
          if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
            break;
          }
          const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
          if (validateError) {
            validationResult = {
              ...validateError,
              ...appendErrorsCurry(key, validateError.message)
            };
            setCustomValidity(validateError.message);
            if (validateAllFieldCriteria) {
              error[name] = validationResult;
            }
          }
        }
        if (!isEmptyObject(validationResult)) {
          error[name] = {
            ref: inputRef,
            ...validationResult
          };
          if (!validateAllFieldCriteria) {
            return error;
          }
        }
      }
    }
    setCustomValidity(true);
    return error;
  };
  function baseGet(object, updatePath) {
    const length2 = updatePath.slice(0, -1).length;
    let index = 0;
    while (index < length2) {
      object = isUndefined(object) ? index++ : object[updatePath[index++]];
    }
    return object;
  }
  function isEmptyArray(obj) {
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
        return false;
      }
    }
    return true;
  }
  function unset(object, path) {
    const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
    const childObject = paths.length === 1 ? object : baseGet(object, paths);
    const index = paths.length - 1;
    const key = paths[index];
    if (childObject) {
      delete childObject[key];
    }
    if (index !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
      unset(object, paths.slice(0, -1));
    }
    return object;
  }
  var createSubject = () => {
    let _observers = [];
    const next2 = (value) => {
      for (const observer of _observers) {
        observer.next && observer.next(value);
      }
    };
    const subscribe = (observer) => {
      _observers.push(observer);
      return {
        unsubscribe: () => {
          _observers = _observers.filter((o2) => o2 !== observer);
        }
      };
    };
    const unsubscribe = () => {
      _observers = [];
    };
    return {
      get observers() {
        return _observers;
      },
      next: next2,
      subscribe,
      unsubscribe
    };
  };
  var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
  function deepEqual(object1, object2) {
    if (isPrimitive(object1) || isPrimitive(object2)) {
      return object1 === object2;
    }
    if (isDateObject(object1) && isDateObject(object2)) {
      return object1.getTime() === object2.getTime();
    }
    const keys1 = Object.keys(object1);
    const keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (const key of keys1) {
      const val1 = object1[key];
      if (!keys2.includes(key)) {
        return false;
      }
      if (key !== "ref") {
        const val2 = object2[key];
        if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
          return false;
        }
      }
    }
    return true;
  }
  var isMultipleSelect = (element) => element.type === `select-multiple`;
  var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
  var live = (ref) => isHTMLElement(ref) && ref.isConnected;
  var objectHasFunction = (data) => {
    for (const key in data) {
      if (isFunction(data[key])) {
        return true;
      }
    }
    return false;
  };
  function markFieldsDirty(data, fields2 = {}) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
          fields2[key] = Array.isArray(data[key]) ? [] : {};
          markFieldsDirty(data[key], fields2[key]);
        } else if (!isNullOrUndefined(data[key])) {
          fields2[key] = true;
        }
      }
    }
    return fields2;
  }
  function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
          if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
            dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
          } else {
            getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
          }
        } else {
          dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);
        }
      }
    }
    return dirtyFieldsFromValues;
  }
  var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
  var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
  function getFieldValue(_f) {
    const ref = _f.ref;
    if (isFileInput(ref)) {
      return ref.files;
    }
    if (isRadioInput(ref)) {
      return getRadioValue(_f.refs).value;
    }
    if (isMultipleSelect(ref)) {
      return [...ref.selectedOptions].map(({ value }) => value);
    }
    if (isCheckBoxInput(ref)) {
      return getCheckboxValue(_f.refs).value;
    }
    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
  }
  var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
    const fields2 = {};
    for (const name of fieldsNames) {
      const field = get(_fields, name);
      field && set(fields2, name, field._f);
    }
    return {
      criteriaMode,
      names: [...fieldsNames],
      fields: fields2,
      shouldUseNativeValidation
    };
  };
  var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
  var ASYNC_FUNCTION = "AsyncFunction";
  var hasPromiseValidation = (fieldReference) => !!fieldReference && !!fieldReference.validate && !!(isFunction(fieldReference.validate) && fieldReference.validate.constructor.name === ASYNC_FUNCTION || isObject(fieldReference.validate) && Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION));
  var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
  function schemaErrorLookup(errors, _fields, name) {
    const error = get(errors, name);
    if (error || isKey(name)) {
      return {
        error,
        name
      };
    }
    const names = name.split(".");
    while (names.length) {
      const fieldName = names.join(".");
      const field = get(_fields, fieldName);
      const foundError = get(errors, fieldName);
      if (field && !Array.isArray(field) && name !== fieldName) {
        return { name };
      }
      if (foundError && foundError.type) {
        return {
          name: fieldName,
          error: foundError
        };
      }
      names.pop();
    }
    return {
      name
    };
  }
  var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
    if (mode.isOnAll) {
      return false;
    } else if (!isSubmitted && mode.isOnTouch) {
      return !(isTouched || isBlurEvent);
    } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
      return !isBlurEvent;
    } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
      return isBlurEvent;
    }
    return true;
  };
  var unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);
  var defaultOptions = {
    mode: VALIDATION_MODE.onSubmit,
    reValidateMode: VALIDATION_MODE.onChange,
    shouldFocusError: true
  };
  function createFormControl(props = {}) {
    let _options = {
      ...defaultOptions,
      ...props
    };
    let _formState = {
      submitCount: 0,
      isDirty: false,
      isLoading: isFunction(_options.defaultValues),
      isValidating: false,
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      touchedFields: {},
      dirtyFields: {},
      validatingFields: {},
      errors: _options.errors || {},
      disabled: _options.disabled || false
    };
    let _fields = {};
    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
    let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
    let _state = {
      action: false,
      mount: false,
      watch: false
    };
    let _names = {
      mount: /* @__PURE__ */ new Set(),
      disabled: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set()
    };
    let delayErrorCallback;
    let timer = 0;
    const _proxyFormState = {
      isDirty: false,
      dirtyFields: false,
      validatingFields: false,
      touchedFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    };
    const _subjects = {
      values: createSubject(),
      array: createSubject(),
      state: createSubject()
    };
    const validationModeBeforeSubmit = getValidationModes(_options.mode);
    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
    const debounce2 = (callback) => (wait) => {
      clearTimeout(timer);
      timer = setTimeout(callback, wait);
    };
    const _updateValid = async (shouldUpdateValid) => {
      if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {
        const isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
        if (isValid !== _formState.isValid) {
          _subjects.state.next({
            isValid
          });
        }
      }
    };
    const _updateIsValidating = (names, isValidating) => {
      if (!_options.disabled && (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {
        (names || Array.from(_names.mount)).forEach((name) => {
          if (name) {
            isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
          }
        });
        _subjects.state.next({
          validatingFields: _formState.validatingFields,
          isValidating: !isEmptyObject(_formState.validatingFields)
        });
      }
    };
    const _updateFieldArray = (name, values3 = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
      if (args && method && !_options.disabled) {
        _state.action = true;
        if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {
          const fieldValues = method(get(_fields, name), args.argA, args.argB);
          shouldSetValues && set(_fields, name, fieldValues);
        }
        if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name))) {
          const errors = method(get(_formState.errors, name), args.argA, args.argB);
          shouldSetValues && set(_formState.errors, name, errors);
          unsetEmptyArray(_formState.errors, name);
        }
        if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name))) {
          const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);
          shouldSetValues && set(_formState.touchedFields, name, touchedFields);
        }
        if (_proxyFormState.dirtyFields) {
          _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
        }
        _subjects.state.next({
          name,
          isDirty: _getDirty(name, values3),
          dirtyFields: _formState.dirtyFields,
          errors: _formState.errors,
          isValid: _formState.isValid
        });
      } else {
        set(_formValues, name, values3);
      }
    };
    const updateErrors = (name, error) => {
      set(_formState.errors, name, error);
      _subjects.state.next({
        errors: _formState.errors
      });
    };
    const _setErrors = (errors) => {
      _formState.errors = errors;
      _subjects.state.next({
        errors: _formState.errors,
        isValid: false
      });
    };
    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
      const field = get(_fields, name);
      if (field) {
        const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);
        isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
        _state.mount && _updateValid();
      }
    };
    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender2) => {
      let shouldUpdateField = false;
      let isPreviousDirty = false;
      const output = {
        name
      };
      if (!_options.disabled) {
        const disabledField = !!(get(_fields, name) && get(_fields, name)._f && get(_fields, name)._f.disabled);
        if (!isBlurEvent || shouldDirty) {
          if (_proxyFormState.isDirty) {
            isPreviousDirty = _formState.isDirty;
            _formState.isDirty = output.isDirty = _getDirty();
            shouldUpdateField = isPreviousDirty !== output.isDirty;
          }
          const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);
          isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));
          isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
          output.dirtyFields = _formState.dirtyFields;
          shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
        }
        if (isBlurEvent) {
          const isPreviousFieldTouched = get(_formState.touchedFields, name);
          if (!isPreviousFieldTouched) {
            set(_formState.touchedFields, name, isBlurEvent);
            output.touchedFields = _formState.touchedFields;
            shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
          }
        }
        shouldUpdateField && shouldRender2 && _subjects.state.next(output);
      }
      return shouldUpdateField ? output : {};
    };
    const shouldRenderByError = (name, isValid, error, fieldState) => {
      const previousFieldError = get(_formState.errors, name);
      const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid) && _formState.isValid !== isValid;
      if (_options.delayError && error) {
        delayErrorCallback = debounce2(() => updateErrors(name, error));
        delayErrorCallback(_options.delayError);
      } else {
        clearTimeout(timer);
        delayErrorCallback = null;
        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
      }
      if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
        const updatedFormState = {
          ...fieldState,
          ...shouldUpdateValid && isBoolean(isValid) ? { isValid } : {},
          errors: _formState.errors,
          name
        };
        _formState = {
          ..._formState,
          ...updatedFormState
        };
        _subjects.state.next(updatedFormState);
      }
    };
    const _executeSchema = async (name) => {
      _updateIsValidating(name, true);
      const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
      _updateIsValidating(name);
      return result;
    };
    const executeSchemaAndUpdateState = async (names) => {
      const { errors } = await _executeSchema(names);
      if (names) {
        for (const name of names) {
          const error = get(errors, name);
          error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
        }
      } else {
        _formState.errors = errors;
      }
      return errors;
    };
    const executeBuiltInValidation = async (fields2, shouldOnlyCheckValid, context = {
      valid: true
    }) => {
      for (const name in fields2) {
        const field = fields2[name];
        if (field) {
          const { _f, ...fieldValue } = field;
          if (_f) {
            const isFieldArrayRoot = _names.array.has(_f.name);
            const isPromiseFunction = field._f && hasPromiseValidation(field._f);
            if (isPromiseFunction && _proxyFormState.validatingFields) {
              _updateIsValidating([name], true);
            }
            const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
            if (isPromiseFunction && _proxyFormState.validatingFields) {
              _updateIsValidating([name]);
            }
            if (fieldError[_f.name]) {
              context.valid = false;
              if (shouldOnlyCheckValid) {
                break;
              }
            }
            !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
          }
          !isEmptyObject(fieldValue) && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
        }
      }
      return context.valid;
    };
    const _removeUnmounted = () => {
      for (const name of _names.unMount) {
        const field = get(_fields, name);
        field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
      }
      _names.unMount = /* @__PURE__ */ new Set();
    };
    const _getDirty = (name, data) => !_options.disabled && (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));
    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
      ..._state.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? { [names]: defaultValue } : defaultValue
    }, isGlobal, defaultValue);
    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));
    const setFieldValue = (name, value, options = {}) => {
      const field = get(_fields, name);
      let fieldValue = value;
      if (field) {
        const fieldReference = field._f;
        if (fieldReference) {
          !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
          fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
          if (isMultipleSelect(fieldReference.ref)) {
            [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
          } else if (fieldReference.refs) {
            if (isCheckBoxInput(fieldReference.ref)) {
              fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
            } else {
              fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
            }
          } else if (isFileInput(fieldReference.ref)) {
            fieldReference.ref.value = "";
          } else {
            fieldReference.ref.value = fieldValue;
            if (!fieldReference.ref.type) {
              _subjects.values.next({
                name,
                values: { ..._formValues }
              });
            }
          }
        }
      }
      (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
      options.shouldValidate && trigger(name);
    };
    const setValues = (name, value, options) => {
      for (const fieldKey in value) {
        const fieldValue = value[fieldKey];
        const fieldName = `${name}.${fieldKey}`;
        const field = get(_fields, fieldName);
        (_names.array.has(name) || isObject(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
      }
    };
    const setValue = (name, value, options = {}) => {
      const field = get(_fields, name);
      const isFieldArray = _names.array.has(name);
      const cloneValue = cloneObject(value);
      set(_formValues, name, cloneValue);
      if (isFieldArray) {
        _subjects.array.next({
          name,
          values: { ..._formValues }
        });
        if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
          _subjects.state.next({
            name,
            dirtyFields: getDirtyFields(_defaultValues, _formValues),
            isDirty: _getDirty(name, cloneValue)
          });
        }
      } else {
        field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
      }
      isWatched(name, _names) && _subjects.state.next({ ..._formState });
      _subjects.values.next({
        name: _state.mount ? name : void 0,
        values: { ..._formValues }
      });
    };
    const onChange = async (event) => {
      _state.mount = true;
      const target = event.target;
      let name = target.name;
      let isFieldValueUpdated = true;
      const field = get(_fields, name);
      const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
      const _updateIsFieldValueUpdated = (fieldValue) => {
        isFieldValueUpdated = Number.isNaN(fieldValue) || isDateObject(fieldValue) && isNaN(fieldValue.getTime()) || deepEqual(fieldValue, get(_formValues, name, fieldValue));
      };
      if (field) {
        let error;
        let isValid;
        const fieldValue = getCurrentFieldValue();
        const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
        const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
        const watched = isWatched(name, _names, isBlurEvent);
        set(_formValues, name, fieldValue);
        if (isBlurEvent) {
          field._f.onBlur && field._f.onBlur(event);
          delayErrorCallback && delayErrorCallback(0);
        } else if (field._f.onChange) {
          field._f.onChange(event);
        }
        const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
        const shouldRender2 = !isEmptyObject(fieldState) || watched;
        !isBlurEvent && _subjects.values.next({
          name,
          type: event.type,
          values: { ..._formValues }
        });
        if (shouldSkipValidation) {
          if (_proxyFormState.isValid) {
            if (_options.mode === "onBlur" && isBlurEvent) {
              _updateValid();
            } else if (!isBlurEvent) {
              _updateValid();
            }
          }
          return shouldRender2 && _subjects.state.next({ name, ...watched ? {} : fieldState });
        }
        !isBlurEvent && watched && _subjects.state.next({ ..._formState });
        if (_options.resolver) {
          const { errors } = await _executeSchema([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
            const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
            error = errorLookupResult.error;
            name = errorLookupResult.name;
            isValid = isEmptyObject(errors);
          }
        } else {
          _updateIsValidating([name], true);
          error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
          _updateIsValidating([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            if (error) {
              isValid = false;
            } else if (_proxyFormState.isValid) {
              isValid = await executeBuiltInValidation(_fields, true);
            }
          }
        }
        if (isFieldValueUpdated) {
          field._f.deps && trigger(field._f.deps);
          shouldRenderByError(name, isValid, error, fieldState);
        }
      }
    };
    const _focusInput = (ref, key) => {
      if (get(_formState.errors, key) && ref.focus) {
        ref.focus();
        return 1;
      }
      return;
    };
    const trigger = async (name, options = {}) => {
      let isValid;
      let validationResult;
      const fieldNames = convertToArrayPayload(name);
      if (_options.resolver) {
        const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
        isValid = isEmptyObject(errors);
        validationResult = name ? !fieldNames.some((name2) => get(errors, name2)) : isValid;
      } else if (name) {
        validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
          const field = get(_fields, fieldName);
          return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
        }))).every(Boolean);
        !(!validationResult && !_formState.isValid) && _updateValid();
      } else {
        validationResult = isValid = await executeBuiltInValidation(_fields);
      }
      _subjects.state.next({
        ...!isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : { name },
        ..._options.resolver || !name ? { isValid } : {},
        errors: _formState.errors
      });
      options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
      return validationResult;
    };
    const getValues = (fieldNames) => {
      const values3 = {
        ..._state.mount ? _formValues : _defaultValues
      };
      return isUndefined(fieldNames) ? values3 : isString(fieldNames) ? get(values3, fieldNames) : fieldNames.map((name) => get(values3, name));
    };
    const getFieldState = (name, formState) => ({
      invalid: !!get((formState || _formState).errors, name),
      isDirty: !!get((formState || _formState).dirtyFields, name),
      error: get((formState || _formState).errors, name),
      isValidating: !!get(_formState.validatingFields, name),
      isTouched: !!get((formState || _formState).touchedFields, name)
    });
    const clearErrors = (name) => {
      name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
      _subjects.state.next({
        errors: name ? _formState.errors : {}
      });
    };
    const setError = (name, error, options) => {
      const ref = (get(_fields, name, { _f: {} })._f || {}).ref;
      const currentError = get(_formState.errors, name) || {};
      const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
      set(_formState.errors, name, {
        ...restOfErrorTree,
        ...error,
        ref
      });
      _subjects.state.next({
        name,
        errors: _formState.errors,
        isValid: false
      });
      options && options.shouldFocus && ref && ref.focus && ref.focus();
    };
    const watch = (name, defaultValue) => isFunction(name) ? _subjects.values.subscribe({
      next: (payload) => name(_getWatch(void 0, defaultValue), payload)
    }) : _getWatch(name, defaultValue, true);
    const unregister = (name, options = {}) => {
      for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
        _names.mount.delete(fieldName);
        _names.array.delete(fieldName);
        if (!options.keepValue) {
          unset(_fields, fieldName);
          unset(_formValues, fieldName);
        }
        !options.keepError && unset(_formState.errors, fieldName);
        !options.keepDirty && unset(_formState.dirtyFields, fieldName);
        !options.keepTouched && unset(_formState.touchedFields, fieldName);
        !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
      }
      _subjects.values.next({
        values: { ..._formValues }
      });
      _subjects.state.next({
        ..._formState,
        ...!options.keepDirty ? {} : { isDirty: _getDirty() }
      });
      !options.keepIsValid && _updateValid();
    };
    const _updateDisabledField = ({ disabled, name, field, fields: fields2 }) => {
      if (isBoolean(disabled) && _state.mount || !!disabled || _names.disabled.has(name)) {
        disabled ? _names.disabled.add(name) : _names.disabled.delete(name);
        updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields2, name)._f), false, false, true);
      }
    };
    const register = (name, options = {}) => {
      let field = get(_fields, name);
      const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);
      set(_fields, name, {
        ...field || {},
        _f: {
          ...field && field._f ? field._f : { ref: { name } },
          name,
          mount: true,
          ...options
        }
      });
      _names.mount.add(name);
      if (field) {
        _updateDisabledField({
          field,
          disabled: isBoolean(options.disabled) ? options.disabled : _options.disabled,
          name
        });
      } else {
        updateValidAndValue(name, true, options.value);
      }
      return {
        ...disabledIsDefined ? { disabled: options.disabled || _options.disabled } : {},
        ..._options.progressive ? {
          required: !!options.required,
          min: getRuleValue(options.min),
          max: getRuleValue(options.max),
          minLength: getRuleValue(options.minLength),
          maxLength: getRuleValue(options.maxLength),
          pattern: getRuleValue(options.pattern)
        } : {},
        name,
        onChange,
        onBlur: onChange,
        ref: (ref) => {
          if (ref) {
            register(name, options);
            field = get(_fields, name);
            const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
            const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
            const refs = field._f.refs || [];
            if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
              return;
            }
            set(_fields, name, {
              _f: {
                ...field._f,
                ...radioOrCheckbox ? {
                  refs: [
                    ...refs.filter(live),
                    fieldRef,
                    ...Array.isArray(get(_defaultValues, name)) ? [{}] : []
                  ],
                  ref: { type: fieldRef.type, name }
                } : { ref: fieldRef }
              }
            });
            updateValidAndValue(name, false, void 0, fieldRef);
          } else {
            field = get(_fields, name, {});
            if (field._f) {
              field._f.mount = false;
            }
            (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
          }
        }
      };
    };
    const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
    const _disableForm = (disabled) => {
      if (isBoolean(disabled)) {
        _subjects.state.next({ disabled });
        iterateFieldsByAction(_fields, (ref, name) => {
          const currentField = get(_fields, name);
          if (currentField) {
            ref.disabled = currentField._f.disabled || disabled;
            if (Array.isArray(currentField._f.refs)) {
              currentField._f.refs.forEach((inputRef) => {
                inputRef.disabled = currentField._f.disabled || disabled;
              });
            }
          }
        }, 0, false);
      }
    };
    const handleSubmit = (onValid, onInvalid) => async (e2) => {
      let onValidError = void 0;
      if (e2) {
        e2.preventDefault && e2.preventDefault();
        e2.persist && e2.persist();
      }
      let fieldValues = cloneObject(_formValues);
      if (_names.disabled.size) {
        for (const name of _names.disabled) {
          set(fieldValues, name, void 0);
        }
      }
      _subjects.state.next({
        isSubmitting: true
      });
      if (_options.resolver) {
        const { errors, values: values3 } = await _executeSchema();
        _formState.errors = errors;
        fieldValues = values3;
      } else {
        await executeBuiltInValidation(_fields);
      }
      unset(_formState.errors, "root");
      if (isEmptyObject(_formState.errors)) {
        _subjects.state.next({
          errors: {}
        });
        try {
          await onValid(fieldValues, e2);
        } catch (error) {
          onValidError = error;
        }
      } else {
        if (onInvalid) {
          await onInvalid({ ..._formState.errors }, e2);
        }
        _focusError();
        setTimeout(_focusError);
      }
      _subjects.state.next({
        isSubmitted: true,
        isSubmitting: false,
        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
        submitCount: _formState.submitCount + 1,
        errors: _formState.errors
      });
      if (onValidError) {
        throw onValidError;
      }
    };
    const resetField = (name, options = {}) => {
      if (get(_fields, name)) {
        if (isUndefined(options.defaultValue)) {
          setValue(name, cloneObject(get(_defaultValues, name)));
        } else {
          setValue(name, options.defaultValue);
          set(_defaultValues, name, cloneObject(options.defaultValue));
        }
        if (!options.keepTouched) {
          unset(_formState.touchedFields, name);
        }
        if (!options.keepDirty) {
          unset(_formState.dirtyFields, name);
          _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get(_defaultValues, name))) : _getDirty();
        }
        if (!options.keepError) {
          unset(_formState.errors, name);
          _proxyFormState.isValid && _updateValid();
        }
        _subjects.state.next({ ..._formState });
      }
    };
    const _reset = (formValues, keepStateOptions = {}) => {
      const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
      const cloneUpdatedValues = cloneObject(updatedValues);
      const isEmptyResetValues = isEmptyObject(formValues);
      const values3 = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
      if (!keepStateOptions.keepDefaultValues) {
        _defaultValues = updatedValues;
      }
      if (!keepStateOptions.keepValues) {
        if (keepStateOptions.keepDirtyValues) {
          const fieldsToCheck = /* @__PURE__ */ new Set([
            ..._names.mount,
            ...Object.keys(getDirtyFields(_defaultValues, _formValues))
          ]);
          for (const fieldName of Array.from(fieldsToCheck)) {
            get(_formState.dirtyFields, fieldName) ? set(values3, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values3, fieldName));
          }
        } else {
          if (isWeb && isUndefined(formValues)) {
            for (const name of _names.mount) {
              const field = get(_fields, name);
              if (field && field._f) {
                const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                if (isHTMLElement(fieldReference)) {
                  const form = fieldReference.closest("form");
                  if (form) {
                    form.reset();
                    break;
                  }
                }
              }
            }
          }
          _fields = {};
        }
        _formValues = _options.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values3);
        _subjects.array.next({
          values: { ...values3 }
        });
        _subjects.values.next({
          values: { ...values3 }
        });
      }
      _names = {
        mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        disabled: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set(),
        watchAll: false,
        focus: ""
      };
      _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
      _state.watch = !!_options.shouldUnregister;
      _subjects.state.next({
        submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
        isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
        isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
        dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
        touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
        errors: keepStateOptions.keepErrors ? _formState.errors : {},
        isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
        isSubmitting: false
      });
    };
    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
    const setFocus = (name, options = {}) => {
      const field = get(_fields, name);
      const fieldReference = field && field._f;
      if (fieldReference) {
        const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
        if (fieldRef.focus) {
          fieldRef.focus();
          options.shouldSelect && isFunction(fieldRef.select) && fieldRef.select();
        }
      }
    };
    const _updateFormState = (updatedFormState) => {
      _formState = {
        ..._formState,
        ...updatedFormState
      };
    };
    const _resetDefaultValues = () => isFunction(_options.defaultValues) && _options.defaultValues().then((values3) => {
      reset(values3, _options.resetOptions);
      _subjects.state.next({
        isLoading: false
      });
    });
    return {
      control: {
        register,
        unregister,
        getFieldState,
        handleSubmit,
        setError,
        _executeSchema,
        _getWatch,
        _getDirty,
        _updateValid,
        _removeUnmounted,
        _updateFieldArray,
        _updateDisabledField,
        _getFieldArray,
        _reset,
        _resetDefaultValues,
        _updateFormState,
        _disableForm,
        _subjects,
        _proxyFormState,
        _setErrors,
        get _fields() {
          return _fields;
        },
        get _formValues() {
          return _formValues;
        },
        get _state() {
          return _state;
        },
        set _state(value) {
          _state = value;
        },
        get _defaultValues() {
          return _defaultValues;
        },
        get _names() {
          return _names;
        },
        set _names(value) {
          _names = value;
        },
        get _formState() {
          return _formState;
        },
        set _formState(value) {
          _formState = value;
        },
        get _options() {
          return _options;
        },
        set _options(value) {
          _options = {
            ..._options,
            ...value
          };
        }
      },
      trigger,
      register,
      handleSubmit,
      watch,
      setValue,
      getValues,
      reset,
      resetField,
      clearErrors,
      unregister,
      setError,
      setFocus,
      getFieldState
    };
  }
  function useForm(props = {}) {
    const _formControl = import_react2.default.useRef(void 0);
    const _values = import_react2.default.useRef(void 0);
    const [formState, updateFormState] = import_react2.default.useState({
      isDirty: false,
      isValidating: false,
      isLoading: isFunction(props.defaultValues),
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      validatingFields: {},
      errors: props.errors || {},
      disabled: props.disabled || false,
      defaultValues: isFunction(props.defaultValues) ? void 0 : props.defaultValues
    });
    if (!_formControl.current) {
      _formControl.current = {
        ...createFormControl(props),
        formState
      };
    }
    const control = _formControl.current.control;
    control._options = props;
    useSubscribe({
      subject: control._subjects.state,
      next: (value) => {
        if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
          updateFormState({ ...control._formState });
        }
      }
    });
    import_react2.default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
    import_react2.default.useEffect(() => {
      if (control._proxyFormState.isDirty) {
        const isDirty = control._getDirty();
        if (isDirty !== formState.isDirty) {
          control._subjects.state.next({
            isDirty
          });
        }
      }
    }, [control, formState.isDirty]);
    import_react2.default.useEffect(() => {
      if (props.values && !deepEqual(props.values, _values.current)) {
        control._reset(props.values, control._options.resetOptions);
        _values.current = props.values;
        updateFormState((state) => ({ ...state }));
      } else {
        control._resetDefaultValues();
      }
    }, [props.values, control]);
    import_react2.default.useEffect(() => {
      if (props.errors) {
        control._setErrors(props.errors);
      }
    }, [props.errors, control]);
    import_react2.default.useEffect(() => {
      if (!control._state.mount) {
        control._updateValid();
        control._state.mount = true;
      }
      if (control._state.watch) {
        control._state.watch = false;
        control._subjects.state.next({ ...control._formState });
      }
      control._removeUnmounted();
    });
    import_react2.default.useEffect(() => {
      props.shouldUnregister && control._subjects.values.next({
        values: control._getWatch()
      });
    }, [props.shouldUnregister, control]);
    _formControl.current.formState = getProxyFormState(formState, control);
    return _formControl.current;
  }

  // react-user-mgmt/src/helpers/prisma-proxy.ts
  var import_client = __toESM(require_index_browser3(), 1);
  var _error;
  var ProxyPromise = class {
    constructor({ action, table, arg: arg2 }) {
      __publicField(this, "action");
      __publicField(this, "table");
      __publicField(this, "arg");
      __privateAdd(this, _error, new Error("An error occured for this request"));
      __publicField(this, "toJSON", () => ({
        action: this.action,
        table: this.table,
        arg: this.arg,
        dbnulls: this.arg.data && findValueInObject(this.arg.data, (e2) => e2 === import_client.Prisma.DbNull),
        jsnulls: this.arg.data && findValueInObject(this.arg.data, (e2) => e2 === import_client.Prisma.JsonNull)
      }));
      __publicField(this, "_internalPromise");
      this.action = action;
      this.table = table;
      this.arg = arg2;
    }
    static getErrorStack(t2) {
      return __privateGet(t2, _error).stack;
    }
    then(onfulfilled, onrejected) {
      return this._await().then(onfulfilled, onrejected);
    }
    catch(onrejected) {
      return this._await().catch(onrejected);
    }
    finally(onfinally) {
      return this._await().finally(onfinally);
    }
    get [Symbol.toStringTag]() {
      return "Promise";
    }
    _await() {
      if (this._internalPromise) return this._internalPromise;
      return this._internalPromise = new Promise(async (resolve, reject) => {
        const [good, req] = await fetch("/prisma", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Requested-With": "TiddlyWiki"
          },
          body: JSON.stringify(this.toJSON())
        }).then((e2) => [true, e2], (e2) => [false, e2]);
        if (!good) return reject(req);
        const [good2, res] = await req.json().then((e2) => [true, e2], (e2) => [false, e2]);
        if (!good2) return reject(res);
        resolve(res);
      });
    }
  };
  _error = new WeakMap();
  function findValueInObject(val, predicate, keys2 = [], paths = []) {
    if (predicate(val)) {
      paths.push(keys2.join("/"));
      return paths;
    }
    if (val && typeof val === "object") {
      for (const key of Object.keys(val)) {
        if (!val.hasOwnProperty(key)) continue;
        findValueInObject(val[key], predicate, [...keys2, key], paths);
      }
    }
    console.log(paths, keys2);
    return paths;
  }
  function capitalize(table) {
    return table.slice(0, 1).toUpperCase() + table.slice(1);
  }
  var proxy = (() => new Proxy({}, {
    get(target, table) {
      return target[table] = target[table] || new Proxy({}, {
        get(target2, action) {
          return target2[action] = target2[action] || ((arg2) => {
            return new ProxyPromise({ action, table: capitalize(table), arg: arg2 });
          });
        }
      });
    }
  }))();

  // react-user-mgmt/src/helpers/utils.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  async function changePassword(input) {
    const { userId, password, confirmPassword } = input;
    if (password !== confirmPassword) throw "Passwords do not match";
    const { clientRegistrationState, registrationRequest } = client.startRegistration({ password });
    const registrationResponse = await serverRequest2.user_update_password({ user_id: +userId, registrationRequest });
    if (!registrationResponse) throw "Failed to update password";
    const { registrationRecord } = client.finishRegistration({
      clientRegistrationState,
      registrationResponse,
      password
    });
    await serverRequest2.user_update_password({ user_id: +userId, registrationRecord });
  }
  function DataLoader(loader, useRender) {
    return (props) => {
      const [refreshData, setRefreshData] = (0, import_react3.useState)({});
      const [result, setResult] = (0, import_react3.useState)(null);
      const refresh = (0, import_react3.useCallback)(() => setRefreshData({}), []);
      useAsyncEffect(async () => {
        setResult(await loader(props));
      }, void 0, void 0, [refreshData]);
      if (!result) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Render, { useRender: () => useRender(result, refresh, props) });
    };
  }
  function Render({ useRender }) {
    return useRender();
  }
  var IndexJsonContext = import_react3.default.createContext(null);
  function useIndexJson() {
    return import_react3.default.useContext(IndexJsonContext);
  }
  function postManager(key) {
    return async (data) => {
      const req = await fetch("/manager/" + key, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Requested-With": "TiddlyWiki"
        },
        body: JSON.stringify(data)
      });
      if (!req.ok) throw new Error(`Failed to fetch data for /manager/${key}: ${await req.text()}`);
      return await req.json();
    };
  }
  var serverRequest2 = {
    user_list: postManager("user_list"),
    user_create: postManager("user_create"),
    user_delete: postManager("user_delete"),
    user_update: postManager("user_update"),
    user_update_password: postManager("user_update_password"),
    index_json: postManager("index_json"),
    recipe_create: postManager("recipe_create"),
    bag_create: postManager("bag_create"),
    prisma: proxy
  };
  async function getIndexJson() {
    const res = await serverRequest2.index_json(void 0);
    const bagMap = new Map(res.bagList.map((bag) => [bag.bag_id, bag]));
    const recipeMap = new Map(res.recipeList.map((recipe) => [recipe.recipe_id, recipe]));
    const hasRecipeAclAccess = (recipe) => {
      if (res.isAdmin) return true;
      if (res.user_id && recipe.owner_id === res.user_id) return true;
      return recipe.recipe_bags.some((recipeBag) => bagMap.get(recipeBag.bag_id)?._count.acl);
    };
    const hasBagAclAccess = (bag) => {
      if (res.isAdmin) return true;
      if (res.user_id && bag.owner_id === res.user_id) return true;
      if (bag._count.acl) return true;
      return true;
    };
    const getBagName = (bagId) => bagMap.get(bagId)?.bag_name;
    const getBagDesc = (bagId) => bagMap.get(bagId)?.description;
    return {
      ...res,
      bagMap,
      recipeMap,
      hasBagAclAccess,
      getBagName,
      getBagDesc,
      hasRecipeAclAccess
    };
  }

  // react-user-mgmt/node_modules/@mui/material/Card/Card.js
  var React37 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/clsx/dist/clsx.mjs
  function r(e2) {
    var t2, f2, n2 = "";
    if ("string" == typeof e2 || "number" == typeof e2) n2 += e2;
    else if ("object" == typeof e2) if (Array.isArray(e2)) {
      var o2 = e2.length;
      for (t2 = 0; t2 < o2; t2++) e2[t2] && (f2 = r(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
    } else for (f2 in e2) e2[f2] && (n2 && (n2 += " "), n2 += f2);
    return n2;
  }
  function clsx() {
    for (var e2, t2, f2 = 0, n2 = "", o2 = arguments.length; f2 < o2; f2++) (e2 = arguments[f2]) && (t2 = r(e2)) && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  var clsx_default = clsx;

  // react-user-mgmt/node_modules/@mui/utils/esm/chainPropTypes/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/composeClasses/composeClasses.js
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output = {};
    for (const slotName in slots) {
      const slot = slots[slotName];
      let buffer = "";
      let start = true;
      for (let i2 = 0; i2 < slot.length; i2 += 1) {
        const value = slot[i2];
        if (value) {
          buffer += (start === true ? "" : " ") + getUtilityClass(value);
          start = false;
          if (classes && classes[value]) {
            buffer += " " + classes[value];
          }
        }
      }
      output[slotName] = buffer;
    }
    return output;
  }

  // react-user-mgmt/node_modules/@mui/material/zero-styled/index.js
  var React34 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/utils/esm/capitalize/capitalize.js
  function capitalize2(string) {
    if (typeof string !== "string") {
      throw new Error(true ? "MUI: `capitalize(string)` expects a string argument." : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/deepmerge/deepmerge.js
  var React3 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is2());
  function isPlainObject2(item) {
    if (typeof item !== "object" || item === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(item);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
  }
  function deepClone(source) {
    if (/* @__PURE__ */ React3.isValidElement(source) || (0, import_react_is.isValidElementType)(source) || !isPlainObject2(source)) {
      return source;
    }
    const output = {};
    Object.keys(source).forEach((key) => {
      output[key] = deepClone(source[key]);
    });
    return output;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? {
      ...target
    } : target;
    if (isPlainObject2(target) && isPlainObject2(source)) {
      Object.keys(source).forEach((key) => {
        if (/* @__PURE__ */ React3.isValidElement(source[key]) || (0, import_react_is.isValidElementType)(source[key])) {
          output[key] = source[key];
        } else if (isPlainObject2(source[key]) && // Avoid prototype pollution
        Object.prototype.hasOwnProperty.call(target, key) && isPlainObject2(target[key])) {
          output[key] = deepmerge(target[key], source[key], options);
        } else if (options.clone) {
          output[key] = isPlainObject2(source[key]) ? deepClone(source[key]) : source[key];
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/merge/merge.js
  function merge(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  var merge_default = merge;

  // react-user-mgmt/node_modules/@mui/system/esm/responsivePropType/responsivePropType.js
  var import_prop_types = __toESM(require_prop_types());
  var responsivePropType = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.object, import_prop_types.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // react-user-mgmt/node_modules/@mui/system/esm/cssContainerQueries/cssContainerQueries.js
  function sortContainerQueries(theme2, css2) {
    if (!theme2.containerQueries) {
      return css2;
    }
    const sorted = Object.keys(css2).filter((key) => key.startsWith("@container")).sort((a2, b2) => {
      const regex = /min-width:\s*([0-9.]+)/;
      return +(a2.match(regex)?.[1] || 0) - +(b2.match(regex)?.[1] || 0);
    });
    if (!sorted.length) {
      return css2;
    }
    return sorted.reduce((acc, key) => {
      const value = css2[key];
      delete acc[key];
      acc[key] = value;
      return acc;
    }, {
      ...css2
    });
  }
  function isCqShorthand(breakpointKeys, value) {
    return value === "@" || value.startsWith("@") && (breakpointKeys.some((key) => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
  }
  function getContainerQuery(theme2, shorthand) {
    const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
    if (!matches) {
      if (true) {
        throw new Error(true ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : formatMuiErrorMessage(18, `(${shorthand})`));
      }
      return null;
    }
    const [, containerQuery, containerName] = matches;
    const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
    return theme2.containerQueries(containerName).up(value);
  }
  function cssContainerQueries(themeInput) {
    const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container");
    function attachCq(node3, name) {
      node3.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
      node3.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
      node3.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
      node3.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
      node3.not = (...args) => {
        const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
        if (result.includes("not all and")) {
          return result.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or");
        }
        return result;
      };
    }
    const node2 = {};
    const containerQueries = (name) => {
      attachCq(node2, name);
      return node2;
    };
    attachCq(containerQueries);
    return {
      ...themeInput,
      containerQueries
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/breakpoints/breakpoints.js
  var values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  var defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  var defaultContainerQueries = {
    containerQueries: (containerName) => ({
      up: (key) => {
        let result = typeof key === "number" ? key : values[key] || key;
        if (typeof result === "number") {
          result = `${result}px`;
        }
        return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
      }
    })
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme2 = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {
          const containerKey = getContainerQuery(theme2.containerQueries ? theme2 : defaultContainerQueries, breakpoint);
          if (containerKey) {
            acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          }
        } else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    const breakpointsInOrder = breakpointsInput.keys?.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style4) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style4);
  }
  function mergeBreakpointsInOrder(breakpointsInput, ...styles5) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [emptyBreakpoints, ...styles5].reduce((prev2, next2) => deepmerge(prev2, next2), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i2) => {
        if (i2 < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys2 = Object.keys(base);
    if (keys2.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys2.reduce((acc, breakpoint, i2) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i2] != null ? breakpointValues[i2] : breakpointValues[previous];
        previous = i2;
      } else if (typeof breakpointValues === "object") {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        previous = breakpoint;
      } else {
        acc[breakpoint] = breakpointValues;
      }
      return acc;
    }, {});
  }

  // react-user-mgmt/node_modules/@mui/system/esm/style/style.js
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform2, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform2) {
      value = transform2(value, userValue, themeMapping);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform: transform2
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme2 = props.theme;
      const themeMapping = getPath(theme2, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform2, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform2, `${prop}${propValueFinal === "default" ? "" : capitalize2(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn.filterProps = [prop];
    return fn;
  }
  var style_default = style;

  // react-user-mgmt/node_modules/@mui/system/esm/memoize/memoize.js
  function memoize(fn) {
    const cache = {};
    return (arg2) => {
      if (cache[arg2] === void 0) {
        cache[arg2] = fn(arg2);
      }
      return cache[arg2];
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/spacing/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a2, b2] = prop.split("");
    const property2 = properties[a2];
    const direction = directions[b2] || "";
    return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme2, themeKey, defaultValue, propName) {
    const themeSpacing = getPath(theme2, themeKey, true) ?? defaultValue;
    if (typeof themeSpacing === "number" || typeof themeSpacing === "string") {
      return (val) => {
        if (typeof val === "string") {
          return val;
        }
        if (true) {
          if (typeof val !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
          }
        }
        if (typeof themeSpacing === "string") {
          return `calc(${val} * ${themeSpacing})`;
        }
        return themeSpacing * val;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (val) => {
        if (typeof val === "string") {
          return val;
        }
        const abs2 = Math.abs(val);
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        const transformed = themeSpacing[abs2];
        if (val >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme2) {
    return createUnaryUnit(theme2, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    return transformer(propValue);
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys2, prop, transformer) {
    if (!keys2.includes(prop)) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys2) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;

  // react-user-mgmt/node_modules/@mui/system/esm/compose/compose.js
  function compose(...styles5) {
    const handlers = styles5.reduce((acc, style4) => {
      style4.filterProps.forEach((prop) => {
        acc[prop] = style4;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = true ? styles5.reduce((acc, style4) => Object.assign(acc, style4.propTypes), {}) : {};
    fn.filterProps = styles5.reduce((acc, style4) => acc.concat(style4.filterProps), []);
    return fn;
  }
  var compose_default = compose;

  // react-user-mgmt/node_modules/@mui/system/esm/borders/borders.js
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform2) {
    return style_default({
      prop,
      themeKey: "borders",
      transform: transform2
    });
  }
  var border = createBorderStyle("border", borderTransform);
  var borderTop = createBorderStyle("borderTop", borderTransform);
  var borderRight = createBorderStyle("borderRight", borderTransform);
  var borderBottom = createBorderStyle("borderBottom", borderTransform);
  var borderLeft = createBorderStyle("borderLeft", borderTransform);
  var borderColor = createBorderStyle("borderColor");
  var borderTopColor = createBorderStyle("borderTopColor");
  var borderRightColor = createBorderStyle("borderRightColor");
  var borderBottomColor = createBorderStyle("borderBottomColor");
  var borderLeftColor = createBorderStyle("borderLeftColor");
  var outline = createBorderStyle("outline", borderTransform);
  var outlineColor = createBorderStyle("outlineColor");
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

  // react-user-mgmt/node_modules/@mui/system/esm/cssGrid/cssGrid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  // react-user-mgmt/node_modules/@mui/system/esm/palette/palette.js
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  var color = style_default({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var palette = compose_default(color, bgcolor, backgroundColor);

  // react-user-mgmt/node_modules/@mui/system/esm/sizing/sizing.js
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform: sizingTransform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        const breakpoint = props.theme?.breakpoints?.values?.[propValue] || values[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (props.theme?.breakpoints?.unit !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform: sizingTransform
  });
  var height = style_default({
    prop: "height",
    transform: sizingTransform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform: sizingTransform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform: sizingTransform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

  // react-user-mgmt/node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
  var defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    font: {
      themeKey: "font"
    },
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  var defaultSxConfig_default = defaultSxConfig;

  // react-user-mgmt/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
    const union2 = new Set(allKeys);
    return objects.every((object) => union2.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg2) {
    return typeof maybeFn === "function" ? maybeFn(arg2) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme2, config) {
      const props = {
        [prop]: val,
        theme: theme2
      };
      const options = config[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform: transform2,
        style: style4
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme2, themeKey) || {};
      if (style4) {
        return style4(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform2, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform2, `${prop}${propValueFinal === "default" ? "" : capitalize2(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx2(props) {
      const {
        sx,
        theme: theme2 = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config = theme2.unstable_sxConfig ?? defaultSxConfig_default;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme2);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme2.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css2 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme2);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config[styleKey]) {
                css2 = merge_default(css2, getThemeValue(styleKey, value, theme2, config));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme: theme2
                }, value, (x2) => ({
                  [styleKey]: x2
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css2[styleKey] = styleFunctionSx2({
                    sx: value,
                    theme: theme2
                  });
                } else {
                  css2 = merge_default(css2, breakpointsValues);
                }
              }
            } else {
              css2 = merge_default(css2, getThemeValue(styleKey, value, theme2, config));
            }
          }
        });
        return sortContainerQueries(theme2, removeUnusedBreakpoints(breakpointsKeys, css2));
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx2;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // react-user-mgmt/node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
  var splitProps = (props) => {
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config = props?.theme?.unstable_sxConfig ?? defaultSxConfig_default;
    Object.keys(props).forEach((prop) => {
      if (config[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx,
      ...other
    } = props;
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!isPlainObject2(result)) {
          return systemProps;
        }
        return {
          ...systemProps,
          ...result
        };
      };
    } else {
      finalSx = {
        ...systemProps,
        ...inSx
      };
    }
    return {
      ...otherProps,
      sx: finalSx
    };
  }

  // react-user-mgmt/node_modules/@mui/material/styles/useTheme.js
  var React32 = __toESM(require_react());

  // react-user-mgmt/node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n2) {
      for (var e2 = 1; e2 < arguments.length; e2++) {
        var t2 = arguments[e2];
        for (var r3 in t2) ({}).hasOwnProperty.call(t2, r3) && (n2[r3] = t2[r3]);
      }
      return n2;
    }, _extends.apply(null, arguments);
  }

  // react-user-mgmt/node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  var React5 = __toESM(require_react());
  var import_react4 = __toESM(require_react());

  // react-user-mgmt/node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
  var isDevelopment = false;
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag) {
        return document.styleSheets[i2];
      }
    }
    return void 0;
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? !isDevelopment : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (this.isSpeedy) {
        var sheet = sheetForTag(tag);
        try {
          sheet.insertRule(rule, sheet.cssRules.length);
        } catch (e2) {
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag) {
        var _tag$parentNode;
        return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
    };
    return StyleSheet2;
  }();

  // react-user-mgmt/node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";

  // react-user-mgmt/node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // react-user-mgmt/node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root2, parent2, type, props, children, length2) {
    return { value, root: root2, parent: parent2, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root2, props) {
    return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      // ; { } breakpoint token
      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token
      case 58:
        return 3;
      // " ' ( [ opening delimit token
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        // ] ) " '
        case type:
          return position;
        // " '
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        // (
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        // \
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }

  // react-user-mgmt/node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root2, parent2, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property2 = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        // (
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        // " ' [
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        // \
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        // /
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root2, parent2), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        // {
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;
            case 59 + offset:
              if (ampersand == -1) characters2 = replace(characters2, /\f/g, "");
              if (property2 > 0 && strlen(characters2) - length2)
                append(property2 > 32 ? declaration(characters2 + ";", rule, parent2, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent2, length2 - 2), declarations);
              break;
            // @ ;
            case 59:
              characters2 += ";";
            // { rule/at-rule
            default:
              append(reference = ruleset(characters2, root2, parent2, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root2, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index = offset = property2 = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        // :
        case 58:
          length2 = 1 + strlen(characters2), property2 = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            // &
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            // ,
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            // @
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            // -
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root2, parent2, index, offset, rules, points, type, props, children, length2) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i2 = 0, j2 = 0, k2 = 0; i2 < index; ++i2)
      for (var x2 = 0, y2 = substr(value, post + 1, post = abs(j2 = points[i2])), z2 = value; x2 < size; ++x2)
        if (z2 = trim(j2 > 0 ? rule[x2] + " " + y2 : replace(y2, /&\f/g, rule[x2])))
          props[k2++] = z2;
    return node(value, root2, parent2, offset === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root2, parent2) {
    return node(value, root2, parent2, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root2, parent2, length2) {
    return node(value, root2, parent2, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // react-user-mgmt/node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i2 = 0; i2 < length2; i2++)
      output += callback(children[i2], i2, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length) break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // react-user-mgmt/node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i2 = 0; i2 < length2; i2++)
        output += collection[i2](element, index, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }

  // react-user-mgmt/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize2(fn) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg2) {
      if (cache[arg2] === void 0) cache[arg2] = fn(arg2);
      return cache[arg2];
    };
  }

  // react-user-mgmt/node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(position - 1, points, index);
          break;
        case 2:
          parsed[index] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index] = peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        // fallthrough
        default:
          parsed[index] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }
    var value = element.value;
    var parent2 = element.parent;
    var isImplicitRule = element.column === parent2.column && element.line === parent2.line;
    while (parent2.type !== "rule") {
      parent2 = parent2.parent;
      if (!parent2) return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent2)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent2.props;
    for (var i2 = 0, k2 = 0; i2 < rules.length; i2++) {
      for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
        element.props[k2] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i2];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      // color-adjust
      case 5103:
        return WEBKIT + "print-" + value + value;
      // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      // appearance, user-select, transform, hyphens, text-size-adjust
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      // flex, flex-direction
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      // order
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      // align-items
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      // align-self
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      // align-content
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      // flex-shrink
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      // flex-basis
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      // flex-grow
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      // transition
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      // cursor
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      // background, background-image
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      // justify-content
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      // (margin|padding)-inline-(start|end)
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      // (min|max)?(width|height|inline-size|block-size)
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            if (charat(value, length2 + 4) !== 45) break;
          // (f)ill-available, (f)it-content
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          // (s)tretch
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
        break;
      // position: sticky
      case 4949:
        if (charat(value, length2 + 1) !== 115) break;
      // display: (flex|inline-flex)
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          // stic(k)y
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          // (inline-)?fl(e)x
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      // writing-mode
      case 5936:
        switch (charat(value, length2 + 11)) {
          // vertical-l(r)
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          // vertical-r(l)
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          // horizontal(-)tb
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index, children, callback) {
    if (element.length > -1) {
      if (!element["return"]) switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length) return combine(element.props, function(value) {
            switch (match(value, /(::plac\w+|:read-\w+)/)) {
              // :read-(only|write)
              case ":read-only":
              case ":read-write":
                return serialize([copy(element, {
                  props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                })], callback);
              // :placeholder
              case "::placeholder":
                return serialize([copy(element, {
                  props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                }), copy(element, {
                  props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                }), copy(element, {
                  props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                })], callback);
            }
            return "";
          });
      }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i2 = 1; i2 < attrib.length; i2++) {
            inserted[attrib[i2]] = true;
          }
          nodesToHydrate.push(node2);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    {
      var currentSheet;
      var finalizingPlugins = [stringify, rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles5) {
        return serialize(compile(styles5), serializer);
      };
      _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache.inserted[serialized.name] = true;
        }
      };
    }
    var cache = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
  };

  // react-user-mgmt/node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else if (className) {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
    var className = cache.key + "-" + serialized.name;
    if (
      // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag2 === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser === false) && cache.registered[className] === void 0
    ) {
      cache.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
    registerStyles(cache, serialized, isStringTag2);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // react-user-mgmt/node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h2 = 0;
    var k2, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k2 = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k2 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= /* k >>> r: */
      k2 >>> 24;
      h2 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h2 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h2 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h2 ^= str.charCodeAt(i2) & 255;
        h2 = /* Math.imul(h, m): */
        (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    h2 ^= h2 >>> 13;
    h2 = /* Math.imul(h, m): */
    (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
  }

  // react-user-mgmt/node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    scale: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };

  // react-user-mgmt/node_modules/@emotion/serialize/dist/emotion-serialize.esm.js
  var isDevelopment2 = false;
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property2) {
    return property2.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize2(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    var componentSelector = interpolation;
    if (componentSelector.__emotion_styles !== void 0) {
      return componentSelector;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        var keyframes2 = interpolation;
        if (keyframes2.anim === 1) {
          cursor = {
            name: keyframes2.name,
            styles: keyframes2.styles,
            next: cursor
          };
          return keyframes2.name;
        }
        var serializedStyles = interpolation;
        if (serializedStyles.styles !== void 0) {
          var next2 = serializedStyles.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles5 = serializedStyles.styles + ";";
          return styles5;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    var asString = interpolation;
    if (registered == null) {
      return asString;
    }
    var cached = registered[asString];
    return cached !== void 0 ? cached : asString;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var key in obj) {
        var value = obj[key];
        if (typeof value !== "object") {
          var asString = value;
          if (registered != null && registered[asString] !== void 0) {
            string += key + "{" + registered[asString] + "}";
          } else if (isProcessableValue(asString)) {
            string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
          }
        } else {
          if (key === "NO_COMPONENT_SELECTOR" && isDevelopment2) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (key) {
              case "animation":
              case "animationName": {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string += key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
  var cursor;
  function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles5 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles5 += handleInterpolation(mergedProps, registered, strings);
    } else {
      var asTemplateStringsArr = strings;
      styles5 += asTemplateStringsArr[0];
    }
    for (var i2 = 1; i2 < args.length; i2++) {
      styles5 += handleInterpolation(mergedProps, registered, args[i2]);
      if (stringMode) {
        var templateStringsArr = strings;
        styles5 += templateStringsArr[i2];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles5)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = murmur2(styles5) + identifierName;
    return {
      name,
      styles: styles5,
      next: cursor
    };
  }

  // react-user-mgmt/node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React4 = __toESM(require_react());
  var syncFallback = function syncFallback2(create) {
    return create();
  };
  var useInsertionEffect2 = React4["useInsertionEffect"] ? React4["useInsertionEffect"] : false;
  var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
  var useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React4.useLayoutEffect;

  // react-user-mgmt/node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  var isDevelopment3 = false;
  var EmotionCacheContext = /* @__PURE__ */ React5.createContext(
    // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
      key: "css"
    }) : null
  );
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ (0, import_react4.forwardRef)(function(props, ref) {
      var cache = (0, import_react4.useContext)(EmotionCacheContext);
      return func(props, cache, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ React5.createContext({});
  var hasOwn = {}.hasOwnProperty;
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var createEmotionProps = function createEmotionProps2(type, props) {
    var newProps = {};
    for (var _key in props) {
      if (hasOwn.call(props, _key)) {
        newProps[_key] = props[_key];
      }
    }
    newProps[typePropName] = type;
    return newProps;
  };
  var Insertion = function Insertion2(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag2);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache, serialized, isStringTag2);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
      cssProp = cache.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, React5.useContext(ThemeContext));
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for (var _key2 in props) {
      if (hasOwn.call(props, _key2) && _key2 !== "css" && _key2 !== typePropName && !isDevelopment3) {
        newProps[_key2] = props[_key2];
      }
    }
    newProps.className = className;
    if (ref) {
      newProps.ref = ref;
    }
    return /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement(Insertion, {
      cache,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ React5.createElement(WrappedComponent, newProps));
  });
  var Emotion$1 = Emotion;

  // react-user-mgmt/node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var React6 = __toESM(require_react());
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var jsx2 = function jsx3(type, props) {
    var args = arguments;
    if (props == null || !hasOwn.call(props, "css")) {
      return React6.createElement.apply(void 0, args);
    }
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = Emotion$1;
    createElementArgArray[1] = createEmotionProps(type, props);
    for (var i2 = 2; i2 < argsLength; i2++) {
      createElementArgArray[i2] = args[i2];
    }
    return React6.createElement.apply(null, createElementArgArray);
  };
  (function(_jsx178) {
    var JSX;
    /* @__PURE__ */ (function(_JSX) {
    })(JSX || (JSX = _jsx178.JSX || (_jsx178.JSX = {})));
  })(jsx2 || (jsx2 = {}));
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    var styles5 = props.styles;
    var serialized = serializeStyles([styles5], void 0, React6.useContext(ThemeContext));
    var sheetRef = React6.useRef();
    useInsertionEffectWithLayoutFallback(function() {
      var key = cache.key + "-global";
      var sheet = new cache.sheet.constructor({
        key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      });
      var rehydrating = false;
      var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache.sheet.tags.length) {
        sheet.before = cache.sheet.tags[0];
      }
      if (node2 !== null) {
        rehydrating = true;
        node2.setAttribute("data-emotion", key);
        sheet.hydrate([node2]);
      }
      sheetRef.current = [sheet, rehydrating];
      return function() {
        sheet.flush();
      };
    }, [cache]);
    useInsertionEffectWithLayoutFallback(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache, serialized.next, true);
      }
      if (sheet.tags.length) {
        var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
        sheet.before = element;
        sheet.flush();
      }
      cache.insert("", serialized, sheet, false);
    }, [cache, serialized.name]);
    return null;
  });
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString3() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  }

  // react-user-mgmt/node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React7 = __toESM(require_react());

  // react-user-mgmt/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ memoize2(
    function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    }
    /* Z+1 */
  );

  // react-user-mgmt/node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var isDevelopment4 = false;
  var testOmitPropsOnStringTag = isPropValid;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
    var shouldForwardProp2;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp2 !== "function" && isReal) {
      shouldForwardProp2 = tag.__emotion_forwardProp;
    }
    return shouldForwardProp2;
  };
  var Insertion3 = function Insertion4(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag2);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache, serialized, isStringTag2);
    });
    return null;
  };
  var createStyled = function createStyled2(tag, options) {
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles5 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles5.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles5.push.apply(styles5, args);
      } else {
        var templateStringsArr = args[0];
        styles5.push(templateStringsArr[0]);
        var len = args.length;
        var i2 = 1;
        for (; i2 < len; i2++) {
          styles5.push(args[i2], templateStringsArr[i2]);
        }
      }
      var Styled = withEmotionCache(function(props, cache, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = React7.useContext(ThemeContext);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles5.concat(classInterpolations), cache.registered, mergedProps);
        className += cache.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as") continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        if (ref) {
          newProps.ref = ref;
        }
        return /* @__PURE__ */ React7.createElement(React7.Fragment, null, /* @__PURE__ */ React7.createElement(Insertion3, {
          cache,
          serialized,
          isStringTag: typeof FinalTag === "string"
        }), /* @__PURE__ */ React7.createElement(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles5;
      Styled.__emotion_forwardProp = shouldForwardProp2;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && isDevelopment4) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        var newStyled2 = createStyled2(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        }));
        return newStyled2.apply(void 0, styles5);
      };
      return Styled;
    };
  };

  // react-user-mgmt/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var import_react6 = __toESM(require_react());
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    // SVG
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = createStyled.bind(null);
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });

  // react-user-mgmt/node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js
  var React8 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  function isEmpty(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  function GlobalStyles(props) {
    const {
      styles: styles5,
      defaultTheme: defaultTheme5 = {}
    } = props;
    const globalStyles = typeof styles5 === "function" ? (themeInput) => styles5(isEmpty(themeInput) ? defaultTheme5 : themeInput) : styles5;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Global, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    defaultTheme: import_prop_types2.default.object,
    styles: import_prop_types2.default.oneOfType([import_prop_types2.default.array, import_prop_types2.default.string, import_prop_types2.default.object, import_prop_types2.default.func])
  } : void 0;

  // react-user-mgmt/node_modules/@mui/styled-engine/index.js
  function styled(tag, options) {
    const stylesFactory = newStyled(tag, options);
    if (true) {
      return (...styles5) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles5.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles5.some((style4) => style4 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles5);
      };
    }
    return stylesFactory;
  }
  function internal_mutateStyles(tag, processor) {
    if (Array.isArray(tag.__emotion_styles)) {
      tag.__emotion_styles = processor(tag.__emotion_styles);
    }
  }
  var wrapper = [];
  function internal_serializeStyles(styles5) {
    wrapper[0] = styles5;
    return serializeStyles(wrapper);
  }

  // react-user-mgmt/node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var React10 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/system/esm/createBreakpoints/createBreakpoints.js
  var sortBreakpointsValues = (values3) => {
    const breakpointsAsArray = Object.keys(values3).map((key) => ({
      key,
      val: values3[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return {
        ...acc,
        [obj.key]: obj.val
      };
    }, {});
  };
  function createBreakpoints(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values3 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5,
      ...other
    } = breakpoints;
    const sortedValues = sortBreakpointsValues(values3);
    const keys2 = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
      const endIndex = keys2.indexOf(end);
      return `@media (min-width:${typeof values3[start] === "number" ? values3[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys2[endIndex]] === "number" ? values3[keys2[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys2.indexOf(key) + 1 < keys2.length) {
        return between(key, keys2[keys2.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys2.indexOf(key);
      if (keyIndex === 0) {
        return up(keys2[1]);
      }
      if (keyIndex === keys2.length - 1) {
        return down(keys2[keyIndex]);
      }
      return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return {
      keys: keys2,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit,
      ...other
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // react-user-mgmt/node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8, transform2 = createUnarySpacing({
    spacing: spacingInput
  })) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const spacing2 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform2(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/createTheme/applyStyles.js
  function applyStyles(key, styles5) {
    const theme2 = this;
    if (theme2.vars) {
      if (!theme2.colorSchemes?.[key] || typeof theme2.getColorSchemeSelector !== "function") {
        return {};
      }
      let selector = theme2.getColorSchemeSelector(key);
      if (selector === "&") {
        return styles5;
      }
      if (selector.includes("data-") || selector.includes(".")) {
        selector = `*:where(${selector.replace(/\s*&$/, "")}) &`;
      }
      return {
        [selector]: styles5
      };
    }
    if (theme2.palette.mode === key) {
      return styles5;
    }
    return {};
  }

  // react-user-mgmt/node_modules/@mui/system/esm/createTheme/createTheme.js
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {},
      ...other
    } = options;
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: {
        mode: "light",
        ...paletteInput
      },
      spacing: spacing2,
      shape: {
        ...shape_default,
        ...shapeInput
      }
    }, other);
    muiTheme = cssContainerQueries(muiTheme);
    muiTheme.applyStyles = applyStyles;
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = {
      ...defaultSxConfig_default,
      ...other?.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // react-user-mgmt/node_modules/@mui/system/esm/useThemeWithoutDefault/useThemeWithoutDefault.js
  var React9 = __toESM(require_react());
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme2(defaultTheme5 = null) {
    const contextTheme = React9.useContext(ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme5 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme2;

  // react-user-mgmt/node_modules/@mui/system/esm/useTheme/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme3(defaultTheme5 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme5);
  }
  var useTheme_default = useTheme3;

  // react-user-mgmt/node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  function GlobalStyles2({
    styles: styles5,
    themeId,
    defaultTheme: defaultTheme5 = {}
  }) {
    const upperTheme = useTheme_default(defaultTheme5);
    const globalStyles = typeof styles5 === "function" ? styles5(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles5;
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(GlobalStyles, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    defaultTheme: import_prop_types3.default.object,
    /**
     * @ignore
     */
    styles: import_prop_types3.default.oneOfType([import_prop_types3.default.array, import_prop_types3.default.func, import_prop_types3.default.number, import_prop_types3.default.object, import_prop_types3.default.string, import_prop_types3.default.bool]),
    /**
     * @ignore
     */
    themeId: import_prop_types3.default.string
  } : void 0;
  var GlobalStyles_default = GlobalStyles2;

  // react-user-mgmt/node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
  var defaultGenerator = (componentName) => componentName;
  var createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator_default = ClassNameGenerator;

  // react-user-mgmt/node_modules/@mui/system/esm/createBox/createBox.js
  var React11 = __toESM(require_react());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme5,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = styled("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx_default);
    const Box3 = /* @__PURE__ */ React11.forwardRef(function Box4(inProps, ref) {
      const theme2 = useTheme_default(defaultTheme5);
      const {
        className,
        component = "div",
        ...other
      } = extendSxProp(inProps);
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(BoxRoot, {
        as: component,
        ref,
        className: clsx_default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme2[themeId] || theme2 : theme2,
        ...other
      });
    });
    return Box3;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
  var globalStateClasses = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClasses[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/getDisplayName/getDisplayName.js
  var import_react_is2 = __toESM(require_react_is2());
  function getFunctionComponentName(Component6, fallback = "") {
    return Component6.displayName || Component6.name || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component6) {
    if (Component6 == null) {
      return void 0;
    }
    if (typeof Component6 === "string") {
      return Component6;
    }
    if (typeof Component6 === "function") {
      return getFunctionComponentName(Component6, "Component");
    }
    if (typeof Component6 === "object") {
      switch (Component6.$$typeof) {
        case import_react_is2.ForwardRef:
          return getWrappedName(Component6, Component6.render, "ForwardRef");
        case import_react_is2.Memo:
          return getWrappedName(Component6, Component6.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/preprocessStyles.js
  function preprocessStyles(input) {
    const {
      variants,
      ...style4
    } = input;
    const result = {
      variants,
      style: internal_serializeStyles(style4),
      isProcessed: true
    };
    if (result.style === style4) {
      return result;
    }
    if (variants) {
      variants.forEach((variant) => {
        if (typeof variant.style !== "function") {
          variant.style = internal_serializeStyles(variant.style);
        }
      });
    }
    return result;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/createStyled/createStyled.js
  var systemDefaultTheme2 = createTheme_default();
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (_props, styles5) => styles5[slot];
  }
  function attachTheme(props, themeId, defaultTheme5) {
    props.theme = isObjectEmpty2(props.theme) ? defaultTheme5 : props.theme[themeId] || props.theme;
  }
  function processStyle(props, style4) {
    const resolvedStyle = typeof style4 === "function" ? style4(props) : style4;
    if (Array.isArray(resolvedStyle)) {
      return resolvedStyle.flatMap((subStyle) => processStyle(props, subStyle));
    }
    if (Array.isArray(resolvedStyle?.variants)) {
      let rootStyle;
      if (resolvedStyle.isProcessed) {
        rootStyle = resolvedStyle.style;
      } else {
        const {
          variants,
          ...otherStyles
        } = resolvedStyle;
        rootStyle = otherStyles;
      }
      return processStyleVariants(props, resolvedStyle.variants, [rootStyle]);
    }
    if (resolvedStyle?.isProcessed) {
      return resolvedStyle.style;
    }
    return resolvedStyle;
  }
  function processStyleVariants(props, variants, results = []) {
    let mergedState;
    variantLoop: for (let i2 = 0; i2 < variants.length; i2 += 1) {
      const variant = variants[i2];
      if (typeof variant.props === "function") {
        mergedState ?? (mergedState = {
          ...props,
          ...props.ownerState,
          ownerState: props.ownerState
        });
        if (!variant.props(mergedState)) {
          continue;
        }
      } else {
        for (const key in variant.props) {
          if (props[key] !== variant.props[key] && props.ownerState?.[key] !== variant.props[key]) {
            continue variantLoop;
          }
        }
      }
      if (typeof variant.style === "function") {
        mergedState ?? (mergedState = {
          ...props,
          ...props.ownerState,
          ownerState: props.ownerState
        });
        results.push(variant.style(mergedState));
      } else {
        results.push(variant.style);
      }
    }
    return results;
  }
  function createStyled3(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme5 = systemDefaultTheme2,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    function styleAttachTheme(props) {
      attachTheme(props, themeId, defaultTheme5);
    }
    const styled4 = (tag, inputOptions = {}) => {
      internal_mutateStyles(tag, (styles5) => styles5.filter((style4) => style4 !== styleFunctionSx_default));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver: overridesResolver3 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)),
        ...options
      } = inputOptions;
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = styled(tag, {
        shouldForwardProp: shouldForwardPropOption,
        label: generateStyledLabel(componentName, componentSlot),
        ...options
      });
      const transformStyle = (style4) => {
        if (typeof style4 === "function" && style4.__emotion_real !== style4) {
          return function styleFunctionProcessor(props) {
            return processStyle(props, style4);
          };
        }
        if (isPlainObject2(style4)) {
          const serialized = preprocessStyles(style4);
          if (!serialized.variants) {
            return serialized.style;
          }
          return function styleObjectProcessor(props) {
            return processStyle(props, serialized);
          };
        }
        return style4;
      };
      const muiStyledResolver = (...expressionsInput) => {
        const expressionsHead = [];
        const expressionsBody = expressionsInput.map(transformStyle);
        const expressionsTail = [];
        expressionsHead.push(styleAttachTheme);
        if (componentName && overridesResolver3) {
          expressionsTail.push(function styleThemeOverrides(props) {
            const theme2 = props.theme;
            const styleOverrides = theme2.components?.[componentName]?.styleOverrides;
            if (!styleOverrides) {
              return null;
            }
            const resolvedStyleOverrides = {};
            for (const slotKey in styleOverrides) {
              resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey]);
            }
            return overridesResolver3(props, resolvedStyleOverrides);
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsTail.push(function styleThemeVariants(props) {
            const theme2 = props.theme;
            const themeVariants = theme2?.components?.[componentName]?.variants;
            if (!themeVariants) {
              return null;
            }
            return processStyleVariants(props, themeVariants);
          });
        }
        if (!skipSx) {
          expressionsTail.push(styleFunctionSx_default);
        }
        if (Array.isArray(expressionsBody[0])) {
          const inputStrings = expressionsBody.shift();
          const placeholdersHead = new Array(expressionsHead.length).fill("");
          const placeholdersTail = new Array(expressionsTail.length).fill("");
          let outputStrings;
          {
            outputStrings = [...placeholdersHead, ...inputStrings, ...placeholdersTail];
            outputStrings.raw = [...placeholdersHead, ...inputStrings.raw, ...placeholdersTail];
          }
          expressionsHead.unshift(outputStrings);
        }
        const expressions = [...expressionsHead, ...expressionsBody, ...expressionsTail];
        const Component6 = defaultStyledResolver(...expressions);
        if (tag.muiName) {
          Component6.muiName = tag.muiName;
        }
        if (true) {
          Component6.displayName = generateDisplayName(componentName, componentSlot, tag);
        }
        return Component6;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
    return styled4;
  }
  function generateDisplayName(componentName, componentSlot, tag) {
    if (componentName) {
      return `${componentName}${capitalize2(componentSlot || "")}`;
    }
    return `Styled(${getDisplayName(tag)})`;
  }
  function generateStyledLabel(componentName, componentSlot) {
    let label;
    if (true) {
      if (componentName) {
        label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
      }
    }
    return label;
  }
  function isObjectEmpty2(object) {
    for (const _2 in object) {
      return false;
    }
    return true;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  function lowercaseFirstLetter(string) {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  }

  // react-user-mgmt/node_modules/@mui/system/esm/styled/styled.js
  var styled2 = createStyled3();
  var styled_default = styled2;

  // react-user-mgmt/node_modules/@mui/utils/esm/resolveProps/resolveProps.js
  function resolveProps(defaultProps2, props) {
    const output = {
      ...props
    };
    for (const key in defaultProps2) {
      if (Object.prototype.hasOwnProperty.call(defaultProps2, key)) {
        const propName = key;
        if (propName === "components" || propName === "slots") {
          output[propName] = {
            ...defaultProps2[propName],
            ...output[propName]
          };
        } else if (propName === "componentsProps" || propName === "slotProps") {
          const defaultSlotProps = defaultProps2[propName];
          const slotProps = props[propName];
          if (!slotProps) {
            output[propName] = defaultSlotProps || {};
          } else if (!defaultSlotProps) {
            output[propName] = slotProps;
          } else {
            output[propName] = {
              ...slotProps
            };
            for (const slotKey in defaultSlotProps) {
              if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
                const slotPropName = slotKey;
                output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
              }
            }
          }
        } else if (output[propName] === void 0) {
          output[propName] = defaultProps2[propName];
        }
      }
    }
    return output;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme: theme2,
      name,
      props
    } = params;
    if (!theme2 || !theme2.components || !theme2.components[name] || !theme2.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme2.components[name].defaultProps, props);
  }

  // react-user-mgmt/node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme5,
    themeId
  }) {
    let theme2 = useTheme_default(defaultTheme5);
    if (themeId) {
      theme2 = theme2[themeId] || theme2;
    }
    return getThemeProps({
      theme: theme2,
      name,
      props
    });
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
  var React12 = __toESM(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React12.useLayoutEffect : React12.useEffect;
  var useEnhancedEffect_default = useEnhancedEffect;

  // react-user-mgmt/node_modules/@mui/utils/esm/clamp/clamp.js
  function clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
    return Math.max(min, Math.min(val, max));
  }
  var clamp_default = clamp;

  // react-user-mgmt/node_modules/@mui/system/esm/colorManipulator/colorManipulator.js
  function clampWrapper(value, min = 0, max = 1) {
    if (true) {
      if (value < min || value > max) {
        console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
      }
    }
    return clamp_default(value, min, max);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re2 = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re2);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n2) => n2 + n2);
    }
    if (true) {
      if (color2.length !== color2.trim().length) {
        console.error(`MUI: The color: "${color2}" is invalid. Make sure the color input doesn't contain leading/trailing space.`);
      }
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n2, index) => {
      return index < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(type)) {
      throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color2));
    }
    let values3 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values3 = values3.split(" ");
      colorSpace = values3.shift();
      if (values3.length === 4 && values3[3].charAt(0) === "/") {
        values3[3] = values3[3].slice(1);
      }
      if (!["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(colorSpace)) {
        throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
      }
    } else {
      values3 = values3.split(",");
    }
    values3 = values3.map((value) => parseFloat(value));
    return {
      type,
      values: values3,
      colorSpace
    };
  }
  var colorChannel = (color2) => {
    const decomposedColor = decomposeColor(color2);
    return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes("hsl") && idx !== 0 ? `${val}%` : val).join(" ");
  };
  var private_safeColorChannel = (color2, warning) => {
    try {
      return colorChannel(color2);
    } catch (error) {
      if (warning && true) {
        console.warn(warning);
      }
      return color2;
    }
  };
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values3
    } = color2;
    if (type.includes("rgb")) {
      values3 = values3.map((n2, i2) => i2 < 3 ? parseInt(n2, 10) : n2);
    } else if (type.includes("hsl")) {
      values3[1] = `${values3[1]}%`;
      values3[2] = `${values3[2]}%`;
    }
    if (type.includes("color")) {
      values3 = `${colorSpace} ${values3.join(" ")}`;
    } else {
      values3 = `${values3.join(", ")}`;
    }
    return `${type}(${values3})`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values3
    } = color2;
    const h2 = values3[0];
    const s2 = values3[1] / 100;
    const l2 = values3[2] / 100;
    const a2 = s2 * Math.min(l2, 1 - l2);
    const f2 = (n2, k2 = (n2 + h2 / 30) % 12) => l2 - a2 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f2(0) * 255), Math.round(f2(8) * 255), Math.round(f2(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values3[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clampWrapper(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function private_safeAlpha(color2, value, warning) {
    try {
      return alpha(color2, value);
    } catch (error) {
      if (warning && true) {
        console.warn(warning);
      }
      return color2;
    }
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.includes("hsl")) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.includes("rgb") || color2.type.includes("color")) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function private_safeDarken(color2, coefficient, warning) {
    try {
      return darken(color2, coefficient);
    } catch (error) {
      if (warning && true) {
        console.warn(warning);
      }
      return color2;
    }
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.includes("hsl")) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.includes("rgb")) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (255 - color2.values[i2]) * coefficient;
      }
    } else if (color2.type.includes("color")) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (1 - color2.values[i2]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function private_safeLighten(color2, coefficient, warning) {
    try {
      return lighten(color2, coefficient);
    } catch (error) {
      if (warning && true) {
        console.warn(warning);
      }
      return color2;
    }
  }
  function emphasize(color2, coefficient = 0.15) {
    return getLuminance(color2) > 0.5 ? darken(color2, coefficient) : lighten(color2, coefficient);
  }
  function private_safeEmphasize(color2, coefficient, warning) {
    try {
      return emphasize(color2, coefficient);
    } catch (error) {
      if (warning && true) {
        console.warn(warning);
      }
      return color2;
    }
  }

  // react-user-mgmt/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var React26 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  var React23 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/utils/esm/elementAcceptingRef/elementAcceptingRef.js
  var import_prop_types4 = __toESM(require_prop_types());
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location2, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types4.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types4.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // react-user-mgmt/node_modules/@mui/utils/esm/elementTypeAcceptingRef/elementTypeAcceptingRef.js
  var import_prop_types5 = __toESM(require_prop_types());
  function isClassComponent2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location2, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types5.default.elementType, elementTypeAcceptingRef);

  // react-user-mgmt/node_modules/@mui/utils/esm/exactProp/exactProp.js
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return {
      ...propTypes,
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    };
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/HTMLElementType/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location2, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/refType/refType.js
  var import_prop_types6 = __toESM(require_prop_types());
  var refType = import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object]);
  var refType_default = refType;

  // react-user-mgmt/node_modules/@mui/utils/esm/createChainedFunction/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/debounce/debounce.js
  function debounce(func, wait = 166) {
    let timeout2;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/isMuiElement/isMuiElement.js
  var React13 = __toESM(require_react());
  function isMuiElement(element, muiNames) {
    return /* @__PURE__ */ React13.isValidElement(element) && muiNames.indexOf(
      // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      element.type.muiName ?? element.type?._payload?.value?.muiName
    ) !== -1;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/requirePropFactory/requirePropFactory.js
  function requirePropFactory(componentNameInError, Component6) {
    if (false) {
      return () => null;
    }
    const prevPropTypes = Component6 ? {
      ...Component6.propTypes
    } : null;
    const requireProp = (requiredProp) => (props, propName, componentName, location2, propFullName, ...args) => {
      const propFullNameSafe = propFullName || propName;
      const defaultTypeChecker = prevPropTypes?.[propFullNameSafe];
      if (defaultTypeChecker) {
        const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location2, propFullName, ...args);
        if (typeCheckerResult) {
          return typeCheckerResult;
        }
      }
      if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
        return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
      }
      return null;
    };
    return requireProp;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/setRef/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useId/useId.js
  var React14 = __toESM(require_react());
  var globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React14.useState(idOverride);
    const id = idOverride || defaultId;
    React14.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  var safeReact = {
    ...React14
  };
  var maybeReactUseId = safeReact.useId;
  function useId2(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride ?? reactId;
    }
    return useGlobalId(idOverride);
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/unsupportedProp/unsupportedProp.js
  function unsupportedProp(props, propName, componentName, location2, propFullName) {
    if (false) {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useControlled/useControlled.js
  var React15 = __toESM(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React15.useRef(controlled !== void 0);
    const [valueState, setValue] = React15.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React15.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React15.useRef(defaultProp);
      React15.useEffect(() => {
        if (!isControlled && !Object.is(defaultValue, defaultProp)) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React15.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
  var React16 = __toESM(require_react());
  function useEventCallback(fn) {
    const ref = React16.useRef(fn);
    useEnhancedEffect_default(() => {
      ref.current = fn;
    });
    return React16.useRef((...args) => (
      // @ts-expect-error hide `this`
      (0, ref.current)(...args)
    )).current;
  }
  var useEventCallback_default = useEventCallback;

  // react-user-mgmt/node_modules/@mui/utils/esm/useForkRef/useForkRef.js
  var React17 = __toESM(require_react());
  function useForkRef(...refs) {
    return React17.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
  var React18 = __toESM(require_react());
  var UNINITIALIZED = {};
  function useLazyRef(init, initArg) {
    const ref = React18.useRef(UNINITIALIZED);
    if (ref.current === UNINITIALIZED) {
      ref.current = init(initArg);
    }
    return ref;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useOnMount/useOnMount.js
  var React19 = __toESM(require_react());
  var EMPTY = [];
  function useOnMount(fn) {
    React19.useEffect(fn, EMPTY);
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/useTimeout/useTimeout.js
  var Timeout = class _Timeout {
    constructor() {
      __publicField(this, "currentId", null);
      __publicField(this, "clear", () => {
        if (this.currentId !== null) {
          clearTimeout(this.currentId);
          this.currentId = null;
        }
      });
      __publicField(this, "disposeEffect", () => {
        return this.clear;
      });
    }
    static create() {
      return new _Timeout();
    }
    /**
     * Executes `fn` after `delay`, clearing any previously scheduled call.
     */
    start(delay, fn) {
      this.clear();
      this.currentId = setTimeout(() => {
        this.currentId = null;
        fn();
      }, delay);
    }
  };
  function useTimeout() {
    const timeout2 = useLazyRef(Timeout.create).current;
    useOnMount(timeout2.disposeEffect);
    return timeout2;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/isFocusVisible/isFocusVisible.js
  function isFocusVisible(element) {
    try {
      return element.matches(":focus-visible");
    } catch (error) {
      if (!/jsdom/.test(window.navigator.userAgent)) {
        console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join("\n"));
      }
    }
    return false;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/getScrollbarSize/getScrollbarSize.js
  function getScrollbarSize(win = window) {
    const documentWidth = win.document.documentElement.clientWidth;
    return win.innerWidth - documentWidth;
  }

  // react-user-mgmt/node_modules/@mui/utils/esm/visuallyHidden/visuallyHidden.js
  var visuallyHidden = {
    border: 0,
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    whiteSpace: "nowrap",
    width: "1px"
  };
  var visuallyHidden_default = visuallyHidden;

  // react-user-mgmt/node_modules/@mui/utils/esm/integerPropType/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function requiredInteger(props, propName, componentName, location2) {
    const propValue = props[propName];
    if (propValue == null || !Number.isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location2} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  var integerPropType_default = false ? validatorNoop : validator;

  // react-user-mgmt/node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }
  var isHostComponent_default = isHostComponent;

  // react-user-mgmt/node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent_default(elementType)) {
      return otherProps;
    }
    return {
      ...otherProps,
      ownerState: {
        ...otherProps.ownerState,
        ...ownerState
      }
    };
  }
  var appendOwnerState_default = appendOwnerState;

  // react-user-mgmt/node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  var extractEventHandlers_default = extractEventHandlers;

  // react-user-mgmt/node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  var omitEventHandlers_default = omitEventHandlers;

  // react-user-mgmt/node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_default(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);
      const mergedStyle2 = {
        ...additionalProps?.style,
        ...externalForwardedProps?.style,
        ...externalSlotProps?.style
      };
      const props2 = {
        ...additionalProps,
        ...externalForwardedProps,
        ...externalSlotProps
      };
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers_default({
      ...externalForwardedProps,
      ...externalSlotProps
    });
    const componentsPropsWithoutEventHandlers = omitEventHandlers_default(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers_default(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_default(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);
    const mergedStyle = {
      ...internalSlotProps?.style,
      ...additionalProps?.style,
      ...externalForwardedProps?.style,
      ...externalSlotProps?.style
    };
    const props = {
      ...internalSlotProps,
      ...additionalProps,
      ...otherPropsWithoutEventHandlers,
      ...componentsPropsWithoutEventHandlers
    };
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }
  var mergeSlotProps_default = mergeSlotProps;

  // react-user-mgmt/node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }
  var resolveComponentProps_default = resolveComponentProps;

  // react-user-mgmt/node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
  function useSlotProps(parameters) {
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false,
      ...other
    } = parameters;
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps_default(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps_default({
      ...other,
      externalSlotProps: resolvedComponentsProps
    });
    const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);
    const props = appendOwnerState_default(elementType, {
      ...mergedProps,
      ref
    }, ownerState);
    return props;
  }
  var useSlotProps_default = useSlotProps;

  // react-user-mgmt/node_modules/@mui/utils/esm/getReactElementRef/getReactElementRef.js
  var React20 = __toESM(require_react());
  function getReactElementRef(element) {
    if (parseInt(React20.version, 10) >= 19) {
      return element?.props?.ref || null;
    }
    return element?.ref || null;
  }

  // react-user-mgmt/node_modules/@mui/private-theming/useTheme/ThemeContext.js
  var React21 = __toESM(require_react());
  var ThemeContext2 = /* @__PURE__ */ React21.createContext(null);
  if (true) {
    ThemeContext2.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext2;

  // react-user-mgmt/node_modules/@mui/private-theming/useTheme/useTheme.js
  var React22 = __toESM(require_react());
  function useTheme4() {
    const theme2 = React22.useContext(ThemeContext_default);
    if (true) {
      React22.useDebugValue(theme2);
    }
    return theme2;
  }

  // react-user-mgmt/node_modules/@mui/private-theming/ThemeProvider/nested.js
  var hasSymbol = typeof Symbol === "function" && Symbol.for;
  var nested_default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";

  // react-user-mgmt/node_modules/@mui/private-theming/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  function mergeOuterLocalTheme(outerTheme, localTheme) {
    if (typeof localTheme === "function") {
      const mergedTheme = localTheme(outerTheme);
      if (true) {
        if (!mergedTheme) {
          console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
        }
      }
      return mergedTheme;
    }
    return {
      ...outerTheme,
      ...localTheme
    };
  }
  function ThemeProvider2(props) {
    const {
      children,
      theme: localTheme
    } = props;
    const outerTheme = useTheme4();
    if (true) {
      if (outerTheme === null && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const theme2 = React23.useMemo(() => {
      const output = outerTheme === null ? {
        ...localTheme
      } : mergeOuterLocalTheme(outerTheme, localTheme);
      if (output != null) {
        output[nested_default] = outerTheme !== null;
      }
      return output;
    }, [localTheme, outerTheme]);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ThemeContext_default.Provider, {
      value: theme2,
      children
    });
  }
  true ? ThemeProvider2.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types7.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func]).isRequired
  } : void 0;
  if (true) {
    true ? ThemeProvider2.propTypes = exactProp(ThemeProvider2.propTypes) : void 0;
  }
  var ThemeProvider_default = ThemeProvider2;

  // react-user-mgmt/node_modules/@mui/system/esm/RtlProvider/index.js
  var React24 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var RtlContext = /* @__PURE__ */ React24.createContext();
  function RtlProvider({
    value,
    ...props
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(RtlContext.Provider, {
      value: value ?? true,
      ...props
    });
  }
  true ? RtlProvider.propTypes = {
    children: import_prop_types8.default.node,
    value: import_prop_types8.default.bool
  } : void 0;
  var useRtl = () => {
    const value = React24.useContext(RtlContext);
    return value ?? false;
  };
  var RtlProvider_default = RtlProvider;

  // react-user-mgmt/node_modules/@mui/system/esm/DefaultPropsProvider/DefaultPropsProvider.js
  var React25 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var PropsContext = /* @__PURE__ */ React25.createContext(void 0);
  function DefaultPropsProvider({
    value,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(PropsContext.Provider, {
      value,
      children
    });
  }
  true ? DefaultPropsProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types9.default.node,
    /**
     * @ignore
     */
    value: import_prop_types9.default.object
  } : void 0;
  function getThemeProps2(params) {
    const {
      theme: theme2,
      name,
      props
    } = params;
    if (!theme2 || !theme2.components || !theme2.components[name]) {
      return props;
    }
    const config = theme2.components[name];
    if (config.defaultProps) {
      return resolveProps(config.defaultProps, props);
    }
    if (!config.styleOverrides && !config.variants) {
      return resolveProps(config, props);
    }
    return props;
  }
  function useDefaultProps({
    props,
    name
  }) {
    const ctx = React25.useContext(PropsContext);
    return getThemeProps2({
      props,
      name,
      theme: {
        components: ctx
      }
    });
  }
  var DefaultPropsProvider_default = DefaultPropsProvider;

  // react-user-mgmt/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var EMPTY_THEME = {};
  function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
    return React26.useMemo(() => {
      const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(resolvedTheme);
        const result = themeId ? {
          ...upperTheme,
          [themeId]: mergedTheme
        } : mergedTheme;
        if (isPrivate) {
          return () => result;
        }
        return result;
      }
      return themeId ? {
        ...upperTheme,
        [themeId]: localTheme
      } : {
        ...upperTheme,
        ...localTheme
      };
    }, [themeId, upperTheme, localTheme, isPrivate]);
  }
  function ThemeProvider3(props) {
    const {
      children,
      theme: localTheme,
      themeId
    } = props;
    const upperTheme = useThemeWithoutDefault_default(EMPTY_THEME);
    const upperPrivateTheme = useTheme4() || EMPTY_THEME;
    if (true) {
      if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
        console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
      }
    }
    const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
    const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
    const rtlValue = (themeId ? engineTheme[themeId] : engineTheme).direction === "rtl";
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ThemeProvider_default, {
      theme: privateTheme,
      children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ThemeContext.Provider, {
        value: engineTheme,
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(RtlProvider_default, {
          value: rtlValue,
          children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(DefaultPropsProvider_default, {
            value: themeId ? engineTheme[themeId].components : engineTheme.components,
            children
          })
        })
      })
    });
  }
  true ? ThemeProvider3.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Your component tree.
     */
    children: import_prop_types10.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object]).isRequired,
    /**
     * The design system's unique id for getting the corresponded theme when there are multiple design systems.
     */
    themeId: import_prop_types10.default.string
  } : void 0;
  if (true) {
    true ? ThemeProvider3.propTypes = exactProp(ThemeProvider3.propTypes) : void 0;
  }
  var ThemeProvider_default2 = ThemeProvider3;

  // react-user-mgmt/node_modules/@mui/system/esm/memoTheme.js
  var arg = {
    theme: void 0
  };
  function unstable_memoTheme(styleFn) {
    let lastValue;
    let lastTheme;
    return function styleMemoized(props) {
      let value = lastValue;
      if (value === void 0 || props.theme !== lastTheme) {
        arg.theme = props.theme;
        value = preprocessStyles(styleFn(arg));
        lastValue = value;
        lastTheme = props.theme;
      }
      return value;
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js
  var React29 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/system/esm/InitColorSchemeScript/InitColorSchemeScript.js
  var React27 = __toESM(require_react());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var DEFAULT_MODE_STORAGE_KEY = "mode";
  var DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
  var DEFAULT_ATTRIBUTE = "data-color-scheme";
  function InitColorSchemeScript(options) {
    const {
      defaultMode = "system",
      defaultLightColorScheme = "light",
      defaultDarkColorScheme = "dark",
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      attribute: initialAttribute = DEFAULT_ATTRIBUTE,
      colorSchemeNode = "document.documentElement",
      nonce
    } = options || {};
    let setter = "";
    let attribute = initialAttribute;
    if (initialAttribute === "class") {
      attribute = ".%s";
    }
    if (initialAttribute === "data") {
      attribute = "[data-%s]";
    }
    if (attribute.startsWith(".")) {
      const selector = attribute.substring(1);
      setter += `${colorSchemeNode}.classList.remove('${selector}'.replace('%s', light), '${selector}'.replace('%s', dark));
      ${colorSchemeNode}.classList.add('${selector}'.replace('%s', colorScheme));`;
    }
    const matches = attribute.match(/\[([^\]]+)\]/);
    if (matches) {
      const [attr, value] = matches[1].split("=");
      if (!value) {
        setter += `${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', light));
      ${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', dark));`;
      }
      setter += `
      ${colorSchemeNode}.setAttribute('${attr}'.replace('%s', colorScheme), ${value ? `${value}.replace('%s', colorScheme)` : '""'});`;
    } else {
      setter += `${colorSchemeNode}.setAttribute('${attribute}', colorScheme);`;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("script", {
      suppressHydrationWarning: true,
      nonce: typeof window === "undefined" ? nonce : "",
      dangerouslySetInnerHTML: {
        __html: `(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  const dark = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  const light = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
    ${setter}
  }
} catch(e){}})();`
      }
    }, "mui-color-scheme-init");
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js
  var React28 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/localStorageManager.js
  function noop() {
  }
  var localStorageManager = ({
    key,
    storageWindow
  }) => {
    if (!storageWindow && typeof window !== "undefined") {
      storageWindow = window;
    }
    return {
      get(defaultValue) {
        if (typeof window === "undefined") {
          return void 0;
        }
        if (!storageWindow) {
          return defaultValue;
        }
        let value;
        try {
          value = storageWindow.localStorage.getItem(key);
        } catch {
        }
        return value || defaultValue;
      },
      set: (value) => {
        if (storageWindow) {
          try {
            storageWindow.localStorage.setItem(key, value);
          } catch {
          }
        }
      },
      subscribe: (handler) => {
        if (!storageWindow) {
          return noop;
        }
        const listener = (event) => {
          const value = event.newValue;
          if (event.key === key) {
            handler(value);
          }
        };
        storageWindow.addEventListener("storage", listener);
        return () => {
          storageWindow.removeEventListener("storage", listener);
        };
      }
    };
  };
  var localStorageManager_default = localStorageManager;

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js
  function noop2() {
  }
  function getSystemMode(mode) {
    if (typeof window !== "undefined" && typeof window.matchMedia === "function" && mode === "system") {
      const mql = window.matchMedia("(prefers-color-scheme: dark)");
      if (mql.matches) {
        return "dark";
      }
      return "light";
    }
    return void 0;
  }
  function processState(state, callback) {
    if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
      return callback("light");
    }
    if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
      return callback("dark");
    }
    return void 0;
  }
  function getColorScheme(state) {
    return processState(state, (mode) => {
      if (mode === "light") {
        return state.lightColorScheme;
      }
      if (mode === "dark") {
        return state.darkColorScheme;
      }
      return void 0;
    });
  }
  function useCurrentColorScheme(options) {
    const {
      defaultMode = "light",
      defaultLightColorScheme,
      defaultDarkColorScheme,
      supportedColorSchemes = [],
      modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      storageWindow = typeof window === "undefined" ? void 0 : window,
      storageManager = localStorageManager_default,
      noSsr = false
    } = options;
    const joinedColorSchemes = supportedColorSchemes.join(",");
    const isMultiSchemes = supportedColorSchemes.length > 1;
    const modeStorage = React28.useMemo(() => storageManager?.({
      key: modeStorageKey,
      storageWindow
    }), [storageManager, modeStorageKey, storageWindow]);
    const lightStorage = React28.useMemo(() => storageManager?.({
      key: `${colorSchemeStorageKey}-light`,
      storageWindow
    }), [storageManager, colorSchemeStorageKey, storageWindow]);
    const darkStorage = React28.useMemo(() => storageManager?.({
      key: `${colorSchemeStorageKey}-dark`,
      storageWindow
    }), [storageManager, colorSchemeStorageKey, storageWindow]);
    const [state, setState] = React28.useState(() => {
      const initialMode = modeStorage?.get(defaultMode) || defaultMode;
      const lightColorScheme = lightStorage?.get(defaultLightColorScheme) || defaultLightColorScheme;
      const darkColorScheme = darkStorage?.get(defaultDarkColorScheme) || defaultDarkColorScheme;
      return {
        mode: initialMode,
        systemMode: getSystemMode(initialMode),
        lightColorScheme,
        darkColorScheme
      };
    });
    const [isClient, setIsClient] = React28.useState(noSsr || !isMultiSchemes);
    React28.useEffect(() => {
      setIsClient(true);
    }, []);
    const colorScheme = getColorScheme(state);
    const setMode = React28.useCallback((mode) => {
      setState((currentState) => {
        if (mode === currentState.mode) {
          return currentState;
        }
        const newMode = mode ?? defaultMode;
        modeStorage?.set(newMode);
        return {
          ...currentState,
          mode: newMode,
          systemMode: getSystemMode(newMode)
        };
      });
    }, [modeStorage, defaultMode]);
    const setColorScheme = React28.useCallback((value) => {
      if (!value) {
        setState((currentState) => {
          lightStorage?.set(defaultLightColorScheme);
          darkStorage?.set(defaultDarkColorScheme);
          return {
            ...currentState,
            lightColorScheme: defaultLightColorScheme,
            darkColorScheme: defaultDarkColorScheme
          };
        });
      } else if (typeof value === "string") {
        if (value && !joinedColorSchemes.includes(value)) {
          console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
        } else {
          setState((currentState) => {
            const newState = {
              ...currentState
            };
            processState(currentState, (mode) => {
              if (mode === "light") {
                lightStorage?.set(value);
                newState.lightColorScheme = value;
              }
              if (mode === "dark") {
                darkStorage?.set(value);
                newState.darkColorScheme = value;
              }
            });
            return newState;
          });
        }
      } else {
        setState((currentState) => {
          const newState = {
            ...currentState
          };
          const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
          const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
          if (newLightColorScheme) {
            if (!joinedColorSchemes.includes(newLightColorScheme)) {
              console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.lightColorScheme = newLightColorScheme;
              lightStorage?.set(newLightColorScheme);
            }
          }
          if (newDarkColorScheme) {
            if (!joinedColorSchemes.includes(newDarkColorScheme)) {
              console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              newState.darkColorScheme = newDarkColorScheme;
              darkStorage?.set(newDarkColorScheme);
            }
          }
          return newState;
        });
      }
    }, [joinedColorSchemes, lightStorage, darkStorage, defaultLightColorScheme, defaultDarkColorScheme]);
    const handleMediaQuery = React28.useCallback((event) => {
      if (state.mode === "system") {
        setState((currentState) => {
          const systemMode = event?.matches ? "dark" : "light";
          if (currentState.systemMode === systemMode) {
            return currentState;
          }
          return {
            ...currentState,
            systemMode
          };
        });
      }
    }, [state.mode]);
    const mediaListener = React28.useRef(handleMediaQuery);
    mediaListener.current = handleMediaQuery;
    React28.useEffect(() => {
      if (typeof window.matchMedia !== "function" || !isMultiSchemes) {
        return void 0;
      }
      const handler = (...args) => mediaListener.current(...args);
      const media = window.matchMedia("(prefers-color-scheme: dark)");
      media.addListener(handler);
      handler(media);
      return () => {
        media.removeListener(handler);
      };
    }, [isMultiSchemes]);
    React28.useEffect(() => {
      if (isMultiSchemes) {
        const unsubscribeMode = modeStorage?.subscribe((value) => {
          if (!value || ["light", "dark", "system"].includes(value)) {
            setMode(value || defaultMode);
          }
        }) || noop2;
        const unsubscribeLight = lightStorage?.subscribe((value) => {
          if (!value || joinedColorSchemes.match(value)) {
            setColorScheme({
              light: value
            });
          }
        }) || noop2;
        const unsubscribeDark = darkStorage?.subscribe((value) => {
          if (!value || joinedColorSchemes.match(value)) {
            setColorScheme({
              dark: value
            });
          }
        }) || noop2;
        return () => {
          unsubscribeMode();
          unsubscribeLight();
          unsubscribeDark();
        };
      }
      return void 0;
    }, [setColorScheme, setMode, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes, modeStorage, lightStorage, darkStorage]);
    return {
      ...state,
      mode: isClient ? state.mode : void 0,
      systemMode: isClient ? state.systemMode : void 0,
      colorScheme: isClient ? colorScheme : void 0,
      setMode,
      setColorScheme
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
  function createCssVarsProvider(options) {
    const {
      themeId,
      /**
       * This `theme` object needs to follow a certain structure to
       * be used correctly by the finel `CssVarsProvider`. It should have a
       * `colorSchemes` key with the light and dark (and any other) palette.
       * It should also ideally have a vars object created using `prepareCssVars`.
       */
      theme: defaultTheme5 = {},
      modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,
      colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
      disableTransitionOnChange: designSystemTransitionOnChange = false,
      defaultColorScheme,
      resolveTheme
    } = options;
    const defaultContext = {
      allColorSchemes: [],
      colorScheme: void 0,
      darkColorScheme: void 0,
      lightColorScheme: void 0,
      mode: void 0,
      setColorScheme: () => {
      },
      setMode: () => {
      },
      systemMode: void 0
    };
    const ColorSchemeContext = /* @__PURE__ */ React29.createContext(void 0);
    if (true) {
      ColorSchemeContext.displayName = "ColorSchemeContext";
    }
    const useColorScheme2 = () => React29.useContext(ColorSchemeContext) || defaultContext;
    const defaultColorSchemes = {};
    const defaultComponents = {};
    function CssVarsProvider2(props) {
      const {
        children,
        theme: themeProp,
        modeStorageKey = defaultModeStorageKey,
        colorSchemeStorageKey = defaultColorSchemeStorageKey,
        disableTransitionOnChange = designSystemTransitionOnChange,
        storageManager,
        storageWindow = typeof window === "undefined" ? void 0 : window,
        documentNode = typeof document === "undefined" ? void 0 : document,
        colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
        disableNestedContext = false,
        disableStyleSheetGeneration = false,
        defaultMode: initialMode = "system",
        noSsr
      } = props;
      const hasMounted = React29.useRef(false);
      const upperTheme = useTheme4();
      const ctx = React29.useContext(ColorSchemeContext);
      const nested = !!ctx && !disableNestedContext;
      const initialTheme = React29.useMemo(() => {
        if (themeProp) {
          return themeProp;
        }
        return typeof defaultTheme5 === "function" ? defaultTheme5() : defaultTheme5;
      }, [themeProp]);
      const scopedTheme = initialTheme[themeId];
      const restThemeProp = scopedTheme || initialTheme;
      const {
        colorSchemes = defaultColorSchemes,
        components = defaultComponents,
        cssVarPrefix
      } = restThemeProp;
      const joinedColorSchemes = Object.keys(colorSchemes).filter((k2) => !!colorSchemes[k2]).join(",");
      const allColorSchemes = React29.useMemo(() => joinedColorSchemes.split(","), [joinedColorSchemes]);
      const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
      const defaultMode = colorSchemes[defaultLightColorScheme2] && colorSchemes[defaultDarkColorScheme2] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;
      const {
        mode: stateMode,
        setMode,
        systemMode,
        lightColorScheme,
        darkColorScheme,
        colorScheme: stateColorScheme,
        setColorScheme
      } = useCurrentColorScheme({
        supportedColorSchemes: allColorSchemes,
        defaultLightColorScheme: defaultLightColorScheme2,
        defaultDarkColorScheme: defaultDarkColorScheme2,
        modeStorageKey,
        colorSchemeStorageKey,
        defaultMode,
        storageManager,
        storageWindow,
        noSsr
      });
      let mode = stateMode;
      let colorScheme = stateColorScheme;
      if (nested) {
        mode = ctx.mode;
        colorScheme = ctx.colorScheme;
      }
      const memoTheme2 = React29.useMemo(() => {
        const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;
        const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;
        const theme2 = {
          ...restThemeProp,
          components,
          colorSchemes,
          cssVarPrefix,
          vars: themeVars
        };
        if (typeof theme2.generateSpacing === "function") {
          theme2.spacing = theme2.generateSpacing();
        }
        if (calculatedColorScheme) {
          const scheme = colorSchemes[calculatedColorScheme];
          if (scheme && typeof scheme === "object") {
            Object.keys(scheme).forEach((schemeKey) => {
              if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
                theme2[schemeKey] = {
                  ...theme2[schemeKey],
                  ...scheme[schemeKey]
                };
              } else {
                theme2[schemeKey] = scheme[schemeKey];
              }
            });
          }
        }
        return resolveTheme ? resolveTheme(theme2) : theme2;
      }, [restThemeProp, colorScheme, components, colorSchemes, cssVarPrefix]);
      const colorSchemeSelector = restThemeProp.colorSchemeSelector;
      useEnhancedEffect_default(() => {
        if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== "media") {
          const selector = colorSchemeSelector;
          let rule = colorSchemeSelector;
          if (selector === "class") {
            rule = `.%s`;
          }
          if (selector === "data") {
            rule = `[data-%s]`;
          }
          if (selector?.startsWith("data-") && !selector.includes("%s")) {
            rule = `[${selector}="%s"]`;
          }
          if (rule.startsWith(".")) {
            colorSchemeNode.classList.remove(...allColorSchemes.map((scheme) => rule.substring(1).replace("%s", scheme)));
            colorSchemeNode.classList.add(rule.substring(1).replace("%s", colorScheme));
          } else {
            const matches = rule.replace("%s", colorScheme).match(/\[([^\]]+)\]/);
            if (matches) {
              const [attr, value] = matches[1].split("=");
              if (!value) {
                allColorSchemes.forEach((scheme) => {
                  colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));
                });
              }
              colorSchemeNode.setAttribute(attr, value ? value.replace(/"|'/g, "") : "");
            } else {
              colorSchemeNode.setAttribute(rule, colorScheme);
            }
          }
        }
      }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);
      React29.useEffect(() => {
        let timer;
        if (disableTransitionOnChange && hasMounted.current && documentNode) {
          const css2 = documentNode.createElement("style");
          css2.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
          documentNode.head.appendChild(css2);
          (() => window.getComputedStyle(documentNode.body))();
          timer = setTimeout(() => {
            documentNode.head.removeChild(css2);
          }, 1);
        }
        return () => {
          clearTimeout(timer);
        };
      }, [colorScheme, disableTransitionOnChange, documentNode]);
      React29.useEffect(() => {
        hasMounted.current = true;
        return () => {
          hasMounted.current = false;
        };
      }, []);
      const contextValue = React29.useMemo(() => ({
        allColorSchemes,
        colorScheme,
        darkColorScheme,
        lightColorScheme,
        mode,
        setColorScheme,
        setMode: false ? setMode : (newMode) => {
          if (memoTheme2.colorSchemeSelector === "media") {
            console.error(["MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).", "To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.", "To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually"].join("\n"));
          }
          setMode(newMode);
        },
        systemMode
      }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme2.colorSchemeSelector]);
      let shouldGenerateStyleSheet = true;
      if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {
        shouldGenerateStyleSheet = false;
      }
      const element = /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(React29.Fragment, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ThemeProvider_default2, {
          themeId: scopedTheme ? themeId : void 0,
          theme: memoTheme2,
          children
        }), shouldGenerateStyleSheet && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GlobalStyles, {
          styles: memoTheme2.generateStyleSheets?.() || []
        })]
      });
      if (nested) {
        return element;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ColorSchemeContext.Provider, {
        value: contextValue,
        children: element
      });
    }
    true ? CssVarsProvider2.propTypes = {
      /**
       * The component tree.
       */
      children: import_prop_types11.default.node,
      /**
       * The node used to attach the color-scheme attribute
       */
      colorSchemeNode: import_prop_types11.default.any,
      /**
       * localStorage key used to store `colorScheme`
       */
      colorSchemeStorageKey: import_prop_types11.default.string,
      /**
       * The default mode when the storage is empty,
       * require the theme to have `colorSchemes` with light and dark.
       */
      defaultMode: import_prop_types11.default.string,
      /**
       * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
       */
      disableNestedContext: import_prop_types11.default.bool,
      /**
       * If `true`, the style sheet won't be generated.
       *
       * This is useful for controlling nested CssVarsProvider behavior.
       */
      disableStyleSheetGeneration: import_prop_types11.default.bool,
      /**
       * Disable CSS transitions when switching between modes or color schemes.
       */
      disableTransitionOnChange: import_prop_types11.default.bool,
      /**
       * The document to attach the attribute to.
       */
      documentNode: import_prop_types11.default.any,
      /**
       * The key in the local storage used to store current color scheme.
       */
      modeStorageKey: import_prop_types11.default.string,
      /**
       * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.
       * You should use this option in conjuction with `InitColorSchemeScript` component.
       */
      noSsr: import_prop_types11.default.bool,
      /**
       * The storage manager to be used for storing the mode and color scheme
       * @default using `window.localStorage`
       */
      storageManager: import_prop_types11.default.func,
      /**
       * The window that attaches the 'storage' event listener.
       * @default window
       */
      storageWindow: import_prop_types11.default.any,
      /**
       * The calculated theme object that will be passed through context.
       */
      theme: import_prop_types11.default.object
    } : void 0;
    const defaultLightColorScheme = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
    const defaultDarkColorScheme = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
    const getInitColorSchemeScript = (params) => InitColorSchemeScript({
      colorSchemeStorageKey: defaultColorSchemeStorageKey,
      defaultLightColorScheme,
      defaultDarkColorScheme,
      modeStorageKey: defaultModeStorageKey,
      ...params
    });
    return {
      CssVarsProvider: CssVarsProvider2,
      useColorScheme: useColorScheme2,
      getInitColorSchemeScript
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/createGetCssVar.js
  function createGetCssVar(prefix2 = "") {
    function appendVar(...vars) {
      if (!vars.length) {
        return "";
      }
      const value = vars[0];
      if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
        return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
      }
      return `, ${value}`;
    }
    const getCssVar = (field, ...fallbacks) => {
      return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
    };
    return getCssVar;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/cssVarsParser.js
  var assignNestedKeys = (obj, keys2, value, arrayKeys = []) => {
    let temp = obj;
    keys2.forEach((k2, index) => {
      if (index === keys2.length - 1) {
        if (Array.isArray(temp)) {
          temp[Number(k2)] = value;
        } else if (temp && typeof temp === "object") {
          temp[k2] = value;
        }
      } else if (temp && typeof temp === "object") {
        if (!temp[k2]) {
          temp[k2] = arrayKeys.includes(k2) ? [] : {};
        }
        temp = temp[k2];
      }
    });
  };
  var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
    function recurse(object, parentKeys = [], arrayKeys = []) {
      Object.entries(object).forEach(([key, value]) => {
        if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
          if (value !== void 0 && value !== null) {
            if (typeof value === "object" && Object.keys(value).length > 0) {
              recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
            } else {
              callback([...parentKeys, key], value, arrayKeys);
            }
          }
        }
      });
    }
    recurse(obj);
  };
  var getCssValue = (keys2, value) => {
    if (typeof value === "number") {
      if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys2.includes(prop))) {
        return value;
      }
      const lastKey = keys2[keys2.length - 1];
      if (lastKey.toLowerCase().includes("opacity")) {
        return value;
      }
      return `${value}px`;
    }
    return value;
  };
  function cssVarsParser(theme2, options) {
    const {
      prefix: prefix2,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    } = options || {};
    const css2 = {};
    const vars = {};
    const varsWithDefaults = {};
    walkObjectDeep(
      theme2,
      (keys2, value, arrayKeys) => {
        if (typeof value === "string" || typeof value === "number") {
          if (!shouldSkipGeneratingVar2 || !shouldSkipGeneratingVar2(keys2, value)) {
            const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys2.join("-")}`;
            const resolvedValue = getCssValue(keys2, value);
            Object.assign(css2, {
              [cssVar]: resolvedValue
            });
            assignNestedKeys(vars, keys2, `var(${cssVar})`, arrayKeys);
            assignNestedKeys(varsWithDefaults, keys2, `var(${cssVar}, ${resolvedValue})`, arrayKeys);
          }
        }
      },
      (keys2) => keys2[0] === "vars"
      // skip 'vars/*' paths
    );
    return {
      css: css2,
      vars,
      varsWithDefaults
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/prepareCssVars.js
  function prepareCssVars(theme2, parserConfig = {}) {
    const {
      getSelector = defaultGetSelector,
      disableCssColorScheme,
      colorSchemeSelector: selector
    } = parserConfig;
    const {
      colorSchemes = {},
      components,
      defaultColorScheme = "light",
      ...otherTheme
    } = theme2;
    const {
      vars: rootVars,
      css: rootCss,
      varsWithDefaults: rootVarsWithDefaults
    } = cssVarsParser(otherTheme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {};
    const {
      [defaultColorScheme]: defaultScheme,
      ...otherColorSchemes
    } = colorSchemes;
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
      const {
        vars,
        css: css2,
        varsWithDefaults
      } = cssVarsParser(scheme, parserConfig);
      themeVars = deepmerge(themeVars, varsWithDefaults);
      colorSchemesMap[key] = {
        css: css2,
        vars
      };
    });
    if (defaultScheme) {
      const {
        css: css2,
        vars,
        varsWithDefaults
      } = cssVarsParser(defaultScheme, parserConfig);
      themeVars = deepmerge(themeVars, varsWithDefaults);
      colorSchemesMap[defaultColorScheme] = {
        css: css2,
        vars
      };
    }
    function defaultGetSelector(colorScheme, cssObject) {
      let rule = selector;
      if (selector === "class") {
        rule = ".%s";
      }
      if (selector === "data") {
        rule = "[data-%s]";
      }
      if (selector?.startsWith("data-") && !selector.includes("%s")) {
        rule = `[${selector}="%s"]`;
      }
      if (colorScheme) {
        if (rule === "media") {
          if (theme2.defaultColorScheme === colorScheme) {
            return ":root";
          }
          const mode = colorSchemes[colorScheme]?.palette?.mode || colorScheme;
          return {
            [`@media (prefers-color-scheme: ${mode})`]: {
              ":root": cssObject
            }
          };
        }
        if (rule) {
          if (theme2.defaultColorScheme === colorScheme) {
            return `:root, ${rule.replace("%s", String(colorScheme))}`;
          }
          return rule.replace("%s", String(colorScheme));
        }
      }
      return ":root";
    }
    const generateThemeVars = () => {
      let vars = {
        ...rootVars
      };
      Object.entries(colorSchemesMap).forEach(([, {
        vars: schemeVars
      }]) => {
        vars = deepmerge(vars, schemeVars);
      });
      return vars;
    };
    const generateStyleSheets = () => {
      const stylesheets = [];
      const colorScheme = theme2.defaultColorScheme || "light";
      function insertStyleSheet(key, css2) {
        if (Object.keys(css2).length) {
          stylesheets.push(typeof key === "string" ? {
            [key]: {
              ...css2
            }
          } : key);
        }
      }
      insertStyleSheet(getSelector(void 0, {
        ...rootCss
      }), rootCss);
      const {
        [colorScheme]: defaultSchemeVal,
        ...other
      } = colorSchemesMap;
      if (defaultSchemeVal) {
        const {
          css: css2
        } = defaultSchemeVal;
        const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;
        const finalCss = !disableCssColorScheme && cssColorSheme ? {
          colorScheme: cssColorSheme,
          ...css2
        } : {
          ...css2
        };
        insertStyleSheet(getSelector(colorScheme, {
          ...finalCss
        }), finalCss);
      }
      Object.entries(other).forEach(([key, {
        css: css2
      }]) => {
        const cssColorSheme = colorSchemes[key]?.palette?.mode;
        const finalCss = !disableCssColorScheme && cssColorSheme ? {
          colorScheme: cssColorSheme,
          ...css2
        } : {
          ...css2
        };
        insertStyleSheet(getSelector(key, {
          ...finalCss
        }), finalCss);
      });
      return stylesheets;
    };
    return {
      vars: themeVars,
      generateThemeVars,
      generateStyleSheets
    };
  }
  var prepareCssVars_default = prepareCssVars;

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/getColorSchemeSelector.js
  function createGetColorSchemeSelector(selector) {
    return function getColorSchemeSelector(colorScheme) {
      if (selector === "media") {
        if (true) {
          if (colorScheme !== "light" && colorScheme !== "dark") {
            console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${colorScheme}'.`);
          }
        }
        return `@media (prefers-color-scheme: ${colorScheme})`;
      }
      if (selector) {
        if (selector.startsWith("data-") && !selector.includes("%s")) {
          return `[${selector}="${colorScheme}"] &`;
        }
        if (selector === "class") {
          return `.${colorScheme} &`;
        }
        if (selector === "data") {
          return `[data-${colorScheme}] &`;
        }
        return `${selector.replace("%s", colorScheme)} &`;
      }
      return "&";
    };
  }

  // react-user-mgmt/node_modules/@mui/system/esm/Container/createContainer.js
  var React30 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var defaultTheme = createTheme_default();
  var defaultCreateStyledComponent = styled_default("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`maxWidth${capitalize2(String(ownerState.maxWidth))}`], ownerState.fixed && styles5.fixed, ownerState.disableGutters && styles5.disableGutters];
    }
  });
  var useThemePropsDefault = (inProps) => useThemeProps({
    props: inProps,
    name: "MuiContainer",
    defaultTheme
  });
  var useUtilityClasses = (ownerState, componentName) => {
    const getContainerUtilityClass = (slot) => {
      return generateUtilityClass(componentName, slot);
    };
    const {
      classes,
      fixed,
      disableGutters,
      maxWidth: maxWidth2
    } = ownerState;
    const slots = {
      root: ["root", maxWidth2 && `maxWidth${capitalize2(String(maxWidth2))}`, fixed && "fixed", disableGutters && "disableGutters"]
    };
    return composeClasses(slots, getContainerUtilityClass, classes);
  };
  function createContainer(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps2 = useThemePropsDefault,
      componentName = "MuiContainer"
    } = options;
    const ContainerRoot = createStyledComponent(({
      theme: theme2,
      ownerState
    }) => ({
      width: "100%",
      marginLeft: "auto",
      boxSizing: "border-box",
      marginRight: "auto",
      ...!ownerState.disableGutters && {
        paddingLeft: theme2.spacing(2),
        paddingRight: theme2.spacing(2),
        // @ts-ignore module augmentation fails if custom breakpoints are used
        [theme2.breakpoints.up("sm")]: {
          paddingLeft: theme2.spacing(3),
          paddingRight: theme2.spacing(3)
        }
      }
    }), ({
      theme: theme2,
      ownerState
    }) => ownerState.fixed && Object.keys(theme2.breakpoints.values).reduce((acc, breakpointValueKey) => {
      const breakpoint = breakpointValueKey;
      const value = theme2.breakpoints.values[breakpoint];
      if (value !== 0) {
        acc[theme2.breakpoints.up(breakpoint)] = {
          maxWidth: `${value}${theme2.breakpoints.unit}`
        };
      }
      return acc;
    }, {}), ({
      theme: theme2,
      ownerState
    }) => ({
      // @ts-ignore module augmentation fails if custom breakpoints are used
      ...ownerState.maxWidth === "xs" && {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        [theme2.breakpoints.up("xs")]: {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          maxWidth: Math.max(theme2.breakpoints.values.xs, 444)
        }
      },
      ...ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
      ownerState.maxWidth !== "xs" && {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        [theme2.breakpoints.up(ownerState.maxWidth)]: {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          maxWidth: `${theme2.breakpoints.values[ownerState.maxWidth]}${theme2.breakpoints.unit}`
        }
      }
    }));
    const Container2 = /* @__PURE__ */ React30.forwardRef(function Container3(inProps, ref) {
      const props = useThemeProps2(inProps);
      const {
        className,
        component = "div",
        disableGutters = false,
        fixed = false,
        maxWidth: maxWidth2 = "lg",
        classes: classesProp,
        ...other
      } = props;
      const ownerState = {
        ...props,
        component,
        disableGutters,
        fixed,
        maxWidth: maxWidth2
      };
      const classes = useUtilityClasses(ownerState, componentName);
      return (
        // @ts-ignore theme is injected by the styled util
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ContainerRoot, {
          as: component,
          ownerState,
          className: clsx_default(classes.root, className),
          ref,
          ...other
        })
      );
    });
    true ? Container2.propTypes = {
      children: import_prop_types12.default.node,
      classes: import_prop_types12.default.object,
      className: import_prop_types12.default.string,
      component: import_prop_types12.default.elementType,
      disableGutters: import_prop_types12.default.bool,
      fixed: import_prop_types12.default.bool,
      maxWidth: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types12.default.string]),
      sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object])
    } : void 0;
    return Container2;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/Stack/createStack.js
  var React31 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var defaultTheme2 = createTheme_default();
  var defaultCreateStyledComponent2 = styled_default("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  });
  function useThemePropsDefault2(props) {
    return useThemeProps({
      props,
      name: "MuiStack",
      defaultTheme: defaultTheme2
    });
  }
  function joinChildren(children, separator) {
    const childrenArray = React31.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index) => {
      output.push(child);
      if (index < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React31.cloneElement(separator, {
          key: `separator-${index}`
        }));
      }
      return output;
    }, []);
  }
  var getSideFromDirection = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  var style3 = ({
    ownerState,
    theme: theme2
  }) => {
    let styles5 = {
      display: "flex",
      flexDirection: "column",
      ...handleBreakpoints({
        theme: theme2
      }, resolveBreakpointValues({
        values: ownerState.direction,
        breakpoints: theme2.breakpoints.values
      }), (propValue) => ({
        flexDirection: propValue
      }))
    };
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme2);
      const base = Object.keys(theme2.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        if (ownerState.useFlexGap) {
          return {
            gap: getValue(transformer, propValue)
          };
        }
        return {
          // The useFlexGap={false} implement relies on each child to give up control of the margin.
          // We need to reset the margin to avoid double spacing.
          "& > :not(style):not(style)": {
            margin: 0
          },
          "& > :not(style) ~ :not(style)": {
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles5 = deepmerge(styles5, handleBreakpoints({
        theme: theme2
      }, spacingValues, styleFromPropValue));
    }
    styles5 = mergeBreakpointsInOrder(theme2.breakpoints, styles5);
    return styles5;
  };
  function createStack(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent2,
      useThemeProps: useThemeProps2 = useThemePropsDefault2,
      componentName = "MuiStack"
    } = options;
    const useUtilityClasses55 = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const StackRoot = createStyledComponent(style3);
    const Stack4 = /* @__PURE__ */ React31.forwardRef(function Grid4(inProps, ref) {
      const themeProps = useThemeProps2(inProps);
      const props = extendSxProp(themeProps);
      const {
        component = "div",
        direction = "column",
        spacing: spacing2 = 0,
        divider,
        children,
        className,
        useFlexGap = false,
        ...other
      } = props;
      const ownerState = {
        direction,
        spacing: spacing2,
        useFlexGap
      };
      const classes = useUtilityClasses55();
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(StackRoot, {
        as: component,
        ownerState,
        ref,
        className: clsx_default(classes.root, className),
        ...other,
        children: divider ? joinChildren(children, divider) : children
      });
    });
    true ? Stack4.propTypes = {
      children: import_prop_types13.default.node,
      direction: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types13.default.arrayOf(import_prop_types13.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types13.default.object]),
      divider: import_prop_types13.default.node,
      spacing: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string])), import_prop_types13.default.number, import_prop_types13.default.object, import_prop_types13.default.string]),
      sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object])
    } : void 0;
    return Stack4;
  }

  // react-user-mgmt/node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // react-user-mgmt/node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // react-user-mgmt/node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // react-user-mgmt/node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // react-user-mgmt/node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // react-user-mgmt/node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // react-user-mgmt/node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // react-user-mgmt/node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // react-user-mgmt/node_modules/@mui/material/styles/createPalette.js
  function getLight() {
    return {
      // The colors used to style the text.
      text: {
        // The most important text.
        primary: "rgba(0, 0, 0, 0.87)",
        // Secondary text.
        secondary: "rgba(0, 0, 0, 0.6)",
        // Disabled text have even lower visual prominence.
        disabled: "rgba(0, 0, 0, 0.38)"
      },
      // The color used to divide different elements.
      divider: "rgba(0, 0, 0, 0.12)",
      // The background colors used to style the surfaces.
      // Consistency between these values is important.
      background: {
        paper: common_default.white,
        default: common_default.white
      },
      // The colors used to style the action elements.
      action: {
        // The color of an active action like an icon button.
        active: "rgba(0, 0, 0, 0.54)",
        // The color of an hovered action.
        hover: "rgba(0, 0, 0, 0.04)",
        hoverOpacity: 0.04,
        // The color of a selected action.
        selected: "rgba(0, 0, 0, 0.08)",
        selectedOpacity: 0.08,
        // The color of a disabled action.
        disabled: "rgba(0, 0, 0, 0.26)",
        // The background color of a disabled action.
        disabledBackground: "rgba(0, 0, 0, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(0, 0, 0, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
  }
  var light = getLight();
  function getDark() {
    return {
      text: {
        primary: common_default.white,
        secondary: "rgba(255, 255, 255, 0.7)",
        disabled: "rgba(255, 255, 255, 0.5)",
        icon: "rgba(255, 255, 255, 0.5)"
      },
      divider: "rgba(255, 255, 255, 0.12)",
      background: {
        paper: "#121212",
        default: "#121212"
      },
      action: {
        active: common_default.white,
        hover: "rgba(255, 255, 255, 0.08)",
        hoverOpacity: 0.08,
        selected: "rgba(255, 255, 255, 0.16)",
        selectedOpacity: 0.16,
        disabled: "rgba(255, 255, 255, 0.3)",
        disabledBackground: "rgba(255, 255, 255, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(255, 255, 255, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };
  }
  var dark = getDark();
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2,
      ...other
    } = palette2;
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = {
        ...color2
      };
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    let modeHydrated;
    if (mode === "light") {
      modeHydrated = getLight();
    } else if (mode === "dark") {
      modeHydrated = getDark();
    }
    if (true) {
      if (!modeHydrated) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge({
      // A collection of common colors.
      common: {
        ...common_default
      },
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset,
      // The light and dark mode object.
      ...modeHydrated
    }, other);
    return paletteOutput;
  }

  // react-user-mgmt/node_modules/@mui/system/esm/cssVars/prepareTypographyVars.js
  function prepareTypographyVars(typography) {
    const vars = {};
    const entries = Object.entries(typography);
    entries.forEach((entry) => {
      const [key, value] = entry;
      if (typeof value === "object") {
        vars[key] = `${value.fontStyle ? `${value.fontStyle} ` : ""}${value.fontVariant ? `${value.fontVariant} ` : ""}${value.fontWeight ? `${value.fontWeight} ` : ""}${value.fontStretch ? `${value.fontStretch} ` : ""}${value.fontSize || ""}${value.lineHeight ? `/${value.lineHeight} ` : ""}${value.fontFamily || ""}`;
      }
    });
    return vars;
  }

  // react-user-mgmt/node_modules/@mui/material/styles/createMixins.js
  function createMixins(breakpoints, mixins) {
    return {
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      },
      ...mixins
    };
  }

  // react-user-mgmt/node_modules/@mui/material/styles/createTypography.js
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography) {
    const {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2,
      ...other
    } = typeof typography === "function" ? typography(palette2) : typography;
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight,
      // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
      // across font-families can cause issues with the kerning.
      ...fontFamily === defaultFontFamily ? {
        letterSpacing: `${round(letterSpacing / size)}em`
      } : {},
      ...casing,
      ...allVariants
    });
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return deepmerge({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold,
      ...variants
    }, other, {
      clone: false
      // No need to clone deep
    });
  }

  // react-user-mgmt/node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // react-user-mgmt/node_modules/@mui/material/styles/createTransitions.js
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant2 = height2 / 36;
    return Math.min(Math.round((4 + 15 * constant2 ** 0.25 + constant2 / 5) * 10), 3e3);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = {
      ...easing,
      ...inputTransitions.easing
    };
    const mergedDuration = {
      ...duration,
      ...inputTransitions.duration
    };
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0,
        ...other
      } = options;
      if (true) {
        const isString3 = (value) => typeof value === "string";
        const isNumber2 = (value) => !Number.isNaN(parseFloat(value));
        if (!isString3(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString3(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString3(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString3(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return {
      getAutoHeightDuration,
      create,
      ...inputTransitions,
      easing: mergedEasing,
      duration: mergedDuration
    };
  }

  // react-user-mgmt/node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // react-user-mgmt/node_modules/@mui/material/styles/stringifyTheme.js
  function isSerializable(val) {
    return isPlainObject2(val) || typeof val === "undefined" || typeof val === "string" || typeof val === "boolean" || typeof val === "number" || Array.isArray(val);
  }
  function stringifyTheme(baseTheme = {}) {
    const serializableTheme = {
      ...baseTheme
    };
    function serializeTheme(object) {
      const array = Object.entries(object);
      for (let index = 0; index < array.length; index++) {
        const [key, value] = array[index];
        if (!isSerializable(value) || key.startsWith("unstable_")) {
          delete object[key];
        } else if (isPlainObject2(value)) {
          object[key] = {
            ...value
          };
          serializeTheme(object[key]);
        }
      }
    }
    serializeTheme(serializableTheme);
    return `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(serializableTheme, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
  }

  // react-user-mgmt/node_modules/@mui/material/styles/createThemeNoVars.js
  function createThemeNoVars(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput,
      mixins: mixinsInput = {},
      spacing: spacingInput,
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {},
      shape: shapeInput,
      ...other
    } = options;
    if (options.vars && // The error should throw only for the root theme creation because user is not allowed to use a custom node `vars`.
    // `generateThemeVars` is the closest identifier for checking that the `options` is a result of `createTheme` with CSS variables so that user can create new theme for nested ThemeProvider.
    options.generateThemeVars === void 0) {
      throw new Error(true ? "MUI: `vars` is a private field used for CSS variables support.\nPlease use another name or follow the [docs](https://mui.com/material-ui/customization/css-theme-variables/usage/) to enable the feature." : formatMuiErrorMessage(20));
    }
    const palette2 = createPalette(paletteInput);
    const systemTheme = createTheme_default(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette2,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: {
        ...zIndex_default
      }
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.includes(key) && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.startsWith("Mui")) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = {
      ...defaultSxConfig_default,
      ...other?.unstable_sxConfig
    };
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    muiTheme.toRuntimeSource = stringifyTheme;
    return muiTheme;
  }
  var createThemeNoVars_default = createThemeNoVars;

  // react-user-mgmt/node_modules/@mui/material/styles/getOverlayAlpha.js
  function getOverlayAlpha(elevation) {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return Math.round(alphaValue * 10) / 1e3;
  }

  // react-user-mgmt/node_modules/@mui/material/styles/createColorScheme.js
  var defaultDarkOverlays = [...Array(25)].map((_2, index) => {
    if (index === 0) {
      return "none";
    }
    const overlay = getOverlayAlpha(index);
    return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
  });
  function getOpacity(mode) {
    return {
      inputPlaceholder: mode === "dark" ? 0.5 : 0.42,
      inputUnderline: mode === "dark" ? 0.7 : 0.42,
      switchTrackDisabled: mode === "dark" ? 0.2 : 0.12,
      switchTrack: mode === "dark" ? 0.3 : 0.38
    };
  }
  function getOverlays(mode) {
    return mode === "dark" ? defaultDarkOverlays : [];
  }
  function createColorScheme(options) {
    const {
      palette: paletteInput = {
        mode: "light"
      },
      // need to cast to avoid module augmentation test
      opacity,
      overlays,
      ...rest
    } = options;
    const palette2 = createPalette(paletteInput);
    return {
      palette: palette2,
      opacity: {
        ...getOpacity(palette2.mode),
        ...opacity
      },
      overlays: overlays || getOverlays(palette2.mode),
      ...rest
    };
  }

  // react-user-mgmt/node_modules/@mui/material/styles/shouldSkipGeneratingVar.js
  function shouldSkipGeneratingVar(keys2) {
    return !!keys2[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!keys2[0].match(/sxConfig$/) || // ends with sxConfig
    keys2[0] === "palette" && !!keys2[1]?.match(/(mode|contrastThreshold|tonalOffset)/);
  }

  // react-user-mgmt/node_modules/@mui/material/styles/excludeVariablesFromRoot.js
  var excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(25)].map((_2, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
  var excludeVariablesFromRoot_default = excludeVariablesFromRoot;

  // react-user-mgmt/node_modules/@mui/material/styles/createGetSelector.js
  var createGetSelector_default = (theme2) => (colorScheme, css2) => {
    const root2 = theme2.rootSelector || ":root";
    const selector = theme2.colorSchemeSelector;
    let rule = selector;
    if (selector === "class") {
      rule = ".%s";
    }
    if (selector === "data") {
      rule = "[data-%s]";
    }
    if (selector?.startsWith("data-") && !selector.includes("%s")) {
      rule = `[${selector}="%s"]`;
    }
    if (theme2.defaultColorScheme === colorScheme) {
      if (colorScheme === "dark") {
        const excludedVariables = {};
        excludeVariablesFromRoot_default(theme2.cssVarPrefix).forEach((cssVar) => {
          excludedVariables[cssVar] = css2[cssVar];
          delete css2[cssVar];
        });
        if (rule === "media") {
          return {
            [root2]: css2,
            [`@media (prefers-color-scheme: dark)`]: {
              [root2]: excludedVariables
            }
          };
        }
        if (rule) {
          return {
            [rule.replace("%s", colorScheme)]: excludedVariables,
            [`${root2}, ${rule.replace("%s", colorScheme)}`]: css2
          };
        }
        return {
          [root2]: {
            ...css2,
            ...excludedVariables
          }
        };
      }
      if (rule && rule !== "media") {
        return `${root2}, ${rule.replace("%s", String(colorScheme))}`;
      }
    } else if (colorScheme) {
      if (rule === "media") {
        return {
          [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {
            [root2]: css2
          }
        };
      }
      if (rule) {
        return rule.replace("%s", String(colorScheme));
      }
    }
    return root2;
  };

  // react-user-mgmt/node_modules/@mui/material/styles/createThemeWithVars.js
  function assignNode(obj, keys2) {
    keys2.forEach((k2) => {
      if (!obj[k2]) {
        obj[k2] = {};
      }
    });
  }
  function setColor(obj, key, defaultValue) {
    if (!obj[key] && defaultValue) {
      obj[key] = defaultValue;
    }
  }
  function toRgb(color2) {
    if (typeof color2 !== "string" || !color2.startsWith("hsl")) {
      return color2;
    }
    return hslToRgb(color2);
  }
  function setColorChannel(obj, key) {
    if (!(`${key}Channel` in obj)) {
      obj[`${key}Channel`] = private_safeColorChannel(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
    }
  }
  function getSpacingVal(spacingInput) {
    if (typeof spacingInput === "number") {
      return `${spacingInput}px`;
    }
    if (typeof spacingInput === "string" || typeof spacingInput === "function" || Array.isArray(spacingInput)) {
      return spacingInput;
    }
    return "8px";
  }
  var silent = (fn) => {
    try {
      return fn();
    } catch (error) {
    }
    return void 0;
  };
  var createGetCssVar2 = (cssVarPrefix = "mui") => createGetCssVar(cssVarPrefix);
  function attachColorScheme(colorSchemes, scheme, restTheme, colorScheme) {
    if (!scheme) {
      return void 0;
    }
    scheme = scheme === true ? {} : scheme;
    const mode = colorScheme === "dark" ? "dark" : "light";
    if (!restTheme) {
      colorSchemes[colorScheme] = createColorScheme({
        ...scheme,
        palette: {
          mode,
          ...scheme?.palette
        }
      });
      return void 0;
    }
    const {
      palette: palette2,
      ...muiTheme
    } = createThemeNoVars_default({
      ...restTheme,
      palette: {
        mode,
        ...scheme?.palette
      }
    });
    colorSchemes[colorScheme] = {
      ...scheme,
      palette: palette2,
      opacity: {
        ...getOpacity(mode),
        ...scheme?.opacity
      },
      overlays: scheme?.overlays || getOverlays(mode)
    };
    return muiTheme;
  }
  function createThemeWithVars(options = {}, ...args) {
    const {
      colorSchemes: colorSchemesInput = {
        light: true
      },
      defaultColorScheme: defaultColorSchemeInput,
      disableCssColorScheme = false,
      cssVarPrefix = "mui",
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2 = shouldSkipGeneratingVar,
      colorSchemeSelector: selector = colorSchemesInput.light && colorSchemesInput.dark ? "media" : void 0,
      rootSelector = ":root",
      ...input
    } = options;
    const firstColorScheme = Object.keys(colorSchemesInput)[0];
    const defaultColorScheme = defaultColorSchemeInput || (colorSchemesInput.light && firstColorScheme !== "light" ? "light" : firstColorScheme);
    const getCssVar = createGetCssVar2(cssVarPrefix);
    const {
      [defaultColorScheme]: defaultSchemeInput,
      light: builtInLight,
      dark: builtInDark,
      ...customColorSchemes
    } = colorSchemesInput;
    const colorSchemes = {
      ...customColorSchemes
    };
    let defaultScheme = defaultSchemeInput;
    if (defaultColorScheme === "dark" && !("dark" in colorSchemesInput) || defaultColorScheme === "light" && !("light" in colorSchemesInput)) {
      defaultScheme = true;
    }
    if (!defaultScheme) {
      throw new Error(true ? `MUI: The \`colorSchemes.${defaultColorScheme}\` option is either missing or invalid.` : formatMuiErrorMessage(21, defaultColorScheme));
    }
    const muiTheme = attachColorScheme(colorSchemes, defaultScheme, input, defaultColorScheme);
    if (builtInLight && !colorSchemes.light) {
      attachColorScheme(colorSchemes, builtInLight, void 0, "light");
    }
    if (builtInDark && !colorSchemes.dark) {
      attachColorScheme(colorSchemes, builtInDark, void 0, "dark");
    }
    let theme2 = {
      defaultColorScheme,
      ...muiTheme,
      cssVarPrefix,
      colorSchemeSelector: selector,
      rootSelector,
      getCssVar,
      colorSchemes,
      font: {
        ...prepareTypographyVars(muiTheme.typography),
        ...muiTheme.font
      },
      spacing: getSpacingVal(input.spacing)
    };
    Object.keys(theme2.colorSchemes).forEach((key) => {
      const palette2 = theme2.colorSchemes[key].palette;
      const setCssVarColor = (cssVar) => {
        const tokens = cssVar.split("-");
        const color2 = tokens[1];
        const colorToken = tokens[2];
        return getCssVar(cssVar, palette2[color2][colorToken]);
      };
      if (palette2.mode === "light") {
        setColor(palette2.common, "background", "#fff");
        setColor(palette2.common, "onBackground", "#000");
      }
      if (palette2.mode === "dark") {
        setColor(palette2.common, "background", "#000");
        setColor(palette2.common, "onBackground", "#fff");
      }
      assignNode(palette2, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
      if (palette2.mode === "light") {
        setColor(palette2.Alert, "errorColor", private_safeDarken(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", private_safeDarken(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", private_safeDarken(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", private_safeDarken(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => palette2.getContrastText(palette2.error.main)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => palette2.getContrastText(palette2.info.main)));
        setColor(palette2.Alert, "successFilledColor", silent(() => palette2.getContrastText(palette2.success.main)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => palette2.getContrastText(palette2.warning.main)));
        setColor(palette2.Alert, "errorStandardBg", private_safeLighten(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", private_safeLighten(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", private_safeLighten(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", private_safeLighten(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
        setColor(palette2.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
        setColor(palette2.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
        setColor(palette2.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
        setColor(palette2.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
        setColor(palette2.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
        setColor(palette2.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.LinearProgress, "secondaryBg", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.LinearProgress, "errorBg", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.LinearProgress, "infoBg", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.LinearProgress, "successBg", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.LinearProgress, "warningBg", private_safeLighten(palette2.warning.main, 0.62));
        setColor(palette2.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
        setColor(palette2.Slider, "primaryTrack", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.Slider, "secondaryTrack", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.Slider, "errorTrack", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.Slider, "infoTrack", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.Slider, "successTrack", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.Slider, "warningTrack", private_safeLighten(palette2.warning.main, 0.62));
        const snackbarContentBackground = private_safeEmphasize(palette2.background.default, 0.8);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => palette2.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", setCssVarColor("palette-grey-400"));
        setColor(palette2.StepContent, "border", setCssVarColor("palette-grey-400"));
        setColor(palette2.Switch, "defaultColor", setCssVarColor("palette-common-white"));
        setColor(palette2.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
        setColor(palette2.Switch, "primaryDisabledColor", private_safeLighten(palette2.primary.main, 0.62));
        setColor(palette2.Switch, "secondaryDisabledColor", private_safeLighten(palette2.secondary.main, 0.62));
        setColor(palette2.Switch, "errorDisabledColor", private_safeLighten(palette2.error.main, 0.62));
        setColor(palette2.Switch, "infoDisabledColor", private_safeLighten(palette2.info.main, 0.62));
        setColor(palette2.Switch, "successDisabledColor", private_safeLighten(palette2.success.main, 0.62));
        setColor(palette2.Switch, "warningDisabledColor", private_safeLighten(palette2.warning.main, 0.62));
        setColor(palette2.TableCell, "border", private_safeLighten(private_safeAlpha(palette2.divider, 1), 0.88));
        setColor(palette2.Tooltip, "bg", private_safeAlpha(palette2.grey[700], 0.92));
      }
      if (palette2.mode === "dark") {
        setColor(palette2.Alert, "errorColor", private_safeLighten(palette2.error.light, 0.6));
        setColor(palette2.Alert, "infoColor", private_safeLighten(palette2.info.light, 0.6));
        setColor(palette2.Alert, "successColor", private_safeLighten(palette2.success.light, 0.6));
        setColor(palette2.Alert, "warningColor", private_safeLighten(palette2.warning.light, 0.6));
        setColor(palette2.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
        setColor(palette2.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
        setColor(palette2.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
        setColor(palette2.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
        setColor(palette2.Alert, "errorFilledColor", silent(() => palette2.getContrastText(palette2.error.dark)));
        setColor(palette2.Alert, "infoFilledColor", silent(() => palette2.getContrastText(palette2.info.dark)));
        setColor(palette2.Alert, "successFilledColor", silent(() => palette2.getContrastText(palette2.success.dark)));
        setColor(palette2.Alert, "warningFilledColor", silent(() => palette2.getContrastText(palette2.warning.dark)));
        setColor(palette2.Alert, "errorStandardBg", private_safeDarken(palette2.error.light, 0.9));
        setColor(palette2.Alert, "infoStandardBg", private_safeDarken(palette2.info.light, 0.9));
        setColor(palette2.Alert, "successStandardBg", private_safeDarken(palette2.success.light, 0.9));
        setColor(palette2.Alert, "warningStandardBg", private_safeDarken(palette2.warning.light, 0.9));
        setColor(palette2.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette2.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette2.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette2.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette2.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
        setColor(palette2.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
        setColor(palette2.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
        setColor(palette2.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
        setColor(palette2.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
        setColor(palette2.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
        setColor(palette2.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
        setColor(palette2.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
        setColor(palette2.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
        setColor(palette2.LinearProgress, "primaryBg", private_safeDarken(palette2.primary.main, 0.5));
        setColor(palette2.LinearProgress, "secondaryBg", private_safeDarken(palette2.secondary.main, 0.5));
        setColor(palette2.LinearProgress, "errorBg", private_safeDarken(palette2.error.main, 0.5));
        setColor(palette2.LinearProgress, "infoBg", private_safeDarken(palette2.info.main, 0.5));
        setColor(palette2.LinearProgress, "successBg", private_safeDarken(palette2.success.main, 0.5));
        setColor(palette2.LinearProgress, "warningBg", private_safeDarken(palette2.warning.main, 0.5));
        setColor(palette2.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
        setColor(palette2.Slider, "primaryTrack", private_safeDarken(palette2.primary.main, 0.5));
        setColor(palette2.Slider, "secondaryTrack", private_safeDarken(palette2.secondary.main, 0.5));
        setColor(palette2.Slider, "errorTrack", private_safeDarken(palette2.error.main, 0.5));
        setColor(palette2.Slider, "infoTrack", private_safeDarken(palette2.info.main, 0.5));
        setColor(palette2.Slider, "successTrack", private_safeDarken(palette2.success.main, 0.5));
        setColor(palette2.Slider, "warningTrack", private_safeDarken(palette2.warning.main, 0.5));
        const snackbarContentBackground = private_safeEmphasize(palette2.background.default, 0.98);
        setColor(palette2.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette2.SnackbarContent, "color", silent(() => palette2.getContrastText(snackbarContentBackground)));
        setColor(palette2.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette2.background.paper, 0.15));
        setColor(palette2.StepConnector, "border", setCssVarColor("palette-grey-600"));
        setColor(palette2.StepContent, "border", setCssVarColor("palette-grey-600"));
        setColor(palette2.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
        setColor(palette2.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
        setColor(palette2.Switch, "primaryDisabledColor", private_safeDarken(palette2.primary.main, 0.55));
        setColor(palette2.Switch, "secondaryDisabledColor", private_safeDarken(palette2.secondary.main, 0.55));
        setColor(palette2.Switch, "errorDisabledColor", private_safeDarken(palette2.error.main, 0.55));
        setColor(palette2.Switch, "infoDisabledColor", private_safeDarken(palette2.info.main, 0.55));
        setColor(palette2.Switch, "successDisabledColor", private_safeDarken(palette2.success.main, 0.55));
        setColor(palette2.Switch, "warningDisabledColor", private_safeDarken(palette2.warning.main, 0.55));
        setColor(palette2.TableCell, "border", private_safeDarken(private_safeAlpha(palette2.divider, 1), 0.68));
        setColor(palette2.Tooltip, "bg", private_safeAlpha(palette2.grey[700], 0.92));
      }
      setColorChannel(palette2.background, "default");
      setColorChannel(palette2.background, "paper");
      setColorChannel(palette2.common, "background");
      setColorChannel(palette2.common, "onBackground");
      setColorChannel(palette2, "divider");
      Object.keys(palette2).forEach((color2) => {
        const colors = palette2[color2];
        if (color2 !== "tonalOffset" && colors && typeof colors === "object") {
          if (colors.main) {
            setColor(palette2[color2], "mainChannel", private_safeColorChannel(toRgb(colors.main)));
          }
          if (colors.light) {
            setColor(palette2[color2], "lightChannel", private_safeColorChannel(toRgb(colors.light)));
          }
          if (colors.dark) {
            setColor(palette2[color2], "darkChannel", private_safeColorChannel(toRgb(colors.dark)));
          }
          if (colors.contrastText) {
            setColor(palette2[color2], "contrastTextChannel", private_safeColorChannel(toRgb(colors.contrastText)));
          }
          if (color2 === "text") {
            setColorChannel(palette2[color2], "primary");
            setColorChannel(palette2[color2], "secondary");
          }
          if (color2 === "action") {
            if (colors.active) {
              setColorChannel(palette2[color2], "active");
            }
            if (colors.selected) {
              setColorChannel(palette2[color2], "selected");
            }
          }
        }
      });
    });
    theme2 = args.reduce((acc, argument) => deepmerge(acc, argument), theme2);
    const parserConfig = {
      prefix: cssVarPrefix,
      disableCssColorScheme,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2,
      getSelector: createGetSelector_default(theme2)
    };
    const {
      vars,
      generateThemeVars,
      generateStyleSheets
    } = prepareCssVars_default(theme2, parserConfig);
    theme2.vars = vars;
    Object.entries(theme2.colorSchemes[theme2.defaultColorScheme]).forEach(([key, value]) => {
      theme2[key] = value;
    });
    theme2.generateThemeVars = generateThemeVars;
    theme2.generateStyleSheets = generateStyleSheets;
    theme2.generateSpacing = function generateSpacing() {
      return createSpacing(input.spacing, createUnarySpacing(this));
    };
    theme2.getColorSchemeSelector = createGetColorSchemeSelector(selector);
    theme2.spacing = theme2.generateSpacing();
    theme2.shouldSkipGeneratingVar = shouldSkipGeneratingVar2;
    theme2.unstable_sxConfig = {
      ...defaultSxConfig_default,
      ...input?.unstable_sxConfig
    };
    theme2.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    theme2.toRuntimeSource = stringifyTheme;
    return theme2;
  }

  // react-user-mgmt/node_modules/@mui/material/styles/createTheme.js
  function attachColorScheme2(theme2, scheme, colorScheme) {
    if (!theme2.colorSchemes) {
      return void 0;
    }
    if (colorScheme) {
      theme2.colorSchemes[scheme] = {
        ...colorScheme !== true && colorScheme,
        palette: createPalette({
          ...colorScheme === true ? {} : colorScheme.palette,
          mode: scheme
        })
        // cast type to skip module augmentation test
      };
    }
  }
  function createTheme2(options = {}, ...args) {
    const {
      palette: palette2,
      cssVariables = false,
      colorSchemes: initialColorSchemes = !palette2 ? {
        light: true
      } : void 0,
      defaultColorScheme: initialDefaultColorScheme = palette2?.mode,
      ...rest
    } = options;
    const defaultColorSchemeInput = initialDefaultColorScheme || "light";
    const defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];
    const colorSchemesInput = {
      ...initialColorSchemes,
      ...palette2 ? {
        [defaultColorSchemeInput]: {
          ...typeof defaultScheme !== "boolean" && defaultScheme,
          palette: palette2
        }
      } : void 0
    };
    if (cssVariables === false) {
      if (!("colorSchemes" in options)) {
        return createThemeNoVars_default(options, ...args);
      }
      let paletteOptions = palette2;
      if (!("palette" in options)) {
        if (colorSchemesInput[defaultColorSchemeInput]) {
          if (colorSchemesInput[defaultColorSchemeInput] !== true) {
            paletteOptions = colorSchemesInput[defaultColorSchemeInput].palette;
          } else if (defaultColorSchemeInput === "dark") {
            paletteOptions = {
              mode: "dark"
            };
          }
        }
      }
      const theme2 = createThemeNoVars_default({
        ...options,
        palette: paletteOptions
      }, ...args);
      theme2.defaultColorScheme = defaultColorSchemeInput;
      theme2.colorSchemes = colorSchemesInput;
      if (theme2.palette.mode === "light") {
        theme2.colorSchemes.light = {
          ...colorSchemesInput.light !== true && colorSchemesInput.light,
          palette: theme2.palette
        };
        attachColorScheme2(theme2, "dark", colorSchemesInput.dark);
      }
      if (theme2.palette.mode === "dark") {
        theme2.colorSchemes.dark = {
          ...colorSchemesInput.dark !== true && colorSchemesInput.dark,
          palette: theme2.palette
        };
        attachColorScheme2(theme2, "light", colorSchemesInput.light);
      }
      return theme2;
    }
    if (!palette2 && !("light" in colorSchemesInput) && defaultColorSchemeInput === "light") {
      colorSchemesInput.light = true;
    }
    return createThemeWithVars({
      ...rest,
      colorSchemes: colorSchemesInput,
      defaultColorScheme: defaultColorSchemeInput,
      ...typeof cssVariables !== "boolean" && cssVariables
    }, ...args);
  }

  // react-user-mgmt/node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme3 = createTheme2();
  var defaultTheme_default = defaultTheme3;

  // react-user-mgmt/node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // react-user-mgmt/node_modules/@mui/material/styles/useTheme.js
  function useTheme5() {
    const theme2 = useTheme_default(defaultTheme_default);
    if (true) {
      React32.useDebugValue(theme2);
    }
    return theme2[identifier_default] || theme2;
  }

  // react-user-mgmt/node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  var React33 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  function GlobalStyles3(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(GlobalStyles_default, {
      ...props,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }
  true ? GlobalStyles3.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The styles you want to apply globally.
     */
    styles: import_prop_types14.default.oneOfType([import_prop_types14.default.array, import_prop_types14.default.func, import_prop_types14.default.number, import_prop_types14.default.object, import_prop_types14.default.string, import_prop_types14.default.bool])
  } : void 0;
  var GlobalStyles_default2 = GlobalStyles3;

  // react-user-mgmt/node_modules/@mui/material/zero-styled/index.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());

  // react-user-mgmt/node_modules/@mui/material/styles/slotShouldForwardProp.js
  function slotShouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var slotShouldForwardProp_default = slotShouldForwardProp;

  // react-user-mgmt/node_modules/@mui/material/styles/rootShouldForwardProp.js
  var rootShouldForwardProp = (prop) => slotShouldForwardProp_default(prop) && prop !== "classes";
  var rootShouldForwardProp_default = rootShouldForwardProp;

  // react-user-mgmt/node_modules/@mui/material/styles/styled.js
  var styled3 = createStyled3({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp: rootShouldForwardProp_default
  });
  var styled_default2 = styled3;

  // react-user-mgmt/node_modules/@mui/material/zero-styled/index.js
  function globalCss(styles5) {
    return function GlobalStylesWrapper(props) {
      return (
        // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(GlobalStyles_default2, {
          styles: typeof styles5 === "function" ? (theme2) => styles5({
            theme: theme2,
            ...props
          }) : styles5
        })
      );
    };
  }
  function internal_createExtendSxProp() {
    return extendSxProp;
  }

  // react-user-mgmt/node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js
  var React35 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  function DefaultPropsProvider2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(DefaultPropsProvider_default, {
      ...props
    });
  }
  true ? DefaultPropsProvider2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types15.default.node,
    /**
     * @ignore
     */
    value: import_prop_types15.default.object.isRequired
  } : void 0;
  function useDefaultProps2(params) {
    return useDefaultProps(params);
  }

  // react-user-mgmt/node_modules/@mui/material/Paper/Paper.js
  var React36 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/utils/memoTheme.js
  var memoTheme = unstable_memoTheme;
  var memoTheme_default = memoTheme;

  // react-user-mgmt/node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  var paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // react-user-mgmt/node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var useUtilityClasses2 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default2("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], !ownerState.square && styles5.rounded, ownerState.variant === "elevation" && styles5[`elevation${ownerState.elevation}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    backgroundColor: (theme2.vars || theme2).palette.background.paper,
    color: (theme2.vars || theme2).palette.text.primary,
    transition: theme2.transitions.create("box-shadow"),
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.square,
      style: {
        borderRadius: theme2.shape.borderRadius
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        border: `1px solid ${(theme2.vars || theme2).palette.divider}`
      }
    }, {
      props: {
        variant: "elevation"
      },
      style: {
        boxShadow: "var(--Paper-shadow)",
        backgroundImage: "var(--Paper-overlay)"
      }
    }]
  })));
  var Paper = /* @__PURE__ */ React36.forwardRef(function Paper2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const theme2 = useTheme5();
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation",
      ...other
    } = props;
    const ownerState = {
      ...props,
      component,
      elevation,
      square,
      variant
    };
    const classes = useUtilityClasses2(ownerState);
    if (true) {
      if (theme2.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PaperRoot, {
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref,
      ...other,
      style: {
        ...variant === "elevation" && {
          "--Paper-shadow": (theme2.vars || theme2).shadows[elevation],
          ...theme2.vars && {
            "--Paper-overlay": theme2.vars.overlays?.[elevation]
          },
          ...!theme2.vars && theme2.palette.mode === "dark" && {
            "--Paper-overlay": `linear-gradient(${alpha("#fff", getOverlayAlpha(elevation))}, ${alpha("#fff", getOverlayAlpha(elevation))})`
          }
        },
        ...other.style
      }
    });
  });
  true ? Paper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types16.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types16.default.object,
    /**
     * @ignore
     */
    className: import_prop_types16.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types16.default.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types16.default.bool,
    /**
     * @ignore
     */
    style: import_prop_types16.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["elevation", "outlined"]), import_prop_types16.default.string])
  } : void 0;
  var Paper_default = Paper;

  // react-user-mgmt/node_modules/@mui/material/Card/cardClasses.js
  function getCardUtilityClass(slot) {
    return generateUtilityClass("MuiCard", slot);
  }
  var cardClasses = generateUtilityClasses("MuiCard", ["root"]);

  // react-user-mgmt/node_modules/@mui/material/Card/Card.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var useUtilityClasses3 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getCardUtilityClass, classes);
  };
  var CardRoot = styled_default2(Paper_default, {
    name: "MuiCard",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    overflow: "hidden"
  });
  var Card = /* @__PURE__ */ React37.forwardRef(function Card2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCard"
    });
    const {
      className,
      raised = false,
      ...other
    } = props;
    const ownerState = {
      ...props,
      raised
    };
    const classes = useUtilityClasses3(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardRoot, {
      className: clsx_default(classes.root, className),
      elevation: raised ? 8 : void 0,
      ref,
      ownerState,
      ...other
    });
  });
  true ? Card.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types17.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types17.default.object,
    /**
     * @ignore
     */
    className: import_prop_types17.default.string,
    /**
     * If `true`, the card will use raised styling.
     * @default false
     */
    raised: chainPropTypes(import_prop_types17.default.bool, (props) => {
      if (props.raised && props.variant === "outlined") {
        return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
      }
      return null;
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
  } : void 0;
  var Card_default = Card;

  // react-user-mgmt/node_modules/@mui/material/styles/ThemeProvider.js
  var React41 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/material/styles/ThemeProviderNoVars.js
  var React38 = __toESM(require_react());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  function ThemeProviderNoVars({
    theme: themeInput,
    ...props
  }) {
    const scopedTheme = identifier_default in themeInput ? themeInput[identifier_default] : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ThemeProvider_default2, {
      ...props,
      themeId: scopedTheme ? identifier_default : void 0,
      theme: scopedTheme || themeInput
    });
  }

  // react-user-mgmt/node_modules/@mui/material/styles/ThemeProviderWithVars.js
  var React40 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/material/InitColorSchemeScript/InitColorSchemeScript.js
  var React39 = __toESM(require_react());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var defaultConfig = {
    attribute: "data-mui-color-scheme",
    colorSchemeStorageKey: "mui-color-scheme",
    defaultLightColorScheme: "light",
    defaultDarkColorScheme: "dark",
    modeStorageKey: "mui-mode"
  };

  // react-user-mgmt/node_modules/@mui/material/styles/ThemeProviderWithVars.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var {
    CssVarsProvider: InternalCssVarsProvider,
    useColorScheme,
    getInitColorSchemeScript: deprecatedGetInitColorSchemeScript
  } = createCssVarsProvider({
    themeId: identifier_default,
    // @ts-ignore ignore module augmentation tests
    theme: () => createTheme2({
      cssVariables: true
    }),
    colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,
    modeStorageKey: defaultConfig.modeStorageKey,
    defaultColorScheme: {
      light: defaultConfig.defaultLightColorScheme,
      dark: defaultConfig.defaultDarkColorScheme
    },
    resolveTheme: (theme2) => {
      const newTheme = {
        ...theme2,
        typography: createTypography(theme2.palette, theme2.typography)
      };
      newTheme.unstable_sx = function sx(props) {
        return styleFunctionSx_default({
          sx: props,
          theme: this
        });
      };
      return newTheme;
    }
  });
  var CssVarsProvider = InternalCssVarsProvider;

  // react-user-mgmt/node_modules/@mui/material/styles/ThemeProvider.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  function ThemeProvider4({
    theme: theme2,
    ...props
  }) {
    if (typeof theme2 === "function") {
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ThemeProviderNoVars, {
        theme: theme2,
        ...props
      });
    }
    const muiTheme = identifier_default in theme2 ? theme2[identifier_default] : theme2;
    if (!("colorSchemes" in muiTheme)) {
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ThemeProviderNoVars, {
        theme: theme2,
        ...props
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(CssVarsProvider, {
      theme: theme2,
      ...props
    });
  }

  // react-user-mgmt/node_modules/@mui/material/utils/capitalize.js
  var capitalize_default = capitalize2;

  // react-user-mgmt/node_modules/@mui/material/utils/createChainedFunction.js
  var createChainedFunction_default = createChainedFunction;

  // react-user-mgmt/node_modules/@mui/material/utils/createSvgIcon.js
  var React43 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/material/SvgIcon/SvgIcon.js
  var React42 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // react-user-mgmt/node_modules/@mui/material/SvgIcon/SvgIcon.js
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var useUtilityClasses4 = (ownerState) => {
    const {
      color: color2,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default2("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.color !== "inherit" && styles5[`color${capitalize_default(ownerState.color)}`], styles5[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    flexShrink: 0,
    transition: theme2.transitions?.create?.("fill", {
      duration: (theme2.vars ?? theme2).transitions?.duration?.shorter
    }),
    variants: [
      {
        props: (props) => !props.hasSvgAsChild,
        style: {
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: "currentColor"
        }
      },
      {
        props: {
          fontSize: "inherit"
        },
        style: {
          fontSize: "inherit"
        }
      },
      {
        props: {
          fontSize: "small"
        },
        style: {
          fontSize: theme2.typography?.pxToRem?.(20) || "1.25rem"
        }
      },
      {
        props: {
          fontSize: "medium"
        },
        style: {
          fontSize: theme2.typography?.pxToRem?.(24) || "1.5rem"
        }
      },
      {
        props: {
          fontSize: "large"
        },
        style: {
          fontSize: theme2.typography?.pxToRem?.(35) || "2.1875rem"
        }
      },
      // TODO v5 deprecate color prop, v6 remove for sx
      ...Object.entries((theme2.vars ?? theme2).palette).filter(([, value]) => value && value.main).map(([color2]) => ({
        props: {
          color: color2
        },
        style: {
          color: (theme2.vars ?? theme2).palette?.[color2]?.main
        }
      })),
      {
        props: {
          color: "action"
        },
        style: {
          color: (theme2.vars ?? theme2).palette?.action?.active
        }
      },
      {
        props: {
          color: "disabled"
        },
        style: {
          color: (theme2.vars ?? theme2).palette?.action?.disabled
        }
      },
      {
        props: {
          color: "inherit"
        },
        style: {
          color: void 0
        }
      }
    ]
  })));
  var SvgIcon = /* @__PURE__ */ React42.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24",
      ...other
    } = props;
    const hasSvgAsChild = /* @__PURE__ */ React42.isValidElement(children) && children.type === "svg";
    const ownerState = {
      ...props,
      color: color2,
      component,
      fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox,
      hasSvgAsChild
    };
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses4(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(SvgIconRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref,
      ...more,
      ...other,
      ...hasSvgAsChild && children.props,
      ownerState,
      children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("title", {
        children: titleAccess
      }) : null]
    });
  });
  true ? SvgIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Node passed into the SVG element.
     */
    children: import_prop_types18.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types18.default.object,
    /**
     * @ignore
     */
    className: import_prop_types18.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types18.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types18.default.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types18.default.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: import_prop_types18.default.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: import_prop_types18.default.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: import_prop_types18.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: import_prop_types18.default.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: import_prop_types18.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // react-user-mgmt/node_modules/@mui/material/utils/createSvgIcon.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component6(props, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SvgIcon_default, {
        "data-testid": `${displayName}Icon`,
        ref,
        ...props,
        children: path
      });
    }
    if (true) {
      Component6.displayName = `${displayName}Icon`;
    }
    Component6.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React43.memo(/* @__PURE__ */ React43.forwardRef(Component6));
  }

  // react-user-mgmt/node_modules/@mui/material/utils/debounce.js
  var debounce_default = debounce;

  // react-user-mgmt/node_modules/@mui/material/utils/isMuiElement.js
  var isMuiElement_default = isMuiElement;

  // react-user-mgmt/node_modules/@mui/material/utils/ownerDocument.js
  var ownerDocument_default = ownerDocument;

  // react-user-mgmt/node_modules/@mui/material/utils/ownerWindow.js
  var ownerWindow_default = ownerWindow;

  // react-user-mgmt/node_modules/@mui/material/utils/requirePropFactory.js
  var requirePropFactory_default = requirePropFactory;

  // react-user-mgmt/node_modules/@mui/material/utils/useEnhancedEffect.js
  var useEnhancedEffect_default2 = useEnhancedEffect_default;

  // react-user-mgmt/node_modules/@mui/material/utils/useId.js
  var useId_default = useId2;

  // react-user-mgmt/node_modules/@mui/material/utils/unsupportedProp.js
  var unsupportedProp_default = unsupportedProp;

  // react-user-mgmt/node_modules/@mui/material/utils/useControlled.js
  var useControlled_default = useControlled;

  // react-user-mgmt/node_modules/@mui/material/utils/useEventCallback.js
  var useEventCallback_default2 = useEventCallback_default;

  // react-user-mgmt/node_modules/@mui/material/utils/useForkRef.js
  var useForkRef_default = useForkRef;

  // react-user-mgmt/node_modules/@mui/material/utils/mergeSlotProps.js
  function mergeSlotProps2(externalSlotProps, defaultSlotProps) {
    if (!externalSlotProps) {
      return defaultSlotProps;
    }
    if (typeof externalSlotProps === "function" || typeof defaultSlotProps === "function") {
      return (ownerState) => {
        const defaultSlotPropsValue = typeof defaultSlotProps === "function" ? defaultSlotProps(ownerState) : defaultSlotProps;
        const externalSlotPropsValue = typeof externalSlotProps === "function" ? externalSlotProps({
          ...ownerState,
          ...defaultSlotPropsValue
        }) : externalSlotProps;
        const className2 = clsx_default(ownerState?.className, defaultSlotPropsValue?.className, externalSlotPropsValue?.className);
        return {
          ...defaultSlotPropsValue,
          ...externalSlotPropsValue,
          ...!!className2 && {
            className: className2
          },
          ...defaultSlotPropsValue?.style && externalSlotPropsValue?.style && {
            style: {
              ...defaultSlotPropsValue.style,
              ...externalSlotPropsValue.style
            }
          },
          ...defaultSlotPropsValue?.sx && externalSlotPropsValue?.sx && {
            sx: [...Array.isArray(defaultSlotPropsValue.sx) ? defaultSlotPropsValue.sx : [defaultSlotPropsValue.sx], ...Array.isArray(externalSlotPropsValue.sx) ? externalSlotPropsValue.sx : [externalSlotPropsValue.sx]]
          }
        };
      };
    }
    const typedDefaultSlotProps = defaultSlotProps;
    const className = clsx_default(typedDefaultSlotProps?.className, externalSlotProps?.className);
    return {
      ...defaultSlotProps,
      ...externalSlotProps,
      ...!!className && {
        className
      },
      ...typedDefaultSlotProps?.style && externalSlotProps?.style && {
        style: {
          ...typedDefaultSlotProps.style,
          ...externalSlotProps.style
        }
      },
      ...typedDefaultSlotProps?.sx && externalSlotProps?.sx && {
        sx: [...Array.isArray(typedDefaultSlotProps.sx) ? typedDefaultSlotProps.sx : [typedDefaultSlotProps.sx], ...Array.isArray(externalSlotProps.sx) ? externalSlotProps.sx : [externalSlotProps.sx]]
      }
    };
  }

  // react-user-mgmt/node_modules/@mui/material/Collapse/Collapse.js
  var React47 = __toESM(require_react());
  var import_prop_types22 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r3, e2) {
    if (null == r3) return {};
    var t2 = {};
    for (var n2 in r3) if ({}.hasOwnProperty.call(r3, n2)) {
      if (-1 !== e2.indexOf(n2)) continue;
      t2[n2] = r3[n2];
    }
    return t2;
  }

  // react-user-mgmt/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t2, e2) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
      return t3.__proto__ = e3, t3;
    }, _setPrototypeOf(t2, e2);
  }

  // react-user-mgmt/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t2, o2) {
    t2.prototype = Object.create(o2.prototype), t2.prototype.constructor = t2, _setPrototypeOf(t2, o2);
  }

  // react-user-mgmt/node_modules/react-transition-group/esm/Transition.js
  var import_prop_types20 = __toESM(require_prop_types());
  var import_react10 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // react-user-mgmt/node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // react-user-mgmt/node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types19 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.shape({
    enter: import_prop_types19.default.number,
    exit: import_prop_types19.default.number,
    appear: import_prop_types19.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types19.default.oneOfType([import_prop_types19.default.string, import_prop_types19.default.shape({
    enter: import_prop_types19.default.string,
    exit: import_prop_types19.default.string,
    active: import_prop_types19.default.string
  }), import_prop_types19.default.shape({
    enter: import_prop_types19.default.string,
    enterDone: import_prop_types19.default.string,
    enterActive: import_prop_types19.default.string,
    exit: import_prop_types19.default.string,
    exitDone: import_prop_types19.default.string,
    exitActive: import_prop_types19.default.string
  })]) : null;

  // react-user-mgmt/node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react9 = __toESM(require_react());
  var TransitionGroupContext_default = import_react9.default.createContext(null);

  // react-user-mgmt/node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // react-user-mgmt/node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2) forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react10.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react10.default.cloneElement(import_react10.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react10.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types20.default.shape({
      current: typeof Element === "undefined" ? import_prop_types20.default.any : function(propValue, key, componentName, location2, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types20.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types20.default.oneOfType([import_prop_types20.default.func.isRequired, import_prop_types20.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types20.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types20.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types20.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types20.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types20.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types20.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types20.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types20.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types20.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types20.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types20.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types20.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types20.default.func
  } : {};
  function noop3() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop3,
    onEntering: noop3,
    onEntered: noop3,
    onExit: noop3,
    onExiting: noop3,
    onExited: noop3
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // react-user-mgmt/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e2) {
    if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e2;
  }

  // react-user-mgmt/node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types21 = __toESM(require_prop_types());
  var import_react12 = __toESM(require_react());

  // react-user-mgmt/node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react11 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react11.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children) import_react11.Children.map(children, function(c2) {
      return c2;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i2;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i2 = 0; i2 < nextKeysPending[nextKey].length; i2++) {
          var pendingNextKey = nextKeysPending[nextKey][i2];
          childMapping[nextKeysPending[nextKey][i2]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i2 = 0; i2 < pendingKeys.length; i2++) {
      childMapping[pendingKeys[i2]] = getValueForKey(pendingKeys[i2]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react11.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react11.isValidElement)(child)) return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react11.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react11.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react11.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react11.isValidElement)(prevChild)) {
        children[key] = (0, import_react11.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // react-user-mgmt/node_modules/react-transition-group/esm/TransitionGroup.js
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k2) {
      return obj[k2];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component6 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component6 === null) {
        return /* @__PURE__ */ import_react12.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react12.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react12.default.createElement(Component6, props, children));
    };
    return TransitionGroup2;
  }(import_react12.default.Component);
  TransitionGroup.propTypes = true ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: import_prop_types21.default.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: import_prop_types21.default.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: import_prop_types21.default.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: import_prop_types21.default.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: import_prop_types21.default.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: import_prop_types21.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // react-user-mgmt/node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    const {
      timeout: timeout2,
      easing: easing2,
      style: style4 = {}
    } = props;
    return {
      duration: style4.transitionDuration ?? (typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0),
      easing: style4.transitionTimingFunction ?? (typeof easing2 === "object" ? easing2[options.mode] : easing2),
      delay: style4.transitionDelay
    };
  }

  // react-user-mgmt/node_modules/@mui/material/Collapse/collapseClasses.js
  function getCollapseUtilityClass(slot) {
    return generateUtilityClass("MuiCollapse", slot);
  }
  var collapseClasses = generateUtilityClasses("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);

  // react-user-mgmt/node_modules/@mui/material/Collapse/Collapse.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var useUtilityClasses5 = (ownerState) => {
    const {
      orientation,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${orientation}`],
      entered: ["entered"],
      hidden: ["hidden"],
      wrapper: ["wrapper", `${orientation}`],
      wrapperInner: ["wrapperInner", `${orientation}`]
    };
    return composeClasses(slots, getCollapseUtilityClass, classes);
  };
  var CollapseRoot = styled_default2("div", {
    name: "MuiCollapse",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.orientation], ownerState.state === "entered" && styles5.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles5.hidden];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    height: 0,
    overflow: "hidden",
    transition: theme2.transitions.create("height"),
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        height: "auto",
        width: 0,
        transition: theme2.transitions.create("width")
      }
    }, {
      props: {
        state: "entered"
      },
      style: {
        height: "auto",
        overflow: "visible"
      }
    }, {
      props: {
        state: "entered",
        orientation: "horizontal"
      },
      style: {
        width: "auto"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px",
      style: {
        visibility: "hidden"
      }
    }]
  })));
  var CollapseWrapper = styled_default2("div", {
    name: "MuiCollapse",
    slot: "Wrapper",
    overridesResolver: (props, styles5) => styles5.wrapper
  })({
    // Hack to get children with a negative margin to not falsify the height computation.
    display: "flex",
    width: "100%",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        width: "auto",
        height: "100%"
      }
    }]
  });
  var CollapseWrapperInner = styled_default2("div", {
    name: "MuiCollapse",
    slot: "WrapperInner",
    overridesResolver: (props, styles5) => styles5.wrapperInner
  })({
    width: "100%",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        width: "auto",
        height: "100%"
      }
    }]
  });
  var Collapse = /* @__PURE__ */ React47.forwardRef(function Collapse2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCollapse"
    });
    const {
      addEndListener,
      children,
      className,
      collapsedSize: collapsedSizeProp = "0px",
      component,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      orientation = "vertical",
      style: style4,
      timeout: timeout2 = duration.standard,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default,
      ...other
    } = props;
    const ownerState = {
      ...props,
      orientation,
      collapsedSize: collapsedSizeProp
    };
    const classes = useUtilityClasses5(ownerState);
    const theme2 = useTheme5();
    const timer = useTimeout();
    const wrapperRef = React47.useRef(null);
    const autoTransitionDuration = React47.useRef();
    const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
    const isHorizontal = orientation === "horizontal";
    const size = isHorizontal ? "width" : "height";
    const nodeRef = React47.useRef(null);
    const handleRef = useForkRef_default(ref, nodeRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? "clientWidth" : "clientHeight"] : 0;
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      if (wrapperRef.current && isHorizontal) {
        wrapperRef.current.style.position = "absolute";
      }
      node2.style[size] = collapsedSize;
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const wrapperSize = getWrapperSize();
      if (wrapperRef.current && isHorizontal) {
        wrapperRef.current.style.position = "";
      }
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      if (timeout2 === "auto") {
        const duration2 = theme2.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = `${wrapperSize}px`;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback((node2, isAppearing) => {
      node2.style[size] = "auto";
      if (onEntered) {
        onEntered(node2, isAppearing);
      }
    });
    const handleExit = normalizedTransitionCallback((node2) => {
      node2.style[size] = `${getWrapperSize()}px`;
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleExiting = normalizedTransitionCallback((node2) => {
      const wrapperSize = getWrapperSize();
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      if (timeout2 === "auto") {
        const duration2 = theme2.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size] = collapsedSize;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onExiting) {
        onExiting(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.start(autoTransitionDuration.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(TransitionComponent, {
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      timeout: timeout2 === "auto" ? null : timeout2,
      ...other,
      children: (state, {
        ownerState: incomingOwnerState,
        ...restChildProps
      }) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CollapseRoot, {
        as: component,
        className: clsx_default(classes.root, className, {
          "entered": classes.entered,
          "exited": !inProp && collapsedSize === "0px" && classes.hidden
        }[state]),
        style: {
          [isHorizontal ? "minWidth" : "minHeight"]: collapsedSize,
          ...style4
        },
        ref: handleRef,
        ownerState: {
          ...ownerState,
          state
        },
        ...restChildProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CollapseWrapper, {
          ownerState: {
            ...ownerState,
            state
          },
          className: classes.wrapper,
          ref: wrapperRef,
          children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CollapseWrapperInner, {
            ownerState: {
              ...ownerState,
              state
            },
            className: classes.wrapperInner,
            children
          })
        })
      })
    });
  });
  true ? Collapse.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types22.default.func,
    /**
     * The content node to be collapsed.
     */
    children: import_prop_types22.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types22.default.object,
    /**
     * @ignore
     */
    className: import_prop_types22.default.string,
    /**
     * The width (horizontal) or height (vertical) of the container when collapsed.
     * @default '0px'
     */
    collapsedSize: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef_default,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types22.default.oneOfType([import_prop_types22.default.shape({
      enter: import_prop_types22.default.string,
      exit: import_prop_types22.default.string
    }), import_prop_types22.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types22.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types22.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types22.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types22.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types22.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types22.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types22.default.func,
    /**
     * The transition orientation.
     * @default 'vertical'
     */
    orientation: import_prop_types22.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    style: import_prop_types22.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default duration.standard
     */
    timeout: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["auto"]), import_prop_types22.default.number, import_prop_types22.default.shape({
      appear: import_prop_types22.default.number,
      enter: import_prop_types22.default.number,
      exit: import_prop_types22.default.number
    })])
  } : void 0;
  if (Collapse) {
    Collapse.muiSupportAuto = true;
  }
  var Collapse_default = Collapse;

  // react-user-mgmt/node_modules/@mui/material/utils/useSlot.js
  function useSlot(name, parameters) {
    const {
      className,
      elementType: initialElementType,
      ownerState,
      externalForwardedProps,
      internalForwardedProps,
      shouldForwardComponentProp = false,
      ...useSlotPropsParams
    } = parameters;
    const {
      component: rootComponent,
      slots = {
        [name]: void 0
      },
      slotProps = {
        [name]: void 0
      },
      ...other
    } = externalForwardedProps;
    const elementType = slots[name] || initialElementType;
    const resolvedComponentsProps = resolveComponentProps_default(slotProps[name], ownerState);
    const {
      props: {
        component: slotComponent,
        ...mergedProps
      },
      internalRef
    } = mergeSlotProps_default({
      className,
      ...useSlotPropsParams,
      externalForwardedProps: name === "root" ? other : void 0,
      externalSlotProps: resolvedComponentsProps
    });
    const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);
    const LeafComponent = name === "root" ? slotComponent || rootComponent : slotComponent;
    const props = appendOwnerState_default(elementType, {
      ...name === "root" && !rootComponent && !slots[name] && internalForwardedProps,
      ...name !== "root" && !slots[name] && internalForwardedProps,
      ...mergedProps,
      ...LeafComponent && !shouldForwardComponentProp && {
        as: LeafComponent
      },
      ...LeafComponent && shouldForwardComponentProp && {
        component: LeafComponent
      },
      ref
    }, ownerState);
    return [elementType, props];
  }

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/ButtonBase.js
  var React51 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/useLazyRipple/useLazyRipple.js
  var React48 = __toESM(require_react());
  var LazyRipple = class _LazyRipple {
    constructor() {
      __publicField(this, "mountEffect", () => {
        if (this.shouldMount && !this.didMount) {
          if (this.ref.current !== null) {
            this.didMount = true;
            this.mounted.resolve();
          }
        }
      });
      this.ref = {
        current: null
      };
      this.mounted = null;
      this.didMount = false;
      this.shouldMount = false;
      this.setShouldMount = null;
    }
    /** React ref to the ripple instance */
    /** If the ripple component should be mounted */
    /** Promise that resolves when the ripple component is mounted */
    /** If the ripple component has been mounted */
    /** React state hook setter */
    static create() {
      return new _LazyRipple();
    }
    static use() {
      const ripple = useLazyRef(_LazyRipple.create).current;
      const [shouldMount, setShouldMount] = React48.useState(false);
      ripple.shouldMount = shouldMount;
      ripple.setShouldMount = setShouldMount;
      React48.useEffect(ripple.mountEffect, [shouldMount]);
      return ripple;
    }
    mount() {
      if (!this.mounted) {
        this.mounted = createControlledPromise();
        this.shouldMount = true;
        this.setShouldMount(this.shouldMount);
      }
      return this.mounted;
    }
    /* Ripple API */
    start(...args) {
      this.mount().then(() => this.ref.current?.start(...args));
    }
    stop(...args) {
      this.mount().then(() => this.ref.current?.stop(...args));
    }
    pulsate(...args) {
      this.mount().then(() => this.ref.current?.pulsate(...args));
    }
  };
  function useLazyRipple() {
    return LazyRipple.use();
  }
  function createControlledPromise() {
    let resolve;
    let reject;
    const p2 = new Promise((resolveFn, rejectFn) => {
      resolve = resolveFn;
      reject = rejectFn;
    });
    p2.resolve = resolve;
    p2.reject = reject;
    return p2;
  }

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/TouchRipple.js
  var React50 = __toESM(require_react());
  var import_prop_types24 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/Ripple.js
  var React49 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout2
    } = props;
    const [leaving, setLeaving] = React49.useState(false);
    const rippleClassName = clsx_default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React49.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout2);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout2]);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types23.default.object.isRequired,
    className: import_prop_types23.default.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: import_prop_types23.default.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: import_prop_types23.default.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: import_prop_types23.default.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: import_prop_types23.default.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: import_prop_types23.default.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: import_prop_types23.default.number,
    /**
     * exit delay
     */
    timeout: import_prop_types23.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  var touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/TouchRipple.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = keyframes`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
  var exitKeyframe = keyframes`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
  var pulsateKeyframe = keyframes`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
  var TouchRippleRoot = styled_default2("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default2(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })`
  opacity: 0;
  position: absolute;

  &.${touchRippleClasses_default.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${enterKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut};
  }

  &.${touchRippleClasses_default.ripplePulsate} {
    animation-duration: ${({
    theme: theme2
  }) => theme2.transitions.duration.shorter}ms;
  }

  & .${touchRippleClasses_default.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${touchRippleClasses_default.childLeaving} {
    opacity: 0;
    animation-name: ${exitKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut};
  }

  & .${touchRippleClasses_default.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pulsateKeyframe};
    animation-duration: 2500ms;
    animation-timing-function: ${({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;
  var TouchRipple = /* @__PURE__ */ React50.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className,
      ...other
    } = props;
    const [ripples, setRipples] = React50.useState([]);
    const nextKey = React50.useRef(0);
    const rippleCallback = React50.useRef(null);
    React50.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React50.useRef(false);
    const startTimer = useTimeout();
    const startTimerCommit = React50.useRef(null);
    const container = React50.useRef(null);
    const startCommit = React50.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TouchRippleRipple, {
        classes: {
          ripple: clsx_default(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_default(classes.child, touchRippleClasses_default.child),
          childLeaving: clsx_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start = React50.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if (event?.type === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if (event?.type === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event?.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.start(DELAY_RIPPLE, () => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          });
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit, startTimer]);
    const pulsate = React50.useCallback(() => {
      start({}, {
        pulsate: true
      });
    }, [start]);
    const stop = React50.useCallback((event, cb) => {
      startTimer.clear();
      if (event?.type === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.start(0, () => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, [startTimer]);
    React50.useImperativeHandle(ref, () => ({
      pulsate,
      start,
      stop
    }), [pulsate, start, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TouchRippleRoot, {
      className: clsx_default(touchRippleClasses_default.root, classes.root, className),
      ref: container,
      ...other,
      children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    });
  });
  true ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: import_prop_types24.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types24.default.object,
    /**
     * @ignore
     */
    className: import_prop_types24.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  var buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // react-user-mgmt/node_modules/@mui/material/ButtonBase/ButtonBase.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var useUtilityClasses6 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default2("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React51.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      focusVisibleClassName,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type,
      ...other
    } = props;
    const buttonRef = React51.useRef(null);
    const ripple = useLazyRipple();
    const handleRippleRef = useForkRef_default(ripple.ref, touchRippleRef);
    const [focusVisible, setFocusVisible] = React51.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React51.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const enableTouchRipple = ripple.shouldMount && !disableRipple && !disabled;
    React51.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple) {
        ripple.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, ripple]);
    const handleMouseDown = useRippleHandler(ripple, "start", onMouseDown, disableTouchRipple);
    const handleContextMenu = useRippleHandler(ripple, "stop", onContextMenu, disableTouchRipple);
    const handleDragLeave = useRippleHandler(ripple, "stop", onDragLeave, disableTouchRipple);
    const handleMouseUp = useRippleHandler(ripple, "stop", onMouseUp, disableTouchRipple);
    const handleMouseLeave = useRippleHandler(ripple, "stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    }, disableTouchRipple);
    const handleTouchStart = useRippleHandler(ripple, "start", onTouchStart, disableTouchRipple);
    const handleTouchEnd = useRippleHandler(ripple, "stop", onTouchEnd, disableTouchRipple);
    const handleTouchMove = useRippleHandler(ripple, "stop", onTouchMove, disableTouchRipple);
    const handleBlur = useRippleHandler(ripple, "stop", (event) => {
      if (!isFocusVisible(event.target)) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default2((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      if (isFocusVisible(event.target)) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const handleKeyDown = useEventCallback_default2((event) => {
      if (focusRipple && !event.repeat && focusVisible && event.key === " ") {
        ripple.stop(event, () => {
          ripple.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default2((event) => {
      if (focusRipple && event.key === " " && focusVisible && !event.defaultPrevented) {
        ripple.stop(event, () => {
          ripple.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, buttonRef);
    const ownerState = {
      ...props,
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    };
    const classes = useUtilityClasses6(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(ButtonBaseRoot, {
      as: ComponentProp,
      className: clsx_default(classes.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type,
      ...buttonProps,
      ...other,
      children: [children, enableTouchRipple ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TouchRipple_default, {
        ref: handleRippleRef,
        center: centerRipple,
        ...TouchRippleProps
      }) : null]
    });
  });
  function useRippleHandler(ripple, rippleAction, eventCallback, skipRippleAction = false) {
    return useEventCallback_default2((event) => {
      if (eventCallback) {
        eventCallback(event);
      }
      if (!skipRippleAction) {
        ripple[rippleAction](event);
      }
      return true;
    });
  }
  true ? ButtonBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType_default,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: import_prop_types25.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types25.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types25.default.object,
    /**
     * @ignore
     */
    className: import_prop_types25.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef_default,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types25.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types25.default.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: import_prop_types25.default.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: import_prop_types25.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types25.default.string,
    /**
     * @ignore
     */
    href: import_prop_types25.default.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: import_prop_types25.default.elementType,
    /**
     * @ignore
     */
    onBlur: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onContextMenu: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onDragLeave: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types25.default.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onMouseUp: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onTouchEnd: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onTouchMove: import_prop_types25.default.func,
    /**
     * @ignore
     */
    onTouchStart: import_prop_types25.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types25.default.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: import_prop_types25.default.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.shape({
      current: import_prop_types25.default.shape({
        pulsate: import_prop_types25.default.func.isRequired,
        start: import_prop_types25.default.func.isRequired,
        stop: import_prop_types25.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["button", "reset", "submit"]), import_prop_types25.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // react-user-mgmt/node_modules/@mui/material/Alert/Alert.js
  var React59 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/utils/createSimplePaletteValueFilter.js
  function hasCorrectMainProperty(obj) {
    return typeof obj.main === "string";
  }
  function checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {
    if (!hasCorrectMainProperty(obj)) {
      return false;
    }
    for (const value of additionalPropertiesToCheck) {
      if (!obj.hasOwnProperty(value) || typeof obj[value] !== "string") {
        return false;
      }
    }
    return true;
  }
  function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {
    return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);
  }

  // react-user-mgmt/node_modules/@mui/material/Alert/alertClasses.js
  function getAlertUtilityClass(slot) {
    return generateUtilityClass("MuiAlert", slot);
  }
  var alertClasses = generateUtilityClasses("MuiAlert", ["root", "action", "icon", "message", "filled", "colorSuccess", "colorInfo", "colorWarning", "colorError", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  var alertClasses_default = alertClasses;

  // react-user-mgmt/node_modules/@mui/material/IconButton/IconButton.js
  var React53 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/CircularProgress/CircularProgress.js
  var React52 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/CircularProgress/circularProgressClasses.js
  function getCircularProgressUtilityClass(slot) {
    return generateUtilityClass("MuiCircularProgress", slot);
  }
  var circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

  // react-user-mgmt/node_modules/@mui/material/CircularProgress/CircularProgress.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var SIZE = 44;
  var circularRotateKeyframe = keyframes`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`;
  var circularDashKeyframe = keyframes`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`;
  var rotateAnimation = typeof circularRotateKeyframe !== "string" ? css`
        animation: ${circularRotateKeyframe} 1.4s linear infinite;
      ` : null;
  var dashAnimation = typeof circularDashKeyframe !== "string" ? css`
        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;
      ` : null;
  var useUtilityClasses7 = (ownerState) => {
    const {
      classes,
      variant,
      color: color2,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color2)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return composeClasses(slots, getCircularProgressUtilityClass, classes);
  };
  var CircularProgressRoot = styled_default2("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], styles5[`color${capitalize_default(ownerState.color)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    display: "inline-block",
    variants: [{
      props: {
        variant: "determinate"
      },
      style: {
        transition: theme2.transitions.create("transform")
      }
    }, {
      props: {
        variant: "indeterminate"
      },
      style: rotateAnimation || {
        animation: `${circularRotateKeyframe} 1.4s linear infinite`
      }
    }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        color: (theme2.vars || theme2).palette[color2].main
      }
    }))]
  })));
  var CircularProgressSVG = styled_default2("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles5) => styles5.svg
  })({
    display: "block"
    // Keeps the progress centered
  });
  var CircularProgressCircle = styled_default2("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.circle, styles5[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles5.circleDisableShrink];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    stroke: "currentColor",
    variants: [{
      props: {
        variant: "determinate"
      },
      style: {
        transition: theme2.transitions.create("stroke-dashoffset")
      }
    }, {
      props: {
        variant: "indeterminate"
      },
      style: {
        // Some default value that looks fine waiting for the animation to kicks in.
        strokeDasharray: "80px, 200px",
        strokeDashoffset: 0
        // Add the unit to fix a Edge 16 and below bug.
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink,
      style: dashAnimation || {
        // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
        animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`
      }
    }]
  })));
  var CircularProgress = /* @__PURE__ */ React52.forwardRef(function CircularProgress2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color: color2 = "primary",
      disableShrink = false,
      size = 40,
      style: style4,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate",
      ...other
    } = props;
    const ownerState = {
      ...props,
      color: color2,
      disableShrink,
      size,
      thickness,
      value,
      variant
    };
    const classes = useUtilityClasses7(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CircularProgressRoot, {
      className: clsx_default(classes.root, className),
      style: {
        width: size,
        height: size,
        ...rootStyle,
        ...style4
      },
      ownerState,
      ref,
      role: "progressbar",
      ...rootProps,
      ...other,
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    });
  });
  true ? CircularProgress.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types26.default.object,
    /**
     * @ignore
     */
    className: import_prop_types26.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types26.default.string]),
    /**
     * If `true`, the shrink animation is disabled.
     * This only works if variant is `indeterminate`.
     * @default false
     */
    disableShrink: chainPropTypes(import_prop_types26.default.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    /**
     * The size of the component.
     * If using a number, the pixel unit is assumed.
     * If using a string, you need to provide the CSS unit, for example '3rem'.
     * @default 40
     */
    size: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types26.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
    /**
     * The thickness of the circle.
     * @default 3.6
     */
    thickness: import_prop_types26.default.number,
    /**
     * The value of the progress indicator for the determinate variant.
     * Value between 0 and 100.
     * @default 0
     */
    value: import_prop_types26.default.number,
    /**
     * The variant to use.
     * Use indeterminate when there is no progress value.
     * @default 'indeterminate'
     */
    variant: import_prop_types26.default.oneOf(["determinate", "indeterminate"])
  } : void 0;
  var CircularProgress_default = CircularProgress;

  // react-user-mgmt/node_modules/@mui/material/IconButton/iconButtonClasses.js
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  var iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge", "loading", "loadingIndicator", "loadingWrapper"]);
  var iconButtonClasses_default = iconButtonClasses;

  // react-user-mgmt/node_modules/@mui/material/IconButton/IconButton.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size,
      loading
    } = ownerState;
    const slots = {
      root: ["root", loading && "loading", disabled && "disabled", color2 !== "default" && `color${capitalize_default(color2)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
      loadingIndicator: ["loadingIndicator"],
      loadingWrapper: ["loadingWrapper"]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  var IconButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.loading && styles5.loading, ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles5[`edge${capitalize_default(ownerState.edge)}`], styles5[`size${capitalize_default(ownerState.size)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme2.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    color: (theme2.vars || theme2).palette.action.active,
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.shortest
    }),
    variants: [{
      props: (props) => !props.disableRipple,
      style: {
        "--IconButton-hoverBg": theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
        "&:hover": {
          backgroundColor: "var(--IconButton-hoverBg)",
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      }
    }, {
      props: {
        edge: "start"
      },
      style: {
        marginLeft: -12
      }
    }, {
      props: {
        edge: "start",
        size: "small"
      },
      style: {
        marginLeft: -3
      }
    }, {
      props: {
        edge: "end"
      },
      style: {
        marginRight: -12
      }
    }, {
      props: {
        edge: "end",
        size: "small"
      },
      style: {
        marginRight: -3
      }
    }]
  })), memoTheme_default(({
    theme: theme2
  }) => ({
    variants: [{
      props: {
        color: "inherit"
      },
      style: {
        color: "inherit"
      }
    }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        color: (theme2.vars || theme2).palette[color2].main
      }
    })), ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        "--IconButton-hoverBg": theme2.vars ? `rgba(${(theme2.vars || theme2).palette[color2].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha((theme2.vars || theme2).palette[color2].main, theme2.palette.action.hoverOpacity)
      }
    })), {
      props: {
        size: "small"
      },
      style: {
        padding: 5,
        fontSize: theme2.typography.pxToRem(18)
      }
    }, {
      props: {
        size: "large"
      },
      style: {
        padding: 12,
        fontSize: theme2.typography.pxToRem(28)
      }
    }],
    [`&.${iconButtonClasses_default.disabled}`]: {
      backgroundColor: "transparent",
      color: (theme2.vars || theme2).palette.action.disabled
    },
    [`&.${iconButtonClasses_default.loading}`]: {
      color: "transparent"
    }
  })));
  var IconButtonLoadingIndicator = styled_default2("span", {
    name: "MuiIconButton",
    slot: "LoadingIndicator",
    overridesResolver: (props, styles5) => styles5.loadingIndicator
  })(({
    theme: theme2
  }) => ({
    display: "none",
    position: "absolute",
    visibility: "visible",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    color: (theme2.vars || theme2).palette.action.disabled,
    variants: [{
      props: {
        loading: true
      },
      style: {
        display: "flex"
      }
    }]
  }));
  var IconButton = /* @__PURE__ */ React53.forwardRef(function IconButton2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium",
      id: idProp,
      loading = null,
      loadingIndicator: loadingIndicatorProp,
      ...other
    } = props;
    const loadingId = useId_default(idProp);
    const loadingIndicator = loadingIndicatorProp ?? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(CircularProgress_default, {
      "aria-labelledby": loadingId,
      color: "inherit",
      size: 16
    });
    const ownerState = {
      ...props,
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      loading,
      loadingIndicator,
      size
    };
    const classes = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(IconButtonRoot, {
      id: loading ? loadingId : idProp,
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled: disabled || loading,
      ref,
      ...other,
      ownerState,
      children: [typeof loading === "boolean" && // use plain HTML span to minimize the runtime overhead
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", {
        className: classes.loadingWrapper,
        style: {
          display: "contents"
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(IconButtonLoadingIndicator, {
          className: classes.loadingIndicator,
          ownerState,
          children: loading && loadingIndicator
        })
      }), children]
    });
  });
  true ? IconButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The icon to display.
     */
    children: chainPropTypes(import_prop_types27.default.node, (props) => {
      const found = React53.Children.toArray(props.children).some((child) => /* @__PURE__ */ React53.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types27.default.object,
    /**
     * @ignore
     */
    className: import_prop_types27.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types27.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types27.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types27.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types27.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types27.default.oneOf(["end", "start", false]),
    /**
     * @ignore
     */
    id: import_prop_types27.default.string,
    /**
     * If `true`, the loading indicator is visible and the button is disabled.
     * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
     * @default null
     */
    loading: import_prop_types27.default.bool,
    /**
     * Element placed before the children if the button is in loading state.
     * The node should contain an element with `role="progressbar"` with an accessible name.
     * By default, it renders a `CircularProgress` that is labeled by the button itself.
     * @default <CircularProgress color="inherit" size={16} />
     */
    loadingIndicator: import_prop_types27.default.node,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["small", "medium", "large"]), import_prop_types27.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var React54 = __toESM(require_react());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var SuccessOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js
  var React55 = __toESM(require_react());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var ReportProblemOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime31.jsx)("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/ErrorOutline.js
  var React56 = __toESM(require_react());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var ErrorOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime32.jsx)("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/InfoOutlined.js
  var React57 = __toESM(require_react());
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var InfoOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime33.jsx)("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/Close.js
  var React58 = __toESM(require_react());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime34.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // react-user-mgmt/node_modules/@mui/material/Alert/Alert.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var useUtilityClasses9 = (ownerState) => {
    const {
      variant,
      color: color2,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2 || severity)}`, `${variant}${capitalize_default(color2 || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return composeClasses(slots, getAlertUtilityClass, classes);
  };
  var AlertRoot = styled_default2(Paper_default, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], styles5[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const getColor = theme2.palette.mode === "light" ? darken : lighten;
    const getBackgroundColor = theme2.palette.mode === "light" ? lighten : darken;
    return {
      ...theme2.typography.body2,
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px",
      variants: [...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["light"])).map(([color2]) => ({
        props: {
          colorSeverity: color2,
          variant: "standard"
        },
        style: {
          color: theme2.vars ? theme2.vars.palette.Alert[`${color2}Color`] : getColor(theme2.palette[color2].light, 0.6),
          backgroundColor: theme2.vars ? theme2.vars.palette.Alert[`${color2}StandardBg`] : getBackgroundColor(theme2.palette[color2].light, 0.9),
          [`& .${alertClasses_default.icon}`]: theme2.vars ? {
            color: theme2.vars.palette.Alert[`${color2}IconColor`]
          } : {
            color: theme2.palette[color2].main
          }
        }
      })), ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["light"])).map(([color2]) => ({
        props: {
          colorSeverity: color2,
          variant: "outlined"
        },
        style: {
          color: theme2.vars ? theme2.vars.palette.Alert[`${color2}Color`] : getColor(theme2.palette[color2].light, 0.6),
          border: `1px solid ${(theme2.vars || theme2).palette[color2].light}`,
          [`& .${alertClasses_default.icon}`]: theme2.vars ? {
            color: theme2.vars.palette.Alert[`${color2}IconColor`]
          } : {
            color: theme2.palette[color2].main
          }
        }
      })), ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["dark"])).map(([color2]) => ({
        props: {
          colorSeverity: color2,
          variant: "filled"
        },
        style: {
          fontWeight: theme2.typography.fontWeightMedium,
          ...theme2.vars ? {
            color: theme2.vars.palette.Alert[`${color2}FilledColor`],
            backgroundColor: theme2.vars.palette.Alert[`${color2}FilledBg`]
          } : {
            backgroundColor: theme2.palette.mode === "dark" ? theme2.palette[color2].dark : theme2.palette[color2].main,
            color: theme2.palette.getContrastText(theme2.palette[color2].main)
          }
        }
      }))]
    };
  }));
  var AlertIcon = styled_default2("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles5) => styles5.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  var AlertMessage = styled_default2("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles5) => styles5.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  var AlertAction = styled_default2("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles5) => styles5.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  var defaultIconMapping = {
    success: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(SuccessOutlined_default, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ReportProblemOutlined_default, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ErrorOutline_default, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(InfoOutlined_default, {
      fontSize: "inherit"
    })
  };
  var Alert = /* @__PURE__ */ React59.forwardRef(function Alert2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color: color2,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard",
      ...other
    } = props;
    const ownerState = {
      ...props,
      color: color2,
      severity,
      variant,
      colorSeverity: color2 || severity
    };
    const classes = useUtilityClasses9(ownerState);
    const externalForwardedProps = {
      slots: {
        closeButton: components.CloseButton,
        closeIcon: components.CloseIcon,
        ...slots
      },
      slotProps: {
        ...componentsProps,
        ...slotProps
      }
    };
    const [RootSlot, rootSlotProps] = useSlot("root", {
      ref,
      shouldForwardComponentProp: true,
      className: clsx_default(classes.root, className),
      elementType: AlertRoot,
      externalForwardedProps: {
        ...externalForwardedProps,
        ...other
      },
      ownerState,
      additionalProps: {
        role,
        elevation: 0
      }
    });
    const [IconSlot, iconSlotProps] = useSlot("icon", {
      className: classes.icon,
      elementType: AlertIcon,
      externalForwardedProps,
      ownerState
    });
    const [MessageSlot, messageSlotProps] = useSlot("message", {
      className: classes.message,
      elementType: AlertMessage,
      externalForwardedProps,
      ownerState
    });
    const [ActionSlot, actionSlotProps] = useSlot("action", {
      className: classes.action,
      elementType: AlertAction,
      externalForwardedProps,
      ownerState
    });
    const [CloseButtonSlot, closeButtonProps] = useSlot("closeButton", {
      elementType: IconButton_default,
      externalForwardedProps,
      ownerState
    });
    const [CloseIconSlot, closeIconProps] = useSlot("closeIcon", {
      elementType: Close_default,
      externalForwardedProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(RootSlot, {
      ...rootSlotProps,
      children: [icon !== false ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(IconSlot, {
        ...iconSlotProps,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(MessageSlot, {
        ...messageSlotProps,
        children
      }), action != null ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ActionSlot, {
        ...actionSlotProps,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ActionSlot, {
        ...actionSlotProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(CloseButtonSlot, {
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose,
          ...closeButtonProps,
          children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(CloseIconSlot, {
            fontSize: "small",
            ...closeIconProps
          })
        })
      }) : null]
    });
  });
  true ? Alert.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: import_prop_types28.default.node,
    /**
     * The content of the component.
     */
    children: import_prop_types28.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types28.default.object,
    /**
     * @ignore
     */
    className: import_prop_types28.default.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types28.default.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["error", "info", "success", "warning"]), import_prop_types28.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types28.default.shape({
      CloseButton: import_prop_types28.default.elementType,
      CloseIcon: import_prop_types28.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types28.default.shape({
      closeButton: import_prop_types28.default.object,
      closeIcon: import_prop_types28.default.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: import_prop_types28.default.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: import_prop_types28.default.shape({
      error: import_prop_types28.default.node,
      info: import_prop_types28.default.node,
      success: import_prop_types28.default.node,
      warning: import_prop_types28.default.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types28.default.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types28.default.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["error", "info", "success", "warning"]), import_prop_types28.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types28.default.shape({
      action: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object]),
      closeButton: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object]),
      closeIcon: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object]),
      icon: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object]),
      message: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object]),
      root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types28.default.shape({
      action: import_prop_types28.default.elementType,
      closeButton: import_prop_types28.default.elementType,
      closeIcon: import_prop_types28.default.elementType,
      icon: import_prop_types28.default.elementType,
      message: import_prop_types28.default.elementType,
      root: import_prop_types28.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["filled", "outlined", "standard"]), import_prop_types28.default.string])
  } : void 0;
  var Alert_default = Alert;

  // react-user-mgmt/node_modules/@mui/material/Typography/Typography.js
  var React60 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Typography/typographyClasses.js
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  var typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  var typographyClasses_default = typographyClasses;

  // react-user-mgmt/node_modules/@mui/material/Typography/Typography.js
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var v6Colors = {
    primary: true,
    secondary: true,
    error: true,
    info: true,
    success: true,
    warning: true,
    textPrimary: true,
    textSecondary: true,
    textDisabled: true
  };
  var extendSxProp2 = internal_createExtendSxProp();
  var useUtilityClasses10 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  var TypographyRoot = styled_default2("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.variant && styles5[ownerState.variant], ownerState.align !== "inherit" && styles5[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles5.noWrap, ownerState.gutterBottom && styles5.gutterBottom, ownerState.paragraph && styles5.paragraph];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    margin: 0,
    variants: [{
      props: {
        variant: "inherit"
      },
      style: {
        // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
        font: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    }, ...Object.entries(theme2.typography).filter(([variant, value]) => variant !== "inherit" && value && typeof value === "object").map(([variant, value]) => ({
      props: {
        variant
      },
      style: value
    })), ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        color: (theme2.vars || theme2).palette[color2].main
      }
    })), ...Object.entries(theme2.palette?.text || {}).filter(([, value]) => typeof value === "string").map(([color2]) => ({
      props: {
        color: `text${capitalize_default(color2)}`
      },
      style: {
        color: (theme2.vars || theme2).palette.text[color2]
      }
    })), {
      props: ({
        ownerState
      }) => ownerState.align !== "inherit",
      style: {
        textAlign: "var(--Typography-textAlign)"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.noWrap,
      style: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.gutterBottom,
      style: {
        marginBottom: "0.35em"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.paragraph,
      style: {
        marginBottom: 16
      }
    }]
  })));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var Typography = /* @__PURE__ */ React60.forwardRef(function Typography2(inProps, ref) {
    const {
      color: color2,
      ...themeProps
    } = useDefaultProps2({
      props: inProps,
      name: "MuiTypography"
    });
    const isSxColor = !v6Colors[color2];
    const props = extendSxProp2({
      ...themeProps,
      ...isSxColor && {
        color: color2
      }
    });
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping,
      ...other
    } = props;
    const ownerState = {
      ...props,
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    };
    const Component6 = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses10(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TypographyRoot, {
      as: Component6,
      ref,
      className: clsx_default(classes.root, className),
      ...other,
      ownerState,
      style: {
        ...align !== "inherit" && {
          "--Typography-textAlign": align
        },
        ...other.style
      }
    });
  });
  true ? Typography.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: import_prop_types29.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types29.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types29.default.object,
    /**
     * @ignore
     */
    className: import_prop_types29.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), import_prop_types29.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types29.default.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: import_prop_types29.default.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: import_prop_types29.default.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    paragraph: import_prop_types29.default.bool,
    /**
     * @ignore
     */
    style: import_prop_types29.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types29.default.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: import_prop_types29.default.object
  } : void 0;
  var Typography_default = Typography;

  // react-user-mgmt/node_modules/@mui/material/AppBar/AppBar.js
  var React61 = __toESM(require_react());
  var import_prop_types30 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/AppBar/appBarClasses.js
  function getAppBarUtilityClass(slot) {
    return generateUtilityClass("MuiAppBar", slot);
  }
  var appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]);

  // react-user-mgmt/node_modules/@mui/material/AppBar/AppBar.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var useUtilityClasses11 = (ownerState) => {
    const {
      color: color2,
      position: position2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, `position${capitalize_default(position2)}`]
    };
    return composeClasses(slots, getAppBarUtilityClass, classes);
  };
  var joinVars = (var1, var2) => var1 ? `${var1?.replace(")", "")}, ${var2})` : var2;
  var AppBarRoot = styled_default2(Paper_default, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`position${capitalize_default(ownerState.position)}`], styles5[`color${capitalize_default(ownerState.color)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    display: "flex",
    flexDirection: "column",
    width: "100%",
    boxSizing: "border-box",
    // Prevent padding issue with the Modal and fixed positioned AppBar.
    flexShrink: 0,
    variants: [{
      props: {
        position: "fixed"
      },
      style: {
        position: "fixed",
        zIndex: (theme2.vars || theme2).zIndex.appBar,
        top: 0,
        left: "auto",
        right: 0,
        "@media print": {
          // Prevent the app bar to be visible on each printed page.
          position: "absolute"
        }
      }
    }, {
      props: {
        position: "absolute"
      },
      style: {
        position: "absolute",
        zIndex: (theme2.vars || theme2).zIndex.appBar,
        top: 0,
        left: "auto",
        right: 0
      }
    }, {
      props: {
        position: "sticky"
      },
      style: {
        position: "sticky",
        zIndex: (theme2.vars || theme2).zIndex.appBar,
        top: 0,
        left: "auto",
        right: 0
      }
    }, {
      props: {
        position: "static"
      },
      style: {
        position: "static"
      }
    }, {
      props: {
        position: "relative"
      },
      style: {
        position: "relative"
      }
    }, {
      props: {
        color: "inherit"
      },
      style: {
        "--AppBar-color": "inherit"
      }
    }, {
      props: {
        color: "default"
      },
      style: {
        "--AppBar-background": theme2.vars ? theme2.vars.palette.AppBar.defaultBg : theme2.palette.grey[100],
        "--AppBar-color": theme2.vars ? theme2.vars.palette.text.primary : theme2.palette.getContrastText(theme2.palette.grey[100]),
        ...theme2.applyStyles("dark", {
          "--AppBar-background": theme2.vars ? theme2.vars.palette.AppBar.defaultBg : theme2.palette.grey[900],
          "--AppBar-color": theme2.vars ? theme2.vars.palette.text.primary : theme2.palette.getContrastText(theme2.palette.grey[900])
        })
      }
    }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["contrastText"])).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        "--AppBar-background": (theme2.vars ?? theme2).palette[color2].main,
        "--AppBar-color": (theme2.vars ?? theme2).palette[color2].contrastText
      }
    })), {
      props: (props) => props.enableColorOnDark === true && !["inherit", "transparent"].includes(props.color),
      style: {
        backgroundColor: "var(--AppBar-background)",
        color: "var(--AppBar-color)"
      }
    }, {
      props: (props) => props.enableColorOnDark === false && !["inherit", "transparent"].includes(props.color),
      style: {
        backgroundColor: "var(--AppBar-background)",
        color: "var(--AppBar-color)",
        ...theme2.applyStyles("dark", {
          backgroundColor: theme2.vars ? joinVars(theme2.vars.palette.AppBar.darkBg, "var(--AppBar-background)") : null,
          color: theme2.vars ? joinVars(theme2.vars.palette.AppBar.darkColor, "var(--AppBar-color)") : null
        })
      }
    }, {
      props: {
        color: "transparent"
      },
      style: {
        "--AppBar-background": "transparent",
        "--AppBar-color": "inherit",
        backgroundColor: "var(--AppBar-background)",
        color: "var(--AppBar-color)",
        ...theme2.applyStyles("dark", {
          backgroundImage: "none"
        })
      }
    }]
  })));
  var AppBar = /* @__PURE__ */ React61.forwardRef(function AppBar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color: color2 = "primary",
      enableColorOnDark = false,
      position: position2 = "fixed",
      ...other
    } = props;
    const ownerState = {
      ...props,
      color: color2,
      position: position2,
      enableColorOnDark
    };
    const classes = useUtilityClasses11(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(AppBarRoot, {
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: clsx_default(classes.root, className, position2 === "fixed" && "mui-fixed"),
      ref,
      ...other
    });
  });
  true ? AppBar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types30.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types30.default.object,
    /**
     * @ignore
     */
    className: import_prop_types30.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), import_prop_types30.default.string]),
    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: import_prop_types30.default.bool,
    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS/position).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: import_prop_types30.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object])
  } : void 0;
  var AppBar_default = AppBar;

  // react-user-mgmt/node_modules/@mui/material/Portal/Portal.js
  var React62 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());
  var import_prop_types31 = __toESM(require_prop_types());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React62.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React62.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React62.isValidElement(children) ? getReactElementRef(children) : null, forwardedRef);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(forwardedRef, mountNode);
        return () => {
          setRef(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React62.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React62.cloneElement(children, newProps);
      }
      return children;
    }
    return mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode;
  });
  true ? Portal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The children to render into the `container`.
     */
    children: import_prop_types31.default.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types31.default.oneOfType([HTMLElementType, import_prop_types31.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types31.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  var Portal_default = Portal;

  // react-user-mgmt/node_modules/@mui/material/Chip/Chip.js
  var React64 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/Cancel.js
  var React63 = __toESM(require_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime38.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // react-user-mgmt/node_modules/@mui/material/Chip/chipClasses.js
  function getChipUtilityClass(slot) {
    return generateUtilityClass("MuiChip", slot);
  }
  var chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorDefault", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  var chipClasses_default = chipClasses;

  // react-user-mgmt/node_modules/@mui/material/Chip/Chip.js
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var useUtilityClasses12 = (ownerState) => {
    const {
      classes,
      disabled,
      size,
      color: color2,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color2)}`, `${variant}${capitalize_default(color2)}`],
      label: ["label", `label${capitalize_default(size)}`],
      avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color2)}`],
      icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color2)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
    };
    return composeClasses(slots, getChipUtilityClass, classes);
  };
  var ChipRoot = styled_default2("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        color: color2,
        iconColor,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles5.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles5[`avatar${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles5[`avatarColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles5.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles5[`icon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles5[`iconColor${capitalize_default(iconColor)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5[`deleteIcon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5[`deleteIconColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles5[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
      }, styles5.root, styles5[`size${capitalize_default(size)}`], styles5[`color${capitalize_default(color2)}`], clickable && styles5.clickable, clickable && color2 !== "default" && styles5[`clickableColor${capitalize_default(color2)})`], onDelete && styles5.deletable, onDelete && color2 !== "default" && styles5[`deletableColor${capitalize_default(color2)}`], styles5[variant], styles5[`${variant}${capitalize_default(color2)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const textColor = theme2.palette.mode === "light" ? theme2.palette.grey[700] : theme2.palette.grey[300];
    return {
      maxWidth: "100%",
      fontFamily: theme2.typography.fontFamily,
      fontSize: theme2.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme2.vars || theme2).palette.text.primary,
      backgroundColor: (theme2.vars || theme2).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme2.transitions.create(["background-color", "box-shadow"]),
      // reset cursor explicitly in case ButtonBase is used
      cursor: "unset",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: "none",
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: (theme2.vars || theme2).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme2.vars ? theme2.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme2.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: (theme2.vars || theme2).palette.primary.contrastText,
        backgroundColor: (theme2.vars || theme2).palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: (theme2.vars || theme2).palette.secondary.contrastText,
        backgroundColor: (theme2.vars || theme2).palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme2.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: {
        marginLeft: 5,
        marginRight: -6
      },
      [`& .${chipClasses_default.deleteIcon}`]: {
        WebkitTapHighlightColor: "transparent",
        color: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme2.palette.text.primary, 0.26),
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme2.palette.text.primary, 0.4)
        }
      },
      variants: [{
        props: {
          size: "small"
        },
        style: {
          height: 24,
          [`& .${chipClasses_default.icon}`]: {
            fontSize: 18,
            marginLeft: 4,
            marginRight: -4
          },
          [`& .${chipClasses_default.deleteIcon}`]: {
            fontSize: 16,
            marginRight: 4,
            marginLeft: -4
          }
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["contrastText"])).map(([color2]) => {
        return {
          props: {
            color: color2
          },
          style: {
            backgroundColor: (theme2.vars || theme2).palette[color2].main,
            color: (theme2.vars || theme2).palette[color2].contrastText,
            [`& .${chipClasses_default.deleteIcon}`]: {
              color: theme2.vars ? `rgba(${theme2.vars.palette[color2].contrastTextChannel} / 0.7)` : alpha(theme2.palette[color2].contrastText, 0.7),
              "&:hover, &:active": {
                color: (theme2.vars || theme2).palette[color2].contrastText
              }
            }
          }
        };
      }), {
        props: (props) => props.iconColor === props.color,
        style: {
          [`& .${chipClasses_default.icon}`]: {
            color: theme2.vars ? theme2.vars.palette.Chip.defaultIconColor : textColor
          }
        }
      }, {
        props: (props) => props.iconColor === props.color && props.color !== "default",
        style: {
          [`& .${chipClasses_default.icon}`]: {
            color: "inherit"
          }
        }
      }, {
        props: {
          onDelete: true
        },
        style: {
          [`&.${chipClasses_default.focusVisible}`]: {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : alpha(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
          }
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["dark"])).map(([color2]) => {
        return {
          props: {
            color: color2,
            onDelete: true
          },
          style: {
            [`&.${chipClasses_default.focusVisible}`]: {
              background: (theme2.vars || theme2).palette[color2].dark
            }
          }
        };
      }), {
        props: {
          clickable: true
        },
        style: {
          userSelect: "none",
          WebkitTapHighlightColor: "transparent",
          cursor: "pointer",
          "&:hover": {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : alpha(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity)
          },
          [`&.${chipClasses_default.focusVisible}`]: {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.selectedChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : alpha(theme2.palette.action.selected, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
          },
          "&:active": {
            boxShadow: (theme2.vars || theme2).shadows[1]
          }
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter(["dark"])).map(([color2]) => ({
        props: {
          color: color2,
          clickable: true
        },
        style: {
          [`&:hover, &.${chipClasses_default.focusVisible}`]: {
            backgroundColor: (theme2.vars || theme2).palette[color2].dark
          }
        }
      })), {
        props: {
          variant: "outlined"
        },
        style: {
          backgroundColor: "transparent",
          border: theme2.vars ? `1px solid ${theme2.vars.palette.Chip.defaultBorder}` : `1px solid ${theme2.palette.mode === "light" ? theme2.palette.grey[400] : theme2.palette.grey[700]}`,
          [`&.${chipClasses_default.clickable}:hover`]: {
            backgroundColor: (theme2.vars || theme2).palette.action.hover
          },
          [`&.${chipClasses_default.focusVisible}`]: {
            backgroundColor: (theme2.vars || theme2).palette.action.focus
          },
          [`& .${chipClasses_default.avatar}`]: {
            marginLeft: 4
          },
          [`& .${chipClasses_default.avatarSmall}`]: {
            marginLeft: 2
          },
          [`& .${chipClasses_default.icon}`]: {
            marginLeft: 4
          },
          [`& .${chipClasses_default.iconSmall}`]: {
            marginLeft: 2
          },
          [`& .${chipClasses_default.deleteIcon}`]: {
            marginRight: 5
          },
          [`& .${chipClasses_default.deleteIconSmall}`]: {
            marginRight: 3
          }
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          variant: "outlined",
          color: color2
        },
        style: {
          color: (theme2.vars || theme2).palette[color2].main,
          border: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / 0.7)` : alpha(theme2.palette[color2].main, 0.7)}`,
          [`&.${chipClasses_default.clickable}:hover`]: {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette[color2].main, theme2.palette.action.hoverOpacity)
          },
          [`&.${chipClasses_default.focusVisible}`]: {
            backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / ${theme2.vars.palette.action.focusOpacity})` : alpha(theme2.palette[color2].main, theme2.palette.action.focusOpacity)
          },
          [`& .${chipClasses_default.deleteIcon}`]: {
            color: theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / 0.7)` : alpha(theme2.palette[color2].main, 0.7),
            "&:hover, &:active": {
              color: (theme2.vars || theme2).palette[color2].main
            }
          }
        }
      }))]
    };
  }));
  var ChipLabel = styled_default2("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles5.label, styles5[`label${capitalize_default(size)}`]];
    }
  })({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap",
    variants: [{
      props: {
        variant: "outlined"
      },
      style: {
        paddingLeft: 11,
        paddingRight: 11
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        paddingLeft: 8,
        paddingRight: 8
      }
    }, {
      props: {
        size: "small",
        variant: "outlined"
      },
      style: {
        paddingLeft: 7,
        paddingRight: 7
      }
    }]
  });
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = /* @__PURE__ */ React64.forwardRef(function Chip2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color: color2 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false,
      // TODO v6: Rename to `focusableWhenDisabled`.
      ...other
    } = props;
    const chipRef = React64.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = {
      ...props,
      component,
      disabled,
      size,
      color: color2,
      iconColor: /* @__PURE__ */ React64.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
      onDelete: !!onDelete,
      clickable,
      variant
    };
    const classes = useUtilityClasses12(ownerState);
    const moreProps = component === ButtonBase_default ? {
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible,
      ...onDelete && {
        disableRipple: true
      }
    } : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && /* @__PURE__ */ React64.isValidElement(deleteIconProp) ? /* @__PURE__ */ React64.cloneElement(deleteIconProp, {
        className: clsx_default(deleteIconProp.props.className, classes.deleteIcon),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Cancel_default, {
        className: clsx_default(classes.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React64.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React64.cloneElement(avatarProp, {
        className: clsx_default(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React64.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React64.cloneElement(iconProp, {
        className: clsx_default(classes.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(ChipRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState,
      ...moreProps,
      ...other,
      children: [avatar || icon, /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ChipLabel, {
        className: clsx_default(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    });
  });
  true ? Chip.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types32.default.element,
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types32.default.object,
    /**
     * @ignore
     */
    className: import_prop_types32.default.string,
    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: import_prop_types32.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types32.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types32.default.elementType,
    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: import_prop_types32.default.element,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types32.default.bool,
    /**
     * Icon element.
     */
    icon: import_prop_types32.default.element,
    /**
     * The content of the component.
     */
    label: import_prop_types32.default.node,
    /**
     * @ignore
     */
    onClick: import_prop_types32.default.func,
    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: import_prop_types32.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types32.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types32.default.func,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["medium", "small"]), import_prop_types32.default.string]),
    /**
     * If `true`, allows the disabled chip to escape focus.
     * If `false`, allows the disabled chip to receive focus.
     * @default false
     */
    skipFocusWhenDisabled: import_prop_types32.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object]),
    /**
     * @ignore
     */
    tabIndex: import_prop_types32.default.number,
    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["filled", "outlined"]), import_prop_types32.default.string])
  } : void 0;
  var Chip_default = Chip;

  // react-user-mgmt/node_modules/@mui/material/InputBase/InputBase.js
  var React68 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/TextareaAutosize/TextareaAutosize.js
  var React65 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  function getStyleValue2(value) {
    return parseInt(value, 10) || 0;
  }
  var styles = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isObjectEmpty3(object) {
    for (const _2 in object) {
      return false;
    }
    return true;
  }
  function isEmpty2(obj) {
    return isObjectEmpty3(obj) || obj.outerHeightStyle === 0 && !obj.overflowing;
  }
  var TextareaAutosize = /* @__PURE__ */ React65.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style4,
      value,
      ...other
    } = props;
    const {
      current: isControlled
    } = React65.useRef(value != null);
    const textareaRef = React65.useRef(null);
    const handleRef = useForkRef(forwardedRef, textareaRef);
    const heightRef = React65.useRef(null);
    const hiddenTextareaRef = React65.useRef(null);
    const calculateTextareaStyles = React65.useCallback(() => {
      const textarea = textareaRef.current;
      const hiddenTextarea = hiddenTextareaRef.current;
      if (!textarea || !hiddenTextarea) {
        return void 0;
      }
      const containerWindow = ownerWindow(textarea);
      const computedStyle = containerWindow.getComputedStyle(textarea);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0,
          overflowing: false
        };
      }
      hiddenTextarea.style.width = computedStyle.width;
      hiddenTextarea.value = textarea.value || props.placeholder || "x";
      if (hiddenTextarea.value.slice(-1) === "\n") {
        hiddenTextarea.value += " ";
      }
      const boxSizing2 = computedStyle.boxSizing;
      const padding2 = getStyleValue2(computedStyle.paddingBottom) + getStyleValue2(computedStyle.paddingTop);
      const border2 = getStyleValue2(computedStyle.borderBottomWidth) + getStyleValue2(computedStyle.borderTopWidth);
      const innerHeight = hiddenTextarea.scrollHeight;
      hiddenTextarea.value = "x";
      const singleRowHeight = hiddenTextarea.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflowing
      };
    }, [maxRows, minRows, props.placeholder]);
    const syncHeight = React65.useCallback(() => {
      const textarea = textareaRef.current;
      const textareaStyles = calculateTextareaStyles();
      if (!textarea || !textareaStyles || isEmpty2(textareaStyles)) {
        return;
      }
      const outerHeightStyle = textareaStyles.outerHeightStyle;
      if (heightRef.current !== outerHeightStyle) {
        heightRef.current = outerHeightStyle;
        textarea.style.height = `${outerHeightStyle}px`;
      }
      textarea.style.overflow = textareaStyles.overflowing ? "hidden" : "";
    }, [calculateTextareaStyles]);
    const frameRef = React65.useRef(-1);
    useEnhancedEffect_default(() => {
      const debounceHandleResize = debounce(() => syncHeight());
      const textarea = textareaRef?.current;
      if (!textarea) {
        return void 0;
      }
      const containerWindow = ownerWindow(textarea);
      containerWindow.addEventListener("resize", debounceHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(() => {
          resizeObserver.unobserve(textarea);
          cancelAnimationFrame(frameRef.current);
          syncHeight();
          frameRef.current = requestAnimationFrame(() => {
            resizeObserver.observe(textarea);
          });
        });
        resizeObserver.observe(textarea);
      }
      return () => {
        debounceHandleResize.clear();
        cancelAnimationFrame(frameRef.current);
        containerWindow.removeEventListener("resize", debounceHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [calculateTextareaStyles, syncHeight]);
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    const handleChange = (event) => {
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(React65.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime40.jsx)("textarea", {
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: style4,
        ...other
      }), /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: hiddenTextareaRef,
        tabIndex: -1,
        style: {
          ...styles.shadow,
          ...style4,
          paddingTop: 0,
          paddingBottom: 0
        }
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    className: import_prop_types33.default.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    /**
     * @ignore
     */
    onChange: import_prop_types33.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types33.default.string,
    /**
     * @ignore
     */
    style: import_prop_types33.default.object,
    /**
     * @ignore
     */
    value: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.string), import_prop_types33.default.number, import_prop_types33.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // react-user-mgmt/node_modules/@mui/material/utils/isHostComponent.js
  function isHostComponent2(element) {
    return typeof element === "string";
  }
  var isHostComponent_default2 = isHostComponent2;

  // react-user-mgmt/node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // react-user-mgmt/node_modules/@mui/material/FormControl/FormControlContext.js
  var React66 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React66.createContext(void 0);
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // react-user-mgmt/node_modules/@mui/material/FormControl/useFormControl.js
  var React67 = __toESM(require_react());
  function useFormControl() {
    return React67.useContext(FormControlContext_default);
  }

  // react-user-mgmt/node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // react-user-mgmt/node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  var inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // react-user-mgmt/node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var _InputGlobalStyles;
  var rootOverridesResolver = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.formControl && styles5.formControl, ownerState.startAdornment && styles5.adornedStart, ownerState.endAdornment && styles5.adornedEnd, ownerState.error && styles5.error, ownerState.size === "small" && styles5.sizeSmall, ownerState.multiline && styles5.multiline, ownerState.color && styles5[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles5.fullWidth, ownerState.hiddenLabel && styles5.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.input, ownerState.size === "small" && styles5.inputSizeSmall, ownerState.multiline && styles5.inputMultiline, ownerState.type === "search" && styles5.inputTypeSearch, ownerState.startAdornment && styles5.inputAdornedStart, ownerState.endAdornment && styles5.inputAdornedEnd, ownerState.hiddenLabel && styles5.inputHiddenLabel];
  };
  var useUtilityClasses13 = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size && size !== "medium" && `size${capitalize_default(size)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default2("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    ...theme2.typography.body1,
    color: (theme2.vars || theme2).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled,
      cursor: "default"
    },
    variants: [{
      props: ({
        ownerState
      }) => ownerState.multiline,
      style: {
        padding: "4px 0 5px"
      }
    }, {
      props: ({
        ownerState,
        size
      }) => ownerState.multiline && size === "small",
      style: {
        paddingTop: 1
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.fullWidth,
      style: {
        width: "100%"
      }
    }]
  })));
  var InputBaseInput = styled_default2("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const light2 = theme2.palette.mode === "light";
    const placeholder = {
      color: "currentColor",
      ...theme2.vars ? {
        opacity: theme2.vars.opacity.inputPlaceholder
      } : {
        opacity: light2 ? 0.42 : 0.5
      },
      transition: theme2.transitions.create("opacity", {
        duration: theme2.transitions.duration.shorter
      })
    };
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme2.vars ? {
      opacity: theme2.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return {
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme2.vars || theme2).palette.text.disabled
        // Fix opacity Safari bug
      },
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disableInjectingGlobalStyles,
        style: {
          animationName: "mui-auto-fill-cancel",
          animationDuration: "10ms",
          "&:-webkit-autofill": {
            animationDuration: "5000s",
            animationName: "mui-auto-fill"
          }
        }
      }, {
        props: {
          size: "small"
        },
        style: {
          paddingTop: 1
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline,
        style: {
          height: "auto",
          resize: "none",
          padding: 0,
          paddingTop: 0
        }
      }, {
        props: {
          type: "search"
        },
        style: {
          MozAppearance: "textfield"
          // Improve type search style.
        }
      }]
    };
  }));
  var InputGlobalStyles = globalCss({
    "@keyframes mui-auto-fill": {
      from: {
        display: "block"
      }
    },
    "@keyframes mui-auto-fill-cancel": {
      from: {
        display: "block"
      }
    }
  });
  var InputBase = /* @__PURE__ */ React68.forwardRef(function InputBase2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      color: color2,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      error,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      margin: margin2,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      size,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp,
      ...other
    } = props;
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React68.useRef(value != null);
    const inputRef = React68.useRef();
    const handleInputRefWarning = React68.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React68.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React68.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React68.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React68.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? "MUI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : formatMuiErrorMessage(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React68.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = {
          type: void 0,
          minRows: rows,
          maxRows: rows,
          ...inputProps
        };
      } else {
        inputProps = {
          type: void 0,
          maxRows,
          minRows,
          ...inputProps
        };
      }
      InputComponent = TextareaAutosize_default;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React68.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = {
      ...props,
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    };
    const classes = useUtilityClasses13(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input3 = slots.input || components.Input || InputBaseInput;
    inputProps = {
      ...inputProps,
      ...slotProps.input ?? componentsProps.input
    };
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(React68.Fragment, {
      children: [!disableInjectingGlobalStyles && typeof InputGlobalStyles === "function" && // For Emotion/Styled-components, InputGlobalStyles will be a function
      // For Pigment CSS, this has no effect because the InputGlobalStyles will be null.
      (_InputGlobalStyles || (_InputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(InputGlobalStyles, {}))), /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Root, {
        ...rootProps,
        ref,
        onClick: handleClick,
        ...other,
        ...!isHostComponent_default2(Root) && {
          ownerState: {
            ...ownerState,
            ...rootProps.ownerState
          }
        },
        className: clsx_default(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Input3, {
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type,
            ...inputProps,
            ...!isHostComponent_default2(Input3) && {
              as: InputComponent,
              ownerState: {
                ...ownerState,
                ...inputProps.ownerState
              }
            },
            ref: handleInputRef,
            className: clsx_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          })
        }), endAdornment, renderSuffix ? renderSuffix({
          ...fcs,
          startAdornment
        }) : null]
      })]
    });
  });
  true ? InputBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types34.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types34.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types34.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types34.default.object,
    /**
     * @ignore
     */
    className: import_prop_types34.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types34.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types34.default.shape({
      Input: import_prop_types34.default.elementType,
      Root: import_prop_types34.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types34.default.shape({
      input: import_prop_types34.default.object,
      root: import_prop_types34.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types34.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types34.default.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: import_prop_types34.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types34.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types34.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types34.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types34.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef_default,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types34.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types34.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types34.default.oneOfType([import_prop_types34.default.number, import_prop_types34.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types34.default.oneOfType([import_prop_types34.default.number, import_prop_types34.default.string]),
    /**
     * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types34.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types34.default.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: import_prop_types34.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types34.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types34.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types34.default.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: import_prop_types34.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types34.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types34.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types34.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types34.default.bool,
    /**
     * @ignore
     */
    renderSuffix: import_prop_types34.default.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types34.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types34.default.oneOfType([import_prop_types34.default.number, import_prop_types34.default.string]),
    /**
     * The size of the component.
     */
    size: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["medium", "small"]), import_prop_types34.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types34.default.shape({
      input: import_prop_types34.default.object,
      root: import_prop_types34.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types34.default.shape({
      input: import_prop_types34.default.elementType,
      root: import_prop_types34.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types34.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types34.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types34.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // react-user-mgmt/node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  var inputClasses = {
    ...inputBaseClasses_default,
    ...generateUtilityClasses("MuiInput", ["root", "underline", "input"])
  };
  var inputClasses_default = inputClasses;

  // react-user-mgmt/node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = {
    ...inputBaseClasses_default,
    ...generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"])
  };
  var outlinedInputClasses_default = outlinedInputClasses;

  // react-user-mgmt/node_modules/@mui/material/FilledInput/filledInputClasses.js
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  var filledInputClasses = {
    ...inputBaseClasses_default,
    ...generateUtilityClasses("MuiFilledInput", ["root", "underline", "input", "adornedStart", "adornedEnd", "sizeSmall", "multiline", "hiddenLabel"])
  };
  var filledInputClasses_default = filledInputClasses;

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React69 = __toESM(require_react());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime42.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // react-user-mgmt/node_modules/@mui/material/Avatar/Avatar.js
  var React71 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/Person.js
  var React70 = __toESM(require_react());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var Person_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), "Person");

  // react-user-mgmt/node_modules/@mui/material/Avatar/avatarClasses.js
  function getAvatarUtilityClass(slot) {
    return generateUtilityClass("MuiAvatar", slot);
  }
  var avatarClasses = generateUtilityClasses("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]);

  // react-user-mgmt/node_modules/@mui/material/Avatar/Avatar.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var useUtilityClasses14 = (ownerState) => {
    const {
      classes,
      variant,
      colorDefault
    } = ownerState;
    const slots = {
      root: ["root", variant, colorDefault && "colorDefault"],
      img: ["img"],
      fallback: ["fallback"]
    };
    return composeClasses(slots, getAvatarUtilityClass, classes);
  };
  var AvatarRoot = styled_default2("div", {
    name: "MuiAvatar",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], ownerState.colorDefault && styles5.colorDefault];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    width: 40,
    height: 40,
    fontFamily: theme2.typography.fontFamily,
    fontSize: theme2.typography.pxToRem(20),
    lineHeight: 1,
    borderRadius: "50%",
    overflow: "hidden",
    userSelect: "none",
    variants: [{
      props: {
        variant: "rounded"
      },
      style: {
        borderRadius: (theme2.vars || theme2).shape.borderRadius
      }
    }, {
      props: {
        variant: "square"
      },
      style: {
        borderRadius: 0
      }
    }, {
      props: {
        colorDefault: true
      },
      style: {
        color: (theme2.vars || theme2).palette.background.default,
        ...theme2.vars ? {
          backgroundColor: theme2.vars.palette.Avatar.defaultBg
        } : {
          backgroundColor: theme2.palette.grey[400],
          ...theme2.applyStyles("dark", {
            backgroundColor: theme2.palette.grey[600]
          })
        }
      }
    }]
  })));
  var AvatarImg = styled_default2("img", {
    name: "MuiAvatar",
    slot: "Img",
    overridesResolver: (props, styles5) => styles5.img
  })({
    width: "100%",
    height: "100%",
    textAlign: "center",
    // Handle non-square image.
    objectFit: "cover",
    // Hide alt text.
    color: "transparent",
    // Hide the image broken icon, only works on Chrome.
    textIndent: 1e4
  });
  var AvatarFallback = styled_default2(Person_default, {
    name: "MuiAvatar",
    slot: "Fallback",
    overridesResolver: (props, styles5) => styles5.fallback
  })({
    width: "75%",
    height: "75%"
  });
  function useLoaded({
    crossOrigin,
    referrerPolicy,
    src,
    srcSet
  }) {
    const [loaded, setLoaded] = React71.useState(false);
    React71.useEffect(() => {
      if (!src && !srcSet) {
        return void 0;
      }
      setLoaded(false);
      let active = true;
      const image = new Image();
      image.onload = () => {
        if (!active) {
          return;
        }
        setLoaded("loaded");
      };
      image.onerror = () => {
        if (!active) {
          return;
        }
        setLoaded("error");
      };
      image.crossOrigin = crossOrigin;
      image.referrerPolicy = referrerPolicy;
      image.src = src;
      if (srcSet) {
        image.srcset = srcSet;
      }
      return () => {
        active = false;
      };
    }, [crossOrigin, referrerPolicy, src, srcSet]);
    return loaded;
  }
  var Avatar = /* @__PURE__ */ React71.forwardRef(function Avatar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAvatar"
    });
    const {
      alt,
      children: childrenProp,
      className,
      component = "div",
      slots = {},
      slotProps = {},
      imgProps,
      sizes,
      src,
      srcSet,
      variant = "circular",
      ...other
    } = props;
    let children = null;
    const ownerState = {
      ...props,
      component,
      variant
    };
    const loaded = useLoaded({
      ...imgProps,
      ...typeof slotProps.img === "function" ? slotProps.img(ownerState) : slotProps.img,
      src,
      srcSet
    });
    const hasImg = src || srcSet;
    const hasImgNotFailing = hasImg && loaded !== "error";
    ownerState.colorDefault = !hasImgNotFailing;
    delete ownerState.ownerState;
    const classes = useUtilityClasses14(ownerState);
    const [ImgSlot, imgSlotProps] = useSlot("img", {
      className: classes.img,
      elementType: AvatarImg,
      externalForwardedProps: {
        slots,
        slotProps: {
          img: {
            ...imgProps,
            ...slotProps.img
          }
        }
      },
      additionalProps: {
        alt,
        src,
        srcSet,
        sizes
      },
      ownerState
    });
    if (hasImgNotFailing) {
      children = /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ImgSlot, {
        ...imgSlotProps
      });
    } else if (!!childrenProp || childrenProp === 0) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(AvatarFallback, {
        ownerState,
        className: classes.fallback
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(AvatarRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ...other,
      ownerState,
      children
    });
  });
  true ? Avatar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Used in combination with `src` or `srcSet` to
     * provide an alt attribute for the rendered `img` element.
     */
    alt: import_prop_types35.default.string,
    /**
     * Used to render icon or text elements inside the Avatar if `src` is not set.
     * This can be an element, or just a string.
     */
    children: import_prop_types35.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types35.default.object,
    /**
     * @ignore
     */
    className: import_prop_types35.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types35.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
     * It can be used to listen for the loading error event.
     * @deprecated Use `slotProps.img` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    imgProps: import_prop_types35.default.object,
    /**
     * The `sizes` attribute for the `img` element.
     */
    sizes: import_prop_types35.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types35.default.shape({
      img: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types35.default.shape({
      img: import_prop_types35.default.elementType
    }),
    /**
     * The `src` attribute for the `img` element.
     */
    src: import_prop_types35.default.string,
    /**
     * The `srcSet` attribute for the `img` element.
     * Use this attribute for responsive image display.
     */
    srcSet: import_prop_types35.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object]),
    /**
     * The shape of the avatar.
     * @default 'circular'
     */
    variant: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["circular", "rounded", "square"]), import_prop_types35.default.string])
  } : void 0;
  var Avatar_default = Avatar;

  // react-user-mgmt/node_modules/@mui/material/Backdrop/Backdrop.js
  var React73 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Fade/Fade.js
  var React72 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React72.forwardRef(function Fade2(props, ref) {
    const theme2 = useTheme5();
    const defaultTimeout = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default,
      ...other
    } = props;
    const enableStrictModeCompat = true;
    const nodeRef = React72.useRef(null);
    const handleRef = useForkRef_default(nodeRef, getReactElementRef(children), ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node2.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node2.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(TransitionComponent, {
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2,
      ...other,
      children: (state, {
        ownerState,
        ...restChildProps
      }) => {
        return /* @__PURE__ */ React72.cloneElement(children, {
          style: {
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0,
            ...styles2[state],
            ...style4,
            ...children.props.style
          },
          ref: handleRef,
          ...restChildProps
        });
      }
    });
  });
  true ? Fade.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types36.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types36.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types36.default.oneOfType([import_prop_types36.default.shape({
      enter: import_prop_types36.default.string,
      exit: import_prop_types36.default.string
    }), import_prop_types36.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types36.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types36.default.func,
    /**
     * @ignore
     */
    style: import_prop_types36.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.shape({
      appear: import_prop_types36.default.number,
      enter: import_prop_types36.default.number,
      exit: import_prop_types36.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // react-user-mgmt/node_modules/@mui/material/Backdrop/backdropClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  var backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);

  // react-user-mgmt/node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var useUtilityClasses15 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default2("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.invisible && styles5.invisible];
    }
  })({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent",
    variants: [{
      props: {
        invisible: true
      },
      style: {
        backgroundColor: "transparent"
      }
    }]
  });
  var Backdrop = /* @__PURE__ */ React73.forwardRef(function Backdrop2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      invisible = false,
      open,
      components = {},
      componentsProps = {},
      slotProps = {},
      slots = {},
      TransitionComponent: TransitionComponentProp,
      transitionDuration,
      ...other
    } = props;
    const ownerState = {
      ...props,
      component,
      invisible
    };
    const classes = useUtilityClasses15(ownerState);
    const backwardCompatibleSlots = {
      transition: TransitionComponentProp,
      root: components.Root,
      ...slots
    };
    const backwardCompatibleSlotProps = {
      ...componentsProps,
      ...slotProps
    };
    const externalForwardedProps = {
      slots: backwardCompatibleSlots,
      slotProps: backwardCompatibleSlotProps
    };
    const [RootSlot, rootProps] = useSlot("root", {
      elementType: BackdropRoot,
      externalForwardedProps,
      className: clsx_default(classes.root, className),
      ownerState
    });
    const [TransitionSlot, transitionProps] = useSlot("transition", {
      elementType: Fade_default,
      externalForwardedProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(TransitionSlot, {
      in: open,
      timeout: transitionDuration,
      ...other,
      ...transitionProps,
      children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(RootSlot, {
        "aria-hidden": true,
        ...rootProps,
        classes,
        ref,
        children
      })
    });
  });
  true ? Backdrop.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types37.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types37.default.object,
    /**
     * @ignore
     */
    className: import_prop_types37.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types37.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types37.default.shape({
      Root: import_prop_types37.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types37.default.shape({
      root: import_prop_types37.default.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: import_prop_types37.default.bool,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types37.default.bool.isRequired,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types37.default.shape({
      root: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object]),
      transition: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types37.default.shape({
      root: import_prop_types37.default.elementType,
      transition: import_prop_types37.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    TransitionComponent: import_prop_types37.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: import_prop_types37.default.oneOfType([import_prop_types37.default.number, import_prop_types37.default.shape({
      appear: import_prop_types37.default.number,
      enter: import_prop_types37.default.number,
      exit: import_prop_types37.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // react-user-mgmt/node_modules/@mui/material/Box/Box.js
  var import_prop_types38 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Box/boxClasses.js
  var boxClasses = generateUtilityClasses("MuiBox", ["root"]);
  var boxClasses_default = boxClasses;

  // react-user-mgmt/node_modules/@mui/material/Box/Box.js
  var defaultTheme4 = createTheme2();
  var Box = createBox({
    themeId: identifier_default,
    defaultTheme: defaultTheme4,
    defaultClassName: boxClasses_default.root,
    generateClassName: ClassNameGenerator_default.generate
  });
  true ? Box.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types38.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types38.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
  } : void 0;
  var Box_default = Box;

  // react-user-mgmt/node_modules/@mui/material/Button/Button.js
  var React76 = __toESM(require_react());
  var import_prop_types39 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Button/buttonClasses.js
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  var buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge", "loading", "loadingWrapper", "loadingIconPlaceholder", "loadingIndicator", "loadingPositionCenter", "loadingPositionStart", "loadingPositionEnd"]);
  var buttonClasses_default = buttonClasses;

  // react-user-mgmt/node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  var React74 = __toESM(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React74.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // react-user-mgmt/node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.js
  var React75 = __toESM(require_react());
  var ButtonGroupButtonContext = /* @__PURE__ */ React75.createContext(void 0);
  if (true) {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  var ButtonGroupButtonContext_default = ButtonGroupButtonContext;

  // react-user-mgmt/node_modules/@mui/material/Button/Button.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var useUtilityClasses16 = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      loading,
      loadingPosition,
      classes
    } = ownerState;
    const slots = {
      root: ["root", loading && "loading", variant, `${variant}${capitalize_default(color2)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, disableElevation && "disableElevation", fullWidth && "fullWidth", loading && `loadingPosition${capitalize_default(loadingPosition)}`],
      startIcon: ["icon", "startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["icon", "endIcon", `iconSize${capitalize_default(size)}`],
      loadingIndicator: ["loadingIndicator"],
      loadingWrapper: ["loadingWrapper"]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return {
      ...classes,
      // forward the focused, disabled, etc. classes to the ButtonBase
      ...composedClasses
    };
  };
  var commonIconStyles = [{
    props: {
      size: "small"
    },
    style: {
      "& > *:nth-of-type(1)": {
        fontSize: 18
      }
    }
  }, {
    props: {
      size: "medium"
    },
    style: {
      "& > *:nth-of-type(1)": {
        fontSize: 20
      }
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      "& > *:nth-of-type(1)": {
        fontSize: 22
      }
    }
  }];
  var ButtonRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[ownerState.variant], styles5[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles5[`size${capitalize_default(ownerState.size)}`], styles5[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles5.colorInherit, ownerState.disableElevation && styles5.disableElevation, ownerState.fullWidth && styles5.fullWidth, ownerState.loading && styles5.loading];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const inheritContainedBackgroundColor = theme2.palette.mode === "light" ? theme2.palette.grey[300] : theme2.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme2.palette.mode === "light" ? theme2.palette.grey.A100 : theme2.palette.grey[700];
    return {
      ...theme2.typography.button,
      minWidth: 64,
      padding: "6px 16px",
      border: 0,
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      transition: theme2.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme2.transitions.duration.short
      }),
      "&:hover": {
        textDecoration: "none"
      },
      [`&.${buttonClasses_default.disabled}`]: {
        color: (theme2.vars || theme2).palette.action.disabled
      },
      variants: [{
        props: {
          variant: "contained"
        },
        style: {
          color: `var(--variant-containedColor)`,
          backgroundColor: `var(--variant-containedBg)`,
          boxShadow: (theme2.vars || theme2).shadows[2],
          "&:hover": {
            boxShadow: (theme2.vars || theme2).shadows[4],
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              boxShadow: (theme2.vars || theme2).shadows[2]
            }
          },
          "&:active": {
            boxShadow: (theme2.vars || theme2).shadows[8]
          },
          [`&.${buttonClasses_default.focusVisible}`]: {
            boxShadow: (theme2.vars || theme2).shadows[6]
          },
          [`&.${buttonClasses_default.disabled}`]: {
            color: (theme2.vars || theme2).palette.action.disabled,
            boxShadow: (theme2.vars || theme2).shadows[0],
            backgroundColor: (theme2.vars || theme2).palette.action.disabledBackground
          }
        }
      }, {
        props: {
          variant: "outlined"
        },
        style: {
          padding: "5px 15px",
          border: "1px solid currentColor",
          borderColor: `var(--variant-outlinedBorder, currentColor)`,
          backgroundColor: `var(--variant-outlinedBg)`,
          color: `var(--variant-outlinedColor)`,
          [`&.${buttonClasses_default.disabled}`]: {
            border: `1px solid ${(theme2.vars || theme2).palette.action.disabledBackground}`
          }
        }
      }, {
        props: {
          variant: "text"
        },
        style: {
          padding: "6px 8px",
          color: `var(--variant-textColor)`,
          backgroundColor: `var(--variant-textBg)`
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          color: color2
        },
        style: {
          "--variant-textColor": (theme2.vars || theme2).palette[color2].main,
          "--variant-outlinedColor": (theme2.vars || theme2).palette[color2].main,
          "--variant-outlinedBorder": theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / 0.5)` : alpha(theme2.palette[color2].main, 0.5),
          "--variant-containedColor": (theme2.vars || theme2).palette[color2].contrastText,
          "--variant-containedBg": (theme2.vars || theme2).palette[color2].main,
          "@media (hover: hover)": {
            "&:hover": {
              "--variant-containedBg": (theme2.vars || theme2).palette[color2].dark,
              "--variant-textBg": theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette[color2].main, theme2.palette.action.hoverOpacity),
              "--variant-outlinedBorder": (theme2.vars || theme2).palette[color2].main,
              "--variant-outlinedBg": theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette[color2].main, theme2.palette.action.hoverOpacity)
            }
          }
        }
      })), {
        props: {
          color: "inherit"
        },
        style: {
          color: "inherit",
          borderColor: "currentColor",
          "--variant-containedBg": theme2.vars ? theme2.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
          "@media (hover: hover)": {
            "&:hover": {
              "--variant-containedBg": theme2.vars ? theme2.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
              "--variant-textBg": theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.text.primary, theme2.palette.action.hoverOpacity),
              "--variant-outlinedBg": theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.text.primary, theme2.palette.action.hoverOpacity)
            }
          }
        }
      }, {
        props: {
          size: "small",
          variant: "text"
        },
        style: {
          padding: "4px 5px",
          fontSize: theme2.typography.pxToRem(13)
        }
      }, {
        props: {
          size: "large",
          variant: "text"
        },
        style: {
          padding: "8px 11px",
          fontSize: theme2.typography.pxToRem(15)
        }
      }, {
        props: {
          size: "small",
          variant: "outlined"
        },
        style: {
          padding: "3px 9px",
          fontSize: theme2.typography.pxToRem(13)
        }
      }, {
        props: {
          size: "large",
          variant: "outlined"
        },
        style: {
          padding: "7px 21px",
          fontSize: theme2.typography.pxToRem(15)
        }
      }, {
        props: {
          size: "small",
          variant: "contained"
        },
        style: {
          padding: "4px 10px",
          fontSize: theme2.typography.pxToRem(13)
        }
      }, {
        props: {
          size: "large",
          variant: "contained"
        },
        style: {
          padding: "8px 22px",
          fontSize: theme2.typography.pxToRem(15)
        }
      }, {
        props: {
          disableElevation: true
        },
        style: {
          boxShadow: "none",
          "&:hover": {
            boxShadow: "none"
          },
          [`&.${buttonClasses_default.focusVisible}`]: {
            boxShadow: "none"
          },
          "&:active": {
            boxShadow: "none"
          },
          [`&.${buttonClasses_default.disabled}`]: {
            boxShadow: "none"
          }
        }
      }, {
        props: {
          fullWidth: true
        },
        style: {
          width: "100%"
        }
      }, {
        props: {
          loadingPosition: "center"
        },
        style: {
          transition: theme2.transitions.create(["background-color", "box-shadow", "border-color"], {
            duration: theme2.transitions.duration.short
          }),
          [`&.${buttonClasses_default.loading}`]: {
            color: "transparent"
          }
        }
      }]
    };
  }));
  var ButtonStartIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.startIcon, ownerState.loading && styles5.startIconLoadingStart, styles5[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme: theme2
  }) => ({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4,
    variants: [{
      props: {
        size: "small"
      },
      style: {
        marginLeft: -2
      }
    }, {
      props: {
        loadingPosition: "start",
        loading: true
      },
      style: {
        transition: theme2.transitions.create(["opacity"], {
          duration: theme2.transitions.duration.short
        }),
        opacity: 0
      }
    }, {
      props: {
        loadingPosition: "start",
        loading: true,
        fullWidth: true
      },
      style: {
        marginRight: -8
      }
    }, ...commonIconStyles]
  }));
  var ButtonEndIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.endIcon, ownerState.loading && styles5.endIconLoadingEnd, styles5[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme: theme2
  }) => ({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8,
    variants: [{
      props: {
        size: "small"
      },
      style: {
        marginRight: -2
      }
    }, {
      props: {
        loadingPosition: "end",
        loading: true
      },
      style: {
        transition: theme2.transitions.create(["opacity"], {
          duration: theme2.transitions.duration.short
        }),
        opacity: 0
      }
    }, {
      props: {
        loadingPosition: "end",
        loading: true,
        fullWidth: true
      },
      style: {
        marginLeft: -8
      }
    }, ...commonIconStyles]
  }));
  var ButtonLoadingIndicator = styled_default2("span", {
    name: "MuiButton",
    slot: "LoadingIndicator",
    overridesResolver: (props, styles5) => styles5.loadingIndicator
  })(({
    theme: theme2
  }) => ({
    display: "none",
    position: "absolute",
    visibility: "visible",
    variants: [{
      props: {
        loading: true
      },
      style: {
        display: "flex"
      }
    }, {
      props: {
        loadingPosition: "start"
      },
      style: {
        left: 14
      }
    }, {
      props: {
        loadingPosition: "start",
        size: "small"
      },
      style: {
        left: 10
      }
    }, {
      props: {
        variant: "text",
        loadingPosition: "start"
      },
      style: {
        left: 6
      }
    }, {
      props: {
        loadingPosition: "center"
      },
      style: {
        left: "50%",
        transform: "translate(-50%)",
        color: (theme2.vars || theme2).palette.action.disabled
      }
    }, {
      props: {
        loadingPosition: "end"
      },
      style: {
        right: 14
      }
    }, {
      props: {
        loadingPosition: "end",
        size: "small"
      },
      style: {
        right: 10
      }
    }, {
      props: {
        variant: "text",
        loadingPosition: "end"
      },
      style: {
        right: 6
      }
    }, {
      props: {
        loadingPosition: "start",
        fullWidth: true
      },
      style: {
        position: "relative",
        left: -10
      }
    }, {
      props: {
        loadingPosition: "end",
        fullWidth: true
      },
      style: {
        position: "relative",
        right: -10
      }
    }]
  }));
  var ButtonLoadingIconPlaceholder = styled_default2("span", {
    name: "MuiButton",
    slot: "LoadingIconPlaceholder",
    overridesResolver: (props, styles5) => styles5.loadingIconPlaceholder
  })({
    display: "inline-block",
    width: "1em",
    height: "1em"
  });
  var Button = /* @__PURE__ */ React76.forwardRef(function Button2(inProps, ref) {
    const contextProps = React76.useContext(ButtonGroupContext_default);
    const buttonGroupButtonContextPositionClassName = React76.useContext(ButtonGroupButtonContext_default);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useDefaultProps2({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      id: idProp,
      loading = null,
      loadingIndicator: loadingIndicatorProp,
      loadingPosition = "center",
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text",
      ...other
    } = props;
    const loadingId = useId_default(idProp);
    const loadingIndicator = loadingIndicatorProp ?? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(CircularProgress_default, {
      "aria-labelledby": loadingId,
      color: "inherit",
      size: 16
    });
    const ownerState = {
      ...props,
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      loading,
      loadingIndicator,
      loadingPosition,
      size,
      type,
      variant
    };
    const classes = useUtilityClasses16(ownerState);
    const startIcon = (startIconProp || loading && loadingPosition === "start") && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp || /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ButtonLoadingIconPlaceholder, {
        className: classes.loadingIconPlaceholder,
        ownerState
      })
    });
    const endIcon = (endIconProp || loading && loadingPosition === "end") && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp || /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ButtonLoadingIconPlaceholder, {
        className: classes.loadingIconPlaceholder,
        ownerState
      })
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    const loader = typeof loading === "boolean" ? (
      // use plain HTML span to minimize the runtime overhead
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("span", {
        className: classes.loadingWrapper,
        style: {
          display: "contents"
        },
        children: loading && /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ButtonLoadingIndicator, {
          className: classes.loadingIndicator,
          ownerState,
          children: loadingIndicator
        })
      })
    ) : null;
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(ButtonRoot, {
      ownerState,
      className: clsx_default(contextProps.className, classes.root, className, positionClassName),
      component,
      disabled: disabled || loading,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type,
      id: loading ? loadingId : idProp,
      ...other,
      classes,
      children: [startIcon, loadingPosition !== "end" && loader, children, loadingPosition === "end" && loader, endIcon]
    });
  });
  true ? Button.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types39.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types39.default.object,
    /**
     * @ignore
     */
    className: import_prop_types39.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types39.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types39.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types39.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types39.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types39.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types39.default.bool,
    /**
     * Element placed after the children.
     */
    endIcon: import_prop_types39.default.node,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types39.default.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types39.default.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types39.default.string,
    /**
     * @ignore
     */
    id: import_prop_types39.default.string,
    /**
     * If `true`, the loading indicator is visible and the button is disabled.
     * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
     * @default null
     */
    loading: import_prop_types39.default.bool,
    /**
     * Element placed before the children if the button is in loading state.
     * The node should contain an element with `role="progressbar"` with an accessible name.
     * By default, it renders a `CircularProgress` that is labeled by the button itself.
     * @default <CircularProgress color="inherit" size={16} />
     */
    loadingIndicator: import_prop_types39.default.node,
    /**
     * The loading indicator can be positioned on the start, end, or the center of the button.
     * @default 'center'
     */
    loadingPosition: import_prop_types39.default.oneOf(["center", "end", "start"]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["small", "medium", "large"]), import_prop_types39.default.string]),
    /**
     * Element placed before the children.
     */
    startIcon: import_prop_types39.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
    /**
     * @ignore
     */
    type: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["button", "reset", "submit"]), import_prop_types39.default.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["contained", "outlined", "text"]), import_prop_types39.default.string])
  } : void 0;
  var Button_default = Button;

  // react-user-mgmt/node_modules/@mui/material/CardActions/CardActions.js
  var React77 = __toESM(require_react());
  var import_prop_types40 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/CardActions/cardActionsClasses.js
  function getCardActionsUtilityClass(slot) {
    return generateUtilityClass("MuiCardActions", slot);
  }
  var cardActionsClasses = generateUtilityClasses("MuiCardActions", ["root", "spacing"]);

  // react-user-mgmt/node_modules/@mui/material/CardActions/CardActions.js
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return composeClasses(slots, getCardActionsUtilityClass, classes);
  };
  var CardActionsRoot = styled_default2("div", {
    name: "MuiCardActions",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.disableSpacing && styles5.spacing];
    }
  })({
    display: "flex",
    alignItems: "center",
    padding: 8,
    variants: [{
      props: {
        disableSpacing: false
      },
      style: {
        "& > :not(style) ~ :not(style)": {
          marginLeft: 8
        }
      }
    }]
  });
  var CardActions = /* @__PURE__ */ React77.forwardRef(function CardActions2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCardActions"
    });
    const {
      disableSpacing = false,
      className,
      ...other
    } = props;
    const ownerState = {
      ...props,
      disableSpacing
    };
    const classes = useUtilityClasses17(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(CardActionsRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? CardActions.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types40.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types40.default.object,
    /**
     * @ignore
     */
    className: import_prop_types40.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types40.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object])
  } : void 0;
  var CardActions_default = CardActions;

  // react-user-mgmt/node_modules/@mui/material/CardContent/CardContent.js
  var React78 = __toESM(require_react());
  var import_prop_types41 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/CardContent/cardContentClasses.js
  function getCardContentUtilityClass(slot) {
    return generateUtilityClass("MuiCardContent", slot);
  }
  var cardContentClasses = generateUtilityClasses("MuiCardContent", ["root"]);

  // react-user-mgmt/node_modules/@mui/material/CardContent/CardContent.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var useUtilityClasses18 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getCardContentUtilityClass, classes);
  };
  var CardContentRoot = styled_default2("div", {
    name: "MuiCardContent",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    padding: 16,
    "&:last-child": {
      paddingBottom: 24
    }
  });
  var CardContent = /* @__PURE__ */ React78.forwardRef(function CardContent2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCardContent"
    });
    const {
      className,
      component = "div",
      ...other
    } = props;
    const ownerState = {
      ...props,
      component
    };
    const classes = useUtilityClasses18(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(CardContentRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? CardContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types41.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types41.default.object,
    /**
     * @ignore
     */
    className: import_prop_types41.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types41.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object])
  } : void 0;
  var CardContent_default = CardContent;

  // react-user-mgmt/node_modules/@mui/material/CardHeader/CardHeader.js
  var React79 = __toESM(require_react());
  var import_prop_types42 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/CardHeader/cardHeaderClasses.js
  function getCardHeaderUtilityClass(slot) {
    return generateUtilityClass("MuiCardHeader", slot);
  }
  var cardHeaderClasses = generateUtilityClasses("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]);
  var cardHeaderClasses_default = cardHeaderClasses;

  // react-user-mgmt/node_modules/@mui/material/CardHeader/CardHeader.js
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      avatar: ["avatar"],
      action: ["action"],
      content: ["content"],
      title: ["title"],
      subheader: ["subheader"]
    };
    return composeClasses(slots, getCardHeaderUtilityClass, classes);
  };
  var CardHeaderRoot = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      return [{
        [`& .${cardHeaderClasses_default.title}`]: styles5.title
      }, {
        [`& .${cardHeaderClasses_default.subheader}`]: styles5.subheader
      }, styles5.root];
    }
  })({
    display: "flex",
    alignItems: "center",
    padding: 16
  });
  var CardHeaderAvatar = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Avatar",
    overridesResolver: (props, styles5) => styles5.avatar
  })({
    display: "flex",
    flex: "0 0 auto",
    marginRight: 16
  });
  var CardHeaderAction = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Action",
    overridesResolver: (props, styles5) => styles5.action
  })({
    flex: "0 0 auto",
    alignSelf: "flex-start",
    marginTop: -4,
    marginRight: -8,
    marginBottom: -4
  });
  var CardHeaderContent = styled_default2("div", {
    name: "MuiCardHeader",
    slot: "Content",
    overridesResolver: (props, styles5) => styles5.content
  })({
    flex: "1 1 auto",
    [`.${typographyClasses_default.root}:where(& .${cardHeaderClasses_default.title})`]: {
      display: "block"
    },
    [`.${typographyClasses_default.root}:where(& .${cardHeaderClasses_default.subheader})`]: {
      display: "block"
    }
  });
  var CardHeader = /* @__PURE__ */ React79.forwardRef(function CardHeader2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCardHeader"
    });
    const {
      action,
      avatar,
      component = "div",
      disableTypography = false,
      subheader: subheaderProp,
      subheaderTypographyProps,
      title: titleProp,
      titleTypographyProps,
      slots = {},
      slotProps = {},
      ...other
    } = props;
    const ownerState = {
      ...props,
      component,
      disableTypography
    };
    const classes = useUtilityClasses19(ownerState);
    const externalForwardedProps = {
      slots,
      slotProps: {
        title: titleTypographyProps,
        subheader: subheaderTypographyProps,
        ...slotProps
      }
    };
    let title = titleProp;
    const [TitleSlot, titleSlotProps] = useSlot("title", {
      className: classes.title,
      elementType: Typography_default,
      externalForwardedProps,
      ownerState,
      additionalProps: {
        variant: avatar ? "body2" : "h5",
        component: "span"
      }
    });
    if (title != null && title.type !== Typography_default && !disableTypography) {
      title = /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(TitleSlot, {
        ...titleSlotProps,
        children: title
      });
    }
    let subheader = subheaderProp;
    const [SubheaderSlot, subheaderSlotProps] = useSlot("subheader", {
      className: classes.subheader,
      elementType: Typography_default,
      externalForwardedProps,
      ownerState,
      additionalProps: {
        variant: avatar ? "body2" : "body1",
        color: "textSecondary",
        component: "span"
      }
    });
    if (subheader != null && subheader.type !== Typography_default && !disableTypography) {
      subheader = /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(SubheaderSlot, {
        ...subheaderSlotProps,
        children: subheader
      });
    }
    const [RootSlot, rootSlotProps] = useSlot("root", {
      ref,
      className: classes.root,
      elementType: CardHeaderRoot,
      externalForwardedProps: {
        ...externalForwardedProps,
        ...other,
        component
      },
      ownerState
    });
    const [AvatarSlot, avatarSlotProps] = useSlot("avatar", {
      className: classes.avatar,
      elementType: CardHeaderAvatar,
      externalForwardedProps,
      ownerState
    });
    const [ContentSlot, contentSlotProps] = useSlot("content", {
      className: classes.content,
      elementType: CardHeaderContent,
      externalForwardedProps,
      ownerState
    });
    const [ActionSlot, actionSlotProps] = useSlot("action", {
      className: classes.action,
      elementType: CardHeaderAction,
      externalForwardedProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(RootSlot, {
      ...rootSlotProps,
      children: [avatar && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(AvatarSlot, {
        ...avatarSlotProps,
        children: avatar
      }), /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(ContentSlot, {
        ...contentSlotProps,
        children: [title, subheader]
      }), action && /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ActionSlot, {
        ...actionSlotProps,
        children: action
      })]
    });
  });
  true ? CardHeader.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The action to display in the card header.
     */
    action: import_prop_types42.default.node,
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types42.default.node,
    /**
     * @ignore
     */
    children: import_prop_types42.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types42.default.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types42.default.elementType,
    /**
     * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `title` text, and optional `subheader` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types42.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types42.default.shape({
      action: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      avatar: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      content: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      root: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      subheader: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      title: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types42.default.shape({
      action: import_prop_types42.default.elementType,
      avatar: import_prop_types42.default.elementType,
      content: import_prop_types42.default.elementType,
      root: import_prop_types42.default.elementType,
      subheader: import_prop_types42.default.elementType,
      title: import_prop_types42.default.elementType
    }),
    /**
     * The content of the component.
     */
    subheader: import_prop_types42.default.node,
    /**
     * These props will be forwarded to the subheader
     * (as long as disableTypography is not `true`).
     * @deprecated Use `slotProps.subheader` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    subheaderTypographyProps: import_prop_types42.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types42.default.oneOfType([import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object, import_prop_types42.default.bool])), import_prop_types42.default.func, import_prop_types42.default.object]),
    /**
     * The content of the component.
     */
    title: import_prop_types42.default.node,
    /**
     * These props will be forwarded to the title
     * (as long as disableTypography is not `true`).
     * @deprecated Use `slotProps.title` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    titleTypographyProps: import_prop_types42.default.object
  } : void 0;
  var CardHeader_default = CardHeader;

  // react-user-mgmt/node_modules/@mui/material/Checkbox/Checkbox.js
  var React84 = __toESM(require_react());
  var import_prop_types44 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/internal/SwitchBase.js
  var React80 = __toESM(require_react());
  var import_prop_types43 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/internal/switchBaseClasses.js
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass("PrivateSwitchBase", slot);
  }
  var switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // react-user-mgmt/node_modules/@mui/material/internal/SwitchBase.js
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var useUtilityClasses20 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };
  var SwitchBaseRoot = styled_default2(ButtonBase_default)({
    padding: 9,
    borderRadius: "50%",
    variants: [{
      props: {
        edge: "start",
        size: "small"
      },
      style: {
        marginLeft: -3
      }
    }, {
      props: ({
        edge,
        ownerState
      }) => edge === "start" && ownerState.size !== "small",
      style: {
        marginLeft: -12
      }
    }, {
      props: {
        edge: "end",
        size: "small"
      },
      style: {
        marginRight: -3
      }
    }, {
      props: ({
        edge,
        ownerState
      }) => edge === "end" && ownerState.size !== "small",
      style: {
        marginRight: -12
      }
    }]
  });
  var SwitchBaseInput = styled_default2("input", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  var SwitchBase = /* @__PURE__ */ React80.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value,
      slots = {},
      slotProps = {},
      ...other
    } = props;
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = {
      ...props,
      checked,
      disabled,
      disableFocusRipple,
      edge
    };
    const classes = useUtilityClasses20(ownerState);
    const externalForwardedProps = {
      slots,
      slotProps: {
        input: inputProps,
        ...slotProps
      }
    };
    const [RootSlot, rootSlotProps] = useSlot("root", {
      ref,
      elementType: SwitchBaseRoot,
      className: classes.root,
      shouldForwardComponentProp: true,
      externalForwardedProps: {
        ...externalForwardedProps,
        component: "span",
        ...other
      },
      getSlotProps: (handlers) => ({
        ...handlers,
        onFocus: (event) => {
          handlers.onFocus?.(event);
          handleFocus(event);
        },
        onBlur: (event) => {
          handlers.onBlur?.(event);
          handleBlur(event);
        }
      }),
      ownerState,
      additionalProps: {
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        role: void 0,
        tabIndex: null
      }
    });
    const [InputSlot, inputSlotProps] = useSlot("input", {
      ref: inputRef,
      elementType: SwitchBaseInput,
      className: classes.input,
      externalForwardedProps,
      getSlotProps: (handlers) => ({
        onChange: (event) => {
          handlers.onChange?.(event);
          handleInputChange(event);
        }
      }),
      ownerState,
      additionalProps: {
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        readOnly,
        required,
        tabIndex,
        type,
        ...type === "checkbox" && value === void 0 ? {} : {
          value
        }
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(RootSlot, {
      ...rootSlotProps,
      children: [/* @__PURE__ */ (0, import_jsx_runtime51.jsx)(InputSlot, {
        ...inputSlotProps
      }), checked ? checkedIcon : icon]
    });
  });
  true ? SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types43.default.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types43.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types43.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types43.default.object,
    /**
     * @ignore
     */
    className: import_prop_types43.default.string,
    /**
     * @ignore
     */
    defaultChecked: import_prop_types43.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types43.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types43.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types43.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types43.default.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types43.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types43.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /*
     * @ignore
     */
    name: import_prop_types43.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types43.default.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types43.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types43.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types43.default.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: import_prop_types43.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types43.default.shape({
      input: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object]),
      root: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types43.default.shape({
      input: import_prop_types43.default.elementType,
      root: import_prop_types43.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types43.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]),
    /**
     * The input component prop `type`.
     */
    type: import_prop_types43.default.string.isRequired,
    /**
     * The value of the component.
     */
    value: import_prop_types43.default.any
  } : void 0;
  var SwitchBase_default = SwitchBase;

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  var React81 = __toESM(require_react());
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var CheckBoxOutlineBlank_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/CheckBox.js
  var React82 = __toESM(require_react());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var CheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime53.jsx)("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  var React83 = __toESM(require_react());
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var IndeterminateCheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // react-user-mgmt/node_modules/@mui/material/Checkbox/checkboxClasses.js
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass("MuiCheckbox", slot);
  }
  var checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
  var checkboxClasses_default = checkboxClasses;

  // react-user-mgmt/node_modules/@mui/material/Checkbox/Checkbox.js
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var useUtilityClasses21 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color2)}`, `size${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return {
      ...classes,
      // forward the disabled and checked classes to the SwitchBase
      ...composedClasses
    };
  };
  var CheckboxRoot = styled_default2(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.indeterminate && styles5.indeterminate, styles5[`size${capitalize_default(ownerState.size)}`], ownerState.color !== "default" && styles5[`color${capitalize_default(ownerState.color)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    color: (theme2.vars || theme2).palette.text.secondary,
    variants: [{
      props: {
        color: "default",
        disableRipple: false
      },
      style: {
        "&:hover": {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity)
        }
      }
    }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2,
        disableRipple: false
      },
      style: {
        "&:hover": {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette[color2].main, theme2.palette.action.hoverOpacity)
        }
      }
    })), ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
          color: (theme2.vars || theme2).palette[color2].main
        },
        [`&.${checkboxClasses_default.disabled}`]: {
          color: (theme2.vars || theme2).palette.action.disabled
        }
      }
    })), {
      // Should be last to override other colors
      props: {
        disableRipple: false
      },
      style: {
        // Reset on touch devices, it doesn't add specificity
        "&:hover": {
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      }
    }]
  })));
  var defaultCheckedIcon = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(CheckBox_default, {});
  var defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(CheckBoxOutlineBlank_default, {});
  var defaultIndeterminateIcon = /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(IndeterminateCheckBox_default, {});
  var Checkbox = /* @__PURE__ */ React84.forwardRef(function Checkbox2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      disableRipple = false,
      className,
      slots = {},
      slotProps = {},
      ...other
    } = props;
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = {
      ...props,
      disableRipple,
      color: color2,
      indeterminate,
      size
    };
    const classes = useUtilityClasses21(ownerState);
    const externalInputProps = slotProps.input ?? inputProps;
    const [RootSlot, rootSlotProps] = useSlot("root", {
      ref,
      elementType: CheckboxRoot,
      className: clsx_default(classes.root, className),
      shouldForwardComponentProp: true,
      externalForwardedProps: {
        slots,
        slotProps,
        ...other
      },
      ownerState,
      additionalProps: {
        type: "checkbox",
        icon: /* @__PURE__ */ React84.cloneElement(icon, {
          fontSize: icon.props.fontSize ?? size
        }),
        checkedIcon: /* @__PURE__ */ React84.cloneElement(indeterminateIcon, {
          fontSize: indeterminateIcon.props.fontSize ?? size
        }),
        disableRipple,
        slots,
        slotProps: {
          input: mergeSlotProps2(typeof externalInputProps === "function" ? externalInputProps(ownerState) : externalInputProps, {
            "data-indeterminate": indeterminate
          })
        }
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(RootSlot, {
      ...rootSlotProps,
      classes
    });
  });
  true ? Checkbox.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types44.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: import_prop_types44.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types44.default.object,
    /**
     * @ignore
     */
    className: import_prop_types44.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types44.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types44.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types44.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types44.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: import_prop_types44.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types44.default.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: import_prop_types44.default.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: import_prop_types44.default.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    inputProps: import_prop_types44.default.object,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types44.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types44.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: import_prop_types44.default.oneOfType([import_prop_types44.default.oneOf(["medium", "small"]), import_prop_types44.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types44.default.shape({
      input: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object]),
      root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types44.default.shape({
      input: import_prop_types44.default.elementType,
      root: import_prop_types44.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types44.default.oneOfType([import_prop_types44.default.arrayOf(import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object, import_prop_types44.default.bool])), import_prop_types44.default.func, import_prop_types44.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types44.default.any
  } : void 0;
  var Checkbox_default = Checkbox;

  // react-user-mgmt/node_modules/@mui/material/Container/Container.js
  var import_prop_types45 = __toESM(require_prop_types());
  var Container = createContainer({
    createStyledComponent: styled_default2("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles5) => {
        const {
          ownerState
        } = props;
        return [styles5.root, styles5[`maxWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fixed && styles5.fixed, ownerState.disableGutters && styles5.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useDefaultProps2({
      props: inProps,
      name: "MuiContainer"
    })
  });
  true ? Container.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types45.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types45.default.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types45.default.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types45.default.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: import_prop_types45.default.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: import_prop_types45.default.oneOfType([import_prop_types45.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types45.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object])
  } : void 0;
  var Container_default = Container;

  // react-user-mgmt/node_modules/@mui/material/CssBaseline/CssBaseline.js
  var React85 = __toESM(require_react());
  var import_prop_types46 = __toESM(require_prop_types());
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var isDynamicSupport = typeof globalCss({}) === "function";
  var html = (theme2, enableColorScheme) => ({
    WebkitFontSmoothing: "antialiased",
    // Antialiasing.
    MozOsxFontSmoothing: "grayscale",
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%",
    // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.
    ...enableColorScheme && !theme2.vars && {
      colorScheme: theme2.palette.mode
    }
  });
  var body = (theme2) => ({
    color: (theme2.vars || theme2).palette.text.primary,
    ...theme2.typography.body1,
    backgroundColor: (theme2.vars || theme2).palette.background.default,
    "@media print": {
      // Save printer ink.
      backgroundColor: (theme2.vars || theme2).palette.common.white
    }
  });
  var styles3 = (theme2, enableColorScheme = false) => {
    const colorSchemeStyles = {};
    if (enableColorScheme && theme2.colorSchemes && typeof theme2.getColorSchemeSelector === "function") {
      Object.entries(theme2.colorSchemes).forEach(([key, scheme]) => {
        const selector = theme2.getColorSchemeSelector(key);
        if (selector.startsWith("@")) {
          colorSchemeStyles[selector] = {
            ":root": {
              colorScheme: scheme.palette?.mode
            }
          };
        } else {
          colorSchemeStyles[selector.replace(/\s*&/, "")] = {
            colorScheme: scheme.palette?.mode
          };
        }
      });
    }
    let defaultStyles = {
      html: html(theme2, enableColorScheme),
      "*, *::before, *::after": {
        boxSizing: "inherit"
      },
      "strong, b": {
        fontWeight: theme2.typography.fontWeightBold
      },
      body: {
        margin: 0,
        // Remove the margin in all browsers.
        ...body(theme2),
        // Add support for document.body.requestFullScreen().
        // Other elements, if background transparent, are not supported.
        "&::backdrop": {
          backgroundColor: (theme2.vars || theme2).palette.background.default
        }
      },
      ...colorSchemeStyles
    };
    const themeOverrides = theme2.components?.MuiCssBaseline?.styleOverrides;
    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }
    return defaultStyles;
  };
  var SELECTOR = "mui-ecs";
  var staticStyles = (theme2) => {
    const result = styles3(theme2, false);
    const baseStyles = Array.isArray(result) ? result[0] : result;
    if (!theme2.vars && baseStyles) {
      baseStyles.html[`:root:has(${SELECTOR})`] = {
        colorScheme: theme2.palette.mode
      };
    }
    if (theme2.colorSchemes) {
      Object.entries(theme2.colorSchemes).forEach(([key, scheme]) => {
        const selector = theme2.getColorSchemeSelector(key);
        if (selector.startsWith("@")) {
          baseStyles[selector] = {
            [`:root:not(:has(.${SELECTOR}))`]: {
              colorScheme: scheme.palette?.mode
            }
          };
        } else {
          baseStyles[selector.replace(/\s*&/, "")] = {
            [`&:not(:has(.${SELECTOR}))`]: {
              colorScheme: scheme.palette?.mode
            }
          };
        }
      });
    }
    return result;
  };
  var GlobalStyles4 = globalCss(isDynamicSupport ? ({
    theme: theme2,
    enableColorScheme
  }) => styles3(theme2, enableColorScheme) : ({
    theme: theme2
  }) => staticStyles(theme2));
  function CssBaseline(inProps) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCssBaseline"
    });
    const {
      children,
      enableColorScheme = false
    } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(React85.Fragment, {
      children: [isDynamicSupport && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(GlobalStyles4, {
        enableColorScheme
      }), !isDynamicSupport && !enableColorScheme && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", {
        className: SELECTOR,
        style: {
          display: "none"
        }
      }), children]
    });
  }
  true ? CssBaseline.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * You can wrap a node.
     */
    children: import_prop_types46.default.node,
    /**
     * Enable `color-scheme` CSS property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     * @default false
     */
    enableColorScheme: import_prop_types46.default.bool
  } : void 0;
  var CssBaseline_default = CssBaseline;

  // react-user-mgmt/node_modules/@mui/material/Dialog/Dialog.js
  var React90 = __toESM(require_react());
  var import_prop_types49 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Modal/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, hide) {
    if (hide) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.includes(element.tagName);
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, hide) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = !blacklist.includes(element);
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, hide);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerWindow(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent2 = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = parent2?.nodeName === "HTML" && containerWindow.getComputedStyle(parent2).overflowY === "scroll" ? parent2 : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property: property2
      }) => {
        if (value) {
          el.style.setProperty(property2, value);
        } else {
          el.style.removeProperty(property2);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.includes(modal));
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.includes(modal));
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // react-user-mgmt/node_modules/@mui/material/Modal/Modal.js
  var React88 = __toESM(require_react());
  var import_prop_types48 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Unstable_TrapFocus/FocusTrap.js
  var React86 = __toESM(require_react());
  var import_prop_types47 = __toESM(require_prop_types());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root2) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node2, i2) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i2,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a2, b2) => a2.tabIndex === b2.tabIndex ? a2.documentOrder - b2.documentOrder : a2.tabIndex - b2.tabIndex).map((a2) => a2.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React86.useRef(false);
    const sentinelStart = React86.useRef(null);
    const sentinelEnd = React86.useRef(null);
    const nodeToRestore = React86.useRef(null);
    const reactFocusEventTarget = React86.useRef(null);
    const activated = React86.useRef(false);
    const rootRef = React86.useRef(null);
    const handleRef = useForkRef(getReactElementRef(children), rootRef);
    const lastKeydown = React86.useRef(null);
    React86.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React86.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React86.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          const isShiftTab = Boolean(lastKeydown.current?.shiftKey && lastKeydown.current?.key === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(React86.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React86.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  true ? FocusTrap.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types47.default.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types47.default.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types47.default.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: import_prop_types47.default.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: import_prop_types47.default.func,
    /**
     * If `true`, focus is locked.
     */
    open: import_prop_types47.default.bool.isRequired
  } : void 0;
  if (true) {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }
  var FocusTrap_default = FocusTrap;

  // react-user-mgmt/node_modules/@mui/material/Modal/useModal.js
  var React87 = __toESM(require_react());
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  var noop4 = () => {
  };
  var manager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React87.useRef({});
    const mountNodeRef = React87.useRef(null);
    const modalRef = React87.useRef(null);
    const handleRef = useForkRef(modalRef, rootRef);
    const [exited, setExited] = React87.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback_default(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = () => manager.isTopModal(getModal());
    const handlePortalRef = useEventCallback_default((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React87.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp]);
    React87.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React87.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      otherHandlers.onKeyDown?.(event);
      if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
      !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      otherHandlers.onClick?.(event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers_default(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = {
        ...propsEventHandlers,
        ...otherHandlers
      };
      return {
        /*
         * Marking an element with the role presentation indicates to assistive technology
         * that this element should be ignored; it exists to support the web application and
         * is not meant for humans to interact with directly.
         * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md
         */
        role: "presentation",
        ...externalEventHandlers,
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      };
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return {
        "aria-hidden": true,
        ...externalEventHandlers,
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      };
    };
    const getTransitionProps2 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: createChainedFunction(handleEnter, children?.props.onEnter ?? noop4),
        onExited: createChainedFunction(handleExited, children?.props.onExited ?? noop4)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }
  var useModal_default = useModal;

  // react-user-mgmt/node_modules/@mui/material/Modal/modalClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  var modalClasses = generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);

  // react-user-mgmt/node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var useUtilityClasses22 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  var ModalRoot = styled_default2("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.open && ownerState.exited && styles5.hidden];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    position: "fixed",
    zIndex: (theme2.vars || theme2).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.open && ownerState.exited,
      style: {
        visibility: "hidden"
      }
    }]
  })));
  var ModalBackdrop = styled_default2(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles5) => {
      return styles5.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React88.forwardRef(function Modal2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      classes: classesProp,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      onClose,
      onTransitionEnter,
      onTransitionExited,
      open,
      slotProps = {},
      slots = {},
      // eslint-disable-next-line react/prop-types
      theme: theme2,
      ...other
    } = props;
    const propsWithDefaults = {
      ...props,
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    };
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal_default({
      ...propsWithDefaults,
      rootRef: ref
    });
    const ownerState = {
      ...propsWithDefaults,
      exited
    };
    const classes = useUtilityClasses22(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const externalForwardedProps = {
      slots: {
        root: components.Root,
        backdrop: components.Backdrop,
        ...slots
      },
      slotProps: {
        ...componentsProps,
        ...slotProps
      }
    };
    const [RootSlot, rootProps] = useSlot("root", {
      ref,
      elementType: ModalRoot,
      externalForwardedProps: {
        ...externalForwardedProps,
        ...other,
        component
      },
      getSlotProps: getRootProps,
      ownerState,
      className: clsx_default(className, classes?.root, !ownerState.open && ownerState.exited && classes?.hidden)
    });
    const [BackdropSlot, backdropProps] = useSlot("backdrop", {
      ref: BackdropProps?.ref,
      elementType: BackdropComponent,
      externalForwardedProps,
      shouldForwardComponentProp: true,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps({
          ...otherHandlers,
          onClick: (event) => {
            if (onBackdropClick) {
              onBackdropClick(event);
            }
            if (otherHandlers?.onClick) {
              otherHandlers.onClick(event);
            }
          }
        });
      },
      className: clsx_default(BackdropProps?.className, classes?.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Portal_default, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(RootSlot, {
        ...rootProps,
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(BackdropSlot, {
          ...backdropProps
        }) : null, /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(FocusTrap_default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React88.cloneElement(children, childProps)
        })]
      })
    });
  });
  true ? Modal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types48.default.elementType,
    /**
     * Props applied to the [`Backdrop`](https://mui.com/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: import_prop_types48.default.object,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types48.default.object,
    /**
     * @ignore
     */
    className: import_prop_types48.default.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types48.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types48.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types48.default.shape({
      Backdrop: import_prop_types48.default.elementType,
      Root: import_prop_types48.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types48.default.shape({
      backdrop: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object]),
      root: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types48.default.oneOfType([HTMLElementType, import_prop_types48.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types48.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types48.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types48.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types48.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types48.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types48.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types48.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types48.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types48.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types48.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types48.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types48.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types48.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types48.default.shape({
      backdrop: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object]),
      root: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types48.default.shape({
      backdrop: import_prop_types48.default.elementType,
      root: import_prop_types48.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object])
  } : void 0;
  var Modal_default = Modal;

  // react-user-mgmt/node_modules/@mui/material/Dialog/dialogClasses.js
  function getDialogUtilityClass(slot) {
    return generateUtilityClass("MuiDialog", slot);
  }
  var dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
  var dialogClasses_default = dialogClasses;

  // react-user-mgmt/node_modules/@mui/material/Dialog/DialogContext.js
  var React89 = __toESM(require_react());
  var DialogContext = /* @__PURE__ */ React89.createContext({});
  if (true) {
    DialogContext.displayName = "DialogContext";
  }
  var DialogContext_default = DialogContext;

  // react-user-mgmt/node_modules/@mui/material/Dialog/Dialog.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var DialogBackdrop = styled_default2(Backdrop_default, {
    name: "MuiDialog",
    slot: "Backdrop",
    overrides: (props, styles5) => styles5.backdrop
  })({
    // Improve scrollable dialog support.
    zIndex: -1
  });
  var useUtilityClasses23 = (ownerState) => {
    const {
      classes,
      scroll,
      maxWidth: maxWidth2,
      fullWidth,
      fullScreen
    } = ownerState;
    const slots = {
      root: ["root"],
      container: ["container", `scroll${capitalize_default(scroll)}`],
      paper: ["paper", `paperScroll${capitalize_default(scroll)}`, `paperWidth${capitalize_default(String(maxWidth2))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
    };
    return composeClasses(slots, getDialogUtilityClass, classes);
  };
  var DialogRoot = styled_default2(Modal_default, {
    name: "MuiDialog",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    "@media print": {
      // Use !important to override the Modal inline-style.
      position: "absolute !important"
    }
  });
  var DialogContainer = styled_default2("div", {
    name: "MuiDialog",
    slot: "Container",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.container, styles5[`scroll${capitalize_default(ownerState.scroll)}`]];
    }
  })({
    height: "100%",
    "@media print": {
      height: "auto"
    },
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    variants: [{
      props: {
        scroll: "paper"
      },
      style: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      }
    }, {
      props: {
        scroll: "body"
      },
      style: {
        overflowY: "auto",
        overflowX: "hidden",
        textAlign: "center",
        "&::after": {
          content: '""',
          display: "inline-block",
          verticalAlign: "middle",
          height: "100%",
          width: "0"
        }
      }
    }]
  });
  var DialogPaper = styled_default2(Paper_default, {
    name: "MuiDialog",
    slot: "Paper",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.paper, styles5[`scrollPaper${capitalize_default(ownerState.scroll)}`], styles5[`paperWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles5.paperFullWidth, ownerState.fullScreen && styles5.paperFullScreen];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    margin: 32,
    position: "relative",
    overflowY: "auto",
    "@media print": {
      overflowY: "visible",
      boxShadow: "none"
    },
    variants: [{
      props: {
        scroll: "paper"
      },
      style: {
        display: "flex",
        flexDirection: "column",
        maxHeight: "calc(100% - 64px)"
      }
    }, {
      props: {
        scroll: "body"
      },
      style: {
        display: "inline-block",
        verticalAlign: "middle",
        textAlign: "initial"
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.maxWidth,
      style: {
        maxWidth: "calc(100% - 64px)"
      }
    }, {
      props: {
        maxWidth: "xs"
      },
      style: {
        maxWidth: theme2.breakpoints.unit === "px" ? Math.max(theme2.breakpoints.values.xs, 444) : `max(${theme2.breakpoints.values.xs}${theme2.breakpoints.unit}, 444px)`,
        [`&.${dialogClasses_default.paperScrollBody}`]: {
          [theme2.breakpoints.down(Math.max(theme2.breakpoints.values.xs, 444) + 32 * 2)]: {
            maxWidth: "calc(100% - 64px)"
          }
        }
      }
    }, ...Object.keys(theme2.breakpoints.values).filter((maxWidth2) => maxWidth2 !== "xs").map((maxWidth2) => ({
      props: {
        maxWidth: maxWidth2
      },
      style: {
        maxWidth: `${theme2.breakpoints.values[maxWidth2]}${theme2.breakpoints.unit}`,
        [`&.${dialogClasses_default.paperScrollBody}`]: {
          [theme2.breakpoints.down(theme2.breakpoints.values[maxWidth2] + 32 * 2)]: {
            maxWidth: "calc(100% - 64px)"
          }
        }
      }
    })), {
      props: ({
        ownerState
      }) => ownerState.fullWidth,
      style: {
        width: "calc(100% - 64px)"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.fullScreen,
      style: {
        margin: 0,
        width: "100%",
        maxWidth: "100%",
        height: "100%",
        maxHeight: "none",
        borderRadius: 0,
        [`&.${dialogClasses_default.paperScrollBody}`]: {
          margin: 0,
          maxWidth: "100%"
        }
      }
    }]
  })));
  var Dialog = /* @__PURE__ */ React90.forwardRef(function Dialog2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialog"
    });
    const theme2 = useTheme5();
    const defaultTransitionDuration = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      "aria-describedby": ariaDescribedby,
      "aria-labelledby": ariaLabelledbyProp,
      "aria-modal": ariaModal = true,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth: maxWidth2 = "sm",
      onBackdropClick,
      onClick,
      onClose,
      open,
      PaperComponent = Paper_default,
      PaperProps = {},
      scroll = "paper",
      slots = {},
      slotProps = {},
      TransitionComponent = Fade_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps,
      ...other
    } = props;
    const ownerState = {
      ...props,
      disableEscapeKeyDown,
      fullScreen,
      fullWidth,
      maxWidth: maxWidth2,
      scroll
    };
    const classes = useUtilityClasses23(ownerState);
    const backdropClick = React90.useRef();
    const handleMouseDown = (event) => {
      backdropClick.current = event.target === event.currentTarget;
    };
    const handleBackdropClick = (event) => {
      if (onClick) {
        onClick(event);
      }
      if (!backdropClick.current) {
        return;
      }
      backdropClick.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const ariaLabelledby = useId2(ariaLabelledbyProp);
    const dialogContextValue = React90.useMemo(() => {
      return {
        titleId: ariaLabelledby
      };
    }, [ariaLabelledby]);
    const backwardCompatibleSlots = {
      transition: TransitionComponent,
      ...slots
    };
    const backwardCompatibleSlotProps = {
      transition: TransitionProps,
      paper: PaperProps,
      backdrop: BackdropProps,
      ...slotProps
    };
    const externalForwardedProps = {
      slots: backwardCompatibleSlots,
      slotProps: backwardCompatibleSlotProps
    };
    const [RootSlot, rootSlotProps] = useSlot("root", {
      elementType: DialogRoot,
      shouldForwardComponentProp: true,
      externalForwardedProps,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    });
    const [BackdropSlot, backdropSlotProps] = useSlot("backdrop", {
      elementType: DialogBackdrop,
      shouldForwardComponentProp: true,
      externalForwardedProps,
      ownerState
    });
    const [PaperSlot, paperSlotProps] = useSlot("paper", {
      elementType: DialogPaper,
      shouldForwardComponentProp: true,
      externalForwardedProps,
      ownerState,
      className: clsx_default(classes.paper, PaperProps.className)
    });
    const [ContainerSlot, containerSlotProps] = useSlot("container", {
      elementType: DialogContainer,
      externalForwardedProps,
      ownerState,
      className: clsx_default(classes.container)
    });
    const [TransitionSlot, transitionSlotProps] = useSlot("transition", {
      elementType: Fade_default,
      externalForwardedProps,
      ownerState,
      additionalProps: {
        appear: true,
        in: open,
        timeout: transitionDuration,
        role: "presentation"
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(RootSlot, {
      closeAfterTransition: true,
      slots: {
        backdrop: BackdropSlot
      },
      slotProps: {
        backdrop: {
          transitionDuration,
          as: BackdropComponent,
          ...backdropSlotProps
        }
      },
      disableEscapeKeyDown,
      onClose,
      open,
      onClick: handleBackdropClick,
      ...rootSlotProps,
      ...other,
      children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(TransitionSlot, {
        ...transitionSlotProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ContainerSlot, {
          onMouseDown: handleMouseDown,
          ...containerSlotProps,
          children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(PaperSlot, {
            as: PaperComponent,
            elevation: 24,
            role: "dialog",
            "aria-describedby": ariaDescribedby,
            "aria-labelledby": ariaLabelledby,
            "aria-modal": ariaModal,
            ...paperSlotProps,
            children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(DialogContext_default.Provider, {
              value: dialogContextValue,
              children
            })
          })
        })
      })
    });
  });
  true ? Dialog.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The id(s) of the element(s) that describe the dialog.
     */
    "aria-describedby": import_prop_types49.default.string,
    /**
     * The id(s) of the element(s) that label the dialog.
     */
    "aria-labelledby": import_prop_types49.default.string,
    /**
     * Informs assistive technologies that the element is modal.
     * It's added on the element with role="dialog".
     * @default true
     */
    "aria-modal": import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["false", "true"]), import_prop_types49.default.bool]),
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types49.default.elementType,
    /**
     * @ignore
     */
    BackdropProps: import_prop_types49.default.object,
    /**
     * Dialog children, usually the included sub-components.
     */
    children: import_prop_types49.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types49.default.object,
    /**
     * @ignore
     */
    className: import_prop_types49.default.string,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types49.default.bool,
    /**
     * If `true`, the dialog is full-screen.
     * @default false
     */
    fullScreen: import_prop_types49.default.bool,
    /**
     * If `true`, the dialog stretches to `maxWidth`.
     *
     * Notice that the dialog width grow is limited by the default margin.
     * @default false
     */
    fullWidth: import_prop_types49.default.bool,
    /**
     * Determine the max-width of the dialog.
     * The dialog width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'sm'
     */
    maxWidth: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types49.default.string]),
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types49.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types49.default.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types49.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types49.default.bool.isRequired,
    /**
     * The component used to render the body of the dialog.
     * @default Paper
     */
    PaperComponent: import_prop_types49.default.elementType,
    /**
     * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
     * @default {}
     * @deprecated Use `slotProps.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    PaperProps: import_prop_types49.default.object,
    /**
     * Determine the container for scrolling the dialog.
     * @default 'paper'
     */
    scroll: import_prop_types49.default.oneOf(["body", "paper"]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types49.default.shape({
      backdrop: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
      container: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
      paper: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
      root: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
      transition: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types49.default.shape({
      backdrop: import_prop_types49.default.elementType,
      container: import_prop_types49.default.elementType,
      paper: import_prop_types49.default.elementType,
      root: import_prop_types49.default.elementType,
      transition: import_prop_types49.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    TransitionComponent: import_prop_types49.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types49.default.oneOfType([import_prop_types49.default.number, import_prop_types49.default.shape({
      appear: import_prop_types49.default.number,
      enter: import_prop_types49.default.number,
      exit: import_prop_types49.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    TransitionProps: import_prop_types49.default.object
  } : void 0;
  var Dialog_default = Dialog;

  // react-user-mgmt/node_modules/@mui/material/DialogContent/DialogContent.js
  var React91 = __toESM(require_react());
  var import_prop_types50 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/DialogContent/dialogContentClasses.js
  function getDialogContentUtilityClass(slot) {
    return generateUtilityClass("MuiDialogContent", slot);
  }
  var dialogContentClasses = generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);

  // react-user-mgmt/node_modules/@mui/material/DialogTitle/dialogTitleClasses.js
  function getDialogTitleUtilityClass(slot) {
    return generateUtilityClass("MuiDialogTitle", slot);
  }
  var dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
  var dialogTitleClasses_default = dialogTitleClasses;

  // react-user-mgmt/node_modules/@mui/material/DialogContent/DialogContent.js
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var useUtilityClasses24 = (ownerState) => {
    const {
      classes,
      dividers
    } = ownerState;
    const slots = {
      root: ["root", dividers && "dividers"]
    };
    return composeClasses(slots, getDialogContentUtilityClass, classes);
  };
  var DialogContentRoot = styled_default2("div", {
    name: "MuiDialogContent",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.dividers && styles5.dividers];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    flex: "1 1 auto",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    overflowY: "auto",
    padding: "20px 24px",
    variants: [{
      props: ({
        ownerState
      }) => ownerState.dividers,
      style: {
        padding: "16px 24px",
        borderTop: `1px solid ${(theme2.vars || theme2).palette.divider}`,
        borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.dividers,
      style: {
        [`.${dialogTitleClasses_default.root} + &`]: {
          paddingTop: 0
        }
      }
    }]
  })));
  var DialogContent = /* @__PURE__ */ React91.forwardRef(function DialogContent2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialogContent"
    });
    const {
      className,
      dividers = false,
      ...other
    } = props;
    const ownerState = {
      ...props,
      dividers
    };
    const classes = useUtilityClasses24(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(DialogContentRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? DialogContent.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types50.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types50.default.object,
    /**
     * @ignore
     */
    className: import_prop_types50.default.string,
    /**
     * Display the top and bottom dividers.
     * @default false
     */
    dividers: import_prop_types50.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object])
  } : void 0;
  var DialogContent_default = DialogContent;

  // react-user-mgmt/node_modules/@mui/material/DialogTitle/DialogTitle.js
  var React92 = __toESM(require_react());
  var import_prop_types51 = __toESM(require_prop_types());
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var useUtilityClasses25 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getDialogTitleUtilityClass, classes);
  };
  var DialogTitleRoot = styled_default2(Typography_default, {
    name: "MuiDialogTitle",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({
    padding: "16px 24px",
    flex: "0 0 auto"
  });
  var DialogTitle = /* @__PURE__ */ React92.forwardRef(function DialogTitle2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDialogTitle"
    });
    const {
      className,
      id: idProp,
      ...other
    } = props;
    const ownerState = props;
    const classes = useUtilityClasses25(ownerState);
    const {
      titleId: titleId2 = idProp
    } = React92.useContext(DialogContext_default);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(DialogTitleRoot, {
      component: "h2",
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      variant: "h6",
      id: idProp ?? titleId2,
      ...other
    });
  });
  true ? DialogTitle.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types51.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types51.default.object,
    /**
     * @ignore
     */
    className: import_prop_types51.default.string,
    /**
     * @ignore
     */
    id: import_prop_types51.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types51.default.oneOfType([import_prop_types51.default.arrayOf(import_prop_types51.default.oneOfType([import_prop_types51.default.func, import_prop_types51.default.object, import_prop_types51.default.bool])), import_prop_types51.default.func, import_prop_types51.default.object])
  } : void 0;
  var DialogTitle_default = DialogTitle;

  // react-user-mgmt/node_modules/@mui/material/Divider/Divider.js
  var React93 = __toESM(require_react());
  var import_prop_types52 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Divider/dividerClasses.js
  function getDividerUtilityClass(slot) {
    return generateUtilityClass("MuiDivider", slot);
  }
  var dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  var dividerClasses_default = dividerClasses;

  // react-user-mgmt/node_modules/@mui/material/Divider/Divider.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var useUtilityClasses26 = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return composeClasses(slots, getDividerUtilityClass, classes);
  };
  var DividerRoot = styled_default2("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.absolute && styles5.absolute, styles5[ownerState.variant], ownerState.light && styles5.light, ownerState.orientation === "vertical" && styles5.vertical, ownerState.flexItem && styles5.flexItem, ownerState.children && styles5.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles5.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles5.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles5.textAlignLeft];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme2.vars || theme2).palette.divider,
    borderBottomWidth: "thin",
    variants: [{
      props: {
        absolute: true
      },
      style: {
        position: "absolute",
        bottom: 0,
        left: 0,
        width: "100%"
      }
    }, {
      props: {
        light: true
      },
      style: {
        borderColor: theme2.vars ? `rgba(${theme2.vars.palette.dividerChannel} / 0.08)` : alpha(theme2.palette.divider, 0.08)
      }
    }, {
      props: {
        variant: "inset"
      },
      style: {
        marginLeft: 72
      }
    }, {
      props: {
        variant: "middle",
        orientation: "horizontal"
      },
      style: {
        marginLeft: theme2.spacing(2),
        marginRight: theme2.spacing(2)
      }
    }, {
      props: {
        variant: "middle",
        orientation: "vertical"
      },
      style: {
        marginTop: theme2.spacing(1),
        marginBottom: theme2.spacing(1)
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        height: "100%",
        borderBottomWidth: 0,
        borderRightWidth: "thin"
      }
    }, {
      props: {
        flexItem: true
      },
      style: {
        alignSelf: "stretch",
        height: "auto"
      }
    }, {
      props: ({
        ownerState
      }) => !!ownerState.children,
      style: {
        display: "flex",
        textAlign: "center",
        border: 0,
        borderTopStyle: "solid",
        borderLeftStyle: "solid",
        "&::before, &::after": {
          content: '""',
          alignSelf: "center"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.children && ownerState.orientation !== "vertical",
      style: {
        "&::before, &::after": {
          width: "100%",
          borderTop: `thin solid ${(theme2.vars || theme2).palette.divider}`,
          borderTopStyle: "inherit"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.orientation === "vertical" && ownerState.children,
      style: {
        flexDirection: "column",
        "&::before, &::after": {
          height: "100%",
          borderLeft: `thin solid ${(theme2.vars || theme2).palette.divider}`,
          borderLeftStyle: "inherit"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.textAlign === "right" && ownerState.orientation !== "vertical",
      style: {
        "&::before": {
          width: "90%"
        },
        "&::after": {
          width: "10%"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.textAlign === "left" && ownerState.orientation !== "vertical",
      style: {
        "&::before": {
          width: "10%"
        },
        "&::after": {
          width: "90%"
        }
      }
    }]
  })));
  var DividerWrapper = styled_default2("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.wrapper, ownerState.orientation === "vertical" && styles5.wrapperVertical];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    display: "inline-block",
    paddingLeft: `calc(${theme2.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme2.spacing(1)} * 1.2)`,
    whiteSpace: "nowrap",
    variants: [{
      props: {
        orientation: "vertical"
      },
      style: {
        paddingTop: `calc(${theme2.spacing(1)} * 1.2)`,
        paddingBottom: `calc(${theme2.spacing(1)} * 1.2)`
      }
    }]
  })));
  var Divider = /* @__PURE__ */ React93.forwardRef(function Divider2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      orientation = "horizontal",
      component = children || orientation === "vertical" ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      role = component !== "hr" ? "separator" : void 0,
      textAlign = "center",
      variant = "fullWidth",
      ...other
    } = props;
    const ownerState = {
      ...props,
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign,
      variant
    };
    const classes = useUtilityClasses26(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(DividerRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      role,
      ref,
      ownerState,
      "aria-orientation": role === "separator" && (component !== "hr" || orientation === "vertical") ? orientation : void 0,
      ...other,
      children: children ? /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    });
  });
  if (Divider) {
    Divider.muiSkipListHighlight = true;
  }
  true ? Divider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: import_prop_types52.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types52.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types52.default.object,
    /**
     * @ignore
     */
    className: import_prop_types52.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types52.default.elementType,
    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: import_prop_types52.default.bool,
    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    light: import_prop_types52.default.bool,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types52.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    role: import_prop_types52.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object]),
    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: import_prop_types52.default.oneOf(["center", "left", "right"]),
    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types52.default.string])
  } : void 0;
  var Divider_default = Divider;

  // react-user-mgmt/node_modules/@mui/material/FilledInput/FilledInput.js
  var React94 = __toESM(require_react());
  var import_prop_types53 = __toESM(require_prop_types());
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var useUtilityClasses27 = (ownerState) => {
    const {
      classes,
      disableUnderline,
      startAdornment,
      endAdornment,
      size,
      hiddenLabel,
      multiline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline", startAdornment && "adornedStart", endAdornment && "adornedEnd", size === "small" && `size${capitalize_default(size)}`, hiddenLabel && "hiddenLabel", multiline && "multiline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return {
      ...classes,
      // forward classes to the InputBase
      ...composedClasses
    };
  };
  var FilledInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles5), !ownerState.disableUnderline && styles5.underline];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const light2 = theme2.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return {
      position: "relative",
      backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme2.vars || theme2).shape.borderRadius,
      borderTopRightRadius: (theme2.vars || theme2).shape.borderRadius,
      transition: theme2.transitions.create("background-color", {
        duration: theme2.transitions.duration.shorter,
        easing: theme2.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme2.vars ? theme2.vars.palette.FilledInput.disabledBg : disabledBackground
      },
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disableUnderline,
        style: {
          "&::after": {
            left: 0,
            bottom: 0,
            content: '""',
            position: "absolute",
            right: 0,
            transform: "scaleX(0)",
            transition: theme2.transitions.create("transform", {
              duration: theme2.transitions.duration.shorter,
              easing: theme2.transitions.easing.easeOut
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&.${filledInputClasses_default.focused}:after`]: {
            // translateX(0) is a workaround for Safari transform scale bug
            // See https://github.com/mui/material-ui/issues/31766
            transform: "scaleX(1) translateX(0)"
          },
          [`&.${filledInputClasses_default.error}`]: {
            "&::before, &::after": {
              borderBottomColor: (theme2.vars || theme2).palette.error.main
            }
          },
          "&::before": {
            borderBottom: `1px solid ${theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})` : bottomLineColor}`,
            left: 0,
            bottom: 0,
            content: '"\\00a0"',
            position: "absolute",
            right: 0,
            transition: theme2.transitions.create("border-bottom-color", {
              duration: theme2.transitions.duration.shorter
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
            borderBottom: `1px solid ${(theme2.vars || theme2).palette.text.primary}`
          },
          [`&.${filledInputClasses_default.disabled}:before`]: {
            borderBottomStyle: "dotted"
          }
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          disableUnderline: false,
          color: color2
        },
        style: {
          "&::after": {
            borderBottom: `2px solid ${(theme2.vars || theme2).palette[color2]?.main}`
          }
        }
      })), {
        props: ({
          ownerState
        }) => ownerState.startAdornment,
        style: {
          paddingLeft: 12
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.endAdornment,
        style: {
          paddingRight: 12
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline,
        style: {
          padding: "25px 12px 8px"
        }
      }, {
        props: ({
          ownerState,
          size
        }) => ownerState.multiline && size === "small",
        style: {
          paddingTop: 21,
          paddingBottom: 4
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline && ownerState.hiddenLabel,
        style: {
          paddingTop: 16,
          paddingBottom: 17
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline && ownerState.hiddenLabel && ownerState.size === "small",
        style: {
          paddingTop: 8,
          paddingBottom: 9
        }
      }]
    };
  }));
  var FilledInputInput = styled_default2(InputBaseInput, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12,
    ...!theme2.vars && {
      "&:-webkit-autofill": {
        WebkitBoxShadow: theme2.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
        WebkitTextFillColor: theme2.palette.mode === "light" ? null : "#fff",
        caretColor: theme2.palette.mode === "light" ? null : "#fff",
        borderTopLeftRadius: "inherit",
        borderTopRightRadius: "inherit"
      }
    },
    ...theme2.vars && {
      "&:-webkit-autofill": {
        borderTopLeftRadius: "inherit",
        borderTopRightRadius: "inherit"
      },
      [theme2.getColorSchemeSelector("dark")]: {
        "&:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 100px #266798 inset",
          WebkitTextFillColor: "#fff",
          caretColor: "#fff"
        }
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        paddingTop: 21,
        paddingBottom: 4
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.hiddenLabel,
      style: {
        paddingTop: 16,
        paddingBottom: 17
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.startAdornment,
      style: {
        paddingLeft: 0
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.endAdornment,
      style: {
        paddingRight: 0
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.hiddenLabel && ownerState.size === "small",
      style: {
        paddingTop: 8,
        paddingBottom: 9
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.multiline,
      style: {
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 0,
        paddingRight: 0
      }
    }]
  })));
  var FilledInput = /* @__PURE__ */ React94.forwardRef(function FilledInput2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      disableUnderline = false,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      hiddenLabel,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text",
      ...other
    } = props;
    const ownerState = {
      ...props,
      disableUnderline,
      fullWidth,
      inputComponent,
      multiline,
      type
    };
    const classes = useUtilityClasses27(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = slotProps ?? componentsPropsProp ? deepmerge(filledInputComponentsProps, slotProps ?? componentsPropsProp) : filledInputComponentsProps;
    const RootSlot = slots.root ?? components.Root ?? FilledInputRoot;
    const InputSlot = slots.input ?? components.Input ?? FilledInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(InputBase_default, {
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type,
      ...other,
      classes
    });
  });
  true ? FilledInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types53.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types53.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types53.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["primary", "secondary"]), import_prop_types53.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types53.default.shape({
      Input: import_prop_types53.default.elementType,
      Root: import_prop_types53.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types53.default.shape({
      input: import_prop_types53.default.object,
      root: import_prop_types53.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types53.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types53.default.bool,
    /**
     * If `true`, the input will not have an underline.
     * @default false
     */
    disableUnderline: import_prop_types53.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types53.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types53.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types53.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types53.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types53.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types53.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types53.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types53.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    /**
     * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types53.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types53.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types53.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types53.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types53.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types53.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types53.default.oneOfType([import_prop_types53.default.number, import_prop_types53.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types53.default.shape({
      input: import_prop_types53.default.object,
      root: import_prop_types53.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types53.default.shape({
      input: import_prop_types53.default.elementType,
      root: import_prop_types53.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types53.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types53.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types53.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // react-user-mgmt/node_modules/@mui/material/FormControl/FormControl.js
  var React95 = __toESM(require_react());
  var import_prop_types54 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  var formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // react-user-mgmt/node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var useUtilityClasses28 = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default2("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles5.fullWidth];
    }
  })({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top",
    // Fix alignment issue on Safari.
    variants: [{
      props: {
        margin: "normal"
      },
      style: {
        marginTop: 16,
        marginBottom: 8
      }
    }, {
      props: {
        margin: "dense"
      },
      style: {
        marginTop: 8,
        marginBottom: 4
      }
    }, {
      props: {
        fullWidth: true
      },
      style: {
        width: "100%"
      }
    }]
  });
  var FormControl = /* @__PURE__ */ React95.forwardRef(function FormControl2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined",
      ...other
    } = props;
    const ownerState = {
      ...props,
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    };
    const classes = useUtilityClasses28(ownerState);
    const [adornedStart, setAdornedStart] = React95.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React95.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React95.useState(() => {
      let initialFilled = false;
      if (children) {
        React95.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React95.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    const registeredInput = React95.useRef(false);
    if (true) {
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const onFilled = React95.useCallback(() => {
      setFilled(true);
    }, []);
    const onEmpty = React95.useCallback(() => {
      setFilled(false);
    }, []);
    const childContext = React95.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onFocus: () => {
          setFocused(true);
        },
        onEmpty,
        onFilled,
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, onEmpty, onFilled, required, size, variant]);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(FormControlRoot, {
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref,
        ...other,
        children
      })
    });
  });
  true ? FormControl.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types54.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types54.default.object,
    /**
     * @ignore
     */
    className: import_prop_types54.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types54.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types54.default.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types54.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types54.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types54.default.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types54.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types54.default.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types54.default.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types54.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["medium", "small"]), import_prop_types54.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types54.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // react-user-mgmt/node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var React96 = __toESM(require_react());
  var import_prop_types55 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControlLabel", slot);
  }
  var formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
  var formControlLabelClasses_default = formControlLabelClasses;

  // react-user-mgmt/node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var useUtilityClasses29 = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
      label: ["label", disabled && "disabled"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
  };
  var FormControlLabelRoot = styled_default2("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles5.label
      }, styles5.root, styles5[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    },
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: (theme2.vars || theme2).palette.text.disabled
      }
    },
    variants: [{
      props: {
        labelPlacement: "start"
      },
      style: {
        flexDirection: "row-reverse",
        marginRight: -11
      }
    }, {
      props: {
        labelPlacement: "top"
      },
      style: {
        flexDirection: "column-reverse"
      }
    }, {
      props: {
        labelPlacement: "bottom"
      },
      style: {
        flexDirection: "column"
      }
    }, {
      props: ({
        labelPlacement
      }) => labelPlacement === "start" || labelPlacement === "top" || labelPlacement === "bottom",
      style: {
        marginLeft: 16
        // used for row presentation of radio/checkbox
      }
    }]
  })));
  var AsteriskComponent = styled_default2("span", {
    name: "MuiFormControlLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles5) => styles5.asterisk
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    [`&.${formControlLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  })));
  var FormControlLabel = /* @__PURE__ */ React96.forwardRef(function FormControlLabel2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      checked,
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      inputRef,
      label: labelProp,
      labelPlacement = "end",
      name,
      onChange,
      required: requiredProp,
      slots = {},
      slotProps = {},
      value,
      ...other
    } = props;
    const muiFormControl = useFormControl();
    const disabled = disabledProp ?? control.props.disabled ?? muiFormControl?.disabled;
    const required = requiredProp ?? control.props.required;
    const controlProps = {
      disabled,
      required
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = {
      ...props,
      disabled,
      labelPlacement,
      required,
      error: fcs.error
    };
    const classes = useUtilityClasses29(ownerState);
    const externalForwardedProps = {
      slots,
      slotProps: {
        ...componentsProps,
        ...slotProps
      }
    };
    const [TypographySlot, typographySlotProps] = useSlot("typography", {
      elementType: Typography_default,
      externalForwardedProps,
      ownerState
    });
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(TypographySlot, {
        component: "span",
        ...typographySlotProps,
        className: clsx_default(classes.label, typographySlotProps?.className),
        children: label
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(FormControlLabelRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other,
      children: [/* @__PURE__ */ React96.cloneElement(control, controlProps), required ? /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", {
        children: [label, /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }) : label]
    });
  });
  true ? FormControlLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component appears selected.
     */
    checked: import_prop_types55.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types55.default.object,
    /**
     * @ignore
     */
    className: import_prop_types55.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    componentsProps: import_prop_types55.default.shape({
      typography: import_prop_types55.default.object
    }),
    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: import_prop_types55.default.element.isRequired,
    /**
     * If `true`, the control is disabled.
     */
    disabled: import_prop_types55.default.bool,
    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: import_prop_types55.default.bool,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: import_prop_types55.default.node,
    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: import_prop_types55.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * @ignore
     */
    name: import_prop_types55.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types55.default.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types55.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types55.default.shape({
      typography: import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types55.default.shape({
      typography: import_prop_types55.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
    /**
     * The value of the component.
     */
    value: import_prop_types55.default.any
  } : void 0;
  var FormControlLabel_default = FormControlLabel;

  // react-user-mgmt/node_modules/@mui/material/FormGroup/FormGroup.js
  var React97 = __toESM(require_react());
  var import_prop_types56 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/FormGroup/formGroupClasses.js
  function getFormGroupUtilityClass(slot) {
    return generateUtilityClass("MuiFormGroup", slot);
  }
  var formGroupClasses = generateUtilityClasses("MuiFormGroup", ["root", "row", "error"]);

  // react-user-mgmt/node_modules/@mui/material/FormGroup/FormGroup.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var useUtilityClasses30 = (ownerState) => {
    const {
      classes,
      row,
      error
    } = ownerState;
    const slots = {
      root: ["root", row && "row", error && "error"]
    };
    return composeClasses(slots, getFormGroupUtilityClass, classes);
  };
  var FormGroupRoot = styled_default2("div", {
    name: "MuiFormGroup",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.row && styles5.row];
    }
  })({
    display: "flex",
    flexDirection: "column",
    flexWrap: "wrap",
    variants: [{
      props: {
        row: true
      },
      style: {
        flexDirection: "row"
      }
    }]
  });
  var FormGroup = /* @__PURE__ */ React97.forwardRef(function FormGroup2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormGroup"
    });
    const {
      className,
      row = false,
      ...other
    } = props;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = {
      ...props,
      row,
      error: fcs.error
    };
    const classes = useUtilityClasses30(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(FormGroupRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? FormGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types56.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types56.default.object,
    /**
     * @ignore
     */
    className: import_prop_types56.default.string,
    /**
     * Display group of elements in a compact row.
     * @default false
     */
    row: import_prop_types56.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types56.default.oneOfType([import_prop_types56.default.arrayOf(import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.object, import_prop_types56.default.bool])), import_prop_types56.default.func, import_prop_types56.default.object])
  } : void 0;
  var FormGroup_default = FormGroup;

  // react-user-mgmt/node_modules/@mui/material/FormHelperText/FormHelperText.js
  var React98 = __toESM(require_react());
  var import_prop_types57 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // react-user-mgmt/node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var _span;
  var useUtilityClasses31 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default2("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.size && styles5[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles5.contained, ownerState.filled && styles5.filled];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    color: (theme2.vars || theme2).palette.text.secondary,
    ...theme2.typography.caption,
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        marginTop: 4
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.contained,
      style: {
        marginLeft: 14,
        marginRight: 14
      }
    }]
  })));
  var FormHelperText = /* @__PURE__ */ React98.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p",
      disabled,
      error,
      filled,
      focused,
      margin: margin2,
      required,
      variant,
      ...other
    } = props;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = {
      ...props,
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    };
    delete ownerState.ownerState;
    const classes = useUtilityClasses31(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(FormHelperTextRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ...other,
      ownerState,
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {
          className: "notranslate",
          "aria-hidden": true,
          children: "\u200B"
        }))
      ) : children
    });
  });
  true ? FormHelperText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: import_prop_types57.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types57.default.object,
    /**
     * @ignore
     */
    className: import_prop_types57.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types57.default.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: import_prop_types57.default.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: import_prop_types57.default.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: import_prop_types57.default.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: import_prop_types57.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types57.default.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: import_prop_types57.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types57.default.oneOfType([import_prop_types57.default.oneOf(["filled", "outlined", "standard"]), import_prop_types57.default.string])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // react-user-mgmt/node_modules/@mui/material/FormLabel/FormLabel.js
  var React99 = __toESM(require_react());
  var import_prop_types58 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  var formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // react-user-mgmt/node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var useUtilityClasses32 = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default2("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.color === "secondary" && styles5.colorSecondary, ownerState.filled && styles5.filled];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    color: (theme2.vars || theme2).palette.text.secondary,
    ...theme2.typography.body1,
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    variants: [...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        [`&.${formLabelClasses_default.focused}`]: {
          color: (theme2.vars || theme2).palette[color2].main
        }
      }
    })), {
      props: {},
      style: {
        [`&.${formLabelClasses_default.disabled}`]: {
          color: (theme2.vars || theme2).palette.text.disabled
        },
        [`&.${formLabelClasses_default.error}`]: {
          color: (theme2.vars || theme2).palette.error.main
        }
      }
    }]
  })));
  var AsteriskComponent2 = styled_default2("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles5) => styles5.asterisk
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  })));
  var FormLabel = /* @__PURE__ */ React99.forwardRef(function FormLabel2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      color: color2,
      component = "label",
      disabled,
      error,
      filled,
      focused,
      required,
      ...other
    } = props;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = {
      ...props,
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    };
    const classes = useUtilityClasses32(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(FormLabelRoot, {
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref,
      ...other,
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(AsteriskComponent2, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    });
  });
  true ? FormLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types58.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types58.default.object,
    /**
     * @ignore
     */
    className: import_prop_types58.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types58.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types58.default.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: import_prop_types58.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types58.default.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: import_prop_types58.default.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: import_prop_types58.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types58.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object, import_prop_types58.default.bool])), import_prop_types58.default.func, import_prop_types58.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // react-user-mgmt/node_modules/@mui/material/Grid/Grid.js
  var React101 = __toESM(require_react());
  var import_prop_types59 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Grid/GridContext.js
  var React100 = __toESM(require_react());
  var GridContext = /* @__PURE__ */ React100.createContext();
  if (true) {
    GridContext.displayName = "GridContext";
  }
  var GridContext_default = GridContext;

  // react-user-mgmt/node_modules/@mui/material/Grid/gridClasses.js
  function getGridUtilityClass(slot) {
    return generateUtilityClass("MuiGrid", slot);
  }
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = generateUtilityClasses("MuiGrid", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    // spacings
    ...SPACINGS.map((spacing2) => `spacing-xs-${spacing2}`),
    // direction values
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES.map((size) => `grid-md-${size}`),
    ...GRID_SIZES.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES.map((size) => `grid-xl-${size}`)
  ]);
  var gridClasses_default = gridClasses;

  // react-user-mgmt/node_modules/@mui/material/Grid/Grid.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  function generateGrid({
    theme: theme2,
    ownerState
  }) {
    let size;
    return theme2.breakpoints.keys.reduce((globalStyles, breakpoint) => {
      let styles5 = {};
      if (ownerState[breakpoint]) {
        size = ownerState[breakpoint];
      }
      if (!size) {
        return globalStyles;
      }
      if (size === true) {
        styles5 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      } else if (size === "auto") {
        styles5 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      } else {
        const columnsBreakpointValues = resolveBreakpointValues({
          values: ownerState.columns,
          breakpoints: theme2.breakpoints.values
        });
        const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
        if (columnValue === void 0 || columnValue === null) {
          return globalStyles;
        }
        const width2 = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
        let more = {};
        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          const themeSpacing = theme2.spacing(ownerState.columnSpacing);
          if (themeSpacing !== "0px") {
            const fullWidth = `calc(${width2} + ${themeSpacing})`;
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        }
        styles5 = {
          flexBasis: width2,
          flexGrow: 0,
          maxWidth: width2,
          ...more
        };
      }
      if (theme2.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles5);
      } else {
        globalStyles[theme2.breakpoints.up(breakpoint)] = styles5;
      }
      return globalStyles;
    }, {});
  }
  function generateDirection({
    theme: theme2,
    ownerState
  }) {
    const directionValues = resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme2.breakpoints.values
    });
    return handleBreakpoints({
      theme: theme2
    }, directionValues, (propValue) => {
      const output = {
        flexDirection: propValue
      };
      if (propValue.startsWith("column")) {
        output[`& > .${gridClasses_default.item}`] = {
          maxWidth: "none"
        };
      }
      return output;
    });
  }
  function extractZeroValueBreakpointKeys({
    breakpoints,
    values: values3
  }) {
    let nonZeroKey = "";
    Object.keys(values3).forEach((key) => {
      if (nonZeroKey !== "") {
        return;
      }
      if (values3[key] !== 0) {
        nonZeroKey = key;
      }
    });
    const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a2, b2) => {
      return breakpoints[a2] - breakpoints[b2];
    });
    return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
  }
  function generateRowGap({
    theme: theme2,
    ownerState
  }) {
    const {
      container,
      rowSpacing
    } = ownerState;
    let styles5 = {};
    if (container && rowSpacing !== 0) {
      const rowSpacingValues = resolveBreakpointValues({
        values: rowSpacing,
        breakpoints: theme2.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof rowSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme2.breakpoints.values,
          values: rowSpacingValues
        });
      }
      styles5 = handleBreakpoints({
        theme: theme2
      }, rowSpacingValues, (propValue, breakpoint) => {
        const themeSpacing = theme2.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            marginTop: `calc(-1 * ${themeSpacing})`,
            [`& > .${gridClasses_default.item}`]: {
              paddingTop: themeSpacing
            }
          };
        }
        if (zeroValueBreakpointKeys?.includes(breakpoint)) {
          return {};
        }
        return {
          marginTop: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingTop: 0
          }
        };
      });
    }
    return styles5;
  }
  function generateColumnGap({
    theme: theme2,
    ownerState
  }) {
    const {
      container,
      columnSpacing
    } = ownerState;
    let styles5 = {};
    if (container && columnSpacing !== 0) {
      const columnSpacingValues = resolveBreakpointValues({
        values: columnSpacing,
        breakpoints: theme2.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof columnSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme2.breakpoints.values,
          values: columnSpacingValues
        });
      }
      styles5 = handleBreakpoints({
        theme: theme2
      }, columnSpacingValues, (propValue, breakpoint) => {
        const themeSpacing = theme2.spacing(propValue);
        if (themeSpacing !== "0px") {
          const negativeValue = `calc(-1 * ${themeSpacing})`;
          return {
            width: `calc(100% + ${themeSpacing})`,
            marginLeft: negativeValue,
            [`& > .${gridClasses_default.item}`]: {
              paddingLeft: themeSpacing
            }
          };
        }
        if (zeroValueBreakpointKeys?.includes(breakpoint)) {
          return {};
        }
        return {
          width: "100%",
          marginLeft: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingLeft: 0
          }
        };
      });
    }
    return styles5;
  }
  function resolveSpacingStyles(spacing2, breakpoints, styles5 = {}) {
    if (!spacing2 || spacing2 <= 0) {
      return [];
    }
    if (typeof spacing2 === "string" && !Number.isNaN(Number(spacing2)) || typeof spacing2 === "number") {
      return [styles5[`spacing-xs-${String(spacing2)}`]];
    }
    const spacingStyles = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing2[breakpoint];
      if (Number(value) > 0) {
        spacingStyles.push(styles5[`spacing-${breakpoint}-${String(value)}`]);
      }
    });
    return spacingStyles;
  }
  var GridRoot = styled_default2("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      const {
        container,
        direction,
        item,
        spacing: spacing2,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingStyles = [];
      if (container) {
        spacingStyles = resolveSpacingStyles(spacing2, breakpoints, styles5);
      }
      const breakpointsStyles = [];
      breakpoints.forEach((breakpoint) => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsStyles.push(styles5[`grid-${breakpoint}-${String(value)}`]);
        }
      });
      return [styles5.root, container && styles5.container, item && styles5.item, zeroMinWidth && styles5.zeroMinWidth, ...spacingStyles, direction !== "row" && styles5[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles5[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
    }
  })(
    // FIXME(romgrk): Can't use memoTheme here
    ({
      ownerState
    }) => ({
      boxSizing: "border-box",
      ...ownerState.container && {
        display: "flex",
        flexWrap: "wrap",
        width: "100%"
      },
      ...ownerState.item && {
        margin: 0
        // For instance, it's useful when used with a `figure` element.
      },
      ...ownerState.zeroMinWidth && {
        minWidth: 0
      },
      ...ownerState.wrap !== "wrap" && {
        flexWrap: ownerState.wrap
      }
    }),
    generateDirection,
    generateRowGap,
    generateColumnGap,
    generateGrid
  );
  function resolveSpacingClasses(spacing2, breakpoints) {
    if (!spacing2 || spacing2 <= 0) {
      return [];
    }
    if (typeof spacing2 === "string" && !Number.isNaN(Number(spacing2)) || typeof spacing2 === "number") {
      return [`spacing-xs-${String(spacing2)}`];
    }
    const classes = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing2[breakpoint];
      if (Number(value) > 0) {
        const className = `spacing-${breakpoint}-${String(value)}`;
        classes.push(className);
      }
    });
    return classes;
  }
  var useUtilityClasses33 = (ownerState) => {
    const {
      classes,
      container,
      direction,
      item,
      spacing: spacing2,
      wrap,
      zeroMinWidth,
      breakpoints
    } = ownerState;
    let spacingClasses = [];
    if (container) {
      spacingClasses = resolveSpacingClasses(spacing2, breakpoints);
    }
    const breakpointsClasses = [];
    breakpoints.forEach((breakpoint) => {
      const value = ownerState[breakpoint];
      if (value) {
        breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
      }
    });
    const slots = {
      root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
    };
    return composeClasses(slots, getGridUtilityClass, classes);
  };
  var Grid = /* @__PURE__ */ React101.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useDefaultProps2({
      props: inProps,
      name: "MuiGrid"
    });
    const {
      breakpoints
    } = useTheme5();
    const props = extendSxProp(themeProps);
    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = "div",
      container = false,
      direction = "row",
      item = false,
      rowSpacing: rowSpacingProp,
      spacing: spacing2 = 0,
      wrap = "wrap",
      zeroMinWidth = false,
      ...other
    } = props;
    const rowSpacing = rowSpacingProp || spacing2;
    const columnSpacing = columnSpacingProp || spacing2;
    const columnsContext = React101.useContext(GridContext_default);
    const columns = container ? columnsProp || 12 : columnsContext;
    const breakpointsValues = {};
    const otherFiltered = {
      ...other
    };
    breakpoints.keys.forEach((breakpoint) => {
      if (other[breakpoint] != null) {
        breakpointsValues[breakpoint] = other[breakpoint];
        delete otherFiltered[breakpoint];
      }
    });
    const ownerState = {
      ...props,
      columns,
      container,
      direction,
      item,
      rowSpacing,
      columnSpacing,
      wrap,
      zeroMinWidth,
      spacing: spacing2,
      ...breakpointsValues,
      breakpoints: breakpoints.keys
    };
    const classes = useUtilityClasses33(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(GridContext_default.Provider, {
      value: columns,
      children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(GridRoot, {
        ownerState,
        className: clsx_default(classes.root, className),
        as: component,
        ref,
        ...otherFiltered
      })
    });
  });
  true ? Grid.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types59.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types59.default.object,
    /**
     * @ignore
     */
    className: import_prop_types59.default.string,
    /**
     * The number of columns.
     * @default 12
     */
    columns: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.number), import_prop_types59.default.number, import_prop_types59.default.object]),
    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string])), import_prop_types59.default.number, import_prop_types59.default.object, import_prop_types59.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types59.default.elementType,
    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: import_prop_types59.default.bool,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types59.default.arrayOf(import_prop_types59.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types59.default.object]),
    /**
     * If `true`, the component will have the flex *item* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    item: import_prop_types59.default.bool,
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number, import_prop_types59.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number, import_prop_types59.default.bool]),
    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string])), import_prop_types59.default.number, import_prop_types59.default.object, import_prop_types59.default.string]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number, import_prop_types59.default.bool]),
    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.number, import_prop_types59.default.string])), import_prop_types59.default.number, import_prop_types59.default.object, import_prop_types59.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: import_prop_types59.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number, import_prop_types59.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: import_prop_types59.default.oneOfType([import_prop_types59.default.oneOf(["auto"]), import_prop_types59.default.number, import_prop_types59.default.bool]),
    /**
     * If `true`, it sets `min-width: 0` on the item.
     * Refer to the limitations section of the documentation to better understand the use case.
     * @default false
     */
    zeroMinWidth: import_prop_types59.default.bool
  } : void 0;
  if (true) {
    const requireProp = requirePropFactory_default("Grid", Grid);
    Grid["propTypes"] = {
      // eslint-disable-next-line react/forbid-foreign-prop-types
      ...Grid.propTypes,
      direction: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    };
  }
  var Grid_default = Grid;

  // react-user-mgmt/node_modules/@mui/material/Grow/Grow.js
  var React102 = __toESM(require_react());
  var import_prop_types60 = __toESM(require_prop_types());
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles4 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React102.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout2 = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default,
      ...other
    } = props;
    const timer = useTimeout();
    const autoTimeout = React102.useRef();
    const theme2 = useTheme5();
    const nodeRef = React102.useRef(null);
    const handleRef = useForkRef_default(nodeRef, getReactElementRef(children), ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme2.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme2.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme2.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.start(autoTimeout.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(TransitionComponent, {
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2,
      ...other,
      children: (state, {
        ownerState,
        ...restChildProps
      }) => {
        return /* @__PURE__ */ React102.cloneElement(children, {
          style: {
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0,
            ...styles4[state],
            ...style4,
            ...children.props.style
          },
          ref: handleRef,
          ...restChildProps
        });
      }
    });
  });
  true ? Grow.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types60.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types60.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types60.default.oneOfType([import_prop_types60.default.shape({
      enter: import_prop_types60.default.string,
      exit: import_prop_types60.default.string
    }), import_prop_types60.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types60.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types60.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types60.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types60.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types60.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types60.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types60.default.func,
    /**
     * @ignore
     */
    style: import_prop_types60.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: import_prop_types60.default.oneOfType([import_prop_types60.default.oneOf(["auto"]), import_prop_types60.default.number, import_prop_types60.default.shape({
      appear: import_prop_types60.default.number,
      enter: import_prop_types60.default.number,
      exit: import_prop_types60.default.number
    })])
  } : void 0;
  if (Grow) {
    Grow.muiSupportAuto = true;
  }
  var Grow_default = Grow;

  // react-user-mgmt/node_modules/@mui/material/Input/Input.js
  var React103 = __toESM(require_react());
  var import_prop_types61 = __toESM(require_prop_types());
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var useUtilityClasses34 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return {
      ...classes,
      // forward classes to the InputBase
      ...composedClasses
    };
  };
  var InputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles5), !ownerState.disableUnderline && styles5.underline];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const light2 = theme2.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme2.vars) {
      bottomLineColor = `rgba(${theme2.vars.palette.common.onBackgroundChannel} / ${theme2.vars.opacity.inputUnderline})`;
    }
    return {
      position: "relative",
      variants: [{
        props: ({
          ownerState
        }) => ownerState.formControl,
        style: {
          "label + &": {
            marginTop: 16
          }
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.disableUnderline,
        style: {
          "&::after": {
            left: 0,
            bottom: 0,
            content: '""',
            position: "absolute",
            right: 0,
            transform: "scaleX(0)",
            transition: theme2.transitions.create("transform", {
              duration: theme2.transitions.duration.shorter,
              easing: theme2.transitions.easing.easeOut
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&.${inputClasses_default.focused}:after`]: {
            // translateX(0) is a workaround for Safari transform scale bug
            // See https://github.com/mui/material-ui/issues/31766
            transform: "scaleX(1) translateX(0)"
          },
          [`&.${inputClasses_default.error}`]: {
            "&::before, &::after": {
              borderBottomColor: (theme2.vars || theme2).palette.error.main
            }
          },
          "&::before": {
            borderBottom: `1px solid ${bottomLineColor}`,
            left: 0,
            bottom: 0,
            content: '"\\00a0"',
            position: "absolute",
            right: 0,
            transition: theme2.transitions.create("border-bottom-color", {
              duration: theme2.transitions.duration.shorter
            }),
            pointerEvents: "none"
            // Transparent to the hover style.
          },
          [`&:hover:not(.${inputClasses_default.disabled}, .${inputClasses_default.error}):before`]: {
            borderBottom: `2px solid ${(theme2.vars || theme2).palette.text.primary}`,
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              borderBottom: `1px solid ${bottomLineColor}`
            }
          },
          [`&.${inputClasses_default.disabled}:before`]: {
            borderBottomStyle: "dotted"
          }
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          color: color2,
          disableUnderline: false
        },
        style: {
          "&::after": {
            borderBottom: `2px solid ${(theme2.vars || theme2).palette[color2].main}`
          }
        }
      }))]
    };
  }));
  var InputInput = styled_default2(InputBaseInput, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React103.forwardRef(function Input2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline = false,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text",
      ...other
    } = props;
    const classes = useUtilityClasses34(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = slotProps ?? componentsPropsProp ? deepmerge(slotProps ?? componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = slots.root ?? components.Root ?? InputRoot;
    const InputSlot = slots.input ?? components.Input ?? InputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(InputBase_default, {
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type,
      ...other,
      classes
    });
  });
  true ? Input.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types61.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types61.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types61.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types61.default.oneOfType([import_prop_types61.default.oneOf(["primary", "secondary"]), import_prop_types61.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types61.default.shape({
      Input: import_prop_types61.default.elementType,
      Root: import_prop_types61.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types61.default.shape({
      input: import_prop_types61.default.object,
      root: import_prop_types61.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types61.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types61.default.bool,
    /**
     * If `true`, the `input` will not have an underline.
     * @default false
     */
    disableUnderline: import_prop_types61.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types61.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types61.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types61.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types61.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types61.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types61.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types61.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]),
    /**
     * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types61.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types61.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types61.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types61.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types61.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types61.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types61.default.oneOfType([import_prop_types61.default.number, import_prop_types61.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types61.default.shape({
      input: import_prop_types61.default.object,
      root: import_prop_types61.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types61.default.shape({
      input: import_prop_types61.default.elementType,
      root: import_prop_types61.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types61.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types61.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types61.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // react-user-mgmt/node_modules/@mui/material/InputLabel/InputLabel.js
  var React104 = __toESM(require_react());
  var import_prop_types62 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  var inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // react-user-mgmt/node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var useUtilityClasses35 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size && size !== "normal" && `size${capitalize_default(size)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return {
      ...classes,
      // forward the focused, disabled, etc. classes to the FormLabel
      ...composedClasses
    };
  };
  var InputLabelRoot = styled_default2(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles5.asterisk
      }, styles5.root, ownerState.formControl && styles5.formControl, ownerState.size === "small" && styles5.sizeSmall, ownerState.shrink && styles5.shrink, !ownerState.disableAnimation && styles5.animated, ownerState.focused && styles5.focused, styles5[ownerState.variant]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%",
    variants: [{
      props: ({
        ownerState
      }) => ownerState.formControl,
      style: {
        position: "absolute",
        left: 0,
        top: 0,
        // slight alteration to spec spacing to match visual spec result
        transform: "translate(0, 20px) scale(1)"
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        // Compensation for the `Input.inputSizeSmall` style.
        transform: "translate(0, 17px) scale(1)"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.shrink,
      style: {
        transform: "translate(0, -1.5px) scale(0.75)",
        transformOrigin: "top left",
        maxWidth: "133%"
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.disableAnimation,
      style: {
        transition: theme2.transitions.create(["color", "transform", "max-width"], {
          duration: theme2.transitions.duration.shorter,
          easing: theme2.transitions.easing.easeOut
        })
      }
    }, {
      props: {
        variant: "filled"
      },
      style: {
        // Chrome's autofill feature gives the input field a yellow background.
        // Since the input field is behind the label in the HTML tree,
        // the input field is drawn last and hides the label with an opaque background color.
        // zIndex: 1 will raise the label above opaque background-colors of input.
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(12px, 16px) scale(1)",
        maxWidth: "calc(100% - 24px)"
      }
    }, {
      props: {
        variant: "filled",
        size: "small"
      },
      style: {
        transform: "translate(12px, 13px) scale(1)"
      }
    }, {
      props: ({
        variant,
        ownerState
      }) => variant === "filled" && ownerState.shrink,
      style: {
        userSelect: "none",
        pointerEvents: "auto",
        transform: "translate(12px, 7px) scale(0.75)",
        maxWidth: "calc(133% - 24px)"
      }
    }, {
      props: ({
        variant,
        ownerState,
        size
      }) => variant === "filled" && ownerState.shrink && size === "small",
      style: {
        transform: "translate(12px, 4px) scale(0.75)"
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        // see comment above on filled.zIndex
        zIndex: 1,
        pointerEvents: "none",
        transform: "translate(14px, 16px) scale(1)",
        maxWidth: "calc(100% - 24px)"
      }
    }, {
      props: {
        variant: "outlined",
        size: "small"
      },
      style: {
        transform: "translate(14px, 9px) scale(1)"
      }
    }, {
      props: ({
        variant,
        ownerState
      }) => variant === "outlined" && ownerState.shrink,
      style: {
        userSelect: "none",
        pointerEvents: "auto",
        // Theoretically, we should have (8+5)*2/0.75 = 34px
        // but it feels a better when it bleeds a bit on the left, so 32px.
        maxWidth: "calc(133% - 32px)",
        transform: "translate(14px, -9px) scale(0.75)"
      }
    }]
  })));
  var InputLabel = /* @__PURE__ */ React104.forwardRef(function InputLabel2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      margin: margin2,
      shrink: shrinkProp,
      variant,
      className,
      ...other
    } = props;
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required", "focused"]
    });
    const ownerState = {
      ...props,
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required,
      focused: fcs.focused
    };
    const classes = useUtilityClasses35(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(InputLabelRoot, {
      "data-shrink": shrink,
      ref,
      className: clsx_default(classes.root, className),
      ...other,
      ownerState,
      classes
    });
  });
  true ? InputLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types62.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types62.default.object,
    /**
     * @ignore
     */
    className: import_prop_types62.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types62.default.oneOfType([import_prop_types62.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types62.default.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: import_prop_types62.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types62.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types62.default.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: import_prop_types62.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types62.default.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types62.default.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: import_prop_types62.default.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: import_prop_types62.default.oneOfType([import_prop_types62.default.oneOf(["normal", "small"]), import_prop_types62.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types62.default.oneOfType([import_prop_types62.default.arrayOf(import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object, import_prop_types62.default.bool])), import_prop_types62.default.func, import_prop_types62.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types62.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // react-user-mgmt/node_modules/@mui/material/Link/Link.js
  var React105 = __toESM(require_react());
  var import_prop_types63 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Link/linkClasses.js
  function getLinkUtilityClass(slot) {
    return generateUtilityClass("MuiLink", slot);
  }
  var linkClasses = generateUtilityClasses("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
  var linkClasses_default = linkClasses;

  // react-user-mgmt/node_modules/@mui/material/Link/getTextDecoration.js
  var getTextDecoration = ({
    theme: theme2,
    ownerState
  }) => {
    const transformedColor = ownerState.color;
    const color2 = getPath(theme2, `palette.${transformedColor}.main`, false) || getPath(theme2, `palette.${transformedColor}`, false) || ownerState.color;
    const channelColor = getPath(theme2, `palette.${transformedColor}.mainChannel`) || getPath(theme2, `palette.${transformedColor}Channel`);
    if ("vars" in theme2 && channelColor) {
      return `rgba(${channelColor} / 0.4)`;
    }
    return alpha(color2, 0.4);
  };
  var getTextDecoration_default = getTextDecoration;

  // react-user-mgmt/node_modules/@mui/material/Link/Link.js
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var v6Colors2 = {
    primary: true,
    secondary: true,
    error: true,
    info: true,
    success: true,
    warning: true,
    textPrimary: true,
    textSecondary: true,
    textDisabled: true
  };
  var useUtilityClasses36 = (ownerState) => {
    const {
      classes,
      component,
      focusVisible,
      underline
    } = ownerState;
    const slots = {
      root: ["root", `underline${capitalize_default(underline)}`, component === "button" && "button", focusVisible && "focusVisible"]
    };
    return composeClasses(slots, getLinkUtilityClass, classes);
  };
  var LinkRoot = styled_default2(Typography_default, {
    name: "MuiLink",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`underline${capitalize_default(ownerState.underline)}`], ownerState.component === "button" && styles5.button];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => {
    return {
      variants: [{
        props: {
          underline: "none"
        },
        style: {
          textDecoration: "none"
        }
      }, {
        props: {
          underline: "hover"
        },
        style: {
          textDecoration: "none",
          "&:hover": {
            textDecoration: "underline"
          }
        }
      }, {
        props: {
          underline: "always"
        },
        style: {
          textDecoration: "underline",
          "&:hover": {
            textDecorationColor: "inherit"
          }
        }
      }, {
        props: ({
          underline,
          ownerState
        }) => underline === "always" && ownerState.color !== "inherit",
        style: {
          textDecorationColor: "var(--Link-underlineColor)"
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          underline: "always",
          color: color2
        },
        style: {
          "--Link-underlineColor": theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / 0.4)` : alpha(theme2.palette[color2].main, 0.4)
        }
      })), {
        props: {
          underline: "always",
          color: "textPrimary"
        },
        style: {
          "--Link-underlineColor": theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme2.palette.text.primary, 0.4)
        }
      }, {
        props: {
          underline: "always",
          color: "textSecondary"
        },
        style: {
          "--Link-underlineColor": theme2.vars ? `rgba(${theme2.vars.palette.text.secondaryChannel} / 0.4)` : alpha(theme2.palette.text.secondary, 0.4)
        }
      }, {
        props: {
          underline: "always",
          color: "textDisabled"
        },
        style: {
          "--Link-underlineColor": (theme2.vars || theme2).palette.text.disabled
        }
      }, {
        props: {
          component: "button"
        },
        style: {
          position: "relative",
          WebkitTapHighlightColor: "transparent",
          backgroundColor: "transparent",
          // Reset default value
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0,
          border: 0,
          margin: 0,
          // Remove the margin in Safari
          borderRadius: 0,
          padding: 0,
          // Remove the padding in Firefox
          cursor: "pointer",
          userSelect: "none",
          verticalAlign: "middle",
          MozAppearance: "none",
          // Reset
          WebkitAppearance: "none",
          // Reset
          "&::-moz-focus-inner": {
            borderStyle: "none"
            // Remove Firefox dotted outline.
          },
          [`&.${linkClasses_default.focusVisible}`]: {
            outline: "auto"
          }
        }
      }]
    };
  }));
  var Link = /* @__PURE__ */ React105.forwardRef(function Link2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiLink"
    });
    const theme2 = useTheme5();
    const {
      className,
      color: color2 = "primary",
      component = "a",
      onBlur,
      onFocus,
      TypographyClasses,
      underline = "always",
      variant = "inherit",
      sx,
      ...other
    } = props;
    const [focusVisible, setFocusVisible] = React105.useState(false);
    const handleBlur = (event) => {
      if (!isFocusVisible(event.target)) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    };
    const handleFocus = (event) => {
      if (isFocusVisible(event.target)) {
        setFocusVisible(true);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const ownerState = {
      ...props,
      color: color2,
      component,
      focusVisible,
      underline,
      variant
    };
    const classes = useUtilityClasses36(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(LinkRoot, {
      color: color2,
      className: clsx_default(classes.root, className),
      classes: TypographyClasses,
      component,
      onBlur: handleBlur,
      onFocus: handleFocus,
      ref,
      ownerState,
      variant,
      ...other,
      sx: [...v6Colors2[color2] === void 0 ? [{
        color: color2
      }] : [], ...Array.isArray(sx) ? sx : [sx]],
      style: {
        ...other.style,
        ...underline === "always" && color2 !== "inherit" && !v6Colors2[color2] && {
          "--Link-underlineColor": getTextDecoration_default({
            theme: theme2,
            ownerState
          })
        }
      }
    });
  });
  true ? Link.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types63.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types63.default.object,
    /**
     * @ignore
     */
    className: import_prop_types63.default.string,
    /**
     * The color of the link.
     * @default 'primary'
     */
    color: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), import_prop_types63.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef_default,
    /**
     * @ignore
     */
    onBlur: import_prop_types63.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types63.default.func,
    /**
     * @ignore
     */
    style: import_prop_types63.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object]),
    /**
     * `classes` prop applied to the [`Typography`](https://mui.com/material-ui/api/typography/) element.
     */
    TypographyClasses: import_prop_types63.default.object,
    /**
     * Controls when the link should have an underline.
     * @default 'always'
     */
    underline: import_prop_types63.default.oneOf(["always", "hover", "none"]),
    /**
     * Applies the theme typography styles.
     * @default 'inherit'
     */
    variant: import_prop_types63.default.oneOfType([import_prop_types63.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types63.default.string])
  } : void 0;
  var Link_default = Link;

  // react-user-mgmt/node_modules/@mui/material/List/List.js
  var React107 = __toESM(require_react());
  var import_prop_types64 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/List/ListContext.js
  var React106 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React106.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // react-user-mgmt/node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  var listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);

  // react-user-mgmt/node_modules/@mui/material/List/List.js
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var useUtilityClasses37 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default2("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.disablePadding && styles5.padding, ownerState.dense && styles5.dense, ownerState.subheader && styles5.subheader];
    }
  })({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative",
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.disablePadding,
      style: {
        paddingTop: 8,
        paddingBottom: 8
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.subheader,
      style: {
        paddingTop: 0
      }
    }]
  });
  var List = /* @__PURE__ */ React107.forwardRef(function List2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader,
      ...other
    } = props;
    const context = React107.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = {
      ...props,
      component,
      dense,
      disablePadding
    };
    const classes = useUtilityClasses37(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(ListRoot, {
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        ownerState,
        ...other,
        children: [subheader, children]
      })
    });
  });
  true ? List.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types64.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types64.default.object,
    /**
     * @ignore
     */
    className: import_prop_types64.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types64.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types64.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types64.default.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types64.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object])
  } : void 0;
  var List_default = List;

  // react-user-mgmt/node_modules/@mui/material/ListItem/ListItem.js
  var React109 = __toESM(require_react());
  var import_prop_types66 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/ListItem/listItemClasses.js
  function getListItemUtilityClass(slot) {
    return generateUtilityClass("MuiListItem", slot);
  }
  var listItemClasses = generateUtilityClasses("MuiListItem", ["root", "container", "dense", "alignItemsFlexStart", "divider", "gutters", "padding", "secondaryAction"]);

  // react-user-mgmt/node_modules/@mui/material/ListItemButton/listItemButtonClasses.js
  var listItemButtonClasses = generateUtilityClasses("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
  var listItemButtonClasses_default = listItemButtonClasses;

  // react-user-mgmt/node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  var React108 = __toESM(require_react());
  var import_prop_types65 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js
  function getListItemSecondaryActionClassesUtilityClass(slot) {
    return generateUtilityClass("MuiListItemSecondaryAction", slot);
  }
  var listItemSecondaryActionClasses = generateUtilityClasses("MuiListItemSecondaryAction", ["root", "disableGutters"]);

  // react-user-mgmt/node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var useUtilityClasses38 = (ownerState) => {
    const {
      disableGutters,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disableGutters && "disableGutters"]
    };
    return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
  };
  var ListItemSecondaryActionRoot = styled_default2("div", {
    name: "MuiListItemSecondaryAction",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.disableGutters && styles5.disableGutters];
    }
  })({
    position: "absolute",
    right: 16,
    top: "50%",
    transform: "translateY(-50%)",
    variants: [{
      props: ({
        ownerState
      }) => ownerState.disableGutters,
      style: {
        right: 0
      }
    }]
  });
  var ListItemSecondaryAction = /* @__PURE__ */ React108.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemSecondaryAction"
    });
    const {
      className,
      ...other
    } = props;
    const context = React108.useContext(ListContext_default);
    const ownerState = {
      ...props,
      disableGutters: context.disableGutters
    };
    const classes = useUtilityClasses38(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ListItemSecondaryActionRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? ListItemSecondaryAction.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `IconButton` or selection control.
     */
    children: import_prop_types65.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types65.default.object,
    /**
     * @ignore
     */
    className: import_prop_types65.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object])
  } : void 0;
  ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
  var ListItemSecondaryAction_default = ListItemSecondaryAction;

  // react-user-mgmt/node_modules/@mui/material/ListItem/ListItem.js
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var overridesResolver = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.dense && styles5.dense, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters, !ownerState.disablePadding && styles5.padding, ownerState.hasSecondaryAction && styles5.secondaryAction];
  };
  var useUtilityClasses39 = (ownerState) => {
    const {
      alignItems,
      classes,
      dense,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction"],
      container: ["container"]
    };
    return composeClasses(slots, getListItemUtilityClass, classes);
  };
  var ListItemRoot = styled_default2("div", {
    name: "MuiListItem",
    slot: "Root",
    overridesResolver
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    width: "100%",
    boxSizing: "border-box",
    textAlign: "left",
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.disablePadding,
      style: {
        paddingTop: 8,
        paddingBottom: 8
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.disablePadding && ownerState.dense,
      style: {
        paddingTop: 4,
        paddingBottom: 4
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.disablePadding && !ownerState.disableGutters,
      style: {
        paddingLeft: 16,
        paddingRight: 16
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.disablePadding && !!ownerState.secondaryAction,
      style: {
        // Add some space to avoid collision as `ListItemSecondaryAction`
        // is absolutely positioned.
        paddingRight: 48
      }
    }, {
      props: ({
        ownerState
      }) => !!ownerState.secondaryAction,
      style: {
        [`& > .${listItemButtonClasses_default.root}`]: {
          paddingRight: 48
        }
      }
    }, {
      props: {
        alignItems: "flex-start"
      },
      style: {
        alignItems: "flex-start"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.divider,
      style: {
        borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
        backgroundClip: "padding-box"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.button,
      style: {
        transition: theme2.transitions.create("background-color", {
          duration: theme2.transitions.duration.shortest
        }),
        "&:hover": {
          textDecoration: "none",
          backgroundColor: (theme2.vars || theme2).palette.action.hover,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.hasSecondaryAction,
      style: {
        // Add some space to avoid collision as `ListItemSecondaryAction`
        // is absolutely positioned.
        paddingRight: 48
      }
    }]
  })));
  var ListItemContainer = styled_default2("li", {
    name: "MuiListItem",
    slot: "Container",
    overridesResolver: (props, styles5) => styles5.container
  })({
    position: "relative"
  });
  var ListItem = /* @__PURE__ */ React109.forwardRef(function ListItem2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItem"
    });
    const {
      alignItems = "center",
      children: childrenProp,
      className,
      component: componentProp,
      components = {},
      componentsProps = {},
      ContainerComponent = "li",
      ContainerProps: {
        className: ContainerClassName,
        ...ContainerProps
      } = {},
      dense = false,
      disableGutters = false,
      disablePadding = false,
      divider = false,
      secondaryAction,
      slotProps = {},
      slots = {},
      ...other
    } = props;
    const context = React109.useContext(ListContext_default);
    const childContext = React109.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React109.useRef(null);
    const children = React109.Children.toArray(childrenProp);
    const hasSecondaryAction = children.length && isMuiElement_default(children[children.length - 1], ["ListItemSecondaryAction"]);
    const ownerState = {
      ...props,
      alignItems,
      dense: childContext.dense,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction
    };
    const classes = useUtilityClasses39(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    const Root = slots.root || components.Root || ListItemRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const componentProps = {
      className: clsx_default(classes.root, rootProps.className, className),
      ...other
    };
    let Component6 = componentProp || "li";
    if (hasSecondaryAction) {
      Component6 = !componentProps.component && !componentProp ? "div" : Component6;
      if (ContainerComponent === "li") {
        if (Component6 === "li") {
          Component6 = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ListContext_default.Provider, {
        value: childContext,
        children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(ListItemContainer, {
          as: ContainerComponent,
          className: clsx_default(classes.container, ContainerClassName),
          ref: handleRef,
          ownerState,
          ...ContainerProps,
          children: [/* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Root, {
            ...rootProps,
            ...!isHostComponent_default2(Root) && {
              as: Component6,
              ownerState: {
                ...ownerState,
                ...rootProps.ownerState
              }
            },
            ...componentProps,
            children
          }), children.pop()]
        })
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(Root, {
        ...rootProps,
        as: Component6,
        ref: handleRef,
        ...!isHostComponent_default2(Root) && {
          ownerState: {
            ...ownerState,
            ...rootProps.ownerState
          }
        },
        ...componentProps,
        children: [children, secondaryAction && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ListItemSecondaryAction_default, {
          children: secondaryAction
        })]
      })
    });
  });
  true ? ListItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types66.default.oneOf(["center", "flex-start"]),
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: chainPropTypes(import_prop_types66.default.node, (props) => {
      const children = React109.Children.toArray(props.children);
      let secondaryActionIndex = -1;
      for (let i2 = children.length - 1; i2 >= 0; i2 -= 1) {
        const child = children[i2];
        if (isMuiElement_default(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i2;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types66.default.object,
    /**
     * @ignore
     */
    className: import_prop_types66.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types66.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default {}
     */
    components: import_prop_types66.default.shape({
      Root: import_prop_types66.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default {}
     */
    componentsProps: import_prop_types66.default.shape({
      root: import_prop_types66.default.object
    }),
    /**
     * The container component used when a `ListItemSecondaryAction` is the last child.
     * @default 'li'
     * @deprecated Use the `component` or `slots.root` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    ContainerComponent: elementTypeAcceptingRef_default,
    /**
     * Props applied to the container component if used.
     * @default {}
     * @deprecated Use the `slotProps.root` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    ContainerProps: import_prop_types66.default.object,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types66.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types66.default.bool,
    /**
     * If `true`, all padding is removed.
     * @default false
     */
    disablePadding: import_prop_types66.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types66.default.bool,
    /**
     * The element to display at the end of ListItem.
     */
    secondaryAction: import_prop_types66.default.node,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types66.default.shape({
      root: import_prop_types66.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types66.default.shape({
      root: import_prop_types66.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
  } : void 0;
  var ListItem_default = ListItem;

  // react-user-mgmt/node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
  var React110 = __toESM(require_react());
  var import_prop_types67 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js
  function getListItemAvatarUtilityClass(slot) {
    return generateUtilityClass("MuiListItemAvatar", slot);
  }
  var listItemAvatarClasses = generateUtilityClasses("MuiListItemAvatar", ["root", "alignItemsFlexStart"]);

  // react-user-mgmt/node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var useUtilityClasses40 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return composeClasses(slots, getListItemAvatarUtilityClass, classes);
  };
  var ListItemAvatarRoot = styled_default2("div", {
    name: "MuiListItemAvatar",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart];
    }
  })({
    minWidth: 56,
    flexShrink: 0,
    variants: [{
      props: {
        alignItems: "flex-start"
      },
      style: {
        marginTop: 8
      }
    }]
  });
  var ListItemAvatar = /* @__PURE__ */ React110.forwardRef(function ListItemAvatar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemAvatar"
    });
    const {
      className,
      ...other
    } = props;
    const context = React110.useContext(ListContext_default);
    const ownerState = {
      ...props,
      alignItems: context.alignItems
    };
    const classes = useUtilityClasses40(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ListItemAvatarRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? ListItemAvatar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `Avatar`.
     */
    children: import_prop_types67.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types67.default.object,
    /**
     * @ignore
     */
    className: import_prop_types67.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types67.default.oneOfType([import_prop_types67.default.arrayOf(import_prop_types67.default.oneOfType([import_prop_types67.default.func, import_prop_types67.default.object, import_prop_types67.default.bool])), import_prop_types67.default.func, import_prop_types67.default.object])
  } : void 0;
  var ListItemAvatar_default = ListItemAvatar;

  // react-user-mgmt/node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  var React111 = __toESM(require_react());
  var import_prop_types68 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  function getListItemIconUtilityClass(slot) {
    return generateUtilityClass("MuiListItemIcon", slot);
  }
  var listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  var listItemIconClasses_default = listItemIconClasses;

  // react-user-mgmt/node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  var useUtilityClasses41 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return composeClasses(slots, getListItemIconUtilityClass, classes);
  };
  var ListItemIconRoot = styled_default2("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.alignItems === "flex-start" && styles5.alignItemsFlexStart];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    minWidth: 56,
    color: (theme2.vars || theme2).palette.action.active,
    flexShrink: 0,
    display: "inline-flex",
    variants: [{
      props: {
        alignItems: "flex-start"
      },
      style: {
        marginTop: 8
      }
    }]
  })));
  var ListItemIcon = /* @__PURE__ */ React111.forwardRef(function ListItemIcon2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className,
      ...other
    } = props;
    const context = React111.useContext(ListContext_default);
    const ownerState = {
      ...props,
      alignItems: context.alignItems
    };
    const classes = useUtilityClasses41(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(ListItemIconRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other
    });
  });
  true ? ListItemIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: import_prop_types68.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types68.default.object,
    /**
     * @ignore
     */
    className: import_prop_types68.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types68.default.oneOfType([import_prop_types68.default.arrayOf(import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object, import_prop_types68.default.bool])), import_prop_types68.default.func, import_prop_types68.default.object])
  } : void 0;
  var ListItemIcon_default = ListItemIcon;

  // react-user-mgmt/node_modules/@mui/material/ListItemText/ListItemText.js
  var React112 = __toESM(require_react());
  var import_prop_types69 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/ListItemText/listItemTextClasses.js
  function getListItemTextUtilityClass(slot) {
    return generateUtilityClass("MuiListItemText", slot);
  }
  var listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // react-user-mgmt/node_modules/@mui/material/ListItemText/ListItemText.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var useUtilityClasses42 = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return composeClasses(slots, getListItemTextUtilityClass, classes);
  };
  var ListItemTextRoot = styled_default2("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles5.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles5.secondary
      }, styles5.root, ownerState.inset && styles5.inset, ownerState.primary && ownerState.secondary && styles5.multiline, ownerState.dense && styles5.dense];
    }
  })({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4,
    [`.${typographyClasses_default.root}:where(& .${listItemTextClasses_default.primary})`]: {
      display: "block"
    },
    [`.${typographyClasses_default.root}:where(& .${listItemTextClasses_default.secondary})`]: {
      display: "block"
    },
    variants: [{
      props: ({
        ownerState
      }) => ownerState.primary && ownerState.secondary,
      style: {
        marginTop: 6,
        marginBottom: 6
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.inset,
      style: {
        paddingLeft: 56
      }
    }]
  });
  var ListItemText = /* @__PURE__ */ React112.forwardRef(function ListItemText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps,
      slots = {},
      slotProps = {},
      ...other
    } = props;
    const {
      dense
    } = React112.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = {
      ...props,
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    };
    const classes = useUtilityClasses42(ownerState);
    const externalForwardedProps = {
      slots,
      slotProps: {
        primary: primaryTypographyProps,
        secondary: secondaryTypographyProps,
        ...slotProps
      }
    };
    const [PrimarySlot, primarySlotProps] = useSlot("primary", {
      className: classes.primary,
      elementType: Typography_default,
      externalForwardedProps,
      ownerState
    });
    const [SecondarySlot, secondarySlotProps] = useSlot("secondary", {
      className: classes.secondary,
      elementType: Typography_default,
      externalForwardedProps,
      ownerState
    });
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(PrimarySlot, {
        variant: dense ? "body2" : "body1",
        component: primarySlotProps?.variant ? void 0 : "span",
        ...primarySlotProps,
        children: primary
      });
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(SecondarySlot, {
        variant: "body2",
        color: "textSecondary",
        ...secondarySlotProps,
        children: secondary
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(ListItemTextRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      ...other,
      children: [primary, secondary]
    });
  });
  true ? ListItemText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Alias for the `primary` prop.
     */
    children: import_prop_types69.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types69.default.object,
    /**
     * @ignore
     */
    className: import_prop_types69.default.string,
    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types69.default.bool,
    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: import_prop_types69.default.bool,
    /**
     * The main content element.
     */
    primary: import_prop_types69.default.node,
    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     * @deprecated Use `slotProps.primary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    primaryTypographyProps: import_prop_types69.default.object,
    /**
     * The secondary content element.
     */
    secondary: import_prop_types69.default.node,
    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     * @deprecated Use `slotProps.secondary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    secondaryTypographyProps: import_prop_types69.default.object,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types69.default.shape({
      primary: import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object]),
      secondary: import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types69.default.shape({
      primary: import_prop_types69.default.elementType,
      secondary: import_prop_types69.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object])
  } : void 0;
  var ListItemText_default = ListItemText;

  // react-user-mgmt/node_modules/@mui/material/Menu/Menu.js
  var React115 = __toESM(require_react());
  var import_react_is4 = __toESM(require_react_is2());
  var import_prop_types72 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/MenuList/MenuList.js
  var React113 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is2());
  var import_prop_types70 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/utils/getScrollbarSize.js
  var getScrollbarSize_default = getScrollbarSize;

  // react-user-mgmt/node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.startsWith(textCriteria.keys.join(""));
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React113.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu",
      ...other
    } = props;
    const listRef = React113.useRef(null);
    const textCriteriaRef = React113.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React113.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, {
        direction
      }) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerWindow_default(containerElement))}px`;
          listRef.current.style[direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown = (event) => {
      const list = listRef.current;
      const key = event.key;
      const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;
      if (isModifierKeyPressed) {
        if (onKeyDown) {
          onKeyDown(event);
        }
        return;
      }
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React113.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React113.isValidElement(child)) {
        if (activeItemIndex === index) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
      if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React113.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React113.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(List_default, {
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown,
      tabIndex: autoFocus ? 0 : -1,
      ...other,
      children: items
    });
  });
  true ? MenuList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: import_prop_types70.default.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: import_prop_types70.default.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: import_prop_types70.default.node,
    /**
     * @ignore
     */
    className: import_prop_types70.default.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types70.default.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types70.default.bool,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types70.default.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: import_prop_types70.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // react-user-mgmt/node_modules/@mui/material/Popover/Popover.js
  var React114 = __toESM(require_react());
  var import_prop_types71 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  var popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);

  // react-user-mgmt/node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  function getOffsetTop(rect, vertical) {
    let offset = 0;
    if (typeof vertical === "number") {
      offset = vertical;
    } else if (vertical === "center") {
      offset = rect.height / 2;
    } else if (vertical === "bottom") {
      offset = rect.height;
    }
    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset = 0;
    if (typeof horizontal === "number") {
      offset = horizontal;
    } else if (horizontal === "center") {
      offset = rect.width / 2;
    } else if (horizontal === "right") {
      offset = rect.width;
    }
    return offset;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n2) => typeof n2 === "number" ? `${n2}px` : n2).join(" ");
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses43 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default2(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var PopoverPaper = styled_default2(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles5) => styles5.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /* @__PURE__ */ React114.forwardRef(function Popover2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      // TODO: remove in v7
      slots = {},
      slotProps = {},
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent,
      // TODO: remove in v7
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps = {},
      // TODO: remove in v7
      disableScrollLock = false,
      ...other
    } = props;
    const paperRef = React114.useRef();
    const ownerState = {
      ...props,
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    };
    const classes = useUtilityClasses43(ownerState);
    const getAnchorOffset = React114.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React114.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React114.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top = anchorOffset.top - elemTransformOrigin.vertical;
      let left = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom = top + elemRect.height;
      const right = left + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top < marginThreshold) {
        const diff = top - marginThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom > heightThreshold) {
        const diff = bottom - heightThreshold;
        top -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left < marginThreshold) {
        const diff = left - marginThreshold;
        left -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right > widthThreshold) {
        const diff = right - widthThreshold;
        left -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top)}px`,
        left: `${Math.round(left)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React114.useState(open);
    const setPositioningStyles = React114.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.setProperty("top", positioning.top);
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React114.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = () => {
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React114.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React114.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React114.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    const externalForwardedProps = {
      slots: {
        transition: TransitionComponent,
        ...slots
      },
      slotProps: {
        transition: TransitionProps,
        paper: PaperPropsProp,
        ...slotProps
      }
    };
    const [TransitionSlot, transitionSlotProps] = useSlot("transition", {
      elementType: Grow_default,
      externalForwardedProps,
      ownerState,
      getSlotProps: (handlers) => ({
        ...handlers,
        onEntering: (element, isAppearing) => {
          handlers.onEntering?.(element, isAppearing);
          handleEntering();
        },
        onExited: (element) => {
          handlers.onExited?.(element);
          handleExited();
        }
      }),
      additionalProps: {
        appear: true,
        in: open
      }
    });
    if (transitionDurationProp === "auto" && !TransitionSlot.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl(anchorEl)).body : void 0);
    const [RootSlot, {
      slots: rootSlotsProp,
      slotProps: rootSlotPropsProp,
      ...rootProps
    }] = useSlot("root", {
      ref,
      elementType: PopoverRoot,
      externalForwardedProps: {
        ...externalForwardedProps,
        ...other
      },
      shouldForwardComponentProp: true,
      additionalProps: {
        slots: {
          backdrop: slots.backdrop
        },
        slotProps: {
          backdrop: mergeSlotProps2(typeof slotProps.backdrop === "function" ? slotProps.backdrop(ownerState) : slotProps.backdrop, {
            invisible: true
          })
        },
        container,
        open
      },
      ownerState,
      className: clsx_default(classes.root, className)
    });
    const [PaperSlot, paperProps] = useSlot("paper", {
      ref: paperRef,
      className: classes.paper,
      elementType: PopoverPaper,
      externalForwardedProps,
      shouldForwardComponentProp: true,
      additionalProps: {
        elevation,
        style: isPositioned ? void 0 : {
          opacity: 0
        }
      },
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(RootSlot, {
      ...rootProps,
      ...!isHostComponent_default2(RootSlot) && {
        slots: rootSlotsProp,
        slotProps: rootSlotPropsProp,
        disableScrollLock
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(TransitionSlot, {
        ...transitionSlotProps,
        timeout: transitionDuration,
        children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(PaperSlot, {
          ...paperProps,
          children
        })
      })
    });
  });
  true ? Popover.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType_default,
    /**
     * An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(import_prop_types71.default.oneOfType([HTMLElementType, import_prop_types71.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: import_prop_types71.default.shape({
      horizontal: import_prop_types71.default.oneOfType([import_prop_types71.default.oneOf(["center", "left", "right"]), import_prop_types71.default.number]).isRequired,
      vertical: import_prop_types71.default.oneOfType([import_prop_types71.default.oneOf(["bottom", "center", "top"]), import_prop_types71.default.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: import_prop_types71.default.shape({
      left: import_prop_types71.default.number.isRequired,
      top: import_prop_types71.default.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: import_prop_types71.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types71.default.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    BackdropProps: import_prop_types71.default.object,
    /**
     * The content of the component.
     */
    children: import_prop_types71.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types71.default.object,
    /**
     * @ignore
     */
    className: import_prop_types71.default.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types71.default.oneOfType([HTMLElementType, import_prop_types71.default.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types71.default.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType_default,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: import_prop_types71.default.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: import_prop_types71.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types71.default.bool.isRequired,
    /**
     * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: import_prop_types71.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types71.default.shape({
      backdrop: import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object]),
      paper: import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object]),
      root: import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object]),
      transition: import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types71.default.shape({
      backdrop: import_prop_types71.default.elementType,
      paper: import_prop_types71.default.elementType,
      root: import_prop_types71.default.elementType,
      transition: import_prop_types71.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: import_prop_types71.default.shape({
      horizontal: import_prop_types71.default.oneOfType([import_prop_types71.default.oneOf(["center", "left", "right"]), import_prop_types71.default.number]).isRequired,
      vertical: import_prop_types71.default.oneOfType([import_prop_types71.default.oneOf(["bottom", "center", "top"]), import_prop_types71.default.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @deprecated use the `slots.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default Grow
     */
    TransitionComponent: import_prop_types71.default.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types71.default.oneOfType([import_prop_types71.default.oneOf(["auto"]), import_prop_types71.default.number, import_prop_types71.default.shape({
      appear: import_prop_types71.default.number,
      enter: import_prop_types71.default.number,
      exit: import_prop_types71.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default {}
     */
    TransitionProps: import_prop_types71.default.object
  } : void 0;
  var Popover_default = Popover;

  // react-user-mgmt/node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  var menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);

  // react-user-mgmt/node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses44 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  var MenuRoot = styled_default2(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var MenuPaper = styled_default2(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles5) => styles5.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default2(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles5) => styles5.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu = /* @__PURE__ */ React115.forwardRef(function Menu2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering,
        ...TransitionProps
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {},
      ...other
    } = props;
    const isRtl = useRtl();
    const ownerState = {
      ...props,
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    };
    const classes = useUtilityClasses44(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React115.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, {
          direction: isRtl ? "rtl" : "ltr"
        });
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React115.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React115.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const externalForwardedProps = {
      slots,
      slotProps: {
        list: MenuListProps,
        transition: TransitionProps,
        paper: PaperProps,
        ...slotProps
      }
    };
    const rootSlotProps = useSlotProps_default({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes.root, className]
    });
    const [PaperSlot, paperSlotProps] = useSlot("paper", {
      className: classes.paper,
      elementType: MenuPaper,
      externalForwardedProps,
      shouldForwardComponentProp: true,
      ownerState
    });
    const [ListSlot, listSlotProps] = useSlot("list", {
      className: clsx_default(classes.list, MenuListProps.className),
      elementType: MenuMenuList,
      shouldForwardComponentProp: true,
      externalForwardedProps,
      getSlotProps: (handlers) => ({
        ...handlers,
        onKeyDown: (event) => {
          handleListKeyDown(event);
          handlers.onKeyDown?.(event);
        }
      }),
      ownerState
    });
    const resolvedTransitionProps = typeof externalForwardedProps.slotProps.transition === "function" ? externalForwardedProps.slotProps.transition(ownerState) : externalForwardedProps.slotProps.transition;
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(MenuRoot, {
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        root: slots.root,
        paper: PaperSlot,
        backdrop: slots.backdrop,
        ...slots.transition && {
          // TODO: pass `slots.transition` directly once `TransitionComponent` is removed from Popover
          transition: slots.transition
        }
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps,
        backdrop: typeof slotProps.backdrop === "function" ? slotProps.backdrop(ownerState) : slotProps.backdrop,
        transition: {
          ...resolvedTransitionProps,
          onEntering: (...args) => {
            handleEntering(...args);
            resolvedTransitionProps?.onEntering?.(...args);
          }
        }
      },
      open,
      ref,
      transitionDuration,
      ownerState,
      ...other,
      classes: PopoverClasses,
      children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ListSlot, {
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant,
        ...listSlotProps,
        children
      })
    });
  });
  true ? Menu.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: import_prop_types72.default.oneOfType([HTMLElementType, import_prop_types72.default.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: import_prop_types72.default.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: import_prop_types72.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types72.default.object,
    /**
     * @ignore
     */
    className: import_prop_types72.default.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: import_prop_types72.default.bool,
    /**
     * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.
     * @deprecated use the `slotProps.list` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default {}
     */
    MenuListProps: import_prop_types72.default.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: import_prop_types72.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types72.default.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: import_prop_types72.default.object,
    /**
     * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.
     */
    PopoverClasses: import_prop_types72.default.object,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types72.default.shape({
      backdrop: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object]),
      list: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object]),
      paper: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object]),
      root: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object]),
      transition: import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types72.default.shape({
      backdrop: import_prop_types72.default.elementType,
      list: import_prop_types72.default.elementType,
      paper: import_prop_types72.default.elementType,
      root: import_prop_types72.default.elementType,
      transition: import_prop_types72.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types72.default.oneOfType([import_prop_types72.default.arrayOf(import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object, import_prop_types72.default.bool])), import_prop_types72.default.func, import_prop_types72.default.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: import_prop_types72.default.oneOfType([import_prop_types72.default.oneOf(["auto"]), import_prop_types72.default.number, import_prop_types72.default.shape({
      appear: import_prop_types72.default.number,
      enter: import_prop_types72.default.number,
      exit: import_prop_types72.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     * @default {}
     */
    TransitionProps: import_prop_types72.default.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: import_prop_types72.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // react-user-mgmt/node_modules/@mui/material/MenuItem/MenuItem.js
  var React116 = __toESM(require_react());
  var import_prop_types73 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/MenuItem/menuItemClasses.js
  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  var menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  var menuItemClasses_default = menuItemClasses;

  // react-user-mgmt/node_modules/@mui/material/MenuItem/MenuItem.js
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var overridesResolver2 = (props, styles5) => {
    const {
      ownerState
    } = props;
    return [styles5.root, ownerState.dense && styles5.dense, ownerState.divider && styles5.divider, !ownerState.disableGutters && styles5.gutters];
  };
  var useUtilityClasses45 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return {
      ...classes,
      ...composedClasses
    };
  };
  var MenuItemRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver: overridesResolver2
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    ...theme2.typography.body1,
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap",
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme2.vars || theme2).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default.selected}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : alpha(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default.selected}:hover`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : alpha(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : alpha(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.focus
    },
    [`&.${menuItemClasses_default.disabled}`]: {
      opacity: (theme2.vars || theme2).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme2.spacing(1),
      marginBottom: theme2.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    },
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.disableGutters,
      style: {
        paddingLeft: 16,
        paddingRight: 16
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.divider,
      style: {
        borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
        backgroundClip: "padding-box"
      }
    }, {
      props: ({
        ownerState
      }) => !ownerState.dense,
      style: {
        [theme2.breakpoints.up("sm")]: {
          minHeight: "auto"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.dense,
      style: {
        minHeight: 32,
        // https://m2.material.io/components/menus#specs > Dense
        paddingTop: 4,
        paddingBottom: 4,
        ...theme2.typography.body2,
        [`& .${listItemIconClasses_default.root} svg`]: {
          fontSize: "1.25rem"
        }
      }
    }]
  })));
  var MenuItem = /* @__PURE__ */ React116.forwardRef(function MenuItem2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className,
      ...other
    } = props;
    const context = React116.useContext(ListContext_default);
    const childContext = React116.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React116.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = {
      ...props,
      dense: childContext.dense,
      divider,
      disableGutters
    };
    const classes = useUtilityClasses45(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(MenuItemRoot, {
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
        className: clsx_default(classes.root, className),
        ...other,
        ownerState,
        classes
      })
    });
  });
  true ? MenuItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types73.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types73.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types73.default.object,
    /**
     * @ignore
     */
    className: import_prop_types73.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types73.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: import_prop_types73.default.bool,
    /**
     * @ignore
     */
    disabled: import_prop_types73.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types73.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: import_prop_types73.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types73.default.string,
    /**
     * @ignore
     */
    role: import_prop_types73.default.string,
    /**
     * If `true`, the component is selected.
     * @default false
     */
    selected: import_prop_types73.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types73.default.oneOfType([import_prop_types73.default.arrayOf(import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object, import_prop_types73.default.bool])), import_prop_types73.default.func, import_prop_types73.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types73.default.number
  } : void 0;
  var MenuItem_default = MenuItem;

  // react-user-mgmt/node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var React117 = __toESM(require_react());
  var import_prop_types74 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // react-user-mgmt/node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var useUtilityClasses46 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  var StyledSelectSelect = styled_default2("select")(({
    theme: theme2
  }) => ({
    // Reset
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    // Reset
    borderRadius: 0,
    cursor: "pointer",
    "&:focus": {
      // Reset Chrome style
      borderRadius: 0
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme2.vars || theme2).palette.background.paper
    },
    variants: [{
      props: ({
        ownerState
      }) => ownerState.variant !== "filled" && ownerState.variant !== "outlined",
      style: {
        // Bump specificity to allow extending custom inputs
        "&&&": {
          paddingRight: 24,
          minWidth: 16
          // So it doesn't collapse.
        }
      }
    }, {
      props: {
        variant: "filled"
      },
      style: {
        "&&&": {
          paddingRight: 32
        }
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        borderRadius: (theme2.vars || theme2).shape.borderRadius,
        "&:focus": {
          borderRadius: (theme2.vars || theme2).shape.borderRadius
          // Reset the reset for Chrome style
        },
        "&&&": {
          paddingRight: 32
        }
      }
    }]
  }));
  var NativeSelectSelect = styled_default2(StyledSelectSelect, {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp_default,
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.select, styles5[ownerState.variant], ownerState.error && styles5.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles5.multiple
      }];
    }
  })({});
  var StyledSelectIcon = styled_default2("svg")(({
    theme: theme2
  }) => ({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    // Center vertically, height is 1em
    top: "calc(50% - .5em)",
    // Don't block pointer events on the select under the icon.
    pointerEvents: "none",
    color: (theme2.vars || theme2).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.action.disabled
    },
    variants: [{
      props: ({
        ownerState
      }) => ownerState.open,
      style: {
        transform: "rotate(180deg)"
      }
    }, {
      props: {
        variant: "filled"
      },
      style: {
        right: 7
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        right: 7
      }
    }]
  }));
  var NativeSelectIcon = styled_default2(StyledSelectIcon, {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.icon, ownerState.variant && styles5[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles5.iconOpen];
    }
  })({});
  var NativeSelectInput = /* @__PURE__ */ React117.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard",
      ...other
    } = props;
    const ownerState = {
      ...props,
      disabled,
      variant,
      error
    };
    const classes = useUtilityClasses46(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(React117.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime84.jsx)(NativeSelectSelect, {
        ownerState,
        className: clsx_default(classes.select, className),
        disabled,
        ref: inputRef || ref,
        ...other
      }), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types74.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types74.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types74.default.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types74.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types74.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types74.default.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType_default,
    /**
     * @ignore
     */
    multiple: import_prop_types74.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types74.default.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types74.default.func,
    /**
     * The input value.
     */
    value: import_prop_types74.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types74.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // react-user-mgmt/node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var React119 = __toESM(require_react());
  var import_prop_types76 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  var React118 = __toESM(require_react());
  var import_prop_types75 = __toESM(require_prop_types());
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var _span2;
  var NotchedOutlineRoot = styled_default2("fieldset", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default2("legend", {
    shouldForwardProp: rootShouldForwardProp_default
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden",
    // Fix Horizontal scroll when label too long
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.withLabel,
      style: {
        padding: 0,
        lineHeight: "11px",
        // sync with `height` in `legend` styles
        transition: theme2.transitions.create("width", {
          duration: 150,
          easing: theme2.transitions.easing.easeOut
        })
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.withLabel,
      style: {
        display: "block",
        // Fix conflict with normalize.css and sanitize.css
        padding: 0,
        height: 11,
        // sync with `lineHeight` in `legend` styles
        fontSize: "0.75em",
        visibility: "hidden",
        maxWidth: 0.01,
        transition: theme2.transitions.create("max-width", {
          duration: 50,
          easing: theme2.transitions.easing.easeOut
        }),
        whiteSpace: "nowrap",
        "& > span": {
          paddingLeft: 5,
          paddingRight: 5,
          display: "inline-block",
          opacity: 0,
          visibility: "visible"
        }
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.withLabel && ownerState.notched,
      style: {
        maxWidth: "100%",
        transition: theme2.transitions.create("max-width", {
          duration: 100,
          easing: theme2.transitions.easing.easeOut,
          delay: 50
        })
      }
    }]
  })));
  function NotchedOutline(props) {
    const {
      children,
      classes,
      className,
      label,
      notched,
      ...other
    } = props;
    const withLabel = label != null && label !== "";
    const ownerState = {
      ...props,
      notched,
      withLabel
    };
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(NotchedOutlineRoot, {
      "aria-hidden": true,
      className,
      ownerState,
      ...other,
      children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("span", {
            className: "notranslate",
            "aria-hidden": true,
            children: "\u200B"
          }))
        )
      })
    });
  }
  true ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types75.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types75.default.object,
    /**
     * @ignore
     */
    className: import_prop_types75.default.string,
    /**
     * The label.
     */
    label: import_prop_types75.default.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types75.default.bool.isRequired,
    /**
     * @ignore
     */
    style: import_prop_types75.default.object
  } : void 0;

  // react-user-mgmt/node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var useUtilityClasses47 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return {
      ...classes,
      // forward classes to the InputBase
      ...composedClasses
    };
  };
  var OutlinedInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const borderColor2 = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      position: "relative",
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme2.vars || theme2).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderWidth: 2
      },
      variants: [...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          color: color2
        },
        style: {
          [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
            borderColor: (theme2.vars || theme2).palette[color2].main
          }
        }
      })), {
        props: {},
        // to overide the above style
        style: {
          [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
            borderColor: (theme2.vars || theme2).palette.error.main
          },
          [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
            borderColor: (theme2.vars || theme2).palette.action.disabled
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.startAdornment,
        style: {
          paddingLeft: 14
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.endAdornment,
        style: {
          paddingRight: 14
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.multiline,
        style: {
          padding: "16.5px 14px"
        }
      }, {
        props: ({
          ownerState,
          size
        }) => ownerState.multiline && size === "small",
        style: {
          padding: "8.5px 14px"
        }
      }]
    };
  }));
  var NotchedOutlineRoot2 = styled_default2(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles5) => styles5.notchedOutline
  })(memoTheme_default(({
    theme: theme2
  }) => {
    const borderColor2 = theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme2.vars ? `rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  }));
  var OutlinedInputInput = styled_default2(InputBaseInput, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    padding: "16.5px 14px",
    ...!theme2.vars && {
      "&:-webkit-autofill": {
        WebkitBoxShadow: theme2.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
        WebkitTextFillColor: theme2.palette.mode === "light" ? null : "#fff",
        caretColor: theme2.palette.mode === "light" ? null : "#fff",
        borderRadius: "inherit"
      }
    },
    ...theme2.vars && {
      "&:-webkit-autofill": {
        borderRadius: "inherit"
      },
      [theme2.getColorSchemeSelector("dark")]: {
        "&:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 100px #266798 inset",
          WebkitTextFillColor: "#fff",
          caretColor: "#fff"
        }
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        padding: "8.5px 14px"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.multiline,
      style: {
        padding: 0
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.startAdornment,
      style: {
        paddingLeft: 0
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.endAdornment,
      style: {
        paddingRight: 0
      }
    }]
  })));
  var OutlinedInput = /* @__PURE__ */ React119.forwardRef(function OutlinedInput2(inProps, ref) {
    var _React$Fragment;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text",
      ...other
    } = props;
    const classes = useUtilityClasses47(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = {
      ...props,
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    };
    const RootSlot = slots.root ?? components.Root ?? OutlinedInputRoot;
    const InputSlot = slots.input ?? components.Input ?? OutlinedInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(InputBase_default, {
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(NotchedOutlineRoot2, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(React119.Fragment, {
          children: [label, "\u2009", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type,
      ...other,
      classes: {
        ...classes,
        notchedOutline: null
      }
    });
  });
  true ? OutlinedInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types76.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types76.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types76.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types76.default.oneOfType([import_prop_types76.default.oneOf(["primary", "secondary"]), import_prop_types76.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types76.default.shape({
      Input: import_prop_types76.default.elementType,
      Root: import_prop_types76.default.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types76.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types76.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types76.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types76.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types76.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types76.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types76.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types76.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: import_prop_types76.default.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types76.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types76.default.oneOfType([import_prop_types76.default.number, import_prop_types76.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types76.default.oneOfType([import_prop_types76.default.number, import_prop_types76.default.string]),
    /**
     * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types76.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types76.default.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types76.default.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types76.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types76.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types76.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types76.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types76.default.oneOfType([import_prop_types76.default.number, import_prop_types76.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types76.default.shape({
      input: import_prop_types76.default.elementType,
      root: import_prop_types76.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types76.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types76.default.oneOfType([import_prop_types76.default.arrayOf(import_prop_types76.default.oneOfType([import_prop_types76.default.func, import_prop_types76.default.object, import_prop_types76.default.bool])), import_prop_types76.default.func, import_prop_types76.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types76.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types76.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // react-user-mgmt/node_modules/@mui/material/Radio/Radio.js
  var React125 = __toESM(require_react());
  var import_prop_types78 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Radio/RadioButtonIcon.js
  var React122 = __toESM(require_react());
  var import_prop_types77 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js
  var React120 = __toESM(require_react());
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var RadioButtonUnchecked_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime87.jsx)("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "RadioButtonUnchecked");

  // react-user-mgmt/node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js
  var React121 = __toESM(require_react());
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var RadioButtonChecked_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime88.jsx)("path", {
    d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
  }), "RadioButtonChecked");

  // react-user-mgmt/node_modules/@mui/material/Radio/RadioButtonIcon.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var RadioButtonIconRoot = styled_default2("span", {
    shouldForwardProp: rootShouldForwardProp_default
  })({
    position: "relative",
    display: "flex"
  });
  var RadioButtonIconBackground = styled_default2(RadioButtonUnchecked_default)({
    // Scale applied to prevent dot misalignment in Safari
    transform: "scale(1)"
  });
  var RadioButtonIconDot = styled_default2(RadioButtonChecked_default)(memoTheme_default(({
    theme: theme2
  }) => ({
    left: 0,
    position: "absolute",
    transform: "scale(0)",
    transition: theme2.transitions.create("transform", {
      easing: theme2.transitions.easing.easeIn,
      duration: theme2.transitions.duration.shortest
    }),
    variants: [{
      props: {
        checked: true
      },
      style: {
        transform: "scale(1)",
        transition: theme2.transitions.create("transform", {
          easing: theme2.transitions.easing.easeOut,
          duration: theme2.transitions.duration.shortest
        })
      }
    }]
  })));
  function RadioButtonIcon(props) {
    const {
      checked = false,
      classes = {},
      fontSize
    } = props;
    const ownerState = {
      ...props,
      checked
    };
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(RadioButtonIconRoot, {
      className: classes.root,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime89.jsx)(RadioButtonIconBackground, {
        fontSize,
        className: classes.background,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(RadioButtonIconDot, {
        fontSize,
        className: classes.dot,
        ownerState
      })]
    });
  }
  true ? RadioButtonIcon.propTypes = {
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types77.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types77.default.object,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     */
    fontSize: import_prop_types77.default.oneOf(["small", "medium"])
  } : void 0;
  var RadioButtonIcon_default = RadioButtonIcon;

  // react-user-mgmt/node_modules/@mui/material/RadioGroup/useRadioGroup.js
  var React124 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/material/RadioGroup/RadioGroupContext.js
  var React123 = __toESM(require_react());
  var RadioGroupContext = /* @__PURE__ */ React123.createContext(void 0);
  if (true) {
    RadioGroupContext.displayName = "RadioGroupContext";
  }
  var RadioGroupContext_default = RadioGroupContext;

  // react-user-mgmt/node_modules/@mui/material/RadioGroup/useRadioGroup.js
  function useRadioGroup() {
    return React124.useContext(RadioGroupContext_default);
  }

  // react-user-mgmt/node_modules/@mui/material/Radio/radioClasses.js
  function getRadioUtilityClass(slot) {
    return generateUtilityClass("MuiRadio", slot);
  }
  var radioClasses = generateUtilityClasses("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]);
  var radioClasses_default = radioClasses;

  // react-user-mgmt/node_modules/@mui/material/Radio/Radio.js
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var useUtilityClasses48 = (ownerState) => {
    const {
      classes,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, size !== "medium" && `size${capitalize_default(size)}`]
    };
    return {
      ...classes,
      ...composeClasses(slots, getRadioUtilityClass, classes)
    };
  };
  var RadioRoot = styled_default2(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiRadio",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, ownerState.size !== "medium" && styles5[`size${capitalize_default(ownerState.size)}`], styles5[`color${capitalize_default(ownerState.color)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    color: (theme2.vars || theme2).palette.text.secondary,
    [`&.${radioClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.action.disabled
    },
    variants: [{
      props: {
        color: "default",
        disabled: false,
        disableRipple: false
      },
      style: {
        "&:hover": {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette.action.active, theme2.palette.action.hoverOpacity)
        }
      }
    }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2,
        disabled: false,
        disableRipple: false
      },
      style: {
        "&:hover": {
          backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[color2].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : alpha(theme2.palette[color2].main, theme2.palette.action.hoverOpacity)
        }
      }
    })), ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2,
        disabled: false
      },
      style: {
        [`&.${radioClasses_default.checked}`]: {
          color: (theme2.vars || theme2).palette[color2].main
        }
      }
    })), {
      // Should be last to override other colors
      props: {
        disableRipple: false
      },
      style: {
        // Reset on touch devices, it doesn't add specificity
        "&:hover": {
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      }
    }]
  })));
  function areEqualValues(a2, b2) {
    if (typeof b2 === "object" && b2 !== null) {
      return a2 === b2;
    }
    return String(a2) === String(b2);
  }
  var defaultCheckedIcon2 = /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(RadioButtonIcon_default, {
    checked: true
  });
  var defaultIcon2 = /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(RadioButtonIcon_default, {});
  var Radio = /* @__PURE__ */ React125.forwardRef(function Radio2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiRadio"
    });
    const {
      checked: checkedProp,
      checkedIcon = defaultCheckedIcon2,
      color: color2 = "primary",
      icon = defaultIcon2,
      name: nameProp,
      onChange: onChangeProp,
      size = "medium",
      className,
      disabled: disabledProp,
      disableRipple = false,
      slots = {},
      slotProps = {},
      inputProps,
      ...other
    } = props;
    const muiFormControl = useFormControl();
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    disabled ?? (disabled = false);
    const ownerState = {
      ...props,
      disabled,
      disableRipple,
      color: color2,
      size
    };
    const classes = useUtilityClasses48(ownerState);
    const radioGroup = useRadioGroup();
    let checked = checkedProp;
    const onChange = createChainedFunction_default(onChangeProp, radioGroup && radioGroup.onChange);
    let name = nameProp;
    if (radioGroup) {
      if (typeof checked === "undefined") {
        checked = areEqualValues(radioGroup.value, props.value);
      }
      if (typeof name === "undefined") {
        name = radioGroup.name;
      }
    }
    const externalInputProps = slotProps.input ?? inputProps;
    const [RootSlot, rootSlotProps] = useSlot("root", {
      ref,
      elementType: RadioRoot,
      className: clsx_default(classes.root, className),
      shouldForwardComponentProp: true,
      externalForwardedProps: {
        slots,
        slotProps,
        ...other
      },
      getSlotProps: (handlers) => ({
        ...handlers,
        onChange: (event, ...args) => {
          handlers.onChange?.(event, ...args);
          onChange(event, ...args);
        }
      }),
      ownerState,
      additionalProps: {
        type: "radio",
        icon: /* @__PURE__ */ React125.cloneElement(icon, {
          fontSize: icon.props.fontSize ?? size
        }),
        checkedIcon: /* @__PURE__ */ React125.cloneElement(checkedIcon, {
          fontSize: checkedIcon.props.fontSize ?? size
        }),
        disabled,
        name,
        checked,
        slots,
        slotProps: {
          // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.
          input: typeof externalInputProps === "function" ? externalInputProps(ownerState) : externalInputProps
        }
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(RootSlot, {
      ...rootSlotProps,
      classes
    });
  });
  true ? Radio.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types78.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <RadioButtonIcon checked />
     */
    checkedIcon: import_prop_types78.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types78.default.object,
    /**
     * @ignore
     */
    className: import_prop_types78.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types78.default.string]),
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types78.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types78.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <RadioButtonIcon />
     */
    icon: import_prop_types78.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types78.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    inputProps: import_prop_types78.default.object,
    /**
     * Pass a ref to the `input` element.
     * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    inputRef: refType_default,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types78.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types78.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types78.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     * @default 'medium'
     */
    size: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["medium", "small"]), import_prop_types78.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types78.default.shape({
      input: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object]),
      root: import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types78.default.shape({
      input: import_prop_types78.default.elementType,
      root: import_prop_types78.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object, import_prop_types78.default.bool])), import_prop_types78.default.func, import_prop_types78.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     */
    value: import_prop_types78.default.any
  } : void 0;
  var Radio_default = Radio;

  // react-user-mgmt/node_modules/@mui/material/RadioGroup/RadioGroup.js
  var React126 = __toESM(require_react());
  var import_prop_types79 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/RadioGroup/radioGroupClasses.js
  function getRadioGroupUtilityClass(slot) {
    return generateUtilityClass("MuiRadioGroup", slot);
  }
  var radioGroupClasses = generateUtilityClasses("MuiRadioGroup", ["root", "row", "error"]);

  // react-user-mgmt/node_modules/@mui/material/RadioGroup/RadioGroup.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var useUtilityClasses49 = (props) => {
    const {
      classes,
      row,
      error
    } = props;
    const slots = {
      root: ["root", row && "row", error && "error"]
    };
    return composeClasses(slots, getRadioGroupUtilityClass, classes);
  };
  var RadioGroup = /* @__PURE__ */ React126.forwardRef(function RadioGroup2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      children,
      className,
      defaultValue,
      name: nameProp,
      onChange,
      value: valueProp,
      ...other
    } = props;
    const rootRef = React126.useRef(null);
    const classes = useUtilityClasses49(props);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "RadioGroup"
    });
    React126.useImperativeHandle(actions, () => ({
      focus: () => {
        let input = rootRef.current.querySelector("input:not(:disabled):checked");
        if (!input) {
          input = rootRef.current.querySelector("input:not(:disabled)");
        }
        if (input) {
          input.focus();
        }
      }
    }), []);
    const handleRef = useForkRef_default(ref, rootRef);
    const name = useId_default(nameProp);
    const contextValue = React126.useMemo(() => ({
      name,
      onChange(event) {
        setValueState(event.target.value);
        if (onChange) {
          onChange(event, event.target.value);
        }
      },
      value
    }), [name, onChange, setValueState, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(RadioGroupContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(FormGroup_default, {
        role: "radiogroup",
        ref: handleRef,
        className: clsx_default(classes.root, className),
        ...other,
        children
      })
    });
  });
  true ? RadioGroup.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types79.default.node,
    /**
     * @ignore
     */
    className: import_prop_types79.default.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types79.default.any,
    /**
     * The name used to reference the value of the control.
     * If you don't provide this prop, it falls back to a randomly generated name.
     */
    name: import_prop_types79.default.string,
    /**
     * Callback fired when a radio button is selected.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {string} value The value of the selected radio button.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types79.default.func,
    /**
     * Value of the selected radio button. The DOM API casts this to a string.
     */
    value: import_prop_types79.default.any
  } : void 0;
  var RadioGroup_default = RadioGroup;

  // react-user-mgmt/node_modules/@mui/material/Select/Select.js
  var React128 = __toESM(require_react());
  var import_prop_types81 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Select/SelectInput.js
  var React127 = __toESM(require_react());
  var import_react_is5 = __toESM(require_react_is2());
  var import_prop_types80 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  var selectClasses = generateUtilityClasses("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var selectClasses_default = selectClasses;

  // react-user-mgmt/node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var _span3;
  var SelectSelect = styled_default2(StyledSelectSelect, {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses_default.select}`]: styles5.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles5[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.error}`]: styles5.error
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles5.multiple
        }
      ];
    }
  })({
    // Win specificity over the input base
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default2(StyledSelectIcon, {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.icon, ownerState.variant && styles5[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles5.iconOpen];
    }
  })({});
  var SelectNativeInput = styled_default2("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles5) => styles5.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues2(a2, b2) {
    if (typeof b2 === "object" && b2 !== null) {
      return a2 === b2;
    }
    return String(a2) === String(b2);
  }
  function isEmpty3(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses50 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React127.forwardRef(function SelectInput2(props, ref) {
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      required,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      // catching `type` from Input which makes no sense for SelectInput
      type,
      value: valueProp,
      variant = "standard",
      ...other
    } = props;
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React127.useRef(null);
    const displayRef = React127.useRef(null);
    const [displayNode, setDisplayNode] = React127.useState(null);
    const {
      current: isOpenControlled
    } = React127.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React127.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React127.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode?.parentNode;
    React127.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React127.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React127.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React127.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React127.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.includes(event.key)) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React127.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is5.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? "MUI: The `value` prop must be an array when using the `Select` component with `multiple`." : formatMuiErrorMessage(2));
        }
        selected = value.some((v2) => areEqualValues2(v2, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues2(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React127.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (true) {
      React127.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values3 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values3.filter((x2) => x2 != null).map((x2) => `\`${x2}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = {
      ...props,
      variant,
      value,
      open,
      error
    };
    const classes = useUtilityClasses50(ownerState);
    const paperProps = {
      ...MenuProps.PaperProps,
      ...MenuProps.slotProps?.paper
    };
    const listboxId = useId2();
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(React127.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SelectSelect, {
        as: "div",
        ref: handleDisplayRef,
        tabIndex,
        role: "combobox",
        "aria-controls": open ? listboxId : void 0,
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        "aria-required": required ? "true" : void 0,
        "aria-invalid": error ? "true" : void 0,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus,
        ...SelectDisplayProps,
        ownerState,
        className: clsx_default(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty3(display) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("span", {
            className: "notranslate",
            "aria-hidden": true,
            children: "\u200B"
          }))
        ) : display
      }), /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SelectNativeInput, {
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        required,
        ...other,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Menu_default, {
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        },
        ...MenuProps,
        slotProps: {
          ...MenuProps.slotProps,
          list: {
            "aria-labelledby": labelId,
            role: "listbox",
            "aria-multiselectable": multiple ? "true" : void 0,
            disableListWrap: true,
            id: listboxId,
            ...MenuProps.MenuListProps
          },
          paper: {
            ...paperProps,
            style: {
              minWidth: menuMinWidth,
              ...paperProps != null ? paperProps.style : null
            }
          }
        },
        children: items
      })]
    });
  });
  true ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types80.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types80.default.string,
    /**
     * @ignore
     */
    autoFocus: import_prop_types80.default.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: import_prop_types80.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: import_prop_types80.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types80.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types80.default.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: import_prop_types80.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types80.default.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types80.default.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: import_prop_types80.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types80.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types80.default.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType_default,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types80.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types80.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: import_prop_types80.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types80.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types80.default.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: import_prop_types80.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types80.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types80.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types80.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types80.default.bool,
    /**
     * @ignore
     */
    readOnly: import_prop_types80.default.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types80.default.func,
    /**
     * If `true`, the component is required.
     */
    required: import_prop_types80.default.bool,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types80.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.string]),
    /**
     * @ignore
     */
    type: import_prop_types80.default.any,
    /**
     * The input value.
     */
    value: import_prop_types80.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types80.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // react-user-mgmt/node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var useUtilityClasses51 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    const composedClasses = composeClasses(slots, getSelectUtilityClasses, classes);
    return {
      ...classes,
      ...composedClasses
    };
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles5) => styles5.root,
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default2(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default2(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default2(FilledInput_default, styledRootConfig)("");
  var Select = /* @__PURE__ */ React128.forwardRef(function Select2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined",
      ...other
    } = props;
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = {
      ...props,
      variant,
      classes: classesProp
    };
    const classes = useUtilityClasses51(ownerState);
    const {
      root: root2,
      ...restOfClasses
    } = classes;
    const InputComponent = input || {
      standard: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, getReactElementRef(InputComponent));
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(React128.Fragment, {
      children: /* @__PURE__ */ React128.cloneElement(InputComponent, {
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: {
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple,
          ...native ? {
            id
          } : {
            autoWidth,
            defaultOpen,
            displayEmpty,
            labelId,
            MenuProps,
            onClose,
            onOpen,
            open,
            renderValue,
            SelectDisplayProps: {
              id,
              ...SelectDisplayProps
            }
          },
          ...inputProps,
          classes: inputProps ? deepmerge(restOfClasses, inputProps.classes) : restOfClasses,
          ...input ? input.props.inputProps : {}
        },
        ...(multiple && native || displayEmpty) && variant === "outlined" ? {
          notched: true
        } : {},
        ref: inputComponentRef,
        className: clsx_default(InputComponent.props.className, className, classes.root),
        // If a custom input is provided via 'input' prop, do not allow 'variant' to be propagated to it's root element. See https://github.com/mui/material-ui/issues/33894.
        ...!input && {
          variant
        },
        ...other
      })
    });
  });
  true ? Select.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: import_prop_types81.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: import_prop_types81.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types81.default.object,
    /**
     * @ignore
     */
    className: import_prop_types81.default.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: import_prop_types81.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types81.default.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: import_prop_types81.default.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types81.default.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: import_prop_types81.default.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: import_prop_types81.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: import_prop_types81.default.object,
    /**
     * See [OutlinedInput#label](https://mui.com/material-ui/api/outlined-input/#props)
     */
    label: import_prop_types81.default.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types81.default.string,
    /**
     * Props applied to the [`Menu`](https://mui.com/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types81.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types81.default.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: import_prop_types81.default.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: import_prop_types81.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types81.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types81.default.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: import_prop_types81.default.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types81.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types81.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: import_prop_types81.default.oneOfType([import_prop_types81.default.oneOf([""]), import_prop_types81.default.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types81.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // react-user-mgmt/node_modules/@mui/material/Slider/Slider.js
  var React131 = __toESM(require_react());
  var import_prop_types83 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Slider/useSlider.js
  var React129 = __toESM(require_react());

  // react-user-mgmt/node_modules/@mui/material/utils/areArraysEqual.js
  function areArraysEqual(array1, array2, itemComparer = (a2, b2) => a2 === b2) {
    return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
  }
  var areArraysEqual_default = areArraysEqual;

  // react-user-mgmt/node_modules/@mui/material/Slider/useSlider.js
  var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
  function getNewValue(currentValue, step, direction, min, max) {
    return direction === 1 ? Math.min(currentValue + step, max) : Math.max(currentValue - step, min);
  }
  function asc(a2, b2) {
    return a2 - b2;
  }
  function findClosest(values3, currentValue) {
    const {
      index: closestIndex
    } = values3.reduce((acc, value, index) => {
      const distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index
        };
      }
      return acc;
    }, null) ?? {};
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      const touchEvent = event;
      for (let i2 = 0; i2 < touchEvent.changedTouches.length; i2 += 1) {
        const touch = touchEvent.changedTouches[i2];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent(value, min, max) {
    return (value - min) * 100 / (max - min);
  }
  function percentToValue(percent, min, max) {
    return (max - min) * percent + min;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split("e-");
      const matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min) {
    const nearest = Math.round((value - min) / step) * step + min;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex({
    values: values3,
    newValue,
    index
  }) {
    const output = values3.slice();
    output[index] = newValue;
    return output.sort(asc);
  }
  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    const doc = ownerDocument(sliderRef.current);
    if (!sliderRef.current?.contains(doc.activeElement) || Number(doc?.activeElement?.getAttribute("data-index")) !== activeIndex) {
      sliderRef.current?.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  function areValuesEqual(newValue, oldValue) {
    if (typeof newValue === "number" && typeof oldValue === "number") {
      return newValue === oldValue;
    }
    if (typeof newValue === "object" && typeof oldValue === "object") {
      return areArraysEqual_default(newValue, oldValue);
    }
    return false;
  }
  var axisProps = {
    horizontal: {
      offset: (percent) => ({
        left: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    "horizontal-reverse": {
      offset: (percent) => ({
        right: `${percent}%`
      }),
      leap: (percent) => ({
        width: `${percent}%`
      })
    },
    vertical: {
      offset: (percent) => ({
        bottom: `${percent}%`
      }),
      leap: (percent) => ({
        height: `${percent}%`
      })
    }
  };
  var Identity = (x2) => x2;
  var cachedSupportsTouchActionNone;
  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === void 0) {
      if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
        cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }
    return cachedSupportsTouchActionNone;
  }
  function useSlider(parameters) {
    const {
      "aria-labelledby": ariaLabelledby,
      defaultValue,
      disabled = false,
      disableSwap = false,
      isRtl = false,
      marks: marksProp = false,
      max = 100,
      min = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      rootRef: ref,
      scale = Identity,
      step = 1,
      shiftStep = 10,
      tabIndex,
      value: valueProp
    } = parameters;
    const touchId = React129.useRef(void 0);
    const [active, setActive] = React129.useState(-1);
    const [open, setOpen] = React129.useState(-1);
    const [dragging, setDragging] = React129.useState(false);
    const moveCount = React129.useRef(0);
    const lastChangedValue = React129.useRef(null);
    const [valueDerived, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue ?? min,
      name: "Slider"
    });
    const handleChange = onChange && ((event, value, thumbIndex) => {
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, "target", {
        writable: true,
        value: {
          value,
          name
        }
      });
      lastChangedValue.current = value;
      onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values3 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values3 = values3.map((value) => value == null ? min : clamp_default(value, min, max));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_2, index) => ({
      value: min + step * index
    })) : marksProp || [];
    const marksValues = marks.map((mark) => mark.value);
    const [focusedThumbIndex, setFocusedThumbIndex] = React129.useState(-1);
    const sliderRef = React129.useRef(null);
    const handleRef = useForkRef(ref, sliderRef);
    const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
      const index = Number(event.currentTarget.getAttribute("data-index"));
      if (isFocusVisible(event.target)) {
        setFocusedThumbIndex(index);
      }
      setOpen(index);
      otherHandlers?.onFocus?.(event);
    };
    const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
      if (!isFocusVisible(event.target)) {
        setFocusedThumbIndex(-1);
      }
      setOpen(-1);
      otherHandlers?.onBlur?.(event);
    };
    const changeValue = (event, valueInput) => {
      const index = Number(event.currentTarget.getAttribute("data-index"));
      const value = values3[index];
      const marksIndex = marksValues.indexOf(value);
      let newValue = valueInput;
      if (marks && step == null) {
        const maxMarksValue = marksValues[marksValues.length - 1];
        if (newValue >= maxMarksValue) {
          newValue = maxMarksValue;
        } else if (newValue <= marksValues[0]) {
          newValue = marksValues[0];
        } else {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
      }
      newValue = clamp_default(newValue, min, max);
      if (range) {
        if (disableSwap) {
          newValue = clamp_default(newValue, values3[index - 1] || -Infinity, values3[index + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values3,
          newValue,
          index
        });
        let activeIndex = index;
        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }
        focusThumb({
          sliderRef,
          activeIndex
        });
      }
      setValueState(newValue);
      setFocusedThumbIndex(index);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(event, newValue, index);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, lastChangedValue.current ?? newValue);
      }
    };
    const createHandleHiddenInputKeyDown = (otherHandlers) => (event) => {
      if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "PageUp", "PageDown", "Home", "End"].includes(event.key)) {
        event.preventDefault();
        const index = Number(event.currentTarget.getAttribute("data-index"));
        const value = values3[index];
        let newValue = null;
        if (step != null) {
          const stepSize = event.shiftKey ? shiftStep : step;
          switch (event.key) {
            case "ArrowUp":
              newValue = getNewValue(value, stepSize, 1, min, max);
              break;
            case "ArrowRight":
              newValue = getNewValue(value, stepSize, isRtl ? -1 : 1, min, max);
              break;
            case "ArrowDown":
              newValue = getNewValue(value, stepSize, -1, min, max);
              break;
            case "ArrowLeft":
              newValue = getNewValue(value, stepSize, isRtl ? 1 : -1, min, max);
              break;
            case "PageUp":
              newValue = getNewValue(value, shiftStep, 1, min, max);
              break;
            case "PageDown":
              newValue = getNewValue(value, shiftStep, -1, min, max);
              break;
            case "Home":
              newValue = min;
              break;
            case "End":
              newValue = max;
              break;
            default:
              break;
          }
        } else if (marks) {
          const maxMarksValue = marksValues[marksValues.length - 1];
          const currentMarkIndex = marksValues.indexOf(value);
          const decrementKeys = [isRtl ? "ArrowRight" : "ArrowLeft", "ArrowDown", "PageDown", "Home"];
          const incrementKeys = [isRtl ? "ArrowLeft" : "ArrowRight", "ArrowUp", "PageUp", "End"];
          if (decrementKeys.includes(event.key)) {
            if (currentMarkIndex === 0) {
              newValue = marksValues[0];
            } else {
              newValue = marksValues[currentMarkIndex - 1];
            }
          } else if (incrementKeys.includes(event.key)) {
            if (currentMarkIndex === marksValues.length - 1) {
              newValue = maxMarksValue;
            } else {
              newValue = marksValues[currentMarkIndex + 1];
            }
          }
        }
        if (newValue != null) {
          changeValue(event, newValue);
        }
      }
      otherHandlers?.onKeyDown?.(event);
    };
    useEnhancedEffect_default(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        document.activeElement?.blur();
      }
    }, [disabled]);
    if (disabled && active !== -1) {
      setActive(-1);
    }
    if (disabled && focusedThumbIndex !== -1) {
      setFocusedThumbIndex(-1);
    }
    const createHandleHiddenInputChange = (otherHandlers) => (event) => {
      otherHandlers.onChange?.(event);
      changeValue(event, event.target.valueAsNumber);
    };
    const previousIndex = React129.useRef(void 0);
    let axis = orientation;
    if (isRtl && orientation === "horizontal") {
      axis += "-reverse";
    }
    const getFingerNewValue = ({
      finger,
      move = false
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width: width2,
        height: height2,
        bottom,
        left
      } = slider.getBoundingClientRect();
      let percent;
      if (axis.startsWith("vertical")) {
        percent = (bottom - finger.y) / height2;
      } else {
        percent = (finger.x - left) / width2;
      }
      if (axis.includes("-reverse")) {
        percent = 1 - percent;
      }
      let newValue;
      newValue = percentToValue(percent, min, max);
      if (step) {
        newValue = roundValueToStep(newValue, step, min);
      } else {
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = clamp_default(newValue, min, max);
      let activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values3, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp_default(newValue, values3[activeIndex - 1] || -Infinity, values3[activeIndex + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values3,
          newValue,
          index: activeIndex
        });
        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue,
        activeIndex
      };
    };
    const handleTouchMove = useEventCallback_default((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      if (!finger) {
        return;
      }
      moveCount.current += 1;
      if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
        handleTouchEnd(nativeEvent);
        return;
      }
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = useEventCallback_default((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);
      if (!finger) {
        return;
      }
      const {
        newValue
      } = getFingerNewValue({
        finger,
        move: true
      });
      setActive(-1);
      if (nativeEvent.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, lastChangedValue.current ?? newValue);
      }
      touchId.current = void 0;
      stopListening();
    });
    const handleTouchStart = useEventCallback_default((nativeEvent) => {
      if (disabled) {
        return;
      }
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }
      const touch = nativeEvent.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      const finger = trackFinger(nativeEvent, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove, {
        passive: true
      });
      doc.addEventListener("touchend", handleTouchEnd, {
        passive: true
      });
    });
    const stopListening = React129.useCallback(() => {
      const doc = ownerDocument(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React129.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener("touchstart", handleTouchStart);
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React129.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      otherHandlers.onMouseDown?.(event);
      if (disabled) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      const finger = trackFinger(event, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = ownerDocument(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove, {
        passive: true
      });
      doc.addEventListener("mouseup", handleTouchEnd);
    };
    const trackOffset = valueToPercent(range ? values3[0] : min, min, max);
    const trackLeap = valueToPercent(values3[values3.length - 1], min, max) - trackOffset;
    const getRootProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers_default(externalProps);
      const ownEventHandlers = {
        onMouseDown: createHandleMouseDown(externalHandlers || {})
      };
      const mergedEventHandlers = {
        ...externalHandlers,
        ...ownEventHandlers
      };
      return {
        ...externalProps,
        ref: handleRef,
        ...mergedEventHandlers
      };
    };
    const createHandleMouseOver = (otherHandlers) => (event) => {
      otherHandlers.onMouseOver?.(event);
      const index = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index);
    };
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      otherHandlers.onMouseLeave?.(event);
      setOpen(-1);
    };
    const getThumbProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers_default(externalProps);
      const ownEventHandlers = {
        onMouseOver: createHandleMouseOver(externalHandlers || {}),
        onMouseLeave: createHandleMouseLeave(externalHandlers || {})
      };
      return {
        ...externalProps,
        ...externalHandlers,
        ...ownEventHandlers
      };
    };
    const getThumbStyle = (index) => {
      return {
        // So the non active thumb doesn't show its label on hover.
        pointerEvents: active !== -1 && active !== index ? "none" : void 0
      };
    };
    let cssWritingMode;
    if (orientation === "vertical") {
      cssWritingMode = isRtl ? "vertical-rl" : "vertical-lr";
    }
    const getHiddenInputProps = (externalProps = {}) => {
      const externalHandlers = extractEventHandlers_default(externalProps);
      const ownEventHandlers = {
        onChange: createHandleHiddenInputChange(externalHandlers || {}),
        onFocus: createHandleHiddenInputFocus(externalHandlers || {}),
        onBlur: createHandleHiddenInputBlur(externalHandlers || {}),
        onKeyDown: createHandleHiddenInputKeyDown(externalHandlers || {})
      };
      const mergedEventHandlers = {
        ...externalHandlers,
        ...ownEventHandlers
      };
      return {
        tabIndex,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max),
        "aria-valuemin": scale(min),
        name,
        type: "range",
        min: parameters.min,
        max: parameters.max,
        step: parameters.step === null && parameters.marks ? "any" : parameters.step ?? void 0,
        disabled,
        ...externalProps,
        ...mergedEventHandlers,
        style: {
          ...visuallyHidden_default,
          direction: isRtl ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%",
          writingMode: cssWritingMode
        }
      };
    };
    return {
      active,
      axis,
      axisProps,
      dragging,
      focusedThumbIndex,
      getHiddenInputProps,
      getRootProps,
      getThumbProps,
      marks,
      open,
      range,
      rootRef: handleRef,
      trackLeap,
      trackOffset,
      values: values3,
      getThumbStyle
    };
  }

  // react-user-mgmt/node_modules/@mui/material/utils/shouldSpreadAdditionalProps.js
  var shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !isHostComponent_default2(Slot);
  };
  var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

  // react-user-mgmt/node_modules/@mui/material/Slider/SliderValueLabel.js
  var React130 = __toESM(require_react());
  var import_prop_types82 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Slider/sliderClasses.js
  function getSliderUtilityClass(slot) {
    return generateUtilityClass("MuiSlider", slot);
  }
  var sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
  var sliderClasses_default = sliderClasses;

  // react-user-mgmt/node_modules/@mui/material/Slider/SliderValueLabel.js
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var useValueLabelClasses = (props) => {
    const {
      open
    } = props;
    const utilityClasses = {
      offset: clsx_default(open && sliderClasses_default.valueLabelOpen),
      circle: sliderClasses_default.valueLabelCircle,
      label: sliderClasses_default.valueLabelLabel
    };
    return utilityClasses;
  };
  function SliderValueLabel(props) {
    const {
      children,
      className,
      value
    } = props;
    const classes = useValueLabelClasses(props);
    if (!children) {
      return null;
    }
    return /* @__PURE__ */ React130.cloneElement(children, {
      className: clsx_default(children.props.className)
    }, /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(React130.Fragment, {
      children: [children.props.children, /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("span", {
        className: clsx_default(classes.offset, className),
        "aria-hidden": true,
        children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("span", {
          className: classes.circle,
          children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("span", {
            className: classes.label,
            children: value
          })
        })
      })]
    }));
  }
  true ? SliderValueLabel.propTypes = {
    children: import_prop_types82.default.element.isRequired,
    className: import_prop_types82.default.string,
    value: import_prop_types82.default.node
  } : void 0;

  // react-user-mgmt/node_modules/@mui/material/Slider/Slider.js
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  function Identity2(x2) {
    return x2;
  }
  var SliderRoot = styled_default2("span", {
    name: "MuiSlider",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, styles5[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles5[`size${capitalize_default(ownerState.size)}`], ownerState.marked && styles5.marked, ownerState.orientation === "vertical" && styles5.vertical, ownerState.track === "inverted" && styles5.trackInverted, ownerState.track === false && styles5.trackFalse];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    borderRadius: 12,
    boxSizing: "content-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    WebkitTapHighlightColor: "transparent",
    "@media print": {
      colorAdjust: "exact"
    },
    [`&.${sliderClasses_default.disabled}`]: {
      pointerEvents: "none",
      cursor: "default",
      color: (theme2.vars || theme2).palette.grey[400]
    },
    [`&.${sliderClasses_default.dragging}`]: {
      [`& .${sliderClasses_default.thumb}, & .${sliderClasses_default.track}`]: {
        transition: "none"
      }
    },
    variants: [...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        color: (theme2.vars || theme2).palette[color2].main
      }
    })), {
      props: {
        orientation: "horizontal"
      },
      style: {
        height: 4,
        width: "100%",
        padding: "13px 0",
        // The primary input mechanism of the device includes a pointing device of limited accuracy.
        "@media (pointer: coarse)": {
          // Reach 42px touch target, about ~8mm on screen.
          padding: "20px 0"
        }
      }
    }, {
      props: {
        orientation: "horizontal",
        size: "small"
      },
      style: {
        height: 2
      }
    }, {
      props: {
        orientation: "horizontal",
        marked: true
      },
      style: {
        marginBottom: 20
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        height: "100%",
        width: 4,
        padding: "0 13px",
        // The primary input mechanism of the device includes a pointing device of limited accuracy.
        "@media (pointer: coarse)": {
          // Reach 42px touch target, about ~8mm on screen.
          padding: "0 20px"
        }
      }
    }, {
      props: {
        orientation: "vertical",
        size: "small"
      },
      style: {
        width: 2
      }
    }, {
      props: {
        orientation: "vertical",
        marked: true
      },
      style: {
        marginRight: 44
      }
    }]
  })));
  var SliderRail = styled_default2("span", {
    name: "MuiSlider",
    slot: "Rail",
    overridesResolver: (props, styles5) => styles5.rail
  })({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    backgroundColor: "currentColor",
    opacity: 0.38,
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        width: "100%",
        height: "inherit",
        top: "50%",
        transform: "translateY(-50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        height: "100%",
        width: "inherit",
        left: "50%",
        transform: "translateX(-50%)"
      }
    }, {
      props: {
        track: "inverted"
      },
      style: {
        opacity: 1
      }
    }]
  });
  var SliderTrack = styled_default2("span", {
    name: "MuiSlider",
    slot: "Track",
    overridesResolver: (props, styles5) => styles5.track
  })(memoTheme_default(({
    theme: theme2
  }) => {
    return {
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      border: "1px solid currentColor",
      backgroundColor: "currentColor",
      transition: theme2.transitions.create(["left", "width", "bottom", "height"], {
        duration: theme2.transitions.duration.shortest
      }),
      variants: [{
        props: {
          size: "small"
        },
        style: {
          border: "none"
        }
      }, {
        props: {
          orientation: "horizontal"
        },
        style: {
          height: "inherit",
          top: "50%",
          transform: "translateY(-50%)"
        }
      }, {
        props: {
          orientation: "vertical"
        },
        style: {
          width: "inherit",
          left: "50%",
          transform: "translateX(-50%)"
        }
      }, {
        props: {
          track: false
        },
        style: {
          display: "none"
        }
      }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
        props: {
          color: color2,
          track: "inverted"
        },
        style: {
          ...theme2.vars ? {
            backgroundColor: theme2.vars.palette.Slider[`${color2}Track`],
            borderColor: theme2.vars.palette.Slider[`${color2}Track`]
          } : {
            backgroundColor: lighten(theme2.palette[color2].main, 0.62),
            borderColor: lighten(theme2.palette[color2].main, 0.62),
            ...theme2.applyStyles("dark", {
              backgroundColor: darken(theme2.palette[color2].main, 0.5)
            }),
            ...theme2.applyStyles("dark", {
              borderColor: darken(theme2.palette[color2].main, 0.5)
            })
          }
        }
      }))]
    };
  }));
  var SliderThumb = styled_default2("span", {
    name: "MuiSlider",
    slot: "Thumb",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.thumb, styles5[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles5[`thumbSize${capitalize_default(ownerState.size)}`]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    position: "absolute",
    width: 20,
    height: 20,
    boxSizing: "border-box",
    borderRadius: "50%",
    outline: 0,
    backgroundColor: "currentColor",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: theme2.transitions.create(["box-shadow", "left", "bottom"], {
      duration: theme2.transitions.duration.shortest
    }),
    "&::before": {
      position: "absolute",
      content: '""',
      borderRadius: "inherit",
      width: "100%",
      height: "100%",
      boxShadow: (theme2.vars || theme2).shadows[2]
    },
    "&::after": {
      position: "absolute",
      content: '""',
      borderRadius: "50%",
      // 42px is the hit target
      width: 42,
      height: 42,
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)"
    },
    [`&.${sliderClasses_default.disabled}`]: {
      "&:hover": {
        boxShadow: "none"
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        width: 12,
        height: 12,
        "&::before": {
          boxShadow: "none"
        }
      }
    }, {
      props: {
        orientation: "horizontal"
      },
      style: {
        top: "50%",
        transform: "translate(-50%, -50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: "50%",
        transform: "translate(-50%, 50%)"
      }
    }, ...Object.entries(theme2.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        [`&:hover, &.${sliderClasses_default.focusVisible}`]: {
          ...theme2.vars ? {
            boxShadow: `0px 0px 0px 8px rgba(${theme2.vars.palette[color2].mainChannel} / 0.16)`
          } : {
            boxShadow: `0px 0px 0px 8px ${alpha(theme2.palette[color2].main, 0.16)}`
          },
          "@media (hover: none)": {
            boxShadow: "none"
          }
        },
        [`&.${sliderClasses_default.active}`]: {
          ...theme2.vars ? {
            boxShadow: `0px 0px 0px 14px rgba(${theme2.vars.palette[color2].mainChannel} / 0.16)`
          } : {
            boxShadow: `0px 0px 0px 14px ${alpha(theme2.palette[color2].main, 0.16)}`
          }
        }
      }
    }))]
  })));
  var SliderValueLabel2 = styled_default2(SliderValueLabel, {
    name: "MuiSlider",
    slot: "ValueLabel",
    overridesResolver: (props, styles5) => styles5.valueLabel
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    zIndex: 1,
    whiteSpace: "nowrap",
    ...theme2.typography.body2,
    fontWeight: 500,
    transition: theme2.transitions.create(["transform"], {
      duration: theme2.transitions.duration.shortest
    }),
    position: "absolute",
    backgroundColor: (theme2.vars || theme2).palette.grey[600],
    borderRadius: 2,
    color: (theme2.vars || theme2).palette.common.white,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0.25rem 0.75rem",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        transform: "translateY(-100%) scale(0)",
        top: "-10px",
        transformOrigin: "bottom center",
        "&::before": {
          position: "absolute",
          content: '""',
          width: 8,
          height: 8,
          transform: "translate(-50%, 50%) rotate(45deg)",
          backgroundColor: "inherit",
          bottom: 0,
          left: "50%"
        },
        [`&.${sliderClasses_default.valueLabelOpen}`]: {
          transform: "translateY(-100%) scale(1)"
        }
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        transform: "translateY(-50%) scale(0)",
        right: "30px",
        top: "50%",
        transformOrigin: "right center",
        "&::before": {
          position: "absolute",
          content: '""',
          width: 8,
          height: 8,
          transform: "translate(-50%, -50%) rotate(45deg)",
          backgroundColor: "inherit",
          right: -8,
          top: "50%"
        },
        [`&.${sliderClasses_default.valueLabelOpen}`]: {
          transform: "translateY(-50%) scale(1)"
        }
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        fontSize: theme2.typography.pxToRem(12),
        padding: "0.25rem 0.5rem"
      }
    }, {
      props: {
        orientation: "vertical",
        size: "small"
      },
      style: {
        right: "20px"
      }
    }]
  })));
  true ? SliderValueLabel2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types83.default.element.isRequired,
    /**
     * @ignore
     */
    index: import_prop_types83.default.number.isRequired,
    /**
     * @ignore
     */
    open: import_prop_types83.default.bool.isRequired,
    /**
     * @ignore
     */
    value: import_prop_types83.default.node
  } : void 0;
  var SliderMark = styled_default2("span", {
    name: "MuiSlider",
    slot: "Mark",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "markActive",
    overridesResolver: (props, styles5) => {
      const {
        markActive
      } = props;
      return [styles5.mark, markActive && styles5.markActive];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    position: "absolute",
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: "currentColor",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        top: "50%",
        transform: "translate(-1px, -50%)"
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: "50%",
        transform: "translate(-50%, 1px)"
      }
    }, {
      props: {
        markActive: true
      },
      style: {
        backgroundColor: (theme2.vars || theme2).palette.background.paper,
        opacity: 0.8
      }
    }]
  })));
  var SliderMarkLabel = styled_default2("span", {
    name: "MuiSlider",
    slot: "MarkLabel",
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "markLabelActive",
    overridesResolver: (props, styles5) => styles5.markLabel
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    ...theme2.typography.body2,
    color: (theme2.vars || theme2).palette.text.secondary,
    position: "absolute",
    whiteSpace: "nowrap",
    variants: [{
      props: {
        orientation: "horizontal"
      },
      style: {
        top: 30,
        transform: "translateX(-50%)",
        "@media (pointer: coarse)": {
          top: 40
        }
      }
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        left: 36,
        transform: "translateY(50%)",
        "@media (pointer: coarse)": {
          left: 44
        }
      }
    }, {
      props: {
        markLabelActive: true
      },
      style: {
        color: (theme2.vars || theme2).palette.text.primary
      }
    }]
  })));
  var useUtilityClasses52 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color2 && `color${capitalize_default(color2)}`, size && `size${capitalize_default(size)}`],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize_default(size)}`, color2 && `thumbColor${capitalize_default(color2)}`],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return composeClasses(slots, getSliderUtilityClass, classes);
  };
  var Forward = ({
    children
  }) => children;
  var Slider = /* @__PURE__ */ React131.forwardRef(function Slider2(inputProps, ref) {
    const props = useDefaultProps2({
      props: inputProps,
      name: "MuiSlider"
    });
    const isRtl = useRtl();
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      // eslint-disable-next-line react/prop-types
      component = "span",
      components = {},
      componentsProps = {},
      color: color2 = "primary",
      classes: classesProp,
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max = 100,
      min = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      shiftStep = 10,
      size = "medium",
      step = 1,
      scale = Identity2,
      slotProps,
      slots,
      tabIndex,
      track = "normal",
      value: valueProp,
      valueLabelDisplay = "off",
      valueLabelFormat = Identity2,
      ...other
    } = props;
    const ownerState = {
      ...props,
      isRtl,
      max,
      min,
      classes: classesProp,
      disabled,
      disableSwap,
      orientation,
      marks: marksProp,
      color: color2,
      size,
      step,
      shiftStep,
      scale,
      track,
      valueLabelDisplay,
      valueLabelFormat
    };
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      open,
      active,
      axis,
      focusedThumbIndex,
      range,
      dragging,
      marks,
      values: values3,
      trackOffset,
      trackLeap,
      getThumbStyle
    } = useSlider({
      ...ownerState,
      rootRef: ref
    });
    ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
    ownerState.dragging = dragging;
    ownerState.focusedThumbIndex = focusedThumbIndex;
    const classes = useUtilityClasses52(ownerState);
    const RootSlot = slots?.root ?? components.Root ?? SliderRoot;
    const RailSlot = slots?.rail ?? components.Rail ?? SliderRail;
    const TrackSlot = slots?.track ?? components.Track ?? SliderTrack;
    const ThumbSlot = slots?.thumb ?? components.Thumb ?? SliderThumb;
    const ValueLabelSlot = slots?.valueLabel ?? components.ValueLabel ?? SliderValueLabel2;
    const MarkSlot = slots?.mark ?? components.Mark ?? SliderMark;
    const MarkLabelSlot = slots?.markLabel ?? components.MarkLabel ?? SliderMarkLabel;
    const InputSlot = slots?.input ?? components.Input ?? "input";
    const rootSlotProps = slotProps?.root ?? componentsProps.root;
    const railSlotProps = slotProps?.rail ?? componentsProps.rail;
    const trackSlotProps = slotProps?.track ?? componentsProps.track;
    const thumbSlotProps = slotProps?.thumb ?? componentsProps.thumb;
    const valueLabelSlotProps = slotProps?.valueLabel ?? componentsProps.valueLabel;
    const markSlotProps = slotProps?.mark ?? componentsProps.mark;
    const markLabelSlotProps = slotProps?.markLabel ?? componentsProps.markLabel;
    const inputSlotProps = slotProps?.input ?? componentsProps.input;
    const rootProps = useSlotProps_default({
      elementType: RootSlot,
      getSlotProps: getRootProps,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: {
        ...shouldSpreadAdditionalProps_default(RootSlot) && {
          as: component
        }
      },
      ownerState: {
        ...ownerState,
        ...rootSlotProps?.ownerState
      },
      className: [classes.root, className]
    });
    const railProps = useSlotProps_default({
      elementType: RailSlot,
      externalSlotProps: railSlotProps,
      ownerState,
      className: classes.rail
    });
    const trackProps = useSlotProps_default({
      elementType: TrackSlot,
      externalSlotProps: trackSlotProps,
      additionalProps: {
        style: {
          ...axisProps2[axis].offset(trackOffset),
          ...axisProps2[axis].leap(trackLeap)
        }
      },
      ownerState: {
        ...ownerState,
        ...trackSlotProps?.ownerState
      },
      className: classes.track
    });
    const thumbProps = useSlotProps_default({
      elementType: ThumbSlot,
      getSlotProps: getThumbProps,
      externalSlotProps: thumbSlotProps,
      ownerState: {
        ...ownerState,
        ...thumbSlotProps?.ownerState
      },
      className: classes.thumb
    });
    const valueLabelProps = useSlotProps_default({
      elementType: ValueLabelSlot,
      externalSlotProps: valueLabelSlotProps,
      ownerState: {
        ...ownerState,
        ...valueLabelSlotProps?.ownerState
      },
      className: classes.valueLabel
    });
    const markProps = useSlotProps_default({
      elementType: MarkSlot,
      externalSlotProps: markSlotProps,
      ownerState,
      className: classes.mark
    });
    const markLabelProps = useSlotProps_default({
      elementType: MarkLabelSlot,
      externalSlotProps: markLabelSlotProps,
      ownerState,
      className: classes.markLabel
    });
    const inputSliderProps = useSlotProps_default({
      elementType: InputSlot,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: inputSlotProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(RootSlot, {
      ...rootProps,
      children: [/* @__PURE__ */ (0, import_jsx_runtime95.jsx)(RailSlot, {
        ...railProps
      }), /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TrackSlot, {
        ...trackProps
      }), marks.filter((mark) => mark.value >= min && mark.value <= max).map((mark, index) => {
        const percent = valueToPercent(mark.value, min, max);
        const style4 = axisProps2[axis].offset(percent);
        let markActive;
        if (track === false) {
          markActive = values3.includes(mark.value);
        } else {
          markActive = track === "normal" && (range ? mark.value >= values3[0] && mark.value <= values3[values3.length - 1] : mark.value <= values3[0]) || track === "inverted" && (range ? mark.value <= values3[0] || mark.value >= values3[values3.length - 1] : mark.value >= values3[0]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(React131.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime95.jsx)(MarkSlot, {
            "data-index": index,
            ...markProps,
            ...!isHostComponent_default2(MarkSlot) && {
              markActive
            },
            style: {
              ...style4,
              ...markProps.style
            },
            className: clsx_default(markProps.className, markActive && classes.markActive)
          }), mark.label != null ? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(MarkLabelSlot, {
            "aria-hidden": true,
            "data-index": index,
            ...markLabelProps,
            ...!isHostComponent_default2(MarkLabelSlot) && {
              markLabelActive: markActive
            },
            style: {
              ...style4,
              ...markLabelProps.style
            },
            className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          }) : null]
        }, index);
      }), values3.map((value, index) => {
        const percent = valueToPercent(value, min, max);
        const style4 = axisProps2[axis].offset(percent);
        const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
        return (
          /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ValueLabelComponent, {
            ...!isHostComponent_default2(ValueLabelComponent) && {
              valueLabelFormat,
              valueLabelDisplay,
              value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat,
              index,
              open: open === index || active === index || valueLabelDisplay === "on",
              disabled
            },
            ...valueLabelProps,
            children: /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ThumbSlot, {
              "data-index": index,
              ...thumbProps,
              className: clsx_default(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
              style: {
                ...style4,
                ...getThumbStyle(index),
                ...thumbProps.style
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(InputSlot, {
                "data-index": index,
                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                "aria-valuenow": scale(value),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                value: values3[index],
                ...inputSliderProps
              })
            })
          }, index)
        );
      })]
    });
  });
  true ? Slider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The label of the slider.
     */
    "aria-label": chainPropTypes(import_prop_types83.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": import_prop_types83.default.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": chainPropTypes(import_prop_types83.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * @ignore
     */
    children: import_prop_types83.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types83.default.object,
    /**
     * @ignore
     */
    className: import_prop_types83.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types83.default.oneOfType([import_prop_types83.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types83.default.string]),
    /**
     * The components used for each slot inside.
     *
     * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    components: import_prop_types83.default.shape({
      Input: import_prop_types83.default.elementType,
      Mark: import_prop_types83.default.elementType,
      MarkLabel: import_prop_types83.default.elementType,
      Rail: import_prop_types83.default.elementType,
      Root: import_prop_types83.default.elementType,
      Thumb: import_prop_types83.default.elementType,
      Track: import_prop_types83.default.elementType,
      ValueLabel: import_prop_types83.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     *
     * @default {}
     */
    componentsProps: import_prop_types83.default.shape({
      input: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      mark: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      markLabel: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      rail: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      root: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      thumb: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      track: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      valueLabel: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.shape({
        children: import_prop_types83.default.element,
        className: import_prop_types83.default.string,
        open: import_prop_types83.default.bool,
        style: import_prop_types83.default.object,
        value: import_prop_types83.default.node,
        valueLabelDisplay: import_prop_types83.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.number), import_prop_types83.default.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types83.default.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: import_prop_types83.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: import_prop_types83.default.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: import_prop_types83.default.func,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.shape({
      label: import_prop_types83.default.node,
      value: import_prop_types83.default.number.isRequired
    })), import_prop_types83.default.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: import_prop_types83.default.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: import_prop_types83.default.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: import_prop_types83.default.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: import_prop_types83.default.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: import_prop_types83.default.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types83.default.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: import_prop_types83.default.func,
    /**
     * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
     * @default 10
     */
    shiftStep: import_prop_types83.default.number,
    /**
     * The size of the slider.
     * @default 'medium'
     */
    size: import_prop_types83.default.oneOfType([import_prop_types83.default.oneOf(["small", "medium"]), import_prop_types83.default.string]),
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: import_prop_types83.default.shape({
      input: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      mark: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      markLabel: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      rail: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      root: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      thumb: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      track: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object]),
      valueLabel: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.shape({
        children: import_prop_types83.default.element,
        className: import_prop_types83.default.string,
        open: import_prop_types83.default.bool,
        style: import_prop_types83.default.object,
        value: import_prop_types83.default.node,
        valueLabelDisplay: import_prop_types83.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types83.default.shape({
      input: import_prop_types83.default.elementType,
      mark: import_prop_types83.default.elementType,
      markLabel: import_prop_types83.default.elementType,
      rail: import_prop_types83.default.elementType,
      root: import_prop_types83.default.elementType,
      thumb: import_prop_types83.default.elementType,
      track: import_prop_types83.default.elementType,
      valueLabel: import_prop_types83.default.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: import_prop_types83.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object, import_prop_types83.default.bool])), import_prop_types83.default.func, import_prop_types83.default.object]),
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: import_prop_types83.default.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: import_prop_types83.default.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.number), import_prop_types83.default.number]),
    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: import_prop_types83.default.oneOf(["auto", "off", "on"]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.string])
  } : void 0;
  var Slider_default = Slider;

  // react-user-mgmt/node_modules/@mui/material/Stack/Stack.js
  var import_prop_types84 = __toESM(require_prop_types());
  var Stack = createStack({
    createStyledComponent: styled_default2("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles5) => styles5.root
    }),
    useThemeProps: (inProps) => useDefaultProps2({
      props: inProps,
      name: "MuiStack"
    })
  });
  true ? Stack.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types84.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types84.default.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: import_prop_types84.default.oneOfType([import_prop_types84.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types84.default.arrayOf(import_prop_types84.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types84.default.object]),
    /**
     * Add an element between each child.
     */
    divider: import_prop_types84.default.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: import_prop_types84.default.oneOfType([import_prop_types84.default.arrayOf(import_prop_types84.default.oneOfType([import_prop_types84.default.number, import_prop_types84.default.string])), import_prop_types84.default.number, import_prop_types84.default.object, import_prop_types84.default.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types84.default.oneOfType([import_prop_types84.default.arrayOf(import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object, import_prop_types84.default.bool])), import_prop_types84.default.func, import_prop_types84.default.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
     * @default false
     */
    useFlexGap: import_prop_types84.default.bool
  } : void 0;
  var Stack_default = Stack;

  // react-user-mgmt/node_modules/@mui/material/Toolbar/Toolbar.js
  var React132 = __toESM(require_react());
  var import_prop_types85 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/Toolbar/toolbarClasses.js
  function getToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiToolbar", slot);
  }
  var toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);

  // react-user-mgmt/node_modules/@mui/material/Toolbar/Toolbar.js
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var useUtilityClasses53 = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };
  var ToolbarRoot = styled_default2("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles5) => {
      const {
        ownerState
      } = props;
      return [styles5.root, !ownerState.disableGutters && styles5.gutters, styles5[ownerState.variant]];
    }
  })(memoTheme_default(({
    theme: theme2
  }) => ({
    position: "relative",
    display: "flex",
    alignItems: "center",
    variants: [{
      props: ({
        ownerState
      }) => !ownerState.disableGutters,
      style: {
        paddingLeft: theme2.spacing(2),
        paddingRight: theme2.spacing(2),
        [theme2.breakpoints.up("sm")]: {
          paddingLeft: theme2.spacing(3),
          paddingRight: theme2.spacing(3)
        }
      }
    }, {
      props: {
        variant: "dense"
      },
      style: {
        minHeight: 48
      }
    }, {
      props: {
        variant: "regular"
      },
      style: theme2.mixins.toolbar
    }]
  })));
  var Toolbar = /* @__PURE__ */ React132.forwardRef(function Toolbar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular",
      ...other
    } = props;
    const ownerState = {
      ...props,
      component,
      disableGutters,
      variant
    };
    const classes = useUtilityClasses53(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ToolbarRoot, {
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState,
      ...other
    });
  });
  true ? Toolbar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
     */
    children: import_prop_types85.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types85.default.object,
    /**
     * @ignore
     */
    className: import_prop_types85.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types85.default.elementType,
    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: import_prop_types85.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types85.default.oneOfType([import_prop_types85.default.arrayOf(import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object, import_prop_types85.default.bool])), import_prop_types85.default.func, import_prop_types85.default.object]),
    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: import_prop_types85.default.oneOfType([import_prop_types85.default.oneOf(["dense", "regular"]), import_prop_types85.default.string])
  } : void 0;
  var Toolbar_default = Toolbar;

  // react-user-mgmt/node_modules/@mui/material/TextField/TextField.js
  var React133 = __toESM(require_react());
  var import_prop_types86 = __toESM(require_prop_types());

  // react-user-mgmt/node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  var textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);

  // react-user-mgmt/node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses54 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default2(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles5) => styles5.root
  })({});
  var TextField = /* @__PURE__ */ React133.forwardRef(function TextField2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps: FormHelperTextPropsProp,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps: InputLabelPropsProp,
      inputProps: inputPropsProp,
      InputProps: InputPropsProp,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps: SelectPropsProp,
      slots = {},
      slotProps = {},
      type,
      value,
      variant = "outlined",
      ...other
    } = props;
    const ownerState = {
      ...props,
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    };
    const classes = useUtilityClasses54(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const id = useId2(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const externalForwardedProps = {
      slots,
      slotProps: {
        input: InputPropsProp,
        inputLabel: InputLabelPropsProp,
        htmlInput: inputPropsProp,
        formHelperText: FormHelperTextPropsProp,
        select: SelectPropsProp,
        ...slotProps
      }
    };
    const inputAdditionalProps = {};
    const inputLabelSlotProps = externalForwardedProps.slotProps.inputLabel;
    if (variant === "outlined") {
      if (inputLabelSlotProps && typeof inputLabelSlotProps.shrink !== "undefined") {
        inputAdditionalProps.notched = inputLabelSlotProps.shrink;
      }
      inputAdditionalProps.label = label;
    }
    if (select) {
      if (!SelectPropsProp || !SelectPropsProp.native) {
        inputAdditionalProps.id = void 0;
      }
      inputAdditionalProps["aria-describedby"] = void 0;
    }
    const [InputSlot, inputProps] = useSlot("input", {
      elementType: InputComponent,
      externalForwardedProps,
      additionalProps: inputAdditionalProps,
      ownerState
    });
    const [InputLabelSlot, inputLabelProps] = useSlot("inputLabel", {
      elementType: InputLabel_default,
      externalForwardedProps,
      ownerState
    });
    const [HtmlInputSlot, htmlInputProps] = useSlot("htmlInput", {
      elementType: "input",
      externalForwardedProps,
      ownerState
    });
    const [FormHelperTextSlot, formHelperTextProps] = useSlot("formHelperText", {
      elementType: FormHelperText_default,
      externalForwardedProps,
      ownerState
    });
    const [SelectSlot, selectProps] = useSlot("select", {
      elementType: Select_default,
      externalForwardedProps,
      ownerState
    });
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(InputSlot, {
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps: htmlInputProps,
      slots: {
        input: slots.htmlInput ? HtmlInputSlot : void 0
      },
      ...inputProps
    });
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(TextFieldRoot, {
      className: clsx_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState,
      ...other,
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(InputLabelSlot, {
        htmlFor: id,
        id: inputLabelId,
        ...inputLabelProps,
        children: label
      }), select ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(SelectSlot, {
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement,
        ...selectProps,
        children
      }) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(FormHelperTextSlot, {
        id: helperTextId,
        ...formHelperTextProps,
        children: helperText
      })]
    });
  });
  true ? TextField.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types86.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types86.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types86.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types86.default.object,
    /**
     * @ignore
     */
    className: import_prop_types86.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types86.default.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types86.default.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types86.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types86.default.bool,
    /**
     * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
     * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    FormHelperTextProps: import_prop_types86.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types86.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types86.default.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types86.default.string,
    /**
     * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    InputLabelProps: import_prop_types86.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    inputProps: import_prop_types86.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
     * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
     * component depending on the `variant` prop value.
     * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    InputProps: import_prop_types86.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types86.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types86.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types86.default.oneOfType([import_prop_types86.default.number, import_prop_types86.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types86.default.oneOfType([import_prop_types86.default.number, import_prop_types86.default.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: import_prop_types86.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types86.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types86.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types86.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types86.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types86.default.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types86.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types86.default.oneOfType([import_prop_types86.default.number, import_prop_types86.default.string]),
    /**
     * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: import_prop_types86.default.bool,
    /**
     * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
     * @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
     */
    SelectProps: import_prop_types86.default.object,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["medium", "small"]), import_prop_types86.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types86.default.shape({
      formHelperText: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object]),
      htmlInput: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object]),
      input: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object]),
      inputLabel: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object]),
      select: import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types86.default.shape({
      formHelperText: import_prop_types86.default.elementType,
      htmlInput: import_prop_types86.default.elementType,
      input: import_prop_types86.default.elementType,
      inputLabel: import_prop_types86.default.elementType,
      select: import_prop_types86.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types86.default.oneOfType([import_prop_types86.default.arrayOf(import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object, import_prop_types86.default.bool])), import_prop_types86.default.func, import_prop_types86.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: import_prop_types86.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types86.default.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types86.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/isObject.js
  function isObject2(thing) {
    if (typeof thing !== "object" || thing === null) {
      return false;
    }
    if (typeof thing.lastModified === "number" && typeof File !== "undefined" && thing instanceof File) {
      return false;
    }
    if (typeof thing.getMonth === "function" && typeof Date !== "undefined" && thing instanceof Date) {
      return false;
    }
    return !Array.isArray(thing);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/allowAdditionalItems.js
  function allowAdditionalItems(schema) {
    if (schema.additionalItems === true) {
      console.warn("additionalItems=true is currently not supported");
    }
    return isObject2(schema.additionalItems);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/asNumber.js
  function asNumber(value) {
    if (value === "") {
      return void 0;
    }
    if (value === null) {
      return null;
    }
    if (/\.$/.test(value)) {
      return value;
    }
    if (/\.0$/.test(value)) {
      return value;
    }
    if (/\.\d*0$/.test(value)) {
      return value;
    }
    const n2 = Number(value);
    const valid = typeof n2 === "number" && !Number.isNaN(n2);
    return valid ? n2 : value;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/constants.js
  var ADDITIONAL_PROPERTY_FLAG = "__additional_property";
  var ADDITIONAL_PROPERTIES_KEY = "additionalProperties";
  var ALL_OF_KEY = "allOf";
  var ANY_OF_KEY = "anyOf";
  var CONST_KEY = "const";
  var DEFAULT_KEY = "default";
  var DEPENDENCIES_KEY = "dependencies";
  var ENUM_KEY = "enum";
  var ERRORS_KEY = "__errors";
  var ID_KEY = "$id";
  var IF_KEY = "if";
  var ITEMS_KEY = "items";
  var JUNK_OPTION_ID = "_$junk_option_schema_id$_";
  var NAME_KEY = "$name";
  var ONE_OF_KEY = "oneOf";
  var PROPERTIES_KEY = "properties";
  var REQUIRED_KEY = "required";
  var SUBMIT_BTN_OPTIONS_KEY = "submitButtonOptions";
  var REF_KEY = "$ref";
  var RJSF_ADDITIONAL_PROPERTIES_FLAG = "__rjsf_additionalProperties";
  var ROOT_SCHEMA_PREFIX = "__rjsf_rootSchema";
  var UI_FIELD_KEY = "ui:field";
  var UI_WIDGET_KEY = "ui:widget";
  var UI_OPTIONS_KEY = "ui:options";
  var UI_GLOBAL_OPTIONS_KEY = "ui:globalOptions";

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getUiOptions.js
  function getUiOptions(uiSchema = {}, globalOptions = {}) {
    return Object.keys(uiSchema).filter((key) => key.indexOf("ui:") === 0).reduce((options, key) => {
      const value = uiSchema[key];
      if (key === UI_WIDGET_KEY && isObject2(value)) {
        console.error("Setting options via ui:widget object is no longer supported, use ui:options instead");
        return options;
      }
      if (key === UI_OPTIONS_KEY && isObject2(value)) {
        return { ...options, ...value };
      }
      return { ...options, [key.substring(3)]: value };
    }, { ...globalOptions });
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/canExpand.js
  function canExpand(schema, uiSchema = {}, formData) {
    if (!schema.additionalProperties) {
      return false;
    }
    const { expandable = true } = getUiOptions(uiSchema);
    if (expandable === false) {
      return expandable;
    }
    if (schema.maxProperties !== void 0 && formData) {
      return Object.keys(formData).length < schema.maxProperties;
    }
    return true;
  }

  // react-user-mgmt/node_modules/lodash-es/_freeGlobal.js
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeGlobal_default = freeGlobal;

  // react-user-mgmt/node_modules/lodash-es/_root.js
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal_default || freeSelf || Function("return this")();
  var root_default = root;

  // react-user-mgmt/node_modules/lodash-es/_Symbol.js
  var Symbol2 = root_default.Symbol;
  var Symbol_default = Symbol2;

  // react-user-mgmt/node_modules/lodash-es/_getRawTag.js
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e2) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  var getRawTag_default = getRawTag;

  // react-user-mgmt/node_modules/lodash-es/_objectToString.js
  var objectProto2 = Object.prototype;
  var nativeObjectToString2 = objectProto2.toString;
  function objectToString(value) {
    return nativeObjectToString2.call(value);
  }
  var objectToString_default = objectToString;

  // react-user-mgmt/node_modules/lodash-es/_baseGetTag.js
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
  }
  var baseGetTag_default = baseGetTag;

  // react-user-mgmt/node_modules/lodash-es/_overArg.js
  function overArg(func, transform2) {
    return function(arg2) {
      return func(transform2(arg2));
    };
  }
  var overArg_default = overArg;

  // react-user-mgmt/node_modules/lodash-es/_getPrototype.js
  var getPrototype = overArg_default(Object.getPrototypeOf, Object);
  var getPrototype_default = getPrototype;

  // react-user-mgmt/node_modules/lodash-es/isObjectLike.js
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  var isObjectLike_default = isObjectLike;

  // react-user-mgmt/node_modules/lodash-es/isPlainObject.js
  var objectTag = "[object Object]";
  var funcProto = Function.prototype;
  var objectProto3 = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto3.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  function isPlainObject3(value) {
    if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {
      return false;
    }
    var proto = getPrototype_default(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  var isPlainObject_default = isPlainObject3;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/createErrorHandler.js
  function createErrorHandler(formData) {
    const handler = {
      // We store the list of errors for this node in a property named __errors
      // to avoid name collision with a possible sub schema field named
      // 'errors' (see `utils.toErrorSchema`).
      [ERRORS_KEY]: [],
      addError(message) {
        this[ERRORS_KEY].push(message);
      }
    };
    if (Array.isArray(formData)) {
      return formData.reduce((acc, value, key) => {
        return { ...acc, [key]: createErrorHandler(value) };
      }, handler);
    }
    if (isPlainObject_default(formData)) {
      const formObject = formData;
      return Object.keys(formObject).reduce((acc, key) => {
        return { ...acc, [key]: createErrorHandler(formObject[key]) };
      }, handler);
    }
    return handler;
  }

  // react-user-mgmt/node_modules/lodash-es/_listCacheClear.js
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  var listCacheClear_default = listCacheClear;

  // react-user-mgmt/node_modules/lodash-es/eq.js
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var eq_default = eq;

  // react-user-mgmt/node_modules/lodash-es/_assocIndexOf.js
  function assocIndexOf(array, key) {
    var length2 = array.length;
    while (length2--) {
      if (eq_default(array[length2][0], key)) {
        return length2;
      }
    }
    return -1;
  }
  var assocIndexOf_default = assocIndexOf;

  // react-user-mgmt/node_modules/lodash-es/_listCacheDelete.js
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  var listCacheDelete_default = listCacheDelete;

  // react-user-mgmt/node_modules/lodash-es/_listCacheGet.js
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  var listCacheGet_default = listCacheGet;

  // react-user-mgmt/node_modules/lodash-es/_listCacheHas.js
  function listCacheHas(key) {
    return assocIndexOf_default(this.__data__, key) > -1;
  }
  var listCacheHas_default = listCacheHas;

  // react-user-mgmt/node_modules/lodash-es/_listCacheSet.js
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf_default(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  var listCacheSet_default = listCacheSet;

  // react-user-mgmt/node_modules/lodash-es/_ListCache.js
  function ListCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear_default;
  ListCache.prototype["delete"] = listCacheDelete_default;
  ListCache.prototype.get = listCacheGet_default;
  ListCache.prototype.has = listCacheHas_default;
  ListCache.prototype.set = listCacheSet_default;
  var ListCache_default = ListCache;

  // react-user-mgmt/node_modules/lodash-es/_stackClear.js
  function stackClear() {
    this.__data__ = new ListCache_default();
    this.size = 0;
  }
  var stackClear_default = stackClear;

  // react-user-mgmt/node_modules/lodash-es/_stackDelete.js
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  var stackDelete_default = stackDelete;

  // react-user-mgmt/node_modules/lodash-es/_stackGet.js
  function stackGet(key) {
    return this.__data__.get(key);
  }
  var stackGet_default = stackGet;

  // react-user-mgmt/node_modules/lodash-es/_stackHas.js
  function stackHas(key) {
    return this.__data__.has(key);
  }
  var stackHas_default = stackHas;

  // react-user-mgmt/node_modules/lodash-es/isObject.js
  function isObject3(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  var isObject_default = isObject3;

  // react-user-mgmt/node_modules/lodash-es/isFunction.js
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  function isFunction2(value) {
    if (!isObject_default(value)) {
      return false;
    }
    var tag = baseGetTag_default(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_default = isFunction2;

  // react-user-mgmt/node_modules/lodash-es/_coreJsData.js
  var coreJsData = root_default["__core-js_shared__"];
  var coreJsData_default = coreJsData;

  // react-user-mgmt/node_modules/lodash-es/_isMasked.js
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var isMasked_default = isMasked;

  // react-user-mgmt/node_modules/lodash-es/_toSource.js
  var funcProto2 = Function.prototype;
  var funcToString2 = funcProto2.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString2.call(func);
      } catch (e2) {
      }
      try {
        return func + "";
      } catch (e2) {
      }
    }
    return "";
  }
  var toSource_default = toSource;

  // react-user-mgmt/node_modules/lodash-es/_baseIsNative.js
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto3 = Function.prototype;
  var objectProto4 = Object.prototype;
  var funcToString3 = funcProto3.toString;
  var hasOwnProperty3 = objectProto4.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString3.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject_default(value) || isMasked_default(value)) {
      return false;
    }
    var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource_default(value));
  }
  var baseIsNative_default = baseIsNative;

  // react-user-mgmt/node_modules/lodash-es/_getValue.js
  function getValue2(object, key) {
    return object == null ? void 0 : object[key];
  }
  var getValue_default = getValue2;

  // react-user-mgmt/node_modules/lodash-es/_getNative.js
  function getNative(object, key) {
    var value = getValue_default(object, key);
    return baseIsNative_default(value) ? value : void 0;
  }
  var getNative_default = getNative;

  // react-user-mgmt/node_modules/lodash-es/_Map.js
  var Map2 = getNative_default(root_default, "Map");
  var Map_default = Map2;

  // react-user-mgmt/node_modules/lodash-es/_nativeCreate.js
  var nativeCreate = getNative_default(Object, "create");
  var nativeCreate_default = nativeCreate;

  // react-user-mgmt/node_modules/lodash-es/_hashClear.js
  function hashClear() {
    this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
    this.size = 0;
  }
  var hashClear_default = hashClear;

  // react-user-mgmt/node_modules/lodash-es/_hashDelete.js
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var hashDelete_default = hashDelete;

  // react-user-mgmt/node_modules/lodash-es/_hashGet.js
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto5 = Object.prototype;
  var hasOwnProperty4 = objectProto5.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate_default) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty4.call(data, key) ? data[key] : void 0;
  }
  var hashGet_default = hashGet;

  // react-user-mgmt/node_modules/lodash-es/_hashHas.js
  var objectProto6 = Object.prototype;
  var hasOwnProperty5 = objectProto6.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty5.call(data, key);
  }
  var hashHas_default = hashHas;

  // react-user-mgmt/node_modules/lodash-es/_hashSet.js
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
    return this;
  }
  var hashSet_default = hashSet;

  // react-user-mgmt/node_modules/lodash-es/_Hash.js
  function Hash(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear_default;
  Hash.prototype["delete"] = hashDelete_default;
  Hash.prototype.get = hashGet_default;
  Hash.prototype.has = hashHas_default;
  Hash.prototype.set = hashSet_default;
  var Hash_default = Hash;

  // react-user-mgmt/node_modules/lodash-es/_mapCacheClear.js
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash_default(),
      "map": new (Map_default || ListCache_default)(),
      "string": new Hash_default()
    };
  }
  var mapCacheClear_default = mapCacheClear;

  // react-user-mgmt/node_modules/lodash-es/_isKeyable.js
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  var isKeyable_default = isKeyable;

  // react-user-mgmt/node_modules/lodash-es/_getMapData.js
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  var getMapData_default = getMapData;

  // react-user-mgmt/node_modules/lodash-es/_mapCacheDelete.js
  function mapCacheDelete(key) {
    var result = getMapData_default(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var mapCacheDelete_default = mapCacheDelete;

  // react-user-mgmt/node_modules/lodash-es/_mapCacheGet.js
  function mapCacheGet(key) {
    return getMapData_default(this, key).get(key);
  }
  var mapCacheGet_default = mapCacheGet;

  // react-user-mgmt/node_modules/lodash-es/_mapCacheHas.js
  function mapCacheHas(key) {
    return getMapData_default(this, key).has(key);
  }
  var mapCacheHas_default = mapCacheHas;

  // react-user-mgmt/node_modules/lodash-es/_mapCacheSet.js
  function mapCacheSet(key, value) {
    var data = getMapData_default(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  var mapCacheSet_default = mapCacheSet;

  // react-user-mgmt/node_modules/lodash-es/_MapCache.js
  function MapCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear_default;
  MapCache.prototype["delete"] = mapCacheDelete_default;
  MapCache.prototype.get = mapCacheGet_default;
  MapCache.prototype.has = mapCacheHas_default;
  MapCache.prototype.set = mapCacheSet_default;
  var MapCache_default = MapCache;

  // react-user-mgmt/node_modules/lodash-es/_stackSet.js
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache_default) {
      var pairs = data.__data__;
      if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache_default(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  var stackSet_default = stackSet;

  // react-user-mgmt/node_modules/lodash-es/_Stack.js
  function Stack2(entries) {
    var data = this.__data__ = new ListCache_default(entries);
    this.size = data.size;
  }
  Stack2.prototype.clear = stackClear_default;
  Stack2.prototype["delete"] = stackDelete_default;
  Stack2.prototype.get = stackGet_default;
  Stack2.prototype.has = stackHas_default;
  Stack2.prototype.set = stackSet_default;
  var Stack_default2 = Stack2;

  // react-user-mgmt/node_modules/lodash-es/_setCacheAdd.js
  var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED3);
    return this;
  }
  var setCacheAdd_default = setCacheAdd;

  // react-user-mgmt/node_modules/lodash-es/_setCacheHas.js
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  var setCacheHas_default = setCacheHas;

  // react-user-mgmt/node_modules/lodash-es/_SetCache.js
  function SetCache(values3) {
    var index = -1, length2 = values3 == null ? 0 : values3.length;
    this.__data__ = new MapCache_default();
    while (++index < length2) {
      this.add(values3[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd_default;
  SetCache.prototype.has = setCacheHas_default;
  var SetCache_default = SetCache;

  // react-user-mgmt/node_modules/lodash-es/_arraySome.js
  function arraySome(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  var arraySome_default = arraySome;

  // react-user-mgmt/node_modules/lodash-es/_cacheHas.js
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  var cacheHas_default = cacheHas;

  // react-user-mgmt/node_modules/lodash-es/_equalArrays.js
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache_default() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome_default(other, function(othValue2, othIndex) {
          if (!cacheHas_default(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  var equalArrays_default = equalArrays;

  // react-user-mgmt/node_modules/lodash-es/_Uint8Array.js
  var Uint8Array2 = root_default.Uint8Array;
  var Uint8Array_default = Uint8Array2;

  // react-user-mgmt/node_modules/lodash-es/_mapToArray.js
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  var mapToArray_default = mapToArray;

  // react-user-mgmt/node_modules/lodash-es/_setToArray.js
  function setToArray(set3) {
    var index = -1, result = Array(set3.size);
    set3.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var setToArray_default = setToArray;

  // react-user-mgmt/node_modules/lodash-es/_equalByTag.js
  var COMPARE_PARTIAL_FLAG2 = 1;
  var COMPARE_UNORDERED_FLAG2 = 2;
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array_default(object), new Uint8Array_default(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq_default(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray_default;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
        convert || (convert = setToArray_default);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG2;
        stack.set(object, other);
        var result = equalArrays_default(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  var equalByTag_default = equalByTag;

  // react-user-mgmt/node_modules/lodash-es/_arrayPush.js
  function arrayPush(array, values3) {
    var index = -1, length2 = values3.length, offset = array.length;
    while (++index < length2) {
      array[offset + index] = values3[index];
    }
    return array;
  }
  var arrayPush_default = arrayPush;

  // react-user-mgmt/node_modules/lodash-es/isArray.js
  var isArray = Array.isArray;
  var isArray_default = isArray;

  // react-user-mgmt/node_modules/lodash-es/_baseGetAllKeys.js
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
  }
  var baseGetAllKeys_default = baseGetAllKeys;

  // react-user-mgmt/node_modules/lodash-es/_arrayFilter.js
  function arrayFilter(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length2) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  var arrayFilter_default = arrayFilter;

  // react-user-mgmt/node_modules/lodash-es/stubArray.js
  function stubArray() {
    return [];
  }
  var stubArray_default = stubArray;

  // react-user-mgmt/node_modules/lodash-es/_getSymbols.js
  var objectProto7 = Object.prototype;
  var propertyIsEnumerable = objectProto7.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray_default : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter_default(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var getSymbols_default = getSymbols;

  // react-user-mgmt/node_modules/lodash-es/_baseTimes.js
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var baseTimes_default = baseTimes;

  // react-user-mgmt/node_modules/lodash-es/_baseIsArguments.js
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
  }
  var baseIsArguments_default = baseIsArguments;

  // react-user-mgmt/node_modules/lodash-es/isArguments.js
  var objectProto8 = Object.prototype;
  var hasOwnProperty6 = objectProto8.hasOwnProperty;
  var propertyIsEnumerable2 = objectProto8.propertyIsEnumerable;
  var isArguments = baseIsArguments_default(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments_default : function(value) {
    return isObjectLike_default(value) && hasOwnProperty6.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
  };
  var isArguments_default = isArguments;

  // react-user-mgmt/node_modules/lodash-es/stubFalse.js
  function stubFalse() {
    return false;
  }
  var stubFalse_default = stubFalse;

  // react-user-mgmt/node_modules/lodash-es/isBuffer.js
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root_default.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer = nativeIsBuffer || stubFalse_default;
  var isBuffer_default = isBuffer;

  // react-user-mgmt/node_modules/lodash-es/_isIndex.js
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length2) {
    var type = typeof value;
    length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
    return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
  }
  var isIndex_default = isIndex;

  // react-user-mgmt/node_modules/lodash-es/isLength.js
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
  }
  var isLength_default = isLength;

  // react-user-mgmt/node_modules/lodash-es/_baseIsTypedArray.js
  var argsTag2 = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag2 = "[object Boolean]";
  var dateTag2 = "[object Date]";
  var errorTag2 = "[object Error]";
  var funcTag2 = "[object Function]";
  var mapTag2 = "[object Map]";
  var numberTag2 = "[object Number]";
  var objectTag2 = "[object Object]";
  var regexpTag2 = "[object RegExp]";
  var setTag2 = "[object Set]";
  var stringTag2 = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag2 = "[object ArrayBuffer]";
  var dataViewTag2 = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag2] = typedArrayTags[boolTag2] = typedArrayTags[dataViewTag2] = typedArrayTags[dateTag2] = typedArrayTags[errorTag2] = typedArrayTags[funcTag2] = typedArrayTags[mapTag2] = typedArrayTags[numberTag2] = typedArrayTags[objectTag2] = typedArrayTags[regexpTag2] = typedArrayTags[setTag2] = typedArrayTags[stringTag2] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
  }
  var baseIsTypedArray_default = baseIsTypedArray;

  // react-user-mgmt/node_modules/lodash-es/_baseUnary.js
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  var baseUnary_default = baseUnary;

  // react-user-mgmt/node_modules/lodash-es/_nodeUtil.js
  var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
  var freeProcess = moduleExports2 && freeGlobal_default.process;
  var nodeUtil = function() {
    try {
      var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e2) {
    }
  }();
  var nodeUtil_default = nodeUtil;

  // react-user-mgmt/node_modules/lodash-es/isTypedArray.js
  var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
  var isTypedArray_default = isTypedArray;

  // react-user-mgmt/node_modules/lodash-es/_arrayLikeKeys.js
  var objectProto9 = Object.prototype;
  var hasOwnProperty7 = objectProto9.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length2 = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty7.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex_default(key, length2)))) {
        result.push(key);
      }
    }
    return result;
  }
  var arrayLikeKeys_default = arrayLikeKeys;

  // react-user-mgmt/node_modules/lodash-es/_isPrototype.js
  var objectProto10 = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto10;
    return value === proto;
  }
  var isPrototype_default = isPrototype;

  // react-user-mgmt/node_modules/lodash-es/_nativeKeys.js
  var nativeKeys = overArg_default(Object.keys, Object);
  var nativeKeys_default = nativeKeys;

  // react-user-mgmt/node_modules/lodash-es/_baseKeys.js
  var objectProto11 = Object.prototype;
  var hasOwnProperty8 = objectProto11.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype_default(object)) {
      return nativeKeys_default(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty8.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeys_default = baseKeys;

  // react-user-mgmt/node_modules/lodash-es/isArrayLike.js
  function isArrayLike(value) {
    return value != null && isLength_default(value.length) && !isFunction_default(value);
  }
  var isArrayLike_default = isArrayLike;

  // react-user-mgmt/node_modules/lodash-es/keys.js
  function keys(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
  }
  var keys_default = keys;

  // react-user-mgmt/node_modules/lodash-es/_getAllKeys.js
  function getAllKeys(object) {
    return baseGetAllKeys_default(object, keys_default, getSymbols_default);
  }
  var getAllKeys_default = getAllKeys;

  // react-user-mgmt/node_modules/lodash-es/_equalObjects.js
  var COMPARE_PARTIAL_FLAG3 = 1;
  var objectProto12 = Object.prototype;
  var hasOwnProperty9 = objectProto12.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG3, objProps = getAllKeys_default(object), objLength = objProps.length, othProps = getAllKeys_default(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty9.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  var equalObjects_default = equalObjects;

  // react-user-mgmt/node_modules/lodash-es/_DataView.js
  var DataView = getNative_default(root_default, "DataView");
  var DataView_default = DataView;

  // react-user-mgmt/node_modules/lodash-es/_Promise.js
  var Promise2 = getNative_default(root_default, "Promise");
  var Promise_default = Promise2;

  // react-user-mgmt/node_modules/lodash-es/_Set.js
  var Set2 = getNative_default(root_default, "Set");
  var Set_default = Set2;

  // react-user-mgmt/node_modules/lodash-es/_WeakMap.js
  var WeakMap2 = getNative_default(root_default, "WeakMap");
  var WeakMap_default = WeakMap2;

  // react-user-mgmt/node_modules/lodash-es/_getTag.js
  var mapTag3 = "[object Map]";
  var objectTag3 = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag3 = "[object Set]";
  var weakMapTag2 = "[object WeakMap]";
  var dataViewTag3 = "[object DataView]";
  var dataViewCtorString = toSource_default(DataView_default);
  var mapCtorString = toSource_default(Map_default);
  var promiseCtorString = toSource_default(Promise_default);
  var setCtorString = toSource_default(Set_default);
  var weakMapCtorString = toSource_default(WeakMap_default);
  var getTag = baseGetTag_default;
  if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag3 || Map_default && getTag(new Map_default()) != mapTag3 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag3 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
    getTag = function(value) {
      var result = baseGetTag_default(value), Ctor = result == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag3;
          case mapCtorString:
            return mapTag3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag3;
          case weakMapCtorString:
            return weakMapTag2;
        }
      }
      return result;
    };
  }
  var getTag_default = getTag;

  // react-user-mgmt/node_modules/lodash-es/_baseIsEqualDeep.js
  var COMPARE_PARTIAL_FLAG4 = 1;
  var argsTag3 = "[object Arguments]";
  var arrayTag2 = "[object Array]";
  var objectTag4 = "[object Object]";
  var objectProto13 = Object.prototype;
  var hasOwnProperty10 = objectProto13.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_default(object), othIsArr = isArray_default(other), objTag = objIsArr ? arrayTag2 : getTag_default(object), othTag = othIsArr ? arrayTag2 : getTag_default(other);
    objTag = objTag == argsTag3 ? objectTag4 : objTag;
    othTag = othTag == argsTag3 ? objectTag4 : othTag;
    var objIsObj = objTag == objectTag4, othIsObj = othTag == objectTag4, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer_default(object)) {
      if (!isBuffer_default(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack_default2());
      return objIsArr || isTypedArray_default(object) ? equalArrays_default(object, other, bitmask, customizer, equalFunc, stack) : equalByTag_default(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG4)) {
      var objIsWrapped = objIsObj && hasOwnProperty10.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty10.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack_default2());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack_default2());
    return equalObjects_default(object, other, bitmask, customizer, equalFunc, stack);
  }
  var baseIsEqualDeep_default = baseIsEqualDeep;

  // react-user-mgmt/node_modules/lodash-es/_baseIsEqual.js
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike_default(value) && !isObjectLike_default(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep_default(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  var baseIsEqual_default = baseIsEqual;

  // react-user-mgmt/node_modules/lodash-es/isEqualWith.js
  function isEqualWith(value, other, customizer) {
    customizer = typeof customizer == "function" ? customizer : void 0;
    var result = customizer ? customizer(value, other) : void 0;
    return result === void 0 ? baseIsEqual_default(value, other, void 0, customizer) : !!result;
  }
  var isEqualWith_default = isEqualWith;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/deepEquals.js
  function deepEquals(a2, b2) {
    return isEqualWith_default(a2, b2, (obj, other) => {
      if (typeof obj === "function" && typeof other === "function") {
        return true;
      }
      return void 0;
    });
  }

  // react-user-mgmt/node_modules/lodash-es/isSymbol.js
  var symbolTag2 = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag2;
  }
  var isSymbol_default = isSymbol;

  // react-user-mgmt/node_modules/lodash-es/_isKey.js
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  function isKey2(value, object) {
    if (isArray_default(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  var isKey_default = isKey2;

  // react-user-mgmt/node_modules/lodash-es/memoize.js
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize3(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize3.Cache || MapCache_default)();
    return memoized;
  }
  memoize3.Cache = MapCache_default;
  var memoize_default = memoize3;

  // react-user-mgmt/node_modules/lodash-es/_memoizeCapped.js
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize_default(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }
  var memoizeCapped_default = memoizeCapped;

  // react-user-mgmt/node_modules/lodash-es/_stringToPath.js
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath2 = memoizeCapped_default(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46) {
      result.push("");
    }
    string.replace(rePropName, function(match2, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
    });
    return result;
  });
  var stringToPath_default = stringToPath2;

  // react-user-mgmt/node_modules/lodash-es/_arrayMap.js
  function arrayMap(array, iteratee) {
    var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
    while (++index < length2) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  var arrayMap_default = arrayMap;

  // react-user-mgmt/node_modules/lodash-es/_baseToString.js
  var INFINITY = 1 / 0;
  var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolToString = symbolProto2 ? symbolProto2.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray_default(value)) {
      return arrayMap_default(value, baseToString) + "";
    }
    if (isSymbol_default(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  var baseToString_default = baseToString;

  // react-user-mgmt/node_modules/lodash-es/toString.js
  function toString2(value) {
    return value == null ? "" : baseToString_default(value);
  }
  var toString_default = toString2;

  // react-user-mgmt/node_modules/lodash-es/_castPath.js
  function castPath(value, object) {
    if (isArray_default(value)) {
      return value;
    }
    return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
  }
  var castPath_default = castPath;

  // react-user-mgmt/node_modules/lodash-es/_toKey.js
  var INFINITY2 = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol_default(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
  }
  var toKey_default = toKey;

  // react-user-mgmt/node_modules/lodash-es/_baseGet.js
  function baseGet2(object, path) {
    path = castPath_default(path, object);
    var index = 0, length2 = path.length;
    while (object != null && index < length2) {
      object = object[toKey_default(path[index++])];
    }
    return index && index == length2 ? object : void 0;
  }
  var baseGet_default = baseGet2;

  // react-user-mgmt/node_modules/lodash-es/get.js
  function get2(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet_default(object, path);
    return result === void 0 ? defaultValue : result;
  }
  var get_default = get2;

  // react-user-mgmt/node_modules/lodash-es/isEmpty.js
  var mapTag4 = "[object Map]";
  var setTag4 = "[object Set]";
  var objectProto14 = Object.prototype;
  var hasOwnProperty11 = objectProto14.hasOwnProperty;
  function isEmpty4(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike_default(value) && (isArray_default(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer_default(value) || isTypedArray_default(value) || isArguments_default(value))) {
      return !value.length;
    }
    var tag = getTag_default(value);
    if (tag == mapTag4 || tag == setTag4) {
      return !value.size;
    }
    if (isPrototype_default(value)) {
      return !baseKeys_default(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty11.call(value, key)) {
        return false;
      }
    }
    return true;
  }
  var isEmpty_default = isEmpty4;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/findSchemaDefinition.js
  var import_jsonpointer = __toESM(require_jsonpointer());

  // react-user-mgmt/node_modules/lodash-es/_arrayEach.js
  function arrayEach(array, iteratee) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  var arrayEach_default = arrayEach;

  // react-user-mgmt/node_modules/lodash-es/_defineProperty.js
  var defineProperty = function() {
    try {
      var func = getNative_default(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e2) {
    }
  }();
  var defineProperty_default = defineProperty;

  // react-user-mgmt/node_modules/lodash-es/_baseAssignValue.js
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty_default) {
      defineProperty_default(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  var baseAssignValue_default = baseAssignValue;

  // react-user-mgmt/node_modules/lodash-es/_assignValue.js
  var objectProto15 = Object.prototype;
  var hasOwnProperty12 = objectProto15.hasOwnProperty;
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty12.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value);
    }
  }
  var assignValue_default = assignValue;

  // react-user-mgmt/node_modules/lodash-es/_copyObject.js
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length2 = props.length;
    while (++index < length2) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue_default(object, key, newValue);
      } else {
        assignValue_default(object, key, newValue);
      }
    }
    return object;
  }
  var copyObject_default = copyObject;

  // react-user-mgmt/node_modules/lodash-es/_baseAssign.js
  function baseAssign(object, source) {
    return object && copyObject_default(source, keys_default(source), object);
  }
  var baseAssign_default = baseAssign;

  // react-user-mgmt/node_modules/lodash-es/_nativeKeysIn.js
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  var nativeKeysIn_default = nativeKeysIn;

  // react-user-mgmt/node_modules/lodash-es/_baseKeysIn.js
  var objectProto16 = Object.prototype;
  var hasOwnProperty13 = objectProto16.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject_default(object)) {
      return nativeKeysIn_default(object);
    }
    var isProto = isPrototype_default(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty13.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var baseKeysIn_default = baseKeysIn;

  // react-user-mgmt/node_modules/lodash-es/keysIn.js
  function keysIn(object) {
    return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
  }
  var keysIn_default = keysIn;

  // react-user-mgmt/node_modules/lodash-es/_baseAssignIn.js
  function baseAssignIn(object, source) {
    return object && copyObject_default(source, keysIn_default(source), object);
  }
  var baseAssignIn_default = baseAssignIn;

  // react-user-mgmt/node_modules/lodash-es/_cloneBuffer.js
  var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
  var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
  var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
    buffer.copy(result);
    return result;
  }
  var cloneBuffer_default = cloneBuffer;

  // react-user-mgmt/node_modules/lodash-es/_copyArray.js
  function copyArray(source, array) {
    var index = -1, length2 = source.length;
    array || (array = Array(length2));
    while (++index < length2) {
      array[index] = source[index];
    }
    return array;
  }
  var copyArray_default = copyArray;

  // react-user-mgmt/node_modules/lodash-es/_copySymbols.js
  function copySymbols(source, object) {
    return copyObject_default(source, getSymbols_default(source), object);
  }
  var copySymbols_default = copySymbols;

  // react-user-mgmt/node_modules/lodash-es/_getSymbolsIn.js
  var nativeGetSymbols2 = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object) {
    var result = [];
    while (object) {
      arrayPush_default(result, getSymbols_default(object));
      object = getPrototype_default(object);
    }
    return result;
  };
  var getSymbolsIn_default = getSymbolsIn;

  // react-user-mgmt/node_modules/lodash-es/_copySymbolsIn.js
  function copySymbolsIn(source, object) {
    return copyObject_default(source, getSymbolsIn_default(source), object);
  }
  var copySymbolsIn_default = copySymbolsIn;

  // react-user-mgmt/node_modules/lodash-es/_getAllKeysIn.js
  function getAllKeysIn(object) {
    return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
  }
  var getAllKeysIn_default = getAllKeysIn;

  // react-user-mgmt/node_modules/lodash-es/_initCloneArray.js
  var objectProto17 = Object.prototype;
  var hasOwnProperty14 = objectProto17.hasOwnProperty;
  function initCloneArray(array) {
    var length2 = array.length, result = new array.constructor(length2);
    if (length2 && typeof array[0] == "string" && hasOwnProperty14.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  var initCloneArray_default = initCloneArray;

  // react-user-mgmt/node_modules/lodash-es/_cloneArrayBuffer.js
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
    return result;
  }
  var cloneArrayBuffer_default = cloneArrayBuffer;

  // react-user-mgmt/node_modules/lodash-es/_cloneDataView.js
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var cloneDataView_default = cloneDataView;

  // react-user-mgmt/node_modules/lodash-es/_cloneRegExp.js
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  var cloneRegExp_default = cloneRegExp;

  // react-user-mgmt/node_modules/lodash-es/_cloneSymbol.js
  var symbolProto3 = Symbol_default ? Symbol_default.prototype : void 0;
  var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf2 ? Object(symbolValueOf2.call(symbol)) : {};
  }
  var cloneSymbol_default = cloneSymbol;

  // react-user-mgmt/node_modules/lodash-es/_cloneTypedArray.js
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var cloneTypedArray_default = cloneTypedArray;

  // react-user-mgmt/node_modules/lodash-es/_initCloneByTag.js
  var boolTag3 = "[object Boolean]";
  var dateTag3 = "[object Date]";
  var mapTag5 = "[object Map]";
  var numberTag3 = "[object Number]";
  var regexpTag3 = "[object RegExp]";
  var setTag5 = "[object Set]";
  var stringTag3 = "[object String]";
  var symbolTag3 = "[object Symbol]";
  var arrayBufferTag3 = "[object ArrayBuffer]";
  var dataViewTag4 = "[object DataView]";
  var float32Tag2 = "[object Float32Array]";
  var float64Tag2 = "[object Float64Array]";
  var int8Tag2 = "[object Int8Array]";
  var int16Tag2 = "[object Int16Array]";
  var int32Tag2 = "[object Int32Array]";
  var uint8Tag2 = "[object Uint8Array]";
  var uint8ClampedTag2 = "[object Uint8ClampedArray]";
  var uint16Tag2 = "[object Uint16Array]";
  var uint32Tag2 = "[object Uint32Array]";
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag3:
        return cloneArrayBuffer_default(object);
      case boolTag3:
      case dateTag3:
        return new Ctor(+object);
      case dataViewTag4:
        return cloneDataView_default(object, isDeep);
      case float32Tag2:
      case float64Tag2:
      case int8Tag2:
      case int16Tag2:
      case int32Tag2:
      case uint8Tag2:
      case uint8ClampedTag2:
      case uint16Tag2:
      case uint32Tag2:
        return cloneTypedArray_default(object, isDeep);
      case mapTag5:
        return new Ctor();
      case numberTag3:
      case stringTag3:
        return new Ctor(object);
      case regexpTag3:
        return cloneRegExp_default(object);
      case setTag5:
        return new Ctor();
      case symbolTag3:
        return cloneSymbol_default(object);
    }
  }
  var initCloneByTag_default = initCloneByTag;

  // react-user-mgmt/node_modules/lodash-es/_baseCreate.js
  var objectCreate = Object.create;
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto) {
      if (!isObject_default(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  var baseCreate_default = baseCreate;

  // react-user-mgmt/node_modules/lodash-es/_initCloneObject.js
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
  }
  var initCloneObject_default = initCloneObject;

  // react-user-mgmt/node_modules/lodash-es/_baseIsMap.js
  var mapTag6 = "[object Map]";
  function baseIsMap(value) {
    return isObjectLike_default(value) && getTag_default(value) == mapTag6;
  }
  var baseIsMap_default = baseIsMap;

  // react-user-mgmt/node_modules/lodash-es/isMap.js
  var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
  var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
  var isMap_default = isMap;

  // react-user-mgmt/node_modules/lodash-es/_baseIsSet.js
  var setTag6 = "[object Set]";
  function baseIsSet(value) {
    return isObjectLike_default(value) && getTag_default(value) == setTag6;
  }
  var baseIsSet_default = baseIsSet;

  // react-user-mgmt/node_modules/lodash-es/isSet.js
  var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
  var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
  var isSet_default = isSet;

  // react-user-mgmt/node_modules/lodash-es/_baseClone.js
  var CLONE_DEEP_FLAG = 1;
  var CLONE_FLAT_FLAG = 2;
  var CLONE_SYMBOLS_FLAG = 4;
  var argsTag4 = "[object Arguments]";
  var arrayTag3 = "[object Array]";
  var boolTag4 = "[object Boolean]";
  var dateTag4 = "[object Date]";
  var errorTag3 = "[object Error]";
  var funcTag3 = "[object Function]";
  var genTag2 = "[object GeneratorFunction]";
  var mapTag7 = "[object Map]";
  var numberTag4 = "[object Number]";
  var objectTag5 = "[object Object]";
  var regexpTag4 = "[object RegExp]";
  var setTag7 = "[object Set]";
  var stringTag4 = "[object String]";
  var symbolTag4 = "[object Symbol]";
  var weakMapTag3 = "[object WeakMap]";
  var arrayBufferTag4 = "[object ArrayBuffer]";
  var dataViewTag5 = "[object DataView]";
  var float32Tag3 = "[object Float32Array]";
  var float64Tag3 = "[object Float64Array]";
  var int8Tag3 = "[object Int8Array]";
  var int16Tag3 = "[object Int16Array]";
  var int32Tag3 = "[object Int32Array]";
  var uint8Tag3 = "[object Uint8Array]";
  var uint8ClampedTag3 = "[object Uint8ClampedArray]";
  var uint16Tag3 = "[object Uint16Array]";
  var uint32Tag3 = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag4] = cloneableTags[arrayTag3] = cloneableTags[arrayBufferTag4] = cloneableTags[dataViewTag5] = cloneableTags[boolTag4] = cloneableTags[dateTag4] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag7] = cloneableTags[numberTag4] = cloneableTags[objectTag5] = cloneableTags[regexpTag4] = cloneableTags[setTag7] = cloneableTags[stringTag4] = cloneableTags[symbolTag4] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
  cloneableTags[errorTag3] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject_default(value)) {
      return value;
    }
    var isArr = isArray_default(value);
    if (isArr) {
      result = initCloneArray_default(value);
      if (!isDeep) {
        return copyArray_default(value, result);
      }
    } else {
      var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
      if (isBuffer_default(value)) {
        return cloneBuffer_default(value, isDeep);
      }
      if (tag == objectTag5 || tag == argsTag4 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject_default(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag_default(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack_default2());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet_default(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_default(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
    var props = isArr ? void 0 : keysFunc(value);
    arrayEach_default(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  var baseClone_default = baseClone;

  // react-user-mgmt/node_modules/lodash-es/last.js
  function last(array) {
    var length2 = array == null ? 0 : array.length;
    return length2 ? array[length2 - 1] : void 0;
  }
  var last_default = last;

  // react-user-mgmt/node_modules/lodash-es/_baseSlice.js
  function baseSlice(array, start, end) {
    var index = -1, length2 = array.length;
    if (start < 0) {
      start = -start > length2 ? 0 : length2 + start;
    }
    end = end > length2 ? length2 : end;
    if (end < 0) {
      end += length2;
    }
    length2 = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length2);
    while (++index < length2) {
      result[index] = array[index + start];
    }
    return result;
  }
  var baseSlice_default = baseSlice;

  // react-user-mgmt/node_modules/lodash-es/_parent.js
  function parent(object, path) {
    return path.length < 2 ? object : baseGet_default(object, baseSlice_default(path, 0, -1));
  }
  var parent_default = parent;

  // react-user-mgmt/node_modules/lodash-es/_baseUnset.js
  function baseUnset(object, path) {
    path = castPath_default(path, object);
    object = parent_default(object, path);
    return object == null || delete object[toKey_default(last_default(path))];
  }
  var baseUnset_default = baseUnset;

  // react-user-mgmt/node_modules/lodash-es/_customOmitClone.js
  function customOmitClone(value) {
    return isPlainObject_default(value) ? void 0 : value;
  }
  var customOmitClone_default = customOmitClone;

  // react-user-mgmt/node_modules/lodash-es/_isFlattenable.js
  var spreadableSymbol = Symbol_default ? Symbol_default.isConcatSpreadable : void 0;
  function isFlattenable(value) {
    return isArray_default(value) || isArguments_default(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  var isFlattenable_default = isFlattenable;

  // react-user-mgmt/node_modules/lodash-es/_baseFlatten.js
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length2 = array.length;
    predicate || (predicate = isFlattenable_default);
    result || (result = []);
    while (++index < length2) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush_default(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  var baseFlatten_default = baseFlatten;

  // react-user-mgmt/node_modules/lodash-es/flatten.js
  function flatten(array) {
    var length2 = array == null ? 0 : array.length;
    return length2 ? baseFlatten_default(array, 1) : [];
  }
  var flatten_default = flatten;

  // react-user-mgmt/node_modules/lodash-es/_apply.js
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  var apply_default = apply;

  // react-user-mgmt/node_modules/lodash-es/_overRest.js
  var nativeMax = Math.max;
  function overRest(func, start, transform2) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length2 = nativeMax(args.length - start, 0), array = Array(length2);
      while (++index < length2) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform2(array);
      return apply_default(func, this, otherArgs);
    };
  }
  var overRest_default = overRest;

  // react-user-mgmt/node_modules/lodash-es/constant.js
  function constant(value) {
    return function() {
      return value;
    };
  }
  var constant_default = constant;

  // react-user-mgmt/node_modules/lodash-es/identity.js
  function identity(value) {
    return value;
  }
  var identity_default = identity;

  // react-user-mgmt/node_modules/lodash-es/_baseSetToString.js
  var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
    return defineProperty_default(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant_default(string),
      "writable": true
    });
  };
  var baseSetToString_default = baseSetToString;

  // react-user-mgmt/node_modules/lodash-es/_shortOut.js
  var HOT_COUNT = 800;
  var HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  var shortOut_default = shortOut;

  // react-user-mgmt/node_modules/lodash-es/_setToString.js
  var setToString = shortOut_default(baseSetToString_default);
  var setToString_default = setToString;

  // react-user-mgmt/node_modules/lodash-es/_flatRest.js
  function flatRest(func) {
    return setToString_default(overRest_default(func, void 0, flatten_default), func + "");
  }
  var flatRest_default = flatRest;

  // react-user-mgmt/node_modules/lodash-es/omit.js
  var CLONE_DEEP_FLAG2 = 1;
  var CLONE_FLAT_FLAG2 = 2;
  var CLONE_SYMBOLS_FLAG2 = 4;
  var omit = flatRest_default(function(object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap_default(paths, function(path) {
      path = castPath_default(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject_default(object, getAllKeysIn_default(object), result);
    if (isDeep) {
      result = baseClone_default(result, CLONE_DEEP_FLAG2 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG2, customOmitClone_default);
    }
    var length2 = paths.length;
    while (length2--) {
      baseUnset_default(result, paths[length2]);
    }
    return result;
  });
  var omit_default = omit;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/findSchemaDefinition.js
  function splitKeyElementFromObject(key, object) {
    const value = object[key];
    const remaining = omit_default(object, [key]);
    return [remaining, value];
  }
  function findSchemaDefinitionRecursive($ref, rootSchema = {}, recurseList = []) {
    const ref = $ref || "";
    let decodedRef;
    if (ref.startsWith("#")) {
      decodedRef = decodeURIComponent(ref.substring(1));
    } else {
      throw new Error(`Could not find a definition for ${$ref}.`);
    }
    const current = import_jsonpointer.default.get(rootSchema, decodedRef);
    if (current === void 0) {
      throw new Error(`Could not find a definition for ${$ref}.`);
    }
    const nextRef = current[REF_KEY];
    if (nextRef) {
      if (recurseList.includes(nextRef)) {
        if (recurseList.length === 1) {
          throw new Error(`Definition for ${$ref} is a circular reference`);
        }
        const [firstRef, ...restRefs] = recurseList;
        const circularPath = [...restRefs, ref, firstRef].join(" -> ");
        throw new Error(`Definition for ${firstRef} contains a circular reference through ${circularPath}`);
      }
      const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);
      const subSchema = findSchemaDefinitionRecursive(theRef, rootSchema, [...recurseList, ref]);
      if (Object.keys(remaining).length > 0) {
        return { ...remaining, ...subSchema };
      }
      return subSchema;
    }
    return current;
  }
  function findSchemaDefinition($ref, rootSchema = {}) {
    const recurseList = [];
    return findSchemaDefinitionRecursive($ref, rootSchema, recurseList);
  }

  // react-user-mgmt/node_modules/lodash-es/_baseHas.js
  var objectProto18 = Object.prototype;
  var hasOwnProperty15 = objectProto18.hasOwnProperty;
  function baseHas(object, key) {
    return object != null && hasOwnProperty15.call(object, key);
  }
  var baseHas_default = baseHas;

  // react-user-mgmt/node_modules/lodash-es/_hasPath.js
  function hasPath(object, path, hasFunc) {
    path = castPath_default(path, object);
    var index = -1, length2 = path.length, result = false;
    while (++index < length2) {
      var key = toKey_default(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length2) {
      return result;
    }
    length2 = object == null ? 0 : object.length;
    return !!length2 && isLength_default(length2) && isIndex_default(key, length2) && (isArray_default(object) || isArguments_default(object));
  }
  var hasPath_default = hasPath;

  // react-user-mgmt/node_modules/lodash-es/has.js
  function has(object, path) {
    return object != null && hasPath_default(object, path, baseHas_default);
  }
  var has_default = has;

  // react-user-mgmt/node_modules/lodash-es/isNumber.js
  var numberTag5 = "[object Number]";
  function isNumber(value) {
    return typeof value == "number" || isObjectLike_default(value) && baseGetTag_default(value) == numberTag5;
  }
  var isNumber_default = isNumber;

  // react-user-mgmt/node_modules/lodash-es/isString.js
  var stringTag5 = "[object String]";
  function isString2(value) {
    return typeof value == "string" || !isArray_default(value) && isObjectLike_default(value) && baseGetTag_default(value) == stringTag5;
  }
  var isString_default = isString2;

  // react-user-mgmt/node_modules/lodash-es/_arrayReduce.js
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length2 = array == null ? 0 : array.length;
    if (initAccum && length2) {
      accumulator = array[++index];
    }
    while (++index < length2) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  var arrayReduce_default = arrayReduce;

  // react-user-mgmt/node_modules/lodash-es/_createBaseFor.js
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
      while (length2--) {
        var key = props[fromRight ? length2 : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  var createBaseFor_default = createBaseFor;

  // react-user-mgmt/node_modules/lodash-es/_baseFor.js
  var baseFor = createBaseFor_default();
  var baseFor_default = baseFor;

  // react-user-mgmt/node_modules/lodash-es/_baseForOwn.js
  function baseForOwn(object, iteratee) {
    return object && baseFor_default(object, iteratee, keys_default);
  }
  var baseForOwn_default = baseForOwn;

  // react-user-mgmt/node_modules/lodash-es/_createBaseEach.js
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_default(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length2 = collection.length, index = fromRight ? length2 : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length2) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  var createBaseEach_default = createBaseEach;

  // react-user-mgmt/node_modules/lodash-es/_baseEach.js
  var baseEach = createBaseEach_default(baseForOwn_default);
  var baseEach_default = baseEach;

  // react-user-mgmt/node_modules/lodash-es/_baseIsMatch.js
  var COMPARE_PARTIAL_FLAG5 = 1;
  var COMPARE_UNORDERED_FLAG3 = 2;
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length2 = index, noCustomizer = !customizer;
    if (object == null) {
      return !length2;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length2) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack_default2();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG5 | COMPARE_UNORDERED_FLAG3, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  var baseIsMatch_default = baseIsMatch;

  // react-user-mgmt/node_modules/lodash-es/_isStrictComparable.js
  function isStrictComparable(value) {
    return value === value && !isObject_default(value);
  }
  var isStrictComparable_default = isStrictComparable;

  // react-user-mgmt/node_modules/lodash-es/_getMatchData.js
  function getMatchData(object) {
    var result = keys_default(object), length2 = result.length;
    while (length2--) {
      var key = result[length2], value = object[key];
      result[length2] = [key, value, isStrictComparable_default(value)];
    }
    return result;
  }
  var getMatchData_default = getMatchData;

  // react-user-mgmt/node_modules/lodash-es/_matchesStrictComparable.js
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  var matchesStrictComparable_default = matchesStrictComparable;

  // react-user-mgmt/node_modules/lodash-es/_baseMatches.js
  function baseMatches(source) {
    var matchData = getMatchData_default(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable_default(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch_default(object, source, matchData);
    };
  }
  var baseMatches_default = baseMatches;

  // react-user-mgmt/node_modules/lodash-es/_baseHasIn.js
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  var baseHasIn_default = baseHasIn;

  // react-user-mgmt/node_modules/lodash-es/hasIn.js
  function hasIn(object, path) {
    return object != null && hasPath_default(object, path, baseHasIn_default);
  }
  var hasIn_default = hasIn;

  // react-user-mgmt/node_modules/lodash-es/_baseMatchesProperty.js
  var COMPARE_PARTIAL_FLAG6 = 1;
  var COMPARE_UNORDERED_FLAG4 = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey_default(path) && isStrictComparable_default(srcValue)) {
      return matchesStrictComparable_default(toKey_default(path), srcValue);
    }
    return function(object) {
      var objValue = get_default(object, path);
      return objValue === void 0 && objValue === srcValue ? hasIn_default(object, path) : baseIsEqual_default(srcValue, objValue, COMPARE_PARTIAL_FLAG6 | COMPARE_UNORDERED_FLAG4);
    };
  }
  var baseMatchesProperty_default = baseMatchesProperty;

  // react-user-mgmt/node_modules/lodash-es/_baseProperty.js
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  var baseProperty_default = baseProperty;

  // react-user-mgmt/node_modules/lodash-es/_basePropertyDeep.js
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet_default(object, path);
    };
  }
  var basePropertyDeep_default = basePropertyDeep;

  // react-user-mgmt/node_modules/lodash-es/property.js
  function property(path) {
    return isKey_default(path) ? baseProperty_default(toKey_default(path)) : basePropertyDeep_default(path);
  }
  var property_default = property;

  // react-user-mgmt/node_modules/lodash-es/_baseIteratee.js
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity_default;
    }
    if (typeof value == "object") {
      return isArray_default(value) ? baseMatchesProperty_default(value[0], value[1]) : baseMatches_default(value);
    }
    return property_default(value);
  }
  var baseIteratee_default = baseIteratee;

  // react-user-mgmt/node_modules/lodash-es/_baseReduce.js
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection2) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
    });
    return accumulator;
  }
  var baseReduce_default = baseReduce;

  // react-user-mgmt/node_modules/lodash-es/reduce.js
  function reduce(collection, iteratee, accumulator) {
    var func = isArray_default(collection) ? arrayReduce_default : baseReduce_default, initAccum = arguments.length < 3;
    return func(collection, baseIteratee_default(iteratee, 4), accumulator, initAccum, baseEach_default);
  }
  var reduce_default = reduce;

  // react-user-mgmt/node_modules/lodash-es/_castFunction.js
  function castFunction(value) {
    return typeof value == "function" ? value : identity_default;
  }
  var castFunction_default = castFunction;

  // react-user-mgmt/node_modules/lodash-es/_trimmedEndIndex.js
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  var trimmedEndIndex_default = trimmedEndIndex;

  // react-user-mgmt/node_modules/lodash-es/_baseTrim.js
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
  }
  var baseTrim_default = baseTrim;

  // react-user-mgmt/node_modules/lodash-es/toNumber.js
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol_default(value)) {
      return NAN;
    }
    if (isObject_default(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject_default(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim_default(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var toNumber_default = toNumber;

  // react-user-mgmt/node_modules/lodash-es/toFinite.js
  var INFINITY3 = 1 / 0;
  var MAX_INTEGER = 17976931348623157e292;
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber_default(value);
    if (value === INFINITY3 || value === -INFINITY3) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  var toFinite_default = toFinite;

  // react-user-mgmt/node_modules/lodash-es/toInteger.js
  function toInteger(value) {
    var result = toFinite_default(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  var toInteger_default = toInteger;

  // react-user-mgmt/node_modules/lodash-es/times.js
  var MAX_SAFE_INTEGER3 = 9007199254740991;
  var MAX_ARRAY_LENGTH = 4294967295;
  var nativeMin = Math.min;
  function times(n2, iteratee) {
    n2 = toInteger_default(n2);
    if (n2 < 1 || n2 > MAX_SAFE_INTEGER3) {
      return [];
    }
    var index = MAX_ARRAY_LENGTH, length2 = nativeMin(n2, MAX_ARRAY_LENGTH);
    iteratee = castFunction_default(iteratee);
    n2 -= MAX_ARRAY_LENGTH;
    var result = baseTimes_default(length2, iteratee);
    while (++index < n2) {
      iteratee(index);
    }
    return result;
  }
  var times_default = times;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getOptionMatchingSimpleDiscriminator.js
  function getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField) {
    var _a;
    if (formData && discriminatorField) {
      const value = get_default(formData, discriminatorField);
      if (value === void 0) {
        return;
      }
      for (let i2 = 0; i2 < options.length; i2++) {
        const option = options[i2];
        const discriminator = get_default(option, [PROPERTIES_KEY, discriminatorField], {});
        if (discriminator.type === "object" || discriminator.type === "array") {
          continue;
        }
        if (discriminator.const === value) {
          return i2;
        }
        if ((_a = discriminator.enum) === null || _a === void 0 ? void 0 : _a.includes(value)) {
          return i2;
        }
      }
    }
    return;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/getMatchingOption.js
  function getMatchingOption(validator2, formData, options, rootSchema, discriminatorField) {
    if (formData === void 0) {
      return 0;
    }
    const simpleDiscriminatorMatch = getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField);
    if (isNumber_default(simpleDiscriminatorMatch)) {
      return simpleDiscriminatorMatch;
    }
    for (let i2 = 0; i2 < options.length; i2++) {
      const option = options[i2];
      if (discriminatorField && has_default(option, [PROPERTIES_KEY, discriminatorField])) {
        const value = get_default(formData, discriminatorField);
        const discriminator = get_default(option, [PROPERTIES_KEY, discriminatorField], {});
        if (validator2.isValid(discriminator, value, rootSchema)) {
          return i2;
        }
      } else if (option[PROPERTIES_KEY]) {
        const requiresAnyOf = {
          anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({
            required: [key]
          }))
        };
        let augmentedSchema;
        if (option.anyOf) {
          const { ...shallowClone } = option;
          if (!shallowClone.allOf) {
            shallowClone.allOf = [];
          } else {
            shallowClone.allOf = shallowClone.allOf.slice();
          }
          shallowClone.allOf.push(requiresAnyOf);
          augmentedSchema = shallowClone;
        } else {
          augmentedSchema = Object.assign({}, option, requiresAnyOf);
        }
        delete augmentedSchema.required;
        if (validator2.isValid(augmentedSchema, formData, rootSchema)) {
          return i2;
        }
      } else if (validator2.isValid(option, formData, rootSchema)) {
        return i2;
      }
    }
    return 0;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/getFirstMatchingOption.js
  function getFirstMatchingOption(validator2, formData, options, rootSchema, discriminatorField) {
    return getMatchingOption(validator2, formData, options, rootSchema, discriminatorField);
  }

  // react-user-mgmt/node_modules/lodash-es/_baseSet.js
  function baseSet(object, path, value, customizer) {
    if (!isObject_default(object)) {
      return object;
    }
    path = castPath_default(path, object);
    var index = -1, length2 = path.length, lastIndex = length2 - 1, nested = object;
    while (nested != null && ++index < length2) {
      var key = toKey_default(path[index]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject_default(objValue) ? objValue : isIndex_default(path[index + 1]) ? [] : {};
        }
      }
      assignValue_default(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }
  var baseSet_default = baseSet;

  // react-user-mgmt/node_modules/lodash-es/set.js
  function set2(object, path, value) {
    return object == null ? object : baseSet_default(object, path, value);
  }
  var set_default = set2;

  // react-user-mgmt/node_modules/lodash-es/transform.js
  function transform(object, iteratee, accumulator) {
    var isArr = isArray_default(object), isArrLike = isArr || isBuffer_default(object) || isTypedArray_default(object);
    iteratee = baseIteratee_default(iteratee, 4);
    if (accumulator == null) {
      var Ctor = object && object.constructor;
      if (isArrLike) {
        accumulator = isArr ? new Ctor() : [];
      } else if (isObject_default(object)) {
        accumulator = isFunction_default(Ctor) ? baseCreate_default(getPrototype_default(object)) : {};
      } else {
        accumulator = {};
      }
    }
    (isArrLike ? arrayEach_default : baseForOwn_default)(object, function(value, index, object2) {
      return iteratee(accumulator, value, index, object2);
    });
    return accumulator;
  }
  var transform_default = transform;

  // react-user-mgmt/node_modules/lodash-es/_assignMergeValue.js
  function assignMergeValue(object, key, value) {
    if (value !== void 0 && !eq_default(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue_default(object, key, value);
    }
  }
  var assignMergeValue_default = assignMergeValue;

  // react-user-mgmt/node_modules/lodash-es/isArrayLikeObject.js
  function isArrayLikeObject(value) {
    return isObjectLike_default(value) && isArrayLike_default(value);
  }
  var isArrayLikeObject_default = isArrayLikeObject;

  // react-user-mgmt/node_modules/lodash-es/_safeGet.js
  function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  var safeGet_default = safeGet;

  // react-user-mgmt/node_modules/lodash-es/toPlainObject.js
  function toPlainObject(value) {
    return copyObject_default(value, keysIn_default(value));
  }
  var toPlainObject_default = toPlainObject;

  // react-user-mgmt/node_modules/lodash-es/_baseMergeDeep.js
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet_default(object, key), srcValue = safeGet_default(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue_default(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray_default(srcValue), isBuff = !isArr && isBuffer_default(srcValue), isTyped = !isArr && !isBuff && isTypedArray_default(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray_default(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject_default(objValue)) {
          newValue = copyArray_default(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer_default(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray_default(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject_default(srcValue) || isArguments_default(srcValue)) {
        newValue = objValue;
        if (isArguments_default(objValue)) {
          newValue = toPlainObject_default(objValue);
        } else if (!isObject_default(objValue) || isFunction_default(objValue)) {
          newValue = initCloneObject_default(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue_default(object, key, newValue);
  }
  var baseMergeDeep_default = baseMergeDeep;

  // react-user-mgmt/node_modules/lodash-es/_baseMerge.js
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor_default(source, function(srcValue, key) {
      stack || (stack = new Stack_default2());
      if (isObject_default(srcValue)) {
        baseMergeDeep_default(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet_default(object, key), srcValue, key + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue_default(object, key, newValue);
      }
    }, keysIn_default);
  }
  var baseMerge_default = baseMerge;

  // react-user-mgmt/node_modules/lodash-es/_baseRest.js
  function baseRest(func, start) {
    return setToString_default(overRest_default(func, start, identity_default), func + "");
  }
  var baseRest_default = baseRest;

  // react-user-mgmt/node_modules/lodash-es/_isIterateeCall.js
  function isIterateeCall(value, index, object) {
    if (!isObject_default(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
      return eq_default(object[index], value);
    }
    return false;
  }
  var isIterateeCall_default = isIterateeCall;

  // react-user-mgmt/node_modules/lodash-es/_createAssigner.js
  function createAssigner(assigner) {
    return baseRest_default(function(object, sources) {
      var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
      if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
        customizer = length2 < 3 ? void 0 : customizer;
        length2 = 1;
      }
      object = Object(object);
      while (++index < length2) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  var createAssigner_default = createAssigner;

  // react-user-mgmt/node_modules/lodash-es/merge.js
  var merge2 = createAssigner_default(function(object, source, srcIndex) {
    baseMerge_default(object, source, srcIndex);
  });
  var merge_default2 = merge2;

  // react-user-mgmt/node_modules/lodash-es/flattenDeep.js
  var INFINITY4 = 1 / 0;
  function flattenDeep(array) {
    var length2 = array == null ? 0 : array.length;
    return length2 ? baseFlatten_default(array, INFINITY4) : [];
  }
  var flattenDeep_default = flattenDeep;

  // react-user-mgmt/node_modules/lodash-es/_baseFindIndex.js
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length2 = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length2) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  var baseFindIndex_default = baseFindIndex;

  // react-user-mgmt/node_modules/lodash-es/_baseIsNaN.js
  function baseIsNaN(value) {
    return value !== value;
  }
  var baseIsNaN_default = baseIsNaN;

  // react-user-mgmt/node_modules/lodash-es/_strictIndexOf.js
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length2 = array.length;
    while (++index < length2) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  var strictIndexOf_default = strictIndexOf;

  // react-user-mgmt/node_modules/lodash-es/_baseIndexOf.js
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf_default(array, value, fromIndex) : baseFindIndex_default(array, baseIsNaN_default, fromIndex);
  }
  var baseIndexOf_default = baseIndexOf;

  // react-user-mgmt/node_modules/lodash-es/_arrayIncludes.js
  function arrayIncludes(array, value) {
    var length2 = array == null ? 0 : array.length;
    return !!length2 && baseIndexOf_default(array, value, 0) > -1;
  }
  var arrayIncludes_default = arrayIncludes;

  // react-user-mgmt/node_modules/lodash-es/_arrayIncludesWith.js
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  var arrayIncludesWith_default = arrayIncludesWith;

  // react-user-mgmt/node_modules/lodash-es/noop.js
  function noop5() {
  }
  var noop_default = noop5;

  // react-user-mgmt/node_modules/lodash-es/_createSet.js
  var INFINITY5 = 1 / 0;
  var createSet = !(Set_default && 1 / setToArray_default(new Set_default([, -0]))[1] == INFINITY5) ? noop_default : function(values3) {
    return new Set_default(values3);
  };
  var createSet_default = createSet;

  // react-user-mgmt/node_modules/lodash-es/_baseUniq.js
  var LARGE_ARRAY_SIZE2 = 200;
  function baseUniq(array, iteratee, comparator) {
    var index = -1, includes = arrayIncludes_default, length2 = array.length, isCommon = true, result = [], seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith_default;
    } else if (length2 >= LARGE_ARRAY_SIZE2) {
      var set3 = iteratee ? null : createSet_default(array);
      if (set3) {
        return setToArray_default(set3);
      }
      isCommon = false;
      includes = cacheHas_default;
      seen = new SetCache_default();
    } else {
      seen = iteratee ? [] : result;
    }
    outer:
      while (++index < length2) {
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
    return result;
  }
  var baseUniq_default = baseUniq;

  // react-user-mgmt/node_modules/lodash-es/uniq.js
  function uniq(array) {
    return array && array.length ? baseUniq_default(array) : [];
  }
  var uniq_default = uniq;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/retrieveSchema.js
  var import_json_schema_merge_allof = __toESM(require_src2());

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getDiscriminatorFieldFromSchema.js
  function getDiscriminatorFieldFromSchema(schema) {
    let discriminator;
    const maybeString = get_default(schema, "discriminator.propertyName", void 0);
    if (isString_default(maybeString)) {
      discriminator = maybeString;
    } else if (maybeString !== void 0) {
      console.warn(`Expecting discriminator to be a string, got "${typeof maybeString}" instead`);
    }
    return discriminator;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/guessType.js
  function guessType(value) {
    if (Array.isArray(value)) {
      return "array";
    }
    if (typeof value === "string") {
      return "string";
    }
    if (value == null) {
      return "null";
    }
    if (typeof value === "boolean") {
      return "boolean";
    }
    if (!isNaN(value)) {
      return "number";
    }
    if (typeof value === "object") {
      return "object";
    }
    return "string";
  }

  // react-user-mgmt/node_modules/lodash-es/union.js
  var union = baseRest_default(function(arrays) {
    return baseUniq_default(baseFlatten_default(arrays, 1, isArrayLikeObject_default, true));
  });
  var union_default = union;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getSchemaType.js
  function getSchemaType(schema) {
    let { type } = schema;
    if (!type && schema.const) {
      return guessType(schema.const);
    }
    if (!type && schema.enum) {
      return "string";
    }
    if (!type && (schema.properties || schema.additionalProperties)) {
      return "object";
    }
    if (Array.isArray(type)) {
      if (type.length === 2 && type.includes("null")) {
        type = type.find((type2) => type2 !== "null");
      } else {
        type = type[0];
      }
    }
    return type;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/mergeSchemas.js
  function mergeSchemas(obj1, obj2) {
    const acc = Object.assign({}, obj1);
    return Object.keys(obj2).reduce((acc2, key) => {
      const left = obj1 ? obj1[key] : {}, right = obj2[key];
      if (obj1 && key in obj1 && isObject2(right)) {
        acc2[key] = mergeSchemas(left, right);
      } else if (obj1 && obj2 && (getSchemaType(obj1) === "object" || getSchemaType(obj2) === "object") && key === REQUIRED_KEY && Array.isArray(left) && Array.isArray(right)) {
        acc2[key] = union_default(left, right);
      } else {
        acc2[key] = right;
      }
      return acc2;
    }, acc);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/retrieveSchema.js
  function retrieveSchema(validator2, schema, rootSchema = {}, rawFormData, experimental_customMergeAllOf) {
    return retrieveSchemaInternal(validator2, schema, rootSchema, rawFormData, void 0, void 0, experimental_customMergeAllOf)[0];
  }
  function resolveCondition(validator2, schema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;
    const conditionValue = validator2.isValid(expression, formData || {}, rootSchema);
    let resolvedSchemas = [resolvedSchemaLessConditional];
    let schemas = [];
    if (expandAllBranches) {
      if (then && typeof then !== "boolean") {
        schemas = schemas.concat(retrieveSchemaInternal(validator2, then, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf));
      }
      if (otherwise && typeof otherwise !== "boolean") {
        schemas = schemas.concat(retrieveSchemaInternal(validator2, otherwise, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf));
      }
    } else {
      const conditionalSchema = conditionValue ? then : otherwise;
      if (conditionalSchema && typeof conditionalSchema !== "boolean") {
        schemas = schemas.concat(retrieveSchemaInternal(validator2, conditionalSchema, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf));
      }
    }
    if (schemas.length) {
      resolvedSchemas = schemas.map((s2) => mergeSchemas(resolvedSchemaLessConditional, s2));
    }
    return resolvedSchemas.flatMap((s2) => retrieveSchemaInternal(validator2, s2, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf));
  }
  function getAllPermutationsOfXxxOf(listOfLists) {
    const allPermutations = listOfLists.reduce(
      (permutations, list) => {
        if (list.length > 1) {
          return list.flatMap((element) => times_default(permutations.length, (i2) => [...permutations[i2]].concat(element)));
        }
        permutations.forEach((permutation) => permutation.push(list[0]));
        return permutations;
      },
      [[]]
      // Start with an empty list
    );
    return allPermutations;
  }
  function resolveSchema(validator2, schema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    const updatedSchemas = resolveReference(validator2, schema, rootSchema, expandAllBranches, recurseList, formData);
    if (updatedSchemas.length > 1 || updatedSchemas[0] !== schema) {
      return updatedSchemas;
    }
    if (DEPENDENCIES_KEY in schema) {
      const resolvedSchemas = resolveDependencies(validator2, schema, rootSchema, expandAllBranches, recurseList, formData);
      return resolvedSchemas.flatMap((s2) => {
        return retrieveSchemaInternal(validator2, s2, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf);
      });
    }
    if (ALL_OF_KEY in schema && Array.isArray(schema.allOf)) {
      const allOfSchemaElements = schema.allOf.map((allOfSubschema) => retrieveSchemaInternal(validator2, allOfSubschema, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf));
      const allPermutations = getAllPermutationsOfXxxOf(allOfSchemaElements);
      return allPermutations.map((permutation) => ({
        ...schema,
        allOf: permutation
      }));
    }
    return [schema];
  }
  function resolveReference(validator2, schema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    const updatedSchema = resolveAllReferences(schema, rootSchema, recurseList);
    if (updatedSchema !== schema) {
      return retrieveSchemaInternal(validator2, updatedSchema, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf);
    }
    return [schema];
  }
  function resolveAllReferences(schema, rootSchema, recurseList) {
    if (!isObject2(schema)) {
      return schema;
    }
    let resolvedSchema = schema;
    if (REF_KEY in resolvedSchema) {
      const { $ref, ...localSchema } = resolvedSchema;
      if (recurseList.includes($ref)) {
        return resolvedSchema;
      }
      recurseList.push($ref);
      const refSchema = findSchemaDefinition($ref, rootSchema);
      resolvedSchema = { ...refSchema, ...localSchema };
    }
    if (PROPERTIES_KEY in resolvedSchema) {
      const childrenLists = [];
      const updatedProps = transform_default(resolvedSchema[PROPERTIES_KEY], (result, value, key) => {
        const childList = [...recurseList];
        result[key] = resolveAllReferences(value, rootSchema, childList);
        childrenLists.push(childList);
      }, {});
      merge_default2(recurseList, uniq_default(flattenDeep_default(childrenLists)));
      resolvedSchema = { ...resolvedSchema, [PROPERTIES_KEY]: updatedProps };
    }
    if (ITEMS_KEY in resolvedSchema && !Array.isArray(resolvedSchema.items) && typeof resolvedSchema.items !== "boolean") {
      resolvedSchema = {
        ...resolvedSchema,
        items: resolveAllReferences(resolvedSchema.items, rootSchema, recurseList)
      };
    }
    return deepEquals(schema, resolvedSchema) ? schema : resolvedSchema;
  }
  function stubExistingAdditionalProperties(validator2, theSchema, rootSchema, aFormData, experimental_customMergeAllOf) {
    const schema = {
      ...theSchema,
      properties: { ...theSchema.properties }
    };
    const formData = aFormData && isObject2(aFormData) ? aFormData : {};
    Object.keys(formData).forEach((key) => {
      if (key in schema.properties) {
        return;
      }
      let additionalProperties = {};
      if (typeof schema.additionalProperties !== "boolean") {
        if (REF_KEY in schema.additionalProperties) {
          additionalProperties = retrieveSchema(validator2, { $ref: get_default(schema.additionalProperties, [REF_KEY]) }, rootSchema, formData, experimental_customMergeAllOf);
        } else if ("type" in schema.additionalProperties) {
          additionalProperties = { ...schema.additionalProperties };
        } else if (ANY_OF_KEY in schema.additionalProperties || ONE_OF_KEY in schema.additionalProperties) {
          additionalProperties = {
            type: "object",
            ...schema.additionalProperties
          };
        } else {
          additionalProperties = { type: guessType(get_default(formData, [key])) };
        }
      } else {
        additionalProperties = { type: guessType(get_default(formData, [key])) };
      }
      schema.properties[key] = additionalProperties;
      set_default(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);
    });
    return schema;
  }
  function retrieveSchemaInternal(validator2, schema, rootSchema, rawFormData, expandAllBranches = false, recurseList = [], experimental_customMergeAllOf) {
    if (!isObject2(schema)) {
      return [{}];
    }
    const resolvedSchemas = resolveSchema(validator2, schema, rootSchema, expandAllBranches, recurseList, rawFormData, experimental_customMergeAllOf);
    return resolvedSchemas.flatMap((s2) => {
      var _a;
      let resolvedSchema = s2;
      if (IF_KEY in resolvedSchema) {
        return resolveCondition(validator2, resolvedSchema, rootSchema, expandAllBranches, recurseList, rawFormData, experimental_customMergeAllOf);
      }
      if (ALL_OF_KEY in resolvedSchema) {
        if (expandAllBranches) {
          const { allOf, ...restOfSchema } = resolvedSchema;
          return [...allOf, restOfSchema];
        }
        try {
          const withContainsSchemas = [];
          const withoutContainsSchemas = [];
          (_a = resolvedSchema.allOf) === null || _a === void 0 ? void 0 : _a.forEach((s3) => {
            if (typeof s3 === "object" && s3.contains) {
              withContainsSchemas.push(s3);
            } else {
              withoutContainsSchemas.push(s3);
            }
          });
          if (withContainsSchemas.length) {
            resolvedSchema = { ...resolvedSchema, allOf: withoutContainsSchemas };
          }
          resolvedSchema = experimental_customMergeAllOf ? experimental_customMergeAllOf(resolvedSchema) : (0, import_json_schema_merge_allof.default)(resolvedSchema, {
            deep: false
          });
          if (withContainsSchemas.length) {
            resolvedSchema.allOf = withContainsSchemas;
          }
        } catch (e2) {
          console.warn("could not merge subschemas in allOf:\n", e2);
          const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;
          return resolvedSchemaWithoutAllOf;
        }
      }
      const hasAdditionalProperties = ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;
      if (hasAdditionalProperties) {
        return stubExistingAdditionalProperties(validator2, resolvedSchema, rootSchema, rawFormData, experimental_customMergeAllOf);
      }
      return resolvedSchema;
    });
  }
  function resolveAnyOrOneOfSchemas(validator2, schema, rootSchema, expandAllBranches, rawFormData) {
    let anyOrOneOf;
    const { oneOf, anyOf, ...remaining } = schema;
    if (Array.isArray(oneOf)) {
      anyOrOneOf = oneOf;
    } else if (Array.isArray(anyOf)) {
      anyOrOneOf = anyOf;
    }
    if (anyOrOneOf) {
      const formData = rawFormData === void 0 && expandAllBranches ? {} : rawFormData;
      const discriminator = getDiscriminatorFieldFromSchema(schema);
      anyOrOneOf = anyOrOneOf.map((s2) => {
        return resolveAllReferences(s2, rootSchema, []);
      });
      const option = getFirstMatchingOption(validator2, formData, anyOrOneOf, rootSchema, discriminator);
      if (expandAllBranches) {
        return anyOrOneOf.map((item) => mergeSchemas(remaining, item));
      }
      schema = mergeSchemas(remaining, anyOrOneOf[option]);
    }
    return [schema];
  }
  function resolveDependencies(validator2, schema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    const { dependencies, ...remainingSchema } = schema;
    const resolvedSchemas = resolveAnyOrOneOfSchemas(validator2, remainingSchema, rootSchema, expandAllBranches, formData);
    return resolvedSchemas.flatMap((resolvedSchema) => processDependencies(validator2, dependencies, resolvedSchema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf));
  }
  function processDependencies(validator2, dependencies, resolvedSchema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    let schemas = [resolvedSchema];
    for (const dependencyKey in dependencies) {
      if (!expandAllBranches && get_default(formData, [dependencyKey]) === void 0) {
        continue;
      }
      if (resolvedSchema.properties && !(dependencyKey in resolvedSchema.properties)) {
        continue;
      }
      const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(dependencyKey, dependencies);
      if (Array.isArray(dependencyValue)) {
        schemas[0] = withDependentProperties(resolvedSchema, dependencyValue);
      } else if (isObject2(dependencyValue)) {
        schemas = withDependentSchema(validator2, resolvedSchema, rootSchema, dependencyKey, dependencyValue, expandAllBranches, recurseList, formData, experimental_customMergeAllOf);
      }
      return schemas.flatMap((schema) => processDependencies(validator2, remainingDependencies, schema, rootSchema, expandAllBranches, recurseList, formData, experimental_customMergeAllOf));
    }
    return schemas;
  }
  function withDependentProperties(schema, additionallyRequired) {
    if (!additionallyRequired) {
      return schema;
    }
    const required = Array.isArray(schema.required) ? Array.from(/* @__PURE__ */ new Set([...schema.required, ...additionallyRequired])) : additionallyRequired;
    return { ...schema, required };
  }
  function withDependentSchema(validator2, schema, rootSchema, dependencyKey, dependencyValue, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    const dependentSchemas = retrieveSchemaInternal(validator2, dependencyValue, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf);
    return dependentSchemas.flatMap((dependent) => {
      const { oneOf, ...dependentSchema } = dependent;
      schema = mergeSchemas(schema, dependentSchema);
      if (oneOf === void 0) {
        return schema;
      }
      const resolvedOneOfs = oneOf.map((subschema) => {
        if (typeof subschema === "boolean" || !(REF_KEY in subschema)) {
          return [subschema];
        }
        return resolveReference(validator2, subschema, rootSchema, expandAllBranches, recurseList, formData);
      });
      const allPermutations = getAllPermutationsOfXxxOf(resolvedOneOfs);
      return allPermutations.flatMap((resolvedOneOf) => withExactlyOneSubschema(validator2, schema, rootSchema, dependencyKey, resolvedOneOf, expandAllBranches, recurseList, formData, experimental_customMergeAllOf));
    });
  }
  function withExactlyOneSubschema(validator2, schema, rootSchema, dependencyKey, oneOf, expandAllBranches, recurseList, formData, experimental_customMergeAllOf) {
    const validSubschemas = oneOf.filter((subschema) => {
      if (typeof subschema === "boolean" || !subschema || !subschema.properties) {
        return false;
      }
      const { [dependencyKey]: conditionPropertySchema } = subschema.properties;
      if (conditionPropertySchema) {
        const conditionSchema = {
          type: "object",
          properties: {
            [dependencyKey]: conditionPropertySchema
          }
        };
        return validator2.isValid(conditionSchema, formData, rootSchema) || expandAllBranches;
      }
      return false;
    });
    if (!expandAllBranches && validSubschemas.length !== 1) {
      console.warn("ignoring oneOf in dependencies because there isn't exactly one subschema that is valid");
      return [schema];
    }
    return validSubschemas.flatMap((s2) => {
      const subschema = s2;
      const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties);
      const dependentSchema = { ...subschema, properties: dependentSubschema };
      const schemas = retrieveSchemaInternal(validator2, dependentSchema, rootSchema, formData, expandAllBranches, recurseList, experimental_customMergeAllOf);
      return schemas.map((s3) => mergeSchemas(schema, s3));
    });
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/getClosestMatchingOption.js
  var JUNK_OPTION = {
    type: "object",
    $id: JUNK_OPTION_ID,
    properties: {
      __not_really_there__: {
        type: "number"
      }
    }
  };
  function calculateIndexScore(validator2, rootSchema, schema, formData, experimental_customMergeAllOf) {
    let totalScore = 0;
    if (schema) {
      if (isObject_default(schema.properties)) {
        totalScore += reduce_default(schema.properties, (score, value, key) => {
          const formValue = get_default(formData, key);
          if (typeof value === "boolean") {
            return score;
          }
          if (has_default(value, REF_KEY)) {
            const newSchema = retrieveSchema(validator2, value, rootSchema, formValue, experimental_customMergeAllOf);
            return score + calculateIndexScore(validator2, rootSchema, newSchema, formValue || {}, experimental_customMergeAllOf);
          }
          if ((has_default(value, ONE_OF_KEY) || has_default(value, ANY_OF_KEY)) && formValue) {
            const key2 = has_default(value, ONE_OF_KEY) ? ONE_OF_KEY : ANY_OF_KEY;
            const discriminator = getDiscriminatorFieldFromSchema(value);
            return score + getClosestMatchingOption(validator2, rootSchema, formValue, get_default(value, key2), -1, discriminator, experimental_customMergeAllOf);
          }
          if (value.type === "object") {
            if (isObject_default(formValue)) {
              score += 1;
            }
            return score + calculateIndexScore(validator2, rootSchema, value, formValue, experimental_customMergeAllOf);
          }
          if (value.type === guessType(formValue)) {
            let newScore = score + 1;
            if (value.default) {
              newScore += formValue === value.default ? 1 : -1;
            } else if (value.const) {
              newScore += formValue === value.const ? 1 : -1;
            }
            return newScore;
          }
          return score;
        }, 0);
      } else if (isString_default(schema.type) && schema.type === guessType(formData)) {
        totalScore += 1;
      }
    }
    return totalScore;
  }
  function getClosestMatchingOption(validator2, rootSchema, formData, options, selectedOption = -1, discriminatorField, experimental_customMergeAllOf) {
    const resolvedOptions = options.map((option) => {
      return resolveAllReferences(option, rootSchema, []);
    });
    const simpleDiscriminatorMatch = getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField);
    if (isNumber_default(simpleDiscriminatorMatch)) {
      return simpleDiscriminatorMatch;
    }
    const allValidIndexes = resolvedOptions.reduce((validList, option, index) => {
      const testOptions = [JUNK_OPTION, option];
      const match2 = getFirstMatchingOption(validator2, formData, testOptions, rootSchema, discriminatorField);
      if (match2 === 1) {
        validList.push(index);
      }
      return validList;
    }, []);
    if (allValidIndexes.length === 1) {
      return allValidIndexes[0];
    }
    if (!allValidIndexes.length) {
      times_default(resolvedOptions.length, (i2) => allValidIndexes.push(i2));
    }
    const scoreCount = /* @__PURE__ */ new Set();
    const { bestIndex } = allValidIndexes.reduce((scoreData, index) => {
      const { bestScore } = scoreData;
      const option = resolvedOptions[index];
      const score = calculateIndexScore(validator2, rootSchema, option, formData, experimental_customMergeAllOf);
      scoreCount.add(score);
      if (score > bestScore) {
        return { bestIndex: index, bestScore: score };
      }
      return scoreData;
    }, { bestIndex: selectedOption, bestScore: 0 });
    if (scoreCount.size === 1 && selectedOption >= 0) {
      return selectedOption;
    }
    return bestIndex;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/isFixedItems.js
  function isFixedItems(schema) {
    return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject2(item));
  }

  // react-user-mgmt/node_modules/lodash-es/isNil.js
  function isNil(value) {
    return value == null;
  }
  var isNil_default = isNil;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/mergeDefaultsWithFormData.js
  function mergeDefaultsWithFormData(defaults, formData, mergeExtraArrayDefaults = false, defaultSupercedesUndefined = false, overrideFormDataWithDefaults = false) {
    if (Array.isArray(formData)) {
      const defaultsArray = Array.isArray(defaults) ? defaults : [];
      const overrideArray = overrideFormDataWithDefaults ? defaultsArray : formData;
      const overrideOppositeArray = overrideFormDataWithDefaults ? formData : defaultsArray;
      const mapped = overrideArray.map((value, idx) => {
        if (overrideOppositeArray[idx] !== void 0) {
          return mergeDefaultsWithFormData(defaultsArray[idx], formData[idx], mergeExtraArrayDefaults, defaultSupercedesUndefined, overrideFormDataWithDefaults);
        }
        return value;
      });
      if ((mergeExtraArrayDefaults || overrideFormDataWithDefaults) && mapped.length < overrideOppositeArray.length) {
        mapped.push(...overrideOppositeArray.slice(mapped.length));
      }
      return mapped;
    }
    if (isObject2(formData)) {
      const acc = Object.assign({}, defaults);
      return Object.keys(formData).reduce((acc2, key) => {
        const keyValue = get_default(formData, key);
        const keyExistsInDefaults = isObject2(defaults) && key in defaults;
        const keyExistsInFormData = key in formData;
        acc2[key] = mergeDefaultsWithFormData(
          defaults ? get_default(defaults, key) : {},
          keyValue,
          mergeExtraArrayDefaults,
          defaultSupercedesUndefined,
          // overrideFormDataWithDefaults can be true only when the key value exists in defaults
          // Or if the key value doesn't exist in formData
          overrideFormDataWithDefaults && (keyExistsInDefaults || !keyExistsInFormData)
        );
        return acc2;
      }, acc);
    }
    if (defaultSupercedesUndefined && (!isNil_default(defaults) && isNil_default(formData) || typeof formData === "number" && isNaN(formData)) || overrideFormDataWithDefaults && !isNil_default(formData)) {
      return defaults;
    }
    return formData;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/mergeObjects.js
  function mergeObjects(obj1, obj2, concatArrays = false) {
    return Object.keys(obj2).reduce((acc, key) => {
      const left = obj1 ? obj1[key] : {}, right = obj2[key];
      if (obj1 && key in obj1 && isObject2(right)) {
        acc[key] = mergeObjects(left, right, concatArrays);
      } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {
        let toMerge = right;
        if (concatArrays === "preventDuplicates") {
          toMerge = right.reduce((result, value) => {
            if (!left.includes(value)) {
              result.push(value);
            }
            return result;
          }, []);
        }
        acc[key] = left.concat(toMerge);
      } else {
        acc[key] = right;
      }
      return acc;
    }, Object.assign({}, obj1));
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/isConstant.js
  function isConstant(schema) {
    return Array.isArray(schema.enum) && schema.enum.length === 1 || CONST_KEY in schema;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/isSelect.js
  function isSelect(validator2, theSchema, rootSchema = {}, experimental_customMergeAllOf) {
    const schema = retrieveSchema(validator2, theSchema, rootSchema, void 0, experimental_customMergeAllOf);
    const altSchemas = schema.oneOf || schema.anyOf;
    if (Array.isArray(schema.enum)) {
      return true;
    }
    if (Array.isArray(altSchemas)) {
      return altSchemas.every((altSchemas2) => typeof altSchemas2 !== "boolean" && isConstant(altSchemas2));
    }
    return false;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/isMultiSelect.js
  function isMultiSelect(validator2, schema, rootSchema, experimental_customMergeAllOf) {
    if (!schema.uniqueItems || !schema.items || typeof schema.items === "boolean") {
      return false;
    }
    return isSelect(validator2, schema.items, rootSchema, experimental_customMergeAllOf);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/constIsAjvDataReference.js
  function constIsAjvDataReference(schema) {
    const schemaConst = schema[CONST_KEY];
    const schemaType = getSchemaType(schema);
    return isObject2(schemaConst) && isString_default(schemaConst === null || schemaConst === void 0 ? void 0 : schemaConst.$data) && schemaType !== "object" && schemaType !== "array";
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/toConstant.js
  function toConstant(schema) {
    if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {
      return schema.enum[0];
    }
    if (CONST_KEY in schema) {
      return schema.const;
    }
    throw new Error("schema cannot be inferred as a constant");
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/optionsList.js
  function optionsList(schema, uiSchema) {
    const schemaWithEnumNames = schema;
    if (schema.enum) {
      let enumNames;
      if (uiSchema) {
        const { enumNames: uiEnumNames } = getUiOptions(uiSchema);
        enumNames = uiEnumNames;
      }
      if (!enumNames && schemaWithEnumNames.enumNames) {
        if (true) {
          console.warn('The "enumNames" property in the schema is deprecated and will be removed in a future major release. Use the "ui:enumNames" property in the uiSchema instead.');
        }
        enumNames = schemaWithEnumNames.enumNames;
      }
      return schema.enum.map((value, i2) => {
        const label = (enumNames === null || enumNames === void 0 ? void 0 : enumNames[i2]) || String(value);
        return { label, value };
      });
    }
    let altSchemas = void 0;
    let altUiSchemas = void 0;
    if (schema.anyOf) {
      altSchemas = schema.anyOf;
      altUiSchemas = uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema.anyOf;
    } else if (schema.oneOf) {
      altSchemas = schema.oneOf;
      altUiSchemas = uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema.oneOf;
    }
    return altSchemas && altSchemas.map((aSchemaDef, index) => {
      const { title } = getUiOptions(altUiSchemas === null || altUiSchemas === void 0 ? void 0 : altUiSchemas[index]);
      const aSchema = aSchemaDef;
      const value = toConstant(aSchema);
      const label = title || aSchema.title || String(value);
      return {
        schema: aSchema,
        label,
        value
      };
    });
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/getDefaultFormState.js
  var PRIMITIVE_TYPES = ["string", "number", "integer", "boolean", "null"];
  var AdditionalItemsHandling;
  (function(AdditionalItemsHandling2) {
    AdditionalItemsHandling2[AdditionalItemsHandling2["Ignore"] = 0] = "Ignore";
    AdditionalItemsHandling2[AdditionalItemsHandling2["Invert"] = 1] = "Invert";
    AdditionalItemsHandling2[AdditionalItemsHandling2["Fallback"] = 2] = "Fallback";
  })(AdditionalItemsHandling || (AdditionalItemsHandling = {}));
  function getInnerSchemaForArrayItem(schema, additionalItems = AdditionalItemsHandling.Ignore, idx = -1) {
    if (idx >= 0) {
      if (Array.isArray(schema.items) && idx < schema.items.length) {
        const item = schema.items[idx];
        if (typeof item !== "boolean") {
          return item;
        }
      }
    } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== "boolean") {
      return schema.items;
    }
    if (additionalItems !== AdditionalItemsHandling.Ignore && isObject2(schema.additionalItems)) {
      return schema.additionalItems;
    }
    return {};
  }
  function maybeAddDefaultToObject(obj, key, computedDefault, includeUndefinedValues, isParentRequired, requiredFields = [], experimental_defaultFormStateBehavior = {}, isConst = false) {
    const { emptyObjectFields = "populateAllDefaults" } = experimental_defaultFormStateBehavior;
    if (includeUndefinedValues || isConst) {
      obj[key] = computedDefault;
    } else if (emptyObjectFields !== "skipDefaults") {
      const isSelfOrParentRequired = isParentRequired === void 0 ? requiredFields.includes(key) : isParentRequired;
      if (isObject2(computedDefault)) {
        if (emptyObjectFields === "skipEmptyDefaults") {
          if (!isEmpty_default(computedDefault)) {
            obj[key] = computedDefault;
          }
        } else if ((!isEmpty_default(computedDefault) || requiredFields.includes(key)) && (isSelfOrParentRequired || emptyObjectFields !== "populateRequiredDefaults")) {
          obj[key] = computedDefault;
        }
      } else if (
        // Store computedDefault if it's a defined primitive (e.g., true) and satisfies certain conditions
        // Condition 1: computedDefault is not undefined
        // Condition 2: If emptyObjectFields is 'populateAllDefaults' or 'skipEmptyDefaults)
        // Or if isSelfOrParentRequired is 'true' and the key is a required field
        computedDefault !== void 0 && (emptyObjectFields === "populateAllDefaults" || emptyObjectFields === "skipEmptyDefaults" || isSelfOrParentRequired && requiredFields.includes(key))
      ) {
        obj[key] = computedDefault;
      }
    }
  }
  function computeDefaults(validator2, rawSchema, computeDefaultsProps = {}) {
    const { parentDefaults, rawFormData, rootSchema = {}, includeUndefinedValues = false, _recurseList = [], experimental_defaultFormStateBehavior = void 0, experimental_customMergeAllOf = void 0, required, shouldMergeDefaultsIntoFormData = false } = computeDefaultsProps;
    const formData = isObject2(rawFormData) ? rawFormData : {};
    const schema = isObject2(rawSchema) ? rawSchema : {};
    let defaults = parentDefaults;
    let schemaToCompute = null;
    let experimental_dfsb_to_compute = experimental_defaultFormStateBehavior;
    let updatedRecurseList = _recurseList;
    if (schema[CONST_KEY] && (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.constAsDefaults) !== "never" && !constIsAjvDataReference(schema)) {
      defaults = schema[CONST_KEY];
    } else if (isObject2(defaults) && isObject2(schema.default)) {
      defaults = mergeObjects(defaults, schema.default);
    } else if (DEFAULT_KEY in schema) {
      defaults = schema.default;
    } else if (REF_KEY in schema) {
      const refName = schema[REF_KEY];
      if (!_recurseList.includes(refName)) {
        updatedRecurseList = _recurseList.concat(refName);
        schemaToCompute = findSchemaDefinition(refName, rootSchema);
      }
    } else if (DEPENDENCIES_KEY in schema) {
      const defaultFormData = {
        ...getDefaultBasedOnSchemaType(validator2, schema, computeDefaultsProps, defaults),
        ...formData
      };
      const resolvedSchema = resolveDependencies(validator2, schema, rootSchema, false, [], defaultFormData, experimental_customMergeAllOf);
      schemaToCompute = resolvedSchema[0];
    } else if (isFixedItems(schema)) {
      defaults = schema.items.map((itemSchema, idx) => computeDefaults(validator2, itemSchema, {
        rootSchema,
        includeUndefinedValues,
        _recurseList,
        experimental_defaultFormStateBehavior,
        experimental_customMergeAllOf,
        parentDefaults: Array.isArray(parentDefaults) ? parentDefaults[idx] : void 0,
        rawFormData: formData,
        required,
        shouldMergeDefaultsIntoFormData
      }));
    } else if (ONE_OF_KEY in schema) {
      const { oneOf, ...remaining } = schema;
      if (oneOf.length === 0) {
        return void 0;
      }
      const discriminator = getDiscriminatorFieldFromSchema(schema);
      const { type = "null" } = remaining;
      if (!Array.isArray(type) && PRIMITIVE_TYPES.includes(type) && (experimental_dfsb_to_compute === null || experimental_dfsb_to_compute === void 0 ? void 0 : experimental_dfsb_to_compute.constAsDefaults) === "skipOneOf") {
        experimental_dfsb_to_compute = {
          ...experimental_dfsb_to_compute,
          constAsDefaults: "never"
        };
      }
      schemaToCompute = oneOf[getClosestMatchingOption(validator2, rootSchema, rawFormData, oneOf, 0, discriminator, experimental_customMergeAllOf)];
      schemaToCompute = mergeSchemas(remaining, schemaToCompute);
    } else if (ANY_OF_KEY in schema) {
      const { anyOf, ...remaining } = schema;
      if (anyOf.length === 0) {
        return void 0;
      }
      const discriminator = getDiscriminatorFieldFromSchema(schema);
      schemaToCompute = anyOf[getClosestMatchingOption(validator2, rootSchema, rawFormData, anyOf, 0, discriminator, experimental_customMergeAllOf)];
      schemaToCompute = mergeSchemas(remaining, schemaToCompute);
    }
    if (schemaToCompute) {
      return computeDefaults(validator2, schemaToCompute, {
        rootSchema,
        includeUndefinedValues,
        _recurseList: updatedRecurseList,
        experimental_defaultFormStateBehavior: experimental_dfsb_to_compute,
        experimental_customMergeAllOf,
        parentDefaults: defaults,
        rawFormData: formData,
        required,
        shouldMergeDefaultsIntoFormData
      });
    }
    if (defaults === void 0) {
      defaults = schema.default;
    }
    const defaultBasedOnSchemaType = getDefaultBasedOnSchemaType(validator2, schema, computeDefaultsProps, defaults);
    let defaultsWithFormData = defaultBasedOnSchemaType !== null && defaultBasedOnSchemaType !== void 0 ? defaultBasedOnSchemaType : defaults;
    if (shouldMergeDefaultsIntoFormData) {
      const { arrayMinItems = {} } = experimental_defaultFormStateBehavior || {};
      const { mergeExtraDefaults } = arrayMinItems;
      const matchingFormData = ensureFormDataMatchingSchema(validator2, schema, rootSchema, rawFormData, experimental_defaultFormStateBehavior, experimental_customMergeAllOf);
      if (!isObject2(rawFormData)) {
        defaultsWithFormData = mergeDefaultsWithFormData(defaultsWithFormData, matchingFormData, mergeExtraDefaults, true);
      }
    }
    return defaultsWithFormData;
  }
  function ensureFormDataMatchingSchema(validator2, schema, rootSchema, formData, experimental_defaultFormStateBehavior, experimental_customMergeAllOf) {
    const isSelectField = !isConstant(schema) && isSelect(validator2, schema, rootSchema, experimental_customMergeAllOf);
    let validFormData = formData;
    if (isSelectField) {
      const getOptionsList = optionsList(schema);
      const isValid = getOptionsList === null || getOptionsList === void 0 ? void 0 : getOptionsList.some((option) => deepEquals(option.value, formData));
      validFormData = isValid ? formData : void 0;
    }
    const constTakesPrecedence = schema[CONST_KEY] && (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.constAsDefaults) === "always";
    if (constTakesPrecedence) {
      validFormData = schema.const;
    }
    return validFormData;
  }
  function getObjectDefaults(validator2, rawSchema, { rawFormData, rootSchema = {}, includeUndefinedValues = false, _recurseList = [], experimental_defaultFormStateBehavior = void 0, experimental_customMergeAllOf = void 0, required, shouldMergeDefaultsIntoFormData } = {}, defaults) {
    {
      const formData = isObject2(rawFormData) ? rawFormData : {};
      const schema = rawSchema;
      const retrievedSchema = (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.allOf) === "populateDefaults" && ALL_OF_KEY in schema ? retrieveSchema(validator2, schema, rootSchema, formData, experimental_customMergeAllOf) : schema;
      const parentConst = retrievedSchema[CONST_KEY];
      const objectDefaults = Object.keys(retrievedSchema.properties || {}).reduce((acc, key) => {
        var _a;
        const propertySchema = get_default(retrievedSchema, [PROPERTIES_KEY, key]);
        const hasParentConst = isObject2(parentConst) && parentConst[key] !== void 0;
        const hasConst = (isObject2(propertySchema) && CONST_KEY in propertySchema || hasParentConst) && (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.constAsDefaults) !== "never" && !constIsAjvDataReference(propertySchema);
        const computedDefault = computeDefaults(validator2, propertySchema, {
          rootSchema,
          _recurseList,
          experimental_defaultFormStateBehavior,
          experimental_customMergeAllOf,
          includeUndefinedValues: includeUndefinedValues === true,
          parentDefaults: get_default(defaults, [key]),
          rawFormData: get_default(formData, [key]),
          required: (_a = retrievedSchema.required) === null || _a === void 0 ? void 0 : _a.includes(key),
          shouldMergeDefaultsIntoFormData
        });
        maybeAddDefaultToObject(acc, key, computedDefault, includeUndefinedValues, required, retrievedSchema.required, experimental_defaultFormStateBehavior, hasConst);
        return acc;
      }, {});
      if (retrievedSchema.additionalProperties) {
        const additionalPropertiesSchema = isObject2(retrievedSchema.additionalProperties) ? retrievedSchema.additionalProperties : {};
        const keys2 = /* @__PURE__ */ new Set();
        if (isObject2(defaults)) {
          Object.keys(defaults).filter((key) => !retrievedSchema.properties || !retrievedSchema.properties[key]).forEach((key) => keys2.add(key));
        }
        const formDataRequired = [];
        Object.keys(formData).filter((key) => !retrievedSchema.properties || !retrievedSchema.properties[key]).forEach((key) => {
          keys2.add(key);
          formDataRequired.push(key);
        });
        keys2.forEach((key) => {
          var _a;
          const computedDefault = computeDefaults(validator2, additionalPropertiesSchema, {
            rootSchema,
            _recurseList,
            experimental_defaultFormStateBehavior,
            experimental_customMergeAllOf,
            includeUndefinedValues: includeUndefinedValues === true,
            parentDefaults: get_default(defaults, [key]),
            rawFormData: get_default(formData, [key]),
            required: (_a = retrievedSchema.required) === null || _a === void 0 ? void 0 : _a.includes(key),
            shouldMergeDefaultsIntoFormData
          });
          maybeAddDefaultToObject(objectDefaults, key, computedDefault, includeUndefinedValues, required, formDataRequired);
        });
      }
      return objectDefaults;
    }
  }
  function getArrayDefaults(validator2, rawSchema, { rawFormData, rootSchema = {}, _recurseList = [], experimental_defaultFormStateBehavior = void 0, experimental_customMergeAllOf = void 0, required, shouldMergeDefaultsIntoFormData } = {}, defaults) {
    var _a, _b;
    const schema = rawSchema;
    const arrayMinItemsStateBehavior = (_a = experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.arrayMinItems) !== null && _a !== void 0 ? _a : {};
    const { populate: arrayMinItemsPopulate, mergeExtraDefaults: arrayMergeExtraDefaults } = arrayMinItemsStateBehavior;
    const neverPopulate = arrayMinItemsPopulate === "never";
    const ignoreMinItemsFlagSet = arrayMinItemsPopulate === "requiredOnly";
    const isPopulateAll = arrayMinItemsPopulate === "all" || !neverPopulate && !ignoreMinItemsFlagSet;
    const computeSkipPopulate = (_b = arrayMinItemsStateBehavior === null || arrayMinItemsStateBehavior === void 0 ? void 0 : arrayMinItemsStateBehavior.computeSkipPopulate) !== null && _b !== void 0 ? _b : () => false;
    const isSkipEmptyDefaults = (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.emptyObjectFields) === "skipEmptyDefaults";
    const emptyDefault = isSkipEmptyDefaults ? void 0 : [];
    if (Array.isArray(defaults)) {
      defaults = defaults.map((item, idx) => {
        const schemaItem = getInnerSchemaForArrayItem(schema, AdditionalItemsHandling.Fallback, idx);
        return computeDefaults(validator2, schemaItem, {
          rootSchema,
          _recurseList,
          experimental_defaultFormStateBehavior,
          experimental_customMergeAllOf,
          parentDefaults: item,
          required,
          shouldMergeDefaultsIntoFormData
        });
      });
    }
    if (Array.isArray(rawFormData)) {
      const schemaItem = getInnerSchemaForArrayItem(schema);
      if (neverPopulate) {
        defaults = rawFormData;
      } else {
        const itemDefaults = rawFormData.map((item, idx) => {
          return computeDefaults(validator2, schemaItem, {
            rootSchema,
            _recurseList,
            experimental_defaultFormStateBehavior,
            experimental_customMergeAllOf,
            rawFormData: item,
            parentDefaults: get_default(defaults, [idx]),
            required,
            shouldMergeDefaultsIntoFormData
          });
        });
        const mergeExtraDefaults = (ignoreMinItemsFlagSet && required || isPopulateAll) && arrayMergeExtraDefaults;
        defaults = mergeDefaultsWithFormData(defaults, itemDefaults, mergeExtraDefaults);
      }
    }
    const hasConst = isObject2(schema) && CONST_KEY in schema && (experimental_defaultFormStateBehavior === null || experimental_defaultFormStateBehavior === void 0 ? void 0 : experimental_defaultFormStateBehavior.constAsDefaults) !== "never";
    if (hasConst === false) {
      if (neverPopulate) {
        return defaults !== null && defaults !== void 0 ? defaults : emptyDefault;
      }
      if (ignoreMinItemsFlagSet && !required) {
        return defaults ? defaults : void 0;
      }
    }
    const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;
    if (!schema.minItems || isMultiSelect(validator2, schema, rootSchema, experimental_customMergeAllOf) || computeSkipPopulate(validator2, schema, rootSchema) || schema.minItems <= defaultsLength) {
      return defaults ? defaults : emptyDefault;
    }
    const defaultEntries = defaults || [];
    const fillerSchema = getInnerSchemaForArrayItem(schema, AdditionalItemsHandling.Invert);
    const fillerDefault = fillerSchema.default;
    const fillerEntries = new Array(schema.minItems - defaultsLength).fill(computeDefaults(validator2, fillerSchema, {
      parentDefaults: fillerDefault,
      rootSchema,
      _recurseList,
      experimental_defaultFormStateBehavior,
      experimental_customMergeAllOf,
      required,
      shouldMergeDefaultsIntoFormData
    }));
    return defaultEntries.concat(fillerEntries);
  }
  function getDefaultBasedOnSchemaType(validator2, rawSchema, computeDefaultsProps = {}, defaults) {
    switch (getSchemaType(rawSchema)) {
      // We need to recurse for object schema inner default values.
      case "object": {
        return getObjectDefaults(validator2, rawSchema, computeDefaultsProps, defaults);
      }
      case "array": {
        return getArrayDefaults(validator2, rawSchema, computeDefaultsProps, defaults);
      }
    }
  }
  function getDefaultFormState(validator2, theSchema, formData, rootSchema, includeUndefinedValues = false, experimental_defaultFormStateBehavior, experimental_customMergeAllOf) {
    if (!isObject2(theSchema)) {
      throw new Error("Invalid schema: " + theSchema);
    }
    const schema = retrieveSchema(validator2, theSchema, rootSchema, formData, experimental_customMergeAllOf);
    const defaults = computeDefaults(validator2, schema, {
      rootSchema,
      includeUndefinedValues,
      experimental_defaultFormStateBehavior,
      experimental_customMergeAllOf,
      rawFormData: formData,
      shouldMergeDefaultsIntoFormData: true
    });
    if (isObject2(formData) || Array.isArray(formData)) {
      const { mergeDefaultsIntoFormData } = experimental_defaultFormStateBehavior || {};
      const defaultSupercedesUndefined = mergeDefaultsIntoFormData === "useDefaultIfFormDataUndefined";
      const result = mergeDefaultsWithFormData(
        defaults,
        formData,
        true,
        // set to true to add any additional default array entries.
        defaultSupercedesUndefined,
        true
        // set to true to override formData with defaults if they exist.
      );
      return result;
    }
    return defaults;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/isCustomWidget.js
  function isCustomWidget(uiSchema = {}) {
    return (
      // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.
      // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets
      "widget" in getUiOptions(uiSchema) && getUiOptions(uiSchema)["widget"] !== "hidden"
    );
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/isFilesArray.js
  function isFilesArray(validator2, schema, uiSchema = {}, rootSchema, experimental_customMergeAllOf) {
    if (uiSchema[UI_WIDGET_KEY] === "files") {
      return true;
    }
    if (schema.items) {
      const itemsSchema = retrieveSchema(validator2, schema.items, rootSchema, void 0, experimental_customMergeAllOf);
      return itemsSchema.type === "string" && itemsSchema.format === "data-url";
    }
    return false;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/getDisplayLabel.js
  function getDisplayLabel(validator2, schema, uiSchema = {}, rootSchema, globalOptions, experimental_customMergeAllOf) {
    const uiOptions = getUiOptions(uiSchema, globalOptions);
    const { label = true } = uiOptions;
    let displayLabel = !!label;
    const schemaType = getSchemaType(schema);
    if (schemaType === "array") {
      displayLabel = isMultiSelect(validator2, schema, rootSchema, experimental_customMergeAllOf) || isFilesArray(validator2, schema, uiSchema, rootSchema, experimental_customMergeAllOf) || isCustomWidget(uiSchema);
    }
    if (schemaType === "object") {
      displayLabel = false;
    }
    if (schemaType === "boolean" && !uiSchema[UI_WIDGET_KEY]) {
      displayLabel = false;
    }
    if (uiSchema[UI_FIELD_KEY]) {
      displayLabel = false;
    }
    return displayLabel;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/mergeValidationData.js
  function mergeValidationData(validator2, validationData, additionalErrorSchema) {
    if (!additionalErrorSchema) {
      return validationData;
    }
    const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;
    let errors = validator2.toErrorList(additionalErrorSchema);
    let errorSchema = additionalErrorSchema;
    if (!isEmpty_default(oldErrorSchema)) {
      errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true);
      errors = [...oldErrors].concat(errors);
    }
    return { errorSchema, errors };
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/sanitizeDataForNewSchema.js
  var NO_VALUE = Symbol("no Value");
  function sanitizeDataForNewSchema(validator2, rootSchema, newSchema, oldSchema, data = {}, experimental_customMergeAllOf) {
    let newFormData;
    if (has_default(newSchema, PROPERTIES_KEY)) {
      const removeOldSchemaData = {};
      if (has_default(oldSchema, PROPERTIES_KEY)) {
        const properties2 = get_default(oldSchema, PROPERTIES_KEY, {});
        Object.keys(properties2).forEach((key) => {
          if (has_default(data, key)) {
            removeOldSchemaData[key] = void 0;
          }
        });
      }
      const keys2 = Object.keys(get_default(newSchema, PROPERTIES_KEY, {}));
      const nestedData = {};
      keys2.forEach((key) => {
        const formValue = get_default(data, key);
        let oldKeyedSchema = get_default(oldSchema, [PROPERTIES_KEY, key], {});
        let newKeyedSchema = get_default(newSchema, [PROPERTIES_KEY, key], {});
        if (has_default(oldKeyedSchema, REF_KEY)) {
          oldKeyedSchema = retrieveSchema(validator2, oldKeyedSchema, rootSchema, formValue, experimental_customMergeAllOf);
        }
        if (has_default(newKeyedSchema, REF_KEY)) {
          newKeyedSchema = retrieveSchema(validator2, newKeyedSchema, rootSchema, formValue, experimental_customMergeAllOf);
        }
        const oldSchemaTypeForKey = get_default(oldKeyedSchema, "type");
        const newSchemaTypeForKey = get_default(newKeyedSchema, "type");
        if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {
          if (has_default(removeOldSchemaData, key)) {
            delete removeOldSchemaData[key];
          }
          if (newSchemaTypeForKey === "object" || newSchemaTypeForKey === "array" && Array.isArray(formValue)) {
            const itemData = sanitizeDataForNewSchema(validator2, rootSchema, newKeyedSchema, oldKeyedSchema, formValue, experimental_customMergeAllOf);
            if (itemData !== void 0 || newSchemaTypeForKey === "array") {
              nestedData[key] = itemData;
            }
          } else {
            const newOptionDefault = get_default(newKeyedSchema, "default", NO_VALUE);
            const oldOptionDefault = get_default(oldKeyedSchema, "default", NO_VALUE);
            if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {
              if (oldOptionDefault === formValue) {
                removeOldSchemaData[key] = newOptionDefault;
              } else if (get_default(newKeyedSchema, "readOnly") === true) {
                removeOldSchemaData[key] = void 0;
              }
            }
            const newOptionConst = get_default(newKeyedSchema, "const", NO_VALUE);
            const oldOptionConst = get_default(oldKeyedSchema, "const", NO_VALUE);
            if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {
              removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : void 0;
            }
          }
        }
      });
      newFormData = {
        ...typeof data == "string" || Array.isArray(data) ? void 0 : data,
        ...removeOldSchemaData,
        ...nestedData
      };
    } else if (get_default(oldSchema, "type") === "array" && get_default(newSchema, "type") === "array" && Array.isArray(data)) {
      let oldSchemaItems = get_default(oldSchema, "items");
      let newSchemaItems = get_default(newSchema, "items");
      if (typeof oldSchemaItems === "object" && typeof newSchemaItems === "object" && !Array.isArray(oldSchemaItems) && !Array.isArray(newSchemaItems)) {
        if (has_default(oldSchemaItems, REF_KEY)) {
          oldSchemaItems = retrieveSchema(validator2, oldSchemaItems, rootSchema, data, experimental_customMergeAllOf);
        }
        if (has_default(newSchemaItems, REF_KEY)) {
          newSchemaItems = retrieveSchema(validator2, newSchemaItems, rootSchema, data, experimental_customMergeAllOf);
        }
        const oldSchemaType = get_default(oldSchemaItems, "type");
        const newSchemaType = get_default(newSchemaItems, "type");
        if (!oldSchemaType || oldSchemaType === newSchemaType) {
          const maxItems = get_default(newSchema, "maxItems", -1);
          if (newSchemaType === "object") {
            newFormData = data.reduce((newValue, aValue) => {
              const itemValue = sanitizeDataForNewSchema(validator2, rootSchema, newSchemaItems, oldSchemaItems, aValue, experimental_customMergeAllOf);
              if (itemValue !== void 0 && (maxItems < 0 || newValue.length < maxItems)) {
                newValue.push(itemValue);
              }
              return newValue;
            }, []);
          } else {
            newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;
          }
        }
      } else if (typeof oldSchemaItems === "boolean" && typeof newSchemaItems === "boolean" && oldSchemaItems === newSchemaItems) {
        newFormData = data;
      }
    }
    return newFormData;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/toIdSchema.js
  function toIdSchemaInternal(validator2, schema, idPrefix, idSeparator, id, rootSchema, formData, _recurseList = [], experimental_customMergeAllOf) {
    if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {
      const _schema = retrieveSchema(validator2, schema, rootSchema, formData, experimental_customMergeAllOf);
      const sameSchemaIndex = _recurseList.findIndex((item) => deepEquals(item, _schema));
      if (sameSchemaIndex === -1) {
        return toIdSchemaInternal(validator2, _schema, idPrefix, idSeparator, id, rootSchema, formData, _recurseList.concat(_schema), experimental_customMergeAllOf);
      }
    }
    if (ITEMS_KEY in schema && !get_default(schema, [ITEMS_KEY, REF_KEY])) {
      return toIdSchemaInternal(validator2, get_default(schema, ITEMS_KEY), idPrefix, idSeparator, id, rootSchema, formData, _recurseList, experimental_customMergeAllOf);
    }
    const $id = id || idPrefix;
    const idSchema = { $id };
    if (getSchemaType(schema) === "object" && PROPERTIES_KEY in schema) {
      for (const name in schema.properties) {
        const field = get_default(schema, [PROPERTIES_KEY, name]);
        const fieldId = idSchema[ID_KEY] + idSeparator + name;
        idSchema[name] = toIdSchemaInternal(
          validator2,
          isObject2(field) ? field : {},
          idPrefix,
          idSeparator,
          fieldId,
          rootSchema,
          // It's possible that formData is not an object -- this can happen if an
          // array item has just been added, but not populated with data yet
          get_default(formData, [name]),
          _recurseList,
          experimental_customMergeAllOf
        );
      }
    }
    return idSchema;
  }
  function toIdSchema(validator2, schema, id, rootSchema, formData, idPrefix = "root", idSeparator = "_", experimental_customMergeAllOf) {
    return toIdSchemaInternal(validator2, schema, idPrefix, idSeparator, id, rootSchema, formData, void 0, experimental_customMergeAllOf);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schema/toPathSchema.js
  function toPathSchemaInternal(validator2, schema, name, rootSchema, formData, _recurseList = [], experimental_customMergeAllOf) {
    if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {
      const _schema = retrieveSchema(validator2, schema, rootSchema, formData, experimental_customMergeAllOf);
      const sameSchemaIndex = _recurseList.findIndex((item) => deepEquals(item, _schema));
      if (sameSchemaIndex === -1) {
        return toPathSchemaInternal(validator2, _schema, name, rootSchema, formData, _recurseList.concat(_schema), experimental_customMergeAllOf);
      }
    }
    let pathSchema = {
      [NAME_KEY]: name.replace(/^\./, "")
    };
    if (ONE_OF_KEY in schema || ANY_OF_KEY in schema) {
      const xxxOf = ONE_OF_KEY in schema ? schema.oneOf : schema.anyOf;
      const discriminator = getDiscriminatorFieldFromSchema(schema);
      const index = getClosestMatchingOption(validator2, rootSchema, formData, xxxOf, 0, discriminator, experimental_customMergeAllOf);
      const _schema = xxxOf[index];
      pathSchema = {
        ...pathSchema,
        ...toPathSchemaInternal(validator2, _schema, name, rootSchema, formData, _recurseList, experimental_customMergeAllOf)
      };
    }
    if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {
      set_default(pathSchema, RJSF_ADDITIONAL_PROPERTIES_FLAG, true);
    }
    if (ITEMS_KEY in schema && Array.isArray(formData)) {
      const { items: schemaItems, additionalItems: schemaAdditionalItems } = schema;
      if (Array.isArray(schemaItems)) {
        formData.forEach((element, i2) => {
          if (schemaItems[i2]) {
            pathSchema[i2] = toPathSchemaInternal(validator2, schemaItems[i2], `${name}.${i2}`, rootSchema, element, _recurseList, experimental_customMergeAllOf);
          } else if (schemaAdditionalItems) {
            pathSchema[i2] = toPathSchemaInternal(validator2, schemaAdditionalItems, `${name}.${i2}`, rootSchema, element, _recurseList, experimental_customMergeAllOf);
          } else {
            console.warn(`Unable to generate path schema for "${name}.${i2}". No schema defined for it`);
          }
        });
      } else {
        formData.forEach((element, i2) => {
          pathSchema[i2] = toPathSchemaInternal(validator2, schemaItems, `${name}.${i2}`, rootSchema, element, _recurseList, experimental_customMergeAllOf);
        });
      }
    } else if (PROPERTIES_KEY in schema) {
      for (const property2 in schema.properties) {
        const field = get_default(schema, [PROPERTIES_KEY, property2]);
        pathSchema[property2] = toPathSchemaInternal(
          validator2,
          field,
          `${name}.${property2}`,
          rootSchema,
          // It's possible that formData is not an object -- this can happen if an
          // array item has just been added, but not populated with data yet
          get_default(formData, [property2]),
          _recurseList,
          experimental_customMergeAllOf
        );
      }
    }
    return pathSchema;
  }
  function toPathSchema(validator2, schema, name = "", rootSchema, formData, experimental_customMergeAllOf) {
    return toPathSchemaInternal(validator2, schema, name, rootSchema, formData, void 0, experimental_customMergeAllOf);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/createSchemaUtils.js
  var SchemaUtils = class {
    /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables
     *
     * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs
     * @param rootSchema - The root schema that will be forwarded to all the APIs
     * @param experimental_defaultFormStateBehavior - Configuration flags to allow users to override default form state behavior
     * @param [experimental_customMergeAllOf] - Optional function that allows for custom merging of `allOf` schemas
     */
    constructor(validator2, rootSchema, experimental_defaultFormStateBehavior, experimental_customMergeAllOf) {
      this.rootSchema = rootSchema;
      this.validator = validator2;
      this.experimental_defaultFormStateBehavior = experimental_defaultFormStateBehavior;
      this.experimental_customMergeAllOf = experimental_customMergeAllOf;
    }
    /** Returns the `ValidatorType` in the `SchemaUtilsType`
     *
     * @returns - The `ValidatorType`
     */
    getValidator() {
      return this.validator;
    }
    /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of
     * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation
     * of a new `SchemaUtilsType` with incomplete properties.
     *
     * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one
     * @param rootSchema - The root schema that will be compared against the current one
     * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior
     * @param [experimental_customMergeAllOf] - Optional function that allows for custom merging of `allOf` schemas
     * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`
     */
    doesSchemaUtilsDiffer(validator2, rootSchema, experimental_defaultFormStateBehavior = {}, experimental_customMergeAllOf) {
      if (!validator2 || !rootSchema) {
        return false;
      }
      return this.validator !== validator2 || !deepEquals(this.rootSchema, rootSchema) || !deepEquals(this.experimental_defaultFormStateBehavior, experimental_defaultFormStateBehavior) || this.experimental_customMergeAllOf !== experimental_customMergeAllOf;
    }
    /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have
     * computed to have defaults provided in the `schema`.
     *
     * @param schema - The schema for which the default state is desired
     * @param [formData] - The current formData, if any, onto which to provide any missing defaults
     * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.
     *          If "excludeObjectChildren", pass `includeUndefinedValues` as false when computing defaults for any nested
     *          object properties.
     * @returns - The resulting `formData` with all the defaults provided
     */
    getDefaultFormState(schema, formData, includeUndefinedValues = false) {
      return getDefaultFormState(this.validator, schema, formData, this.rootSchema, includeUndefinedValues, this.experimental_defaultFormStateBehavior, this.experimental_customMergeAllOf);
    }
    /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`
     * should be displayed in a UI.
     *
     * @param schema - The schema for which the display label flag is desired
     * @param [uiSchema] - The UI schema from which to derive potentially displayable information
     * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options
     * @returns - True if the label should be displayed or false if it should not
     */
    getDisplayLabel(schema, uiSchema, globalOptions) {
      return getDisplayLabel(this.validator, schema, uiSchema, this.rootSchema, globalOptions, this.experimental_customMergeAllOf);
    }
    /** Determines which of the given `options` provided most closely matches the `formData`.
     * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.
     *
     * The closest match is determined using the number of matching properties, and more heavily favors options with
     * matching readOnly, default, or const values.
     *
     * @param formData - The form data associated with the schema
     * @param options - The list of options that can be selected from
     * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified
     * @param [discriminatorField] - The optional name of the field within the options object whose value is used to
     *          determine which option is selected
     * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match
     */
    getClosestMatchingOption(formData, options, selectedOption, discriminatorField) {
      return getClosestMatchingOption(this.validator, this.rootSchema, formData, options, selectedOption, discriminatorField, this.experimental_customMergeAllOf);
    }
    /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.
     * Always returns the first option if there is nothing that matches.
     *
     * @param formData - The current formData, if any, used to figure out a match
     * @param options - The list of options to find a matching options from
     * @param [discriminatorField] - The optional name of the field within the options object whose value is used to
     *          determine which option is selected
     * @returns - The firstindex of the matched option or 0 if none is available
     */
    getFirstMatchingOption(formData, options, discriminatorField) {
      return getFirstMatchingOption(this.validator, formData, options, this.rootSchema, discriminatorField);
    }
    /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.
     * Deprecated, use `getFirstMatchingOption()` instead.
     *
     * @param formData - The current formData, if any, onto which to provide any missing defaults
     * @param options - The list of options to find a matching options from
     * @param [discriminatorField] - The optional name of the field within the options object whose value is used to
     *          determine which option is selected
     * @returns - The index of the matched option or 0 if none is available
     * @deprecated
     */
    getMatchingOption(formData, options, discriminatorField) {
      return getMatchingOption(this.validator, formData, options, this.rootSchema, discriminatorField);
    }
    /** Checks to see if the `schema` and `uiSchema` combination represents an array of files
     *
     * @param schema - The schema for which check for array of files flag is desired
     * @param [uiSchema] - The UI schema from which to check the widget
     * @returns - True if schema/uiSchema contains an array of files, otherwise false
     */
    isFilesArray(schema, uiSchema) {
      return isFilesArray(this.validator, schema, uiSchema, this.rootSchema, this.experimental_customMergeAllOf);
    }
    /** Checks to see if the `schema` combination represents a multi-select
     *
     * @param schema - The schema for which check for a multi-select flag is desired
     * @returns - True if schema contains a multi-select, otherwise false
     */
    isMultiSelect(schema) {
      return isMultiSelect(this.validator, schema, this.rootSchema, this.experimental_customMergeAllOf);
    }
    /** Checks to see if the `schema` combination represents a select
     *
     * @param schema - The schema for which check for a select flag is desired
     * @returns - True if schema contains a select, otherwise false
     */
    isSelect(schema) {
      return isSelect(this.validator, schema, this.rootSchema, this.experimental_customMergeAllOf);
    }
    /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in
     * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling
     * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,
     * then `validationData` is returned.
     *
     * @param validationData - The current `ValidationData` into which to merge the additional errors
     * @param [additionalErrorSchema] - The additional set of errors
     * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.
     * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be
     *        removed in the next major release.
     */
    mergeValidationData(validationData, additionalErrorSchema) {
      return mergeValidationData(this.validator, validationData, additionalErrorSchema);
    }
    /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and
     * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially
     * recursive resolution.
     *
     * @param schema - The schema for which retrieving a schema is desired
     * @param [rawFormData] - The current formData, if any, to assist retrieving a schema
     * @returns - The schema having its conditions, additional properties, references and dependencies resolved
     */
    retrieveSchema(schema, rawFormData) {
      return retrieveSchema(this.validator, schema, this.rootSchema, rawFormData, this.experimental_customMergeAllOf);
    }
    /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the
     * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the
     * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the
     * old schemas that are non-existent in the new schema are set to `undefined`.
     *
     * @param [newSchema] - The new schema for which the data is being sanitized
     * @param [oldSchema] - The old schema from which the data originated
     * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined
     * @returns - The new form data, with all the fields uniquely associated with the old schema set
     *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.
     */
    sanitizeDataForNewSchema(newSchema, oldSchema, data) {
      return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data, this.experimental_customMergeAllOf);
    }
    /** Generates an `IdSchema` object for the `schema`, recursively
     *
     * @param schema - The schema for which the display label flag is desired
     * @param [id] - The base id for the schema
     * @param [formData] - The current formData, if any, onto which to provide any missing defaults
     * @param [idPrefix='root'] - The prefix to use for the id
     * @param [idSeparator='_'] - The separator to use for the path segments in the id
     * @returns - The `IdSchema` object for the `schema`
     */
    toIdSchema(schema, id, formData, idPrefix = "root", idSeparator = "_") {
      return toIdSchema(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator, this.experimental_customMergeAllOf);
    }
    /** Generates an `PathSchema` object for the `schema`, recursively
     *
     * @param schema - The schema for which the display label flag is desired
     * @param [name] - The base name for the schema
     * @param [formData] - The current formData, if any, onto which to provide any missing defaults
     * @returns - The `PathSchema` object for the `schema`
     */
    toPathSchema(schema, name, formData) {
      return toPathSchema(this.validator, schema, name, this.rootSchema, formData, this.experimental_customMergeAllOf);
    }
  };
  function createSchemaUtils(validator2, rootSchema, experimental_defaultFormStateBehavior = {}, experimental_customMergeAllOf) {
    return new SchemaUtils(validator2, rootSchema, experimental_defaultFormStateBehavior, experimental_customMergeAllOf);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/dataURItoBlob.js
  function dataURItoBlob(dataURILike) {
    var _a;
    if (dataURILike.indexOf("data:") === -1) {
      throw new Error("File is invalid: URI must be a dataURI");
    }
    const dataURI = dataURILike.slice(5);
    const splitted = dataURI.split(";base64,");
    if (splitted.length !== 2) {
      throw new Error("File is invalid: dataURI must be base64");
    }
    const [media, base64] = splitted;
    const [mime, ...mediaparams] = media.split(";");
    const type = mime || "";
    const name = decodeURI(
      // parse the parameters into key-value pairs, find a key, and extract a value
      // if no key is found, then the name is unknown
      ((_a = mediaparams.map((param) => param.split("=")).find(([key]) => key === "name")) === null || _a === void 0 ? void 0 : _a[1]) || "unknown"
    );
    try {
      const binary = atob(base64);
      const array = new Array(binary.length);
      for (let i2 = 0; i2 < binary.length; i2++) {
        array[i2] = binary.charCodeAt(i2);
      }
      const blob = new window.Blob([new Uint8Array(array)], { type });
      return { blob, name };
    } catch (error) {
      throw new Error("File is invalid: " + error.message);
    }
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/pad.js
  function pad(num, width2) {
    let s2 = String(num);
    while (s2.length < width2) {
      s2 = "0" + s2;
    }
    return s2;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/dateRangeOptions.js
  function dateRangeOptions(start, stop) {
    if (start <= 0 && stop <= 0) {
      start = (/* @__PURE__ */ new Date()).getFullYear() + start;
      stop = (/* @__PURE__ */ new Date()).getFullYear() + stop;
    } else if (start < 0 || stop < 0) {
      throw new Error(`Both start (${start}) and stop (${stop}) must both be <= 0 or > 0, got one of each`);
    }
    if (start > stop) {
      return dateRangeOptions(stop, start).reverse();
    }
    const options = [];
    for (let i2 = start; i2 <= stop; i2++) {
      options.push({ value: i2, label: pad(i2, 2) });
    }
    return options;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/replaceStringParameters.js
  function replaceStringParameters(inputString, params) {
    let output = inputString;
    if (Array.isArray(params)) {
      const parts = output.split(/(%\d)/);
      params.forEach((param, index) => {
        const partIndex = parts.findIndex((part) => part === `%${index + 1}`);
        if (partIndex >= 0) {
          parts[partIndex] = param;
        }
      });
      output = parts.join("");
    }
    return output;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/englishStringTranslator.js
  function englishStringTranslator(stringToTranslate, params) {
    return replaceStringParameters(stringToTranslate, params);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/enumOptionsValueForIndex.js
  function enumOptionsValueForIndex(valueIndex, allEnumOptions = [], emptyValue) {
    if (Array.isArray(valueIndex)) {
      return valueIndex.map((index2) => enumOptionsValueForIndex(index2, allEnumOptions)).filter((val) => val !== emptyValue);
    }
    const index = valueIndex === "" || valueIndex === null ? -1 : Number(valueIndex);
    const option = allEnumOptions[index];
    return option ? option.value : emptyValue;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/enumOptionsDeselectValue.js
  function enumOptionsDeselectValue(valueIndex, selected, allEnumOptions = []) {
    const value = enumOptionsValueForIndex(valueIndex, allEnumOptions);
    if (Array.isArray(selected)) {
      return selected.filter((v2) => !deepEquals(v2, value));
    }
    return deepEquals(value, selected) ? void 0 : selected;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/enumOptionsIsSelected.js
  function enumOptionsIsSelected(value, selected) {
    if (Array.isArray(selected)) {
      return selected.some((sel) => deepEquals(sel, value));
    }
    return deepEquals(selected, value);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/enumOptionsIndexForValue.js
  function enumOptionsIndexForValue(value, allEnumOptions = [], multiple = false) {
    const selectedIndexes = allEnumOptions.map((opt, index) => enumOptionsIsSelected(opt.value, value) ? String(index) : void 0).filter((opt) => typeof opt !== "undefined");
    if (!multiple) {
      return selectedIndexes[0];
    }
    return selectedIndexes;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/enumOptionsSelectValue.js
  function enumOptionsSelectValue(valueIndex, selected, allEnumOptions = []) {
    const value = enumOptionsValueForIndex(valueIndex, allEnumOptions);
    if (!isNil_default(value)) {
      const index = allEnumOptions.findIndex((opt) => value === opt.value);
      const all = allEnumOptions.map(({ value: val }) => val);
      const updated = selected.slice(0, index).concat(value, selected.slice(index));
      return updated.sort((a2, b2) => Number(all.indexOf(a2) > all.indexOf(b2)));
    }
    return selected;
  }

  // react-user-mgmt/node_modules/lodash-es/cloneDeep.js
  var CLONE_DEEP_FLAG3 = 1;
  var CLONE_SYMBOLS_FLAG3 = 4;
  function cloneDeep(value) {
    return baseClone_default(value, CLONE_DEEP_FLAG3 | CLONE_SYMBOLS_FLAG3);
  }
  var cloneDeep_default = cloneDeep;

  // react-user-mgmt/node_modules/lodash-es/setWith.js
  function setWith(object, path, value, customizer) {
    customizer = typeof customizer == "function" ? customizer : void 0;
    return object == null ? object : baseSet_default(object, path, value, customizer);
  }
  var setWith_default = setWith;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/ErrorSchemaBuilder.js
  var ErrorSchemaBuilder = class {
    /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.
     *
     * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class
     */
    constructor(initialSchema) {
      this.errorSchema = {};
      this.resetAllErrors(initialSchema);
    }
    /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`
     */
    get ErrorSchema() {
      return this.errorSchema;
    }
    /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.
     *
     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)
     * @returns - The error block for the given `pathOfError` or the root if not provided
     * @private
     */
    getOrCreateErrorBlock(pathOfError) {
      const hasPath2 = Array.isArray(pathOfError) && pathOfError.length > 0 || typeof pathOfError === "string";
      let errorBlock = hasPath2 ? get_default(this.errorSchema, pathOfError) : this.errorSchema;
      if (!errorBlock && pathOfError) {
        errorBlock = {};
        setWith_default(this.errorSchema, pathOfError, errorBlock, Object);
      }
      return errorBlock;
    }
    /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.
     *
     * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class
     * @returns - The `ErrorSchemaBuilder` object for chaining purposes
     */
    resetAllErrors(initialSchema) {
      this.errorSchema = initialSchema ? cloneDeep_default(initialSchema) : {};
      return this;
    }
    /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within
     * the schema described by the `pathOfError`. For more information about how to specify the path see the
     * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).
     *
     * @param errorOrList - The error or list of errors to add into the `ErrorSchema`
     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)
     * @returns - The `ErrorSchemaBuilder` object for chaining purposes
     */
    addErrors(errorOrList, pathOfError) {
      const errorBlock = this.getOrCreateErrorBlock(pathOfError);
      let errorsList = get_default(errorBlock, ERRORS_KEY);
      if (!Array.isArray(errorsList)) {
        errorsList = [];
        errorBlock[ERRORS_KEY] = errorsList;
      }
      if (Array.isArray(errorOrList)) {
        set_default(errorBlock, ERRORS_KEY, [.../* @__PURE__ */ new Set([...errorsList, ...errorOrList])]);
      } else {
        set_default(errorBlock, ERRORS_KEY, [.../* @__PURE__ */ new Set([...errorsList, errorOrList])]);
      }
      return this;
    }
    /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location
     * within the schema described by the `pathOfError`. For more information about how to specify the path see the
     * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).
     *
     * @param errorOrList - The error or list of errors to set into the `ErrorSchema`
     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)
     * @returns - The `ErrorSchemaBuilder` object for chaining purposes
     */
    setErrors(errorOrList, pathOfError) {
      const errorBlock = this.getOrCreateErrorBlock(pathOfError);
      const listToAdd = Array.isArray(errorOrList) ? [.../* @__PURE__ */ new Set([...errorOrList])] : [errorOrList];
      set_default(errorBlock, ERRORS_KEY, listToAdd);
      return this;
    }
    /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by
     * the `pathOfError`. For more information about how to specify the path see the
     * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).
     *
     * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)
     * @returns - The `ErrorSchemaBuilder` object for chaining purposes
     */
    clearErrors(pathOfError) {
      const errorBlock = this.getOrCreateErrorBlock(pathOfError);
      set_default(errorBlock, ERRORS_KEY, []);
      return this;
    }
  };

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getDateElementProps.js
  function getDateElementProps(date, time, yearRange = [1900, (/* @__PURE__ */ new Date()).getFullYear() + 2], format = "YMD") {
    const { day, month, year, hour, minute, second } = date;
    const dayObj = { type: "day", range: [1, 31], value: day };
    const monthObj = { type: "month", range: [1, 12], value: month };
    const yearObj = { type: "year", range: yearRange, value: year };
    const dateElementProp = [];
    switch (format) {
      case "MDY":
        dateElementProp.push(monthObj, dayObj, yearObj);
        break;
      case "DMY":
        dateElementProp.push(dayObj, monthObj, yearObj);
        break;
      case "YMD":
      default:
        dateElementProp.push(yearObj, monthObj, dayObj);
    }
    if (time) {
      dateElementProp.push({ type: "hour", range: [0, 23], value: hour }, { type: "minute", range: [0, 59], value: minute }, { type: "second", range: [0, 59], value: second });
    }
    return dateElementProp;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/rangeSpec.js
  function rangeSpec(schema) {
    const spec = {};
    if (schema.multipleOf) {
      spec.step = schema.multipleOf;
    }
    if (schema.minimum || schema.minimum === 0) {
      spec.min = schema.minimum;
    }
    if (schema.maximum || schema.maximum === 0) {
      spec.max = schema.maximum;
    }
    return spec;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getInputProps.js
  function getInputProps(schema, defaultType, options = {}, autoDefaultStepAny = true) {
    const inputProps = {
      type: defaultType || "text",
      ...rangeSpec(schema)
    };
    if (options.inputType) {
      inputProps.type = options.inputType;
    } else if (!defaultType) {
      if (schema.type === "number") {
        inputProps.type = "number";
        if (autoDefaultStepAny && inputProps.step === void 0) {
          inputProps.step = "any";
        }
      } else if (schema.type === "integer") {
        inputProps.type = "number";
        if (inputProps.step === void 0) {
          inputProps.step = 1;
        }
      }
    }
    if (options.autocomplete) {
      inputProps.autoComplete = options.autocomplete;
    }
    if (options.accept) {
      inputProps.accept = options.accept;
    }
    return inputProps;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getSubmitButtonOptions.js
  var DEFAULT_OPTIONS = {
    props: {
      disabled: false
    },
    submitText: "Submit",
    norender: false
  };
  function getSubmitButtonOptions(uiSchema = {}) {
    const uiOptions = getUiOptions(uiSchema);
    if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {
      const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY];
      return { ...DEFAULT_OPTIONS, ...options };
    }
    return DEFAULT_OPTIONS;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getTemplate.js
  function getTemplate(name, registry, uiOptions = {}) {
    const { templates: templates2 } = registry;
    if (name === "ButtonTemplates") {
      return templates2[name];
    }
    return (
      // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent
      // To avoid that, we cast uiOptions to `any` before accessing the name field
      uiOptions[name] || templates2[name]
    );
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getWidget.js
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var import_react13 = __toESM(require_react());
  var import_react_is6 = __toESM(require_react_is4());
  var widgetMap = {
    boolean: {
      checkbox: "CheckboxWidget",
      radio: "RadioWidget",
      select: "SelectWidget",
      hidden: "HiddenWidget"
    },
    string: {
      text: "TextWidget",
      password: "PasswordWidget",
      email: "EmailWidget",
      hostname: "TextWidget",
      ipv4: "TextWidget",
      ipv6: "TextWidget",
      uri: "URLWidget",
      "data-url": "FileWidget",
      radio: "RadioWidget",
      select: "SelectWidget",
      textarea: "TextareaWidget",
      hidden: "HiddenWidget",
      date: "DateWidget",
      datetime: "DateTimeWidget",
      "date-time": "DateTimeWidget",
      "alt-date": "AltDateWidget",
      "alt-datetime": "AltDateTimeWidget",
      time: "TimeWidget",
      color: "ColorWidget",
      file: "FileWidget"
    },
    number: {
      text: "TextWidget",
      select: "SelectWidget",
      updown: "UpDownWidget",
      range: "RangeWidget",
      radio: "RadioWidget",
      hidden: "HiddenWidget"
    },
    integer: {
      text: "TextWidget",
      select: "SelectWidget",
      updown: "UpDownWidget",
      range: "RangeWidget",
      radio: "RadioWidget",
      hidden: "HiddenWidget"
    },
    array: {
      select: "SelectWidget",
      checkboxes: "CheckboxesWidget",
      files: "FileWidget",
      hidden: "HiddenWidget"
    }
  };
  function mergeWidgetOptions(AWidget) {
    let MergedWidget = get_default(AWidget, "MergedWidget");
    if (!MergedWidget) {
      const defaultOptions2 = AWidget.defaultProps && AWidget.defaultProps.options || {};
      MergedWidget = ({ options, ...props }) => {
        return (0, import_jsx_runtime98.jsx)(AWidget, { options: { ...defaultOptions2, ...options }, ...props });
      };
      set_default(AWidget, "MergedWidget", MergedWidget);
    }
    return MergedWidget;
  }
  function getWidget(schema, widget, registeredWidgets = {}) {
    const type = getSchemaType(schema);
    if (typeof widget === "function" || widget && import_react_is6.default.isForwardRef((0, import_react13.createElement)(widget)) || import_react_is6.default.isMemo(widget)) {
      return mergeWidgetOptions(widget);
    }
    if (typeof widget !== "string") {
      throw new Error(`Unsupported widget definition: ${typeof widget}`);
    }
    if (widget in registeredWidgets) {
      const registeredWidget = registeredWidgets[widget];
      return getWidget(schema, registeredWidget, registeredWidgets);
    }
    if (typeof type === "string") {
      if (!(type in widgetMap)) {
        throw new Error(`No widget for type '${type}'`);
      }
      if (widget in widgetMap[type]) {
        const registeredWidget = registeredWidgets[widgetMap[type][widget]];
        return getWidget(schema, registeredWidget, registeredWidgets);
      }
    }
    throw new Error(`No widget '${widget}' for type '${type}'`);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/hashForSchema.js
  function hashString(string) {
    let hash2 = 0;
    for (let i2 = 0; i2 < string.length; i2 += 1) {
      const chr = string.charCodeAt(i2);
      hash2 = (hash2 << 5) - hash2 + chr;
      hash2 = hash2 & hash2;
    }
    return hash2.toString(16);
  }
  function hashForSchema(schema) {
    const allKeys = /* @__PURE__ */ new Set();
    JSON.stringify(schema, (key, value) => (allKeys.add(key), value));
    return hashString(JSON.stringify(schema, Array.from(allKeys).sort()));
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/hasWidget.js
  function hasWidget(schema, widget, registeredWidgets = {}) {
    try {
      getWidget(schema, widget, registeredWidgets);
      return true;
    } catch (e2) {
      const err = e2;
      if (err.message && (err.message.startsWith("No widget") || err.message.startsWith("Unsupported widget"))) {
        return false;
      }
      throw e2;
    }
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/idGenerators.js
  function idGenerator(id, suffix) {
    const theId = isString_default(id) ? id : id[ID_KEY];
    return `${theId}__${suffix}`;
  }
  function descriptionId(id) {
    return idGenerator(id, "description");
  }
  function errorId(id) {
    return idGenerator(id, "error");
  }
  function examplesId(id) {
    return idGenerator(id, "examples");
  }
  function helpId(id) {
    return idGenerator(id, "help");
  }
  function titleId(id) {
    return idGenerator(id, "title");
  }
  function ariaDescribedByIds(id, includeExamples = false) {
    const examples = includeExamples ? ` ${examplesId(id)}` : "";
    return `${errorId(id)} ${descriptionId(id)} ${helpId(id)}${examples}`;
  }
  function optionId(id, optionIndex) {
    return `${id}-${optionIndex}`;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/labelValue.js
  function labelValue(label, hideLabel, fallback) {
    return hideLabel ? fallback : label;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/localToUTC.js
  function localToUTC(dateString) {
    return dateString ? new Date(dateString).toJSON() : void 0;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/orderProperties.js
  function orderProperties(properties2, order) {
    if (!Array.isArray(order)) {
      return properties2;
    }
    const arrayToHash = (arr) => arr.reduce((prev2, curr) => {
      prev2[curr] = true;
      return prev2;
    }, {});
    const errorPropList = (arr) => arr.length > 1 ? `properties '${arr.join("', '")}'` : `property '${arr[0]}'`;
    const propertyHash = arrayToHash(properties2);
    const orderFiltered = order.filter((prop) => prop === "*" || propertyHash[prop]);
    const orderHash = arrayToHash(orderFiltered);
    const rest = properties2.filter((prop) => !orderHash[prop]);
    const restIndex = orderFiltered.indexOf("*");
    if (restIndex === -1) {
      if (rest.length) {
        throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);
      }
      return orderFiltered;
    }
    if (restIndex !== orderFiltered.lastIndexOf("*")) {
      throw new Error("uiSchema order list contains more than one wildcard item");
    }
    const complete = [...orderFiltered];
    complete.splice(restIndex, 1, ...rest);
    return complete;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/parseDateString.js
  function parseDateString(dateString, includeTime = true) {
    if (!dateString) {
      return {
        year: -1,
        month: -1,
        day: -1,
        hour: includeTime ? -1 : 0,
        minute: includeTime ? -1 : 0,
        second: includeTime ? -1 : 0
      };
    }
    const date = new Date(dateString);
    if (Number.isNaN(date.getTime())) {
      throw new Error("Unable to parse date " + dateString);
    }
    return {
      year: date.getUTCFullYear(),
      month: date.getUTCMonth() + 1,
      day: date.getUTCDate(),
      hour: includeTime ? date.getUTCHours() : 0,
      minute: includeTime ? date.getUTCMinutes() : 0,
      second: includeTime ? date.getUTCSeconds() : 0
    };
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/schemaRequiresTrueValue.js
  function schemaRequiresTrueValue(schema) {
    if (schema.const) {
      return true;
    }
    if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {
      return true;
    }
    if (schema.anyOf && schema.anyOf.length === 1) {
      return schemaRequiresTrueValue(schema.anyOf[0]);
    }
    if (schema.oneOf && schema.oneOf.length === 1) {
      return schemaRequiresTrueValue(schema.oneOf[0]);
    }
    if (schema.allOf) {
      const schemaSome = (subSchema) => schemaRequiresTrueValue(subSchema);
      return schema.allOf.some(schemaSome);
    }
    return false;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/shouldRender.js
  function shouldRender(component, nextProps, nextState) {
    const { props, state } = component;
    return !deepEquals(props, nextProps) || !deepEquals(state, nextState);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/toDateString.js
  function toDateString(dateObject, time = true) {
    const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;
    const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);
    const datetime = new Date(utcTime).toJSON();
    return time ? datetime : datetime.slice(0, 10);
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/toErrorList.js
  function toErrorList(errorSchema, fieldPath = []) {
    if (!errorSchema) {
      return [];
    }
    let errorList = [];
    if (ERRORS_KEY in errorSchema) {
      errorList = errorList.concat(errorSchema[ERRORS_KEY].map((message) => {
        const property2 = `.${fieldPath.join(".")}`;
        return {
          property: property2,
          message,
          stack: `${property2} ${message}`
        };
      }));
    }
    return Object.keys(errorSchema).reduce((acc, key) => {
      if (key !== ERRORS_KEY) {
        const childSchema = errorSchema[key];
        if (isPlainObject_default(childSchema)) {
          acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));
        }
      }
      return acc;
    }, errorList);
  }

  // react-user-mgmt/node_modules/lodash-es/toPath.js
  function toPath(value) {
    if (isArray_default(value)) {
      return arrayMap_default(value, toKey_default);
    }
    return isSymbol_default(value) ? [value] : copyArray_default(stringToPath_default(toString_default(value)));
  }
  var toPath_default = toPath;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/toErrorSchema.js
  function toErrorSchema(errors) {
    const builder = new ErrorSchemaBuilder();
    if (errors.length) {
      errors.forEach((error) => {
        const { property: property2, message } = error;
        const path = property2 === "." ? [] : toPath_default(property2);
        if (path.length > 0 && path[0] === "") {
          path.splice(0, 1);
        }
        if (message) {
          builder.addErrors(message, path);
        }
      });
    }
    return builder.ErrorSchema;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/unwrapErrorHandler.js
  function unwrapErrorHandler(errorHandler) {
    return Object.keys(errorHandler).reduce((acc, key) => {
      if (key === "addError") {
        return acc;
      } else {
        const childSchema = errorHandler[key];
        if (isPlainObject_default(childSchema)) {
          return {
            ...acc,
            [key]: unwrapErrorHandler(childSchema)
          };
        }
        return { ...acc, [key]: childSchema };
      }
    }, {});
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/utcToLocal.js
  function utcToLocal(jsonDate) {
    if (!jsonDate) {
      return "";
    }
    const date = new Date(jsonDate);
    const yyyy = pad(date.getFullYear(), 4);
    const MM = pad(date.getMonth() + 1, 2);
    const dd = pad(date.getDate(), 2);
    const hh = pad(date.getHours(), 2);
    const mm = pad(date.getMinutes(), 2);
    const ss = pad(date.getSeconds(), 2);
    const SSS = pad(date.getMilliseconds(), 3);
    return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/validationDataMerge.js
  function validationDataMerge(validationData, additionalErrorSchema) {
    if (!additionalErrorSchema) {
      return validationData;
    }
    const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;
    let errors = toErrorList(additionalErrorSchema);
    let errorSchema = additionalErrorSchema;
    if (!isEmpty_default(oldErrorSchema)) {
      errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true);
      errors = [...oldErrors].concat(errors);
    }
    return { errorSchema, errors };
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/withIdRefPrefix.js
  function withIdRefPrefixObject(node2) {
    for (const key in node2) {
      const realObj = node2;
      const value = realObj[key];
      if (key === REF_KEY && typeof value === "string" && value.startsWith("#")) {
        realObj[key] = ROOT_SCHEMA_PREFIX + value;
      } else {
        realObj[key] = withIdRefPrefix(value);
      }
    }
    return node2;
  }
  function withIdRefPrefixArray(node2) {
    for (let i2 = 0; i2 < node2.length; i2++) {
      node2[i2] = withIdRefPrefix(node2[i2]);
    }
    return node2;
  }
  function withIdRefPrefix(schemaNode) {
    if (Array.isArray(schemaNode)) {
      return withIdRefPrefixArray([...schemaNode]);
    }
    if (isObject_default(schemaNode)) {
      return withIdRefPrefixObject({ ...schemaNode });
    }
    return schemaNode;
  }

  // react-user-mgmt/node_modules/lodash-es/_basePickBy.js
  function basePickBy(object, paths, predicate) {
    var index = -1, length2 = paths.length, result = {};
    while (++index < length2) {
      var path = paths[index], value = baseGet_default(object, path);
      if (predicate(value, path)) {
        baseSet_default(result, castPath_default(path, object), value);
      }
    }
    return result;
  }
  var basePickBy_default = basePickBy;

  // react-user-mgmt/node_modules/lodash-es/pickBy.js
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap_default(getAllKeysIn_default(object), function(prop) {
      return [prop];
    });
    predicate = baseIteratee_default(predicate);
    return basePickBy_default(object, props, function(value, path) {
      return predicate(value, path[0]);
    });
  }
  var pickBy_default = pickBy;

  // react-user-mgmt/node_modules/lodash-es/_baseDifference.js
  var LARGE_ARRAY_SIZE3 = 200;
  function baseDifference(array, values3, iteratee, comparator) {
    var index = -1, includes = arrayIncludes_default, isCommon = true, length2 = array.length, result = [], valuesLength = values3.length;
    if (!length2) {
      return result;
    }
    if (iteratee) {
      values3 = arrayMap_default(values3, baseUnary_default(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith_default;
      isCommon = false;
    } else if (values3.length >= LARGE_ARRAY_SIZE3) {
      includes = cacheHas_default;
      isCommon = false;
      values3 = new SetCache_default(values3);
    }
    outer:
      while (++index < length2) {
        var value = array[index], computed = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values3[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values3, computed, comparator)) {
          result.push(value);
        }
      }
    return result;
  }
  var baseDifference_default = baseDifference;

  // react-user-mgmt/node_modules/lodash-es/difference.js
  var difference = baseRest_default(function(array, values3) {
    return isArrayLikeObject_default(array) ? baseDifference_default(array, baseFlatten_default(values3, 1, isArrayLikeObject_default, true)) : [];
  });
  var difference_default = difference;

  // react-user-mgmt/node_modules/@rjsf/utils/lib/getChangedFields.js
  function getChangedFields(a2, b2) {
    const aIsPlainObject = isPlainObject_default(a2);
    const bIsPlainObject = isPlainObject_default(b2);
    if (a2 === b2 || !aIsPlainObject && !bIsPlainObject) {
      return [];
    }
    if (aIsPlainObject && !bIsPlainObject) {
      return keys_default(a2);
    } else if (!aIsPlainObject && bIsPlainObject) {
      return keys_default(b2);
    } else {
      const unequalFields = keys_default(pickBy_default(a2, (value, key) => !deepEquals(value, get_default(b2, key))));
      const diffFields = difference_default(keys_default(b2), keys_default(a2));
      return [...unequalFields, ...diffFields];
    }
  }

  // react-user-mgmt/node_modules/@rjsf/utils/lib/enums.js
  var TranslatableString;
  (function(TranslatableString2) {
    TranslatableString2["ArrayItemTitle"] = "Item";
    TranslatableString2["MissingItems"] = "Missing items definition";
    TranslatableString2["YesLabel"] = "Yes";
    TranslatableString2["NoLabel"] = "No";
    TranslatableString2["CloseLabel"] = "Close";
    TranslatableString2["ErrorsLabel"] = "Errors";
    TranslatableString2["NewStringDefault"] = "New Value";
    TranslatableString2["AddButton"] = "Add";
    TranslatableString2["AddItemButton"] = "Add Item";
    TranslatableString2["CopyButton"] = "Copy";
    TranslatableString2["MoveDownButton"] = "Move down";
    TranslatableString2["MoveUpButton"] = "Move up";
    TranslatableString2["RemoveButton"] = "Remove";
    TranslatableString2["NowLabel"] = "Now";
    TranslatableString2["ClearLabel"] = "Clear";
    TranslatableString2["AriaDateLabel"] = "Select a date";
    TranslatableString2["PreviewLabel"] = "Preview";
    TranslatableString2["DecrementAriaLabel"] = "Decrease value by 1";
    TranslatableString2["IncrementAriaLabel"] = "Increase value by 1";
    TranslatableString2["UnknownFieldType"] = "Unknown field type %1";
    TranslatableString2["OptionPrefix"] = "Option %1";
    TranslatableString2["TitleOptionPrefix"] = "%1 option %2";
    TranslatableString2["KeyLabel"] = "%1 Key";
    TranslatableString2["InvalidObjectField"] = 'Invalid "%1" object field configuration: _%2_.';
    TranslatableString2["UnsupportedField"] = "Unsupported field schema.";
    TranslatableString2["UnsupportedFieldWithId"] = "Unsupported field schema for field `%1`.";
    TranslatableString2["UnsupportedFieldWithReason"] = "Unsupported field schema: _%1_.";
    TranslatableString2["UnsupportedFieldWithIdAndReason"] = "Unsupported field schema for field `%1`: _%2_.";
    TranslatableString2["FilesInfo"] = "**%1** (%2, %3 bytes)";
  })(TranslatableString || (TranslatableString = {}));

  // react-user-mgmt/node_modules/lodash-es/forEach.js
  function forEach(collection, iteratee) {
    var func = isArray_default(collection) ? arrayEach_default : baseEach_default;
    return func(collection, castFunction_default(iteratee));
  }
  var forEach_default = forEach;

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/lib/createAjvInstance.js
  var import_ajv = __toESM(require_ajv());
  var import_ajv_formats = __toESM(require_dist());
  var AJV_CONFIG = {
    allErrors: true,
    multipleOfPrecision: 8,
    strict: false,
    verbose: true,
    discriminator: false
    // TODO enable this in V6
  };
  var COLOR_FORMAT_REGEX = /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/;
  var DATA_URL_FORMAT_REGEX = /^data:([a-z]+\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;
  function createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides = {}, ajvFormatOptions, AjvClass = import_ajv.default) {
    const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });
    if (ajvFormatOptions) {
      (0, import_ajv_formats.default)(ajv, ajvFormatOptions);
    } else if (ajvFormatOptions !== false) {
      (0, import_ajv_formats.default)(ajv);
    }
    ajv.addFormat("data-url", DATA_URL_FORMAT_REGEX);
    ajv.addFormat("color", COLOR_FORMAT_REGEX);
    ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);
    ajv.addKeyword(RJSF_ADDITIONAL_PROPERTIES_FLAG);
    if (Array.isArray(additionalMetaSchemas)) {
      ajv.addMetaSchema(additionalMetaSchemas);
    }
    if (isObject_default(customFormats)) {
      Object.keys(customFormats).forEach((formatName) => {
        ajv.addFormat(formatName, customFormats[formatName]);
      });
    }
    return ajv;
  }

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/lib/processRawValidationErrors.js
  function transformRJSFValidationErrors(errors = [], uiSchema) {
    return errors.map((e2) => {
      var _a;
      const { instancePath, keyword, params, schemaPath, parentSchema, ...rest } = e2;
      let { message = "" } = rest;
      let property2 = instancePath.replace(/\//g, ".");
      let stack = `${property2} ${message}`.trim();
      const rawPropertyNames = [
        ...((_a = params.deps) === null || _a === void 0 ? void 0 : _a.split(", ")) || [],
        params.missingProperty,
        params.property
      ].filter((item) => item);
      if (rawPropertyNames.length > 0) {
        rawPropertyNames.forEach((currentProperty) => {
          const path = property2 ? `${property2}.${currentProperty}` : currentProperty;
          let uiSchemaTitle = getUiOptions(get_default(uiSchema, `${path.replace(/^\./, "")}`)).title;
          if (uiSchemaTitle === void 0) {
            const uiSchemaPath = schemaPath.replace(/\/properties\//g, "/").split("/").slice(1, -1).concat([currentProperty]);
            uiSchemaTitle = getUiOptions(get_default(uiSchema, uiSchemaPath)).title;
          }
          if (uiSchemaTitle) {
            message = message.replace(`'${currentProperty}'`, `'${uiSchemaTitle}'`);
          } else {
            const parentSchemaTitle = get_default(parentSchema, [PROPERTIES_KEY, currentProperty, "title"]);
            if (parentSchemaTitle) {
              message = message.replace(`'${currentProperty}'`, `'${parentSchemaTitle}'`);
            }
          }
        });
        stack = message;
      } else {
        const uiSchemaTitle = getUiOptions(get_default(uiSchema, `${property2.replace(/^\./, "")}`)).title;
        if (uiSchemaTitle) {
          stack = `'${uiSchemaTitle}' ${message}`.trim();
        } else {
          const parentSchemaTitle = parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.title;
          if (parentSchemaTitle) {
            stack = `'${parentSchemaTitle}' ${message}`.trim();
          }
        }
      }
      if ("missingProperty" in params) {
        property2 = property2 ? `${property2}.${params.missingProperty}` : params.missingProperty;
      }
      return {
        name: keyword,
        property: property2,
        message,
        params,
        stack,
        schemaPath
      };
    });
  }
  function processRawValidationErrors(validator2, rawErrors, formData, schema, customValidate, transformErrors, uiSchema) {
    const { validationError: invalidSchemaError } = rawErrors;
    let errors = transformRJSFValidationErrors(rawErrors.errors, uiSchema);
    if (invalidSchemaError) {
      errors = [...errors, { stack: invalidSchemaError.message }];
    }
    if (typeof transformErrors === "function") {
      errors = transformErrors(errors, uiSchema);
    }
    let errorSchema = toErrorSchema(errors);
    if (invalidSchemaError) {
      errorSchema = {
        ...errorSchema,
        $schema: {
          __errors: [invalidSchemaError.message]
        }
      };
    }
    if (typeof customValidate !== "function") {
      return { errors, errorSchema };
    }
    const newFormData = getDefaultFormState(validator2, schema, formData, schema, true);
    const errorHandler = customValidate(newFormData, createErrorHandler(newFormData), uiSchema);
    const userErrorSchema = unwrapErrorHandler(errorHandler);
    return validationDataMerge({ errors, errorSchema }, userErrorSchema);
  }

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/lib/validator.js
  var AJV8Validator = class {
    /** Constructs an `AJV8Validator` instance using the `options`
     *
     * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance
     * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
     */
    constructor(options, localizer) {
      const { additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass } = options;
      this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);
      this.localizer = localizer;
    }
    /** Resets the internal AJV validator to clear schemas from it. Can be helpful for resetting the validator for tests.
     */
    reset() {
      this.ajv.removeSchema();
    }
    /** Converts an `errorSchema` into a list of `RJSFValidationErrors`
     *
     * @param errorSchema - The `ErrorSchema` instance to convert
     * @param [fieldPath=[]] - The current field path, defaults to [] if not specified
     * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in
     *        the next major release.
     */
    toErrorList(errorSchema, fieldPath = []) {
      return toErrorList(errorSchema, fieldPath);
    }
    /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use
     * by the playground. Returns the `errors` from the validation
     *
     * @param schema - The schema against which to validate the form data   * @param schema
     * @param formData - The form data to validate
     */
    rawValidation(schema, formData) {
      var _a, _b;
      let compilationError = void 0;
      let compiledValidator;
      if (schema[ID_KEY]) {
        compiledValidator = this.ajv.getSchema(schema[ID_KEY]);
      }
      try {
        if (compiledValidator === void 0) {
          compiledValidator = this.ajv.compile(schema);
        }
        compiledValidator(formData);
      } catch (err) {
        compilationError = err;
      }
      let errors;
      if (compiledValidator) {
        if (typeof this.localizer === "function") {
          ((_a = compiledValidator.errors) !== null && _a !== void 0 ? _a : []).forEach((error) => {
            var _a2;
            ["missingProperty", "property"].forEach((key) => {
              var _a3;
              if ((_a3 = error.params) === null || _a3 === void 0 ? void 0 : _a3[key]) {
                error.params[key] = `'${error.params[key]}'`;
              }
            });
            if ((_a2 = error.params) === null || _a2 === void 0 ? void 0 : _a2.deps) {
              error.params.deps = error.params.deps.split(", ").map((v2) => `'${v2}'`).join(", ");
            }
          });
          this.localizer(compiledValidator.errors);
          ((_b = compiledValidator.errors) !== null && _b !== void 0 ? _b : []).forEach((error) => {
            var _a2;
            ["missingProperty", "property"].forEach((key) => {
              var _a3;
              if ((_a3 = error.params) === null || _a3 === void 0 ? void 0 : _a3[key]) {
                error.params[key] = error.params[key].slice(1, -1);
              }
            });
            if ((_a2 = error.params) === null || _a2 === void 0 ? void 0 : _a2.deps) {
              error.params.deps = error.params.deps.split(", ").map((v2) => v2.slice(1, -1)).join(", ");
            }
          });
        }
        errors = compiledValidator.errors || void 0;
        compiledValidator.errors = null;
      }
      return {
        errors,
        validationError: compilationError
      };
    }
    /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives
     * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also
     * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and
     * transform them in what ever way it chooses.
     *
     * @param formData - The form data to validate
     * @param schema - The schema against which to validate the form data
     * @param [customValidate] - An optional function that is used to perform custom validation
     * @param [transformErrors] - An optional function that is used to transform errors after AJV validation
     * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`
     */
    validateFormData(formData, schema, customValidate, transformErrors, uiSchema) {
      const rawErrors = this.rawValidation(schema, formData);
      return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);
    }
    /**
     * This function checks if a schema needs to be added and if the root schemas don't match it removes the old root schema from the ajv instance and adds the new one.
     * @param rootSchema - The root schema used to provide $ref resolutions
     */
    handleSchemaUpdate(rootSchema) {
      var _a, _b;
      const rootSchemaId = (_a = rootSchema[ID_KEY]) !== null && _a !== void 0 ? _a : ROOT_SCHEMA_PREFIX;
      if (this.ajv.getSchema(rootSchemaId) === void 0) {
        this.ajv.addSchema(rootSchema, rootSchemaId);
      } else if (!deepEquals(rootSchema, (_b = this.ajv.getSchema(rootSchemaId)) === null || _b === void 0 ? void 0 : _b.schema)) {
        this.ajv.removeSchema(rootSchemaId);
        this.ajv.addSchema(rootSchema, rootSchemaId);
      }
    }
    /** Validates data against a schema, returning true if the data is valid, or
     * false otherwise. If the schema is invalid, then this function will return
     * false.
     *
     * @param schema - The schema against which to validate the form data
     * @param formData - The form data to validate
     * @param rootSchema - The root schema used to provide $ref resolutions
     */
    isValid(schema, formData, rootSchema) {
      var _a;
      try {
        this.handleSchemaUpdate(rootSchema);
        const schemaWithIdRefPrefix = withIdRefPrefix(schema);
        const schemaId = (_a = schemaWithIdRefPrefix[ID_KEY]) !== null && _a !== void 0 ? _a : hashForSchema(schemaWithIdRefPrefix);
        let compiledValidator;
        compiledValidator = this.ajv.getSchema(schemaId);
        if (compiledValidator === void 0) {
          compiledValidator = this.ajv.addSchema(schemaWithIdRefPrefix, schemaId).getSchema(schemaId) || this.ajv.compile(schemaWithIdRefPrefix);
        }
        const result = compiledValidator(formData);
        return result;
      } catch (e2) {
        console.warn("Error encountered compiling schema:", e2);
        return false;
      }
    }
  };

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/lib/customizeValidator.js
  function customizeValidator(options = {}, localizer) {
    return new AJV8Validator(options, localizer);
  }

  // react-user-mgmt/node_modules/@rjsf/validator-ajv8/lib/index.js
  var lib_default = customizeValidator();

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/Form.js
  var import_jsx_runtime143 = __toESM(require_jsx_runtime());
  var import_react30 = __toESM(require_react());

  // react-user-mgmt/node_modules/lodash-es/_basePick.js
  function basePick(object, paths) {
    return basePickBy_default(object, paths, function(value, path) {
      return hasIn_default(object, path);
    });
  }
  var basePick_default = basePick;

  // react-user-mgmt/node_modules/lodash-es/pick.js
  var pick = flatRest_default(function(object, paths) {
    return object == null ? {} : basePick_default(object, paths);
  });
  var pick_default = pick;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/ArrayField.js
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var import_react14 = __toESM(require_react());

  // react-user-mgmt/node_modules/nanoid/index.browser.js
  var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += "-";
    } else {
      id += "_";
    }
    return id;
  }, "");

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/ArrayField.js
  function generateRowId() {
    return nanoid();
  }
  function generateKeyedFormData(formData) {
    return !Array.isArray(formData) ? [] : formData.map((item) => {
      return {
        key: generateRowId(),
        item
      };
    });
  }
  function keyedToPlainFormData(keyedFormData) {
    if (Array.isArray(keyedFormData)) {
      return keyedFormData.map((keyedItem) => keyedItem.item);
    }
    return [];
  }
  var ArrayField = class extends import_react14.Component {
    /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`
     *
     * @param props - The `FieldProps` for this template
     */
    constructor(props) {
      super(props);
      /** Returns the default form information for an item based on the schema for that item. Deals with the possibility
       * that the schema is fixed and allows additional items.
       */
      __publicField(this, "_getNewFormDataRow", () => {
        const { schema, registry } = this.props;
        const { schemaUtils } = registry;
        let itemSchema = schema.items;
        if (isFixedItems(schema) && allowAdditionalItems(schema)) {
          itemSchema = schema.additionalItems;
        }
        return schemaUtils.getDefaultFormState(itemSchema);
      });
      /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of
       * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the
       * keyed data
       *
       * @param event - The event for the click
       */
      __publicField(this, "onAddClick", (event) => {
        this._handleAddClick(event);
      });
      /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of
       * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain
       * form data converted from the keyed data
       *
       * @param index - The index at which the add button is clicked
       */
      __publicField(this, "onAddIndexClick", (index) => {
        return (event) => {
          this._handleAddClick(event, index);
        };
      });
      /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of
       * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain
       * form data converted from the keyed data
       *
       * @param index - The index at which the copy button is clicked
       */
      __publicField(this, "onCopyIndexClick", (index) => {
        return (event) => {
          if (event) {
            event.preventDefault();
          }
          const { onChange, errorSchema } = this.props;
          const { keyedFormData } = this.state;
          let newErrorSchema;
          if (errorSchema) {
            newErrorSchema = {};
            for (const idx in errorSchema) {
              const i2 = parseInt(idx);
              if (i2 <= index) {
                set_default(newErrorSchema, [i2], errorSchema[idx]);
              } else if (i2 > index) {
                set_default(newErrorSchema, [i2 + 1], errorSchema[idx]);
              }
            }
          }
          const newKeyedFormDataRow = {
            key: generateRowId(),
            item: cloneDeep_default(keyedFormData[index].item)
          };
          const newKeyedFormData = [...keyedFormData];
          if (index !== void 0) {
            newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);
          } else {
            newKeyedFormData.push(newKeyedFormDataRow);
          }
          this.setState({
            keyedFormData: newKeyedFormData,
            updatedKeyedFormData: true
          }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));
        };
      });
      /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of
       * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted
       * from the keyed data
       *
       * @param index - The index at which the remove button is clicked
       */
      __publicField(this, "onDropIndexClick", (index) => {
        return (event) => {
          if (event) {
            event.preventDefault();
          }
          const { onChange, errorSchema } = this.props;
          const { keyedFormData } = this.state;
          let newErrorSchema;
          if (errorSchema) {
            newErrorSchema = {};
            for (const idx in errorSchema) {
              const i2 = parseInt(idx);
              if (i2 < index) {
                set_default(newErrorSchema, [i2], errorSchema[idx]);
              } else if (i2 > index) {
                set_default(newErrorSchema, [i2 - 1], errorSchema[idx]);
              }
            }
          }
          const newKeyedFormData = keyedFormData.filter((_2, i2) => i2 !== index);
          this.setState({
            keyedFormData: newKeyedFormData,
            updatedKeyedFormData: true
          }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));
        };
      });
      /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the
       * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the
       * plain form data converted from the keyed data
       *
       * @param index - The index of the item to move
       * @param newIndex - The index to where the item is to be moved
       */
      __publicField(this, "onReorderClick", (index, newIndex) => {
        return (event) => {
          if (event) {
            event.preventDefault();
            event.currentTarget.blur();
          }
          const { onChange, errorSchema } = this.props;
          let newErrorSchema;
          if (errorSchema) {
            newErrorSchema = {};
            for (const idx in errorSchema) {
              const i2 = parseInt(idx);
              if (i2 == index) {
                set_default(newErrorSchema, [newIndex], errorSchema[index]);
              } else if (i2 == newIndex) {
                set_default(newErrorSchema, [index], errorSchema[newIndex]);
              } else {
                set_default(newErrorSchema, [idx], errorSchema[i2]);
              }
            }
          }
          const { keyedFormData } = this.state;
          function reOrderArray() {
            const _newKeyedFormData = keyedFormData.slice();
            _newKeyedFormData.splice(index, 1);
            _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);
            return _newKeyedFormData;
          }
          const newKeyedFormData = reOrderArray();
          this.setState({
            keyedFormData: newKeyedFormData
          }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));
        };
      });
      /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the
       * `onChange` callback with the updated form data
       *
       * @param index - The index of the item being changed
       */
      __publicField(this, "onChangeForIndex", (index) => {
        return (value, newErrorSchema, id) => {
          const { formData, onChange, errorSchema } = this.props;
          const arrayData = Array.isArray(formData) ? formData : [];
          const newFormData = arrayData.map((item, i2) => {
            const jsonValue = typeof value === "undefined" ? null : value;
            return index === i2 ? jsonValue : item;
          });
          onChange(newFormData, errorSchema && errorSchema && {
            ...errorSchema,
            [index]: newErrorSchema
          }, id);
        };
      });
      /** Callback handler used to change the value for a checkbox */
      __publicField(this, "onSelectChange", (value) => {
        const { onChange, idSchema } = this.props;
        onChange(value, void 0, idSchema && idSchema.$id);
      });
      const { formData = [] } = props;
      const keyedFormData = generateKeyedFormData(formData);
      this.state = {
        keyedFormData,
        updatedKeyedFormData: false
      };
    }
    /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It
     * regenerates the keyed form data and returns it
     *
     * @param nextProps - The next set of props data
     * @param prevState - The previous set of state data
     */
    static getDerivedStateFromProps(nextProps, prevState) {
      if (prevState.updatedKeyedFormData) {
        return {
          updatedKeyedFormData: false
        };
      }
      const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];
      const previousKeyedFormData = prevState.keyedFormData || [];
      const newKeyedFormData = nextFormData.length === previousKeyedFormData.length ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {
        return {
          key: previousKeyedFormDatum.key,
          item: nextFormData[index]
        };
      }) : generateKeyedFormData(nextFormData);
      return {
        keyedFormData: newKeyedFormData
      };
    }
    /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to
     * the description from the schema.items, and finally the string "Item"
     */
    get itemTitle() {
      const { schema, registry } = this.props;
      const { translateString } = registry;
      return get_default(schema, [ITEMS_KEY, "title"], get_default(schema, [ITEMS_KEY, "description"], translateString(TranslatableString.ArrayItemTitle)));
    }
    /** Determines whether the item described in the schema is always required, which is determined by whether any item
     * may be null.
     *
     * @param itemSchema - The schema for the item
     * @return - True if the item schema type does not contain the "null" type
     */
    isItemRequired(itemSchema) {
      if (Array.isArray(itemSchema.type)) {
        return !itemSchema.type.includes("null");
      }
      return itemSchema.type !== "null";
    }
    /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding
     * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the
     * `formData` matches that value, then false is returned, otherwise true is returned.
     *
     * @param formItems - The list of items in the form
     * @returns - True if the item is addable otherwise false
     */
    canAddItem(formItems) {
      const { schema, uiSchema, registry } = this.props;
      let { addable } = getUiOptions(uiSchema, registry.globalUiOptions);
      if (addable !== false) {
        if (schema.maxItems !== void 0) {
          addable = formItems.length < schema.maxItems;
        } else {
          addable = true;
        }
      }
      return addable;
    }
    /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data
     * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into
     * the state, and then returning `onChange()` with the plain form data converted from the keyed data
     *
     * @param event - The event for the click
     * @param [index] - The optional index at which to add the new data
     */
    _handleAddClick(event, index) {
      if (event) {
        event.preventDefault();
      }
      const { onChange, errorSchema } = this.props;
      const { keyedFormData } = this.state;
      let newErrorSchema;
      if (errorSchema) {
        newErrorSchema = {};
        for (const idx in errorSchema) {
          const i2 = parseInt(idx);
          if (index === void 0 || i2 < index) {
            set_default(newErrorSchema, [i2], errorSchema[idx]);
          } else if (i2 >= index) {
            set_default(newErrorSchema, [i2 + 1], errorSchema[idx]);
          }
        }
      }
      const newKeyedFormDataRow = {
        key: generateRowId(),
        item: this._getNewFormDataRow()
      };
      const newKeyedFormData = [...keyedFormData];
      if (index !== void 0) {
        newKeyedFormData.splice(index, 0, newKeyedFormDataRow);
      } else {
        newKeyedFormData.push(newKeyedFormDataRow);
      }
      this.setState({
        keyedFormData: newKeyedFormData,
        updatedKeyedFormData: true
      }, () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema));
    }
    /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements
     */
    render() {
      const { schema, uiSchema, idSchema, registry } = this.props;
      const { schemaUtils, translateString } = registry;
      if (!(ITEMS_KEY in schema)) {
        const uiOptions = getUiOptions(uiSchema);
        const UnsupportedFieldTemplate = getTemplate("UnsupportedFieldTemplate", registry, uiOptions);
        return (0, import_jsx_runtime99.jsx)(UnsupportedFieldTemplate, { schema, idSchema, reason: translateString(TranslatableString.MissingItems), registry });
      }
      if (schemaUtils.isMultiSelect(schema)) {
        return this.renderMultiSelect();
      }
      if (isCustomWidget(uiSchema)) {
        return this.renderCustomWidget();
      }
      if (isFixedItems(schema)) {
        return this.renderFixedArray();
      }
      if (schemaUtils.isFilesArray(schema, uiSchema)) {
        return this.renderFiles();
      }
      return this.renderNormalArray();
    }
    /** Renders a normal array without any limitations of length
     */
    renderNormalArray() {
      const { schema, uiSchema = {}, errorSchema, idSchema, name, title, disabled = false, readonly = false, autofocus = false, required = false, registry, onBlur, onFocus, idPrefix, idSeparator = "_", rawErrors } = this.props;
      const { keyedFormData } = this.state;
      const fieldTitle = schema.title || title || name;
      const { schemaUtils, formContext } = registry;
      const uiOptions = getUiOptions(uiSchema);
      const _schemaItems = isObject_default(schema.items) ? schema.items : {};
      const itemsSchema = schemaUtils.retrieveSchema(_schemaItems);
      const formData = keyedToPlainFormData(this.state.keyedFormData);
      const canAdd = this.canAddItem(formData);
      const arrayProps = {
        canAdd,
        items: keyedFormData.map((keyedItem, index) => {
          const { key, item } = keyedItem;
          const itemCast = item;
          const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);
          const itemErrorSchema = errorSchema ? errorSchema[index] : void 0;
          const itemIdPrefix = idSchema.$id + idSeparator + index;
          const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);
          return this.renderArrayFieldItem({
            key,
            index,
            name: name && `${name}-${index}`,
            title: fieldTitle ? `${fieldTitle}-${index + 1}` : void 0,
            canAdd,
            canMoveUp: index > 0,
            canMoveDown: index < formData.length - 1,
            itemSchema,
            itemIdSchema,
            itemErrorSchema,
            itemData: itemCast,
            itemUiSchema: uiSchema.items,
            autofocus: autofocus && index === 0,
            onBlur,
            onFocus,
            rawErrors,
            totalItems: keyedFormData.length
          });
        }),
        className: `field field-array field-array-of-${itemsSchema.type}`,
        disabled,
        idSchema,
        uiSchema,
        onAddClick: this.onAddClick,
        readonly,
        required,
        schema,
        title: fieldTitle,
        formContext,
        formData,
        rawErrors,
        registry
      };
      const Template = getTemplate("ArrayFieldTemplate", registry, uiOptions);
      return (0, import_jsx_runtime99.jsx)(Template, { ...arrayProps });
    }
    /** Renders an array using the custom widget provided by the user in the `uiSchema`
     */
    renderCustomWidget() {
      const { schema, idSchema, uiSchema, disabled = false, readonly = false, autofocus = false, required = false, hideError, placeholder, onBlur, onFocus, formData: items = [], registry, rawErrors, name } = this.props;
      const { widgets: widgets2, formContext, globalUiOptions, schemaUtils } = registry;
      const { widget, title: uiTitle, ...options } = getUiOptions(uiSchema, globalUiOptions);
      const Widget = getWidget(schema, widget, widgets2);
      const label = uiTitle ?? schema.title ?? name;
      const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
      return (0, import_jsx_runtime99.jsx)(Widget, { id: idSchema.$id, name, multiple: true, onChange: this.onSelectChange, onBlur, onFocus, options, schema, uiSchema, registry, value: items, disabled, readonly, hideError, required, label, hideLabel: !displayLabel, placeholder, formContext, autofocus, rawErrors });
    }
    /** Renders an array as a set of checkboxes
     */
    renderMultiSelect() {
      const { schema, idSchema, uiSchema, formData: items = [], disabled = false, readonly = false, autofocus = false, required = false, placeholder, onBlur, onFocus, registry, rawErrors, name } = this.props;
      const { widgets: widgets2, schemaUtils, formContext, globalUiOptions } = registry;
      const itemsSchema = schemaUtils.retrieveSchema(schema.items, items);
      const enumOptions = optionsList(itemsSchema, uiSchema);
      const { widget = "select", title: uiTitle, ...options } = getUiOptions(uiSchema, globalUiOptions);
      const Widget = getWidget(schema, widget, widgets2);
      const label = uiTitle ?? schema.title ?? name;
      const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
      return (0, import_jsx_runtime99.jsx)(Widget, { id: idSchema.$id, name, multiple: true, onChange: this.onSelectChange, onBlur, onFocus, options: { ...options, enumOptions }, schema, uiSchema, registry, value: items, disabled, readonly, required, label, hideLabel: !displayLabel, placeholder, formContext, autofocus, rawErrors });
    }
    /** Renders an array of files using the `FileWidget`
     */
    renderFiles() {
      const { schema, uiSchema, idSchema, name, disabled = false, readonly = false, autofocus = false, required = false, onBlur, onFocus, registry, formData: items = [], rawErrors } = this.props;
      const { widgets: widgets2, formContext, globalUiOptions, schemaUtils } = registry;
      const { widget = "files", title: uiTitle, ...options } = getUiOptions(uiSchema, globalUiOptions);
      const Widget = getWidget(schema, widget, widgets2);
      const label = uiTitle ?? schema.title ?? name;
      const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
      return (0, import_jsx_runtime99.jsx)(Widget, { options, id: idSchema.$id, name, multiple: true, onChange: this.onSelectChange, onBlur, onFocus, schema, uiSchema, value: items, disabled, readonly, required, registry, formContext, autofocus, rawErrors, label, hideLabel: !displayLabel });
    }
    /** Renders an array that has a maximum limit of items
     */
    renderFixedArray() {
      const { schema, uiSchema = {}, formData = [], errorSchema, idPrefix, idSeparator = "_", idSchema, name, title, disabled = false, readonly = false, autofocus = false, required = false, registry, onBlur, onFocus, rawErrors } = this.props;
      const { keyedFormData } = this.state;
      let { formData: items = [] } = this.props;
      const fieldTitle = schema.title || title || name;
      const uiOptions = getUiOptions(uiSchema);
      const { schemaUtils, formContext } = registry;
      const _schemaItems = isObject_default(schema.items) ? schema.items : [];
      const itemSchemas = _schemaItems.map((item, index) => schemaUtils.retrieveSchema(item, formData[index]));
      const additionalSchema = isObject_default(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, formData) : null;
      if (!items || items.length < itemSchemas.length) {
        items = items || [];
        items = items.concat(new Array(itemSchemas.length - items.length));
      }
      const canAdd = this.canAddItem(items) && !!additionalSchema;
      const arrayProps = {
        canAdd,
        className: "field field-array field-array-fixed-items",
        disabled,
        idSchema,
        formData,
        items: keyedFormData.map((keyedItem, index) => {
          const { key, item } = keyedItem;
          const itemCast = item;
          const additional = index >= itemSchemas.length;
          const itemSchema = (additional && isObject_default(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast) : itemSchemas[index]) || {};
          const itemIdPrefix = idSchema.$id + idSeparator + index;
          const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);
          const itemUiSchema = additional ? uiSchema.additionalItems || {} : Array.isArray(uiSchema.items) ? uiSchema.items[index] : uiSchema.items || {};
          const itemErrorSchema = errorSchema ? errorSchema[index] : void 0;
          return this.renderArrayFieldItem({
            key,
            index,
            name: name && `${name}-${index}`,
            title: fieldTitle ? `${fieldTitle}-${index + 1}` : void 0,
            canAdd,
            canRemove: additional,
            canMoveUp: index >= itemSchemas.length + 1,
            canMoveDown: additional && index < items.length - 1,
            itemSchema,
            itemData: itemCast,
            itemUiSchema,
            itemIdSchema,
            itemErrorSchema,
            autofocus: autofocus && index === 0,
            onBlur,
            onFocus,
            rawErrors,
            totalItems: keyedFormData.length
          });
        }),
        onAddClick: this.onAddClick,
        readonly,
        required,
        registry,
        schema,
        uiSchema,
        title: fieldTitle,
        formContext,
        errorSchema,
        rawErrors
      };
      const Template = getTemplate("ArrayFieldTemplate", registry, uiOptions);
      return (0, import_jsx_runtime99.jsx)(Template, { ...arrayProps });
    }
    /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send
     * back to the `ArrayFieldItemTemplate`.
     *
     * @param props - The props for the individual array item to be rendered
     */
    renderArrayFieldItem(props) {
      const { key, index, name, canAdd, canRemove = true, canMoveUp, canMoveDown, itemSchema, itemData, itemUiSchema, itemIdSchema, itemErrorSchema, autofocus, onBlur, onFocus, rawErrors, totalItems, title } = props;
      const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;
      const { fields: { ArraySchemaField, SchemaField: SchemaField2 }, globalUiOptions } = registry;
      const ItemSchemaField = ArraySchemaField || SchemaField2;
      const { orderable = true, removable = true, copyable = false } = getUiOptions(uiSchema, globalUiOptions);
      const has2 = {
        moveUp: orderable && canMoveUp,
        moveDown: orderable && canMoveDown,
        copy: copyable && canAdd,
        remove: removable && canRemove,
        toolbar: false
      };
      has2.toolbar = Object.keys(has2).some((key2) => has2[key2]);
      return {
        children: (0, import_jsx_runtime99.jsx)(ItemSchemaField, { name, title, index, schema: itemSchema, uiSchema: itemUiSchema, formData: itemData, formContext, errorSchema: itemErrorSchema, idPrefix, idSeparator, idSchema: itemIdSchema, required: this.isItemRequired(itemSchema), onChange: this.onChangeForIndex(index), onBlur, onFocus, registry, disabled, readonly, hideError, autofocus, rawErrors }),
        className: "array-item",
        disabled,
        canAdd,
        hasCopy: has2.copy,
        hasToolbar: has2.toolbar,
        hasMoveUp: has2.moveUp,
        hasMoveDown: has2.moveDown,
        hasRemove: has2.remove,
        index,
        totalItems,
        key,
        onAddIndexClick: this.onAddIndexClick,
        onCopyIndexClick: this.onCopyIndexClick,
        onDropIndexClick: this.onDropIndexClick,
        onReorderClick: this.onReorderClick,
        readonly,
        registry,
        schema: itemSchema,
        uiSchema: itemUiSchema
      };
    }
  };
  var ArrayField_default = ArrayField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/BooleanField.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  function BooleanField(props) {
    const { schema, name, uiSchema, idSchema, formData, registry, required, disabled, readonly, hideError, autofocus, title, onChange, onFocus, onBlur, rawErrors } = props;
    const { title: schemaTitle } = schema;
    const { widgets: widgets2, formContext, translateString, globalUiOptions } = registry;
    const {
      widget = "checkbox",
      title: uiTitle,
      // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type
      label: displayLabel = true,
      ...options
    } = getUiOptions(uiSchema, globalUiOptions);
    const Widget = getWidget(schema, widget, widgets2);
    const yes = translateString(TranslatableString.YesLabel);
    const no = translateString(TranslatableString.NoLabel);
    let enumOptions;
    const label = uiTitle ?? schemaTitle ?? title ?? name;
    if (Array.isArray(schema.oneOf)) {
      enumOptions = optionsList({
        oneOf: schema.oneOf.map((option) => {
          if (isObject_default(option)) {
            return {
              ...option,
              title: option.title || (option.const === true ? yes : no)
            };
          }
          return void 0;
        }).filter((o2) => o2)
        // cast away the error that typescript can't grok is fixed
      }, uiSchema);
    } else {
      const schemaWithEnumNames = schema;
      const enums = schema.enum ?? [true, false];
      if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v2) => typeof v2 === "boolean")) {
        enumOptions = [
          {
            value: enums[0],
            label: enums[0] ? yes : no
          },
          {
            value: enums[1],
            label: enums[1] ? yes : no
          }
        ];
      } else {
        enumOptions = optionsList({
          enum: enums,
          // NOTE: enumNames is deprecated, but still supported for now.
          enumNames: schemaWithEnumNames.enumNames
        }, uiSchema);
      }
    }
    return (0, import_jsx_runtime100.jsx)(Widget, { options: { ...options, enumOptions }, schema, uiSchema, id: idSchema.$id, name, onChange, onFocus, onBlur, label, hideLabel: !displayLabel, value: formData, required, disabled, readonly, hideError, registry, formContext, autofocus, rawErrors });
  }
  var BooleanField_default = BooleanField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/MultiSchemaField.js
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  var import_react15 = __toESM(require_react());
  var AnyOfField = class extends import_react15.Component {
    /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state
     *
     * @param props - The `FieldProps` for this template
     */
    constructor(props) {
      super(props);
      /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated
       * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to
       * the `onChange` handler.
       *
       * @param option - The new option value being selected
       */
      __publicField(this, "onOptionChange", (option) => {
        const { selectedOption, retrievedOptions } = this.state;
        const { formData, onChange, registry } = this.props;
        const { schemaUtils } = registry;
        const intOption = option !== void 0 ? parseInt(option, 10) : -1;
        if (intOption === selectedOption) {
          return;
        }
        const newOption = intOption >= 0 ? retrievedOptions[intOption] : void 0;
        const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : void 0;
        let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);
        if (newOption) {
          newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, "excludeObjectChildren");
        }
        this.setState({ selectedOption: intOption }, () => {
          onChange(newFormData, void 0, this.getFieldId());
        });
      });
      const { formData, options, registry: { schemaUtils } } = this.props;
      const retrievedOptions = options.map((opt) => schemaUtils.retrieveSchema(opt, formData));
      this.state = {
        retrievedOptions,
        selectedOption: this.getMatchingOption(0, formData, retrievedOptions)
      };
    }
    /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the
     * currently selected option based on the overall `formData`
     *
     * @param prevProps - The previous `FieldProps` for this template
     * @param prevState - The previous `AnyOfFieldState` for this template
     */
    componentDidUpdate(prevProps, prevState) {
      const { formData, options, idSchema } = this.props;
      const { selectedOption } = this.state;
      let newState = this.state;
      if (!deepEquals(prevProps.options, options)) {
        const { registry: { schemaUtils } } = this.props;
        const retrievedOptions = options.map((opt) => schemaUtils.retrieveSchema(opt, formData));
        newState = { selectedOption, retrievedOptions };
      }
      if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {
        const { retrievedOptions } = newState;
        const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);
        if (prevState && matchingOption !== selectedOption) {
          newState = { selectedOption: matchingOption, retrievedOptions };
        }
      }
      if (newState !== this.state) {
        this.setState(newState);
      }
    }
    /** Determines the best matching option for the given `formData` and `options`.
     *
     * @param formData - The new formData
     * @param options - The list of options to choose from
     * @return - The index of the `option` that best matches the `formData`
     */
    getMatchingOption(selectedOption, formData, options) {
      const { schema, registry: { schemaUtils } } = this.props;
      const discriminator = getDiscriminatorFieldFromSchema(schema);
      const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);
      return option;
    }
    getFieldId() {
      const { idSchema, schema } = this.props;
      return `${idSchema.$id}${schema.oneOf ? "__oneof_select" : "__anyof_select"}`;
    }
    /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`
     */
    render() {
      const { name, disabled = false, errorSchema = {}, formContext, onBlur, onFocus, readonly, registry, schema, uiSchema } = this.props;
      const { widgets: widgets2, fields: fields2, translateString, globalUiOptions, schemaUtils } = registry;
      const { SchemaField: _SchemaField } = fields2;
      const { selectedOption, retrievedOptions } = this.state;
      const { widget = "select", placeholder, autofocus, autocomplete, title = schema.title, ...uiOptions } = getUiOptions(uiSchema, globalUiOptions);
      const Widget = getWidget({ type: "number" }, widget, widgets2);
      const rawErrors = get_default(errorSchema, ERRORS_KEY, []);
      const fieldErrorSchema = omit_default(errorSchema, [ERRORS_KEY]);
      const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
      const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;
      let optionSchema;
      if (option) {
        const { required } = schema;
        optionSchema = required ? mergeSchemas({ required }, option) : option;
      }
      let optionsUiSchema = [];
      if (ONE_OF_KEY in schema && uiSchema && ONE_OF_KEY in uiSchema) {
        if (Array.isArray(uiSchema[ONE_OF_KEY])) {
          optionsUiSchema = uiSchema[ONE_OF_KEY];
        } else {
          console.warn(`uiSchema.oneOf is not an array for "${title || name}"`);
        }
      } else if (ANY_OF_KEY in schema && uiSchema && ANY_OF_KEY in uiSchema) {
        if (Array.isArray(uiSchema[ANY_OF_KEY])) {
          optionsUiSchema = uiSchema[ANY_OF_KEY];
        } else {
          console.warn(`uiSchema.anyOf is not an array for "${title || name}"`);
        }
      }
      let optionUiSchema = uiSchema;
      if (selectedOption >= 0 && optionsUiSchema.length > selectedOption) {
        optionUiSchema = optionsUiSchema[selectedOption];
      }
      const translateEnum = title ? TranslatableString.TitleOptionPrefix : TranslatableString.OptionPrefix;
      const translateParams = title ? [title] : [];
      const enumOptions = retrievedOptions.map((opt, index) => {
        const { title: uiTitle = opt.title } = getUiOptions(optionsUiSchema[index]);
        return {
          label: uiTitle || translateString(translateEnum, translateParams.concat(String(index + 1))),
          value: index
        };
      });
      return (0, import_jsx_runtime101.jsxs)("div", { className: "panel panel-default panel-body", children: [(0, import_jsx_runtime101.jsx)("div", { className: "form-group", children: (0, import_jsx_runtime101.jsx)(Widget, { id: this.getFieldId(), name: `${name}${schema.oneOf ? "__oneof_select" : "__anyof_select"}`, schema: { type: "number", default: 0 }, onChange: this.onOptionChange, onBlur, onFocus, disabled: disabled || isEmpty_default(enumOptions), multiple: false, rawErrors, errorSchema: fieldErrorSchema, value: selectedOption >= 0 ? selectedOption : void 0, options: { enumOptions, ...uiOptions }, registry, formContext, placeholder, autocomplete, autofocus, label: title ?? name, hideLabel: !displayLabel, readonly }) }), optionSchema && (0, import_jsx_runtime101.jsx)(_SchemaField, { ...this.props, schema: optionSchema, uiSchema: optionUiSchema })] });
    }
  };
  var MultiSchemaField_default = AnyOfField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/NumberField.js
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var import_react16 = __toESM(require_react());
  var trailingCharMatcherWithPrefix = /\.([0-9]*0)*$/;
  var trailingCharMatcher = /[0.]0*$/;
  function NumberField(props) {
    const { registry, onChange, formData, value: initialValue } = props;
    const [lastValue, setLastValue] = (0, import_react16.useState)(initialValue);
    const { StringField: StringField2 } = registry.fields;
    let value = formData;
    const handleChange = (0, import_react16.useCallback)((value2, errorSchema, id) => {
      setLastValue(value2);
      if (`${value2}`.charAt(0) === ".") {
        value2 = `0${value2}`;
      }
      const processed = typeof value2 === "string" && value2.match(trailingCharMatcherWithPrefix) ? asNumber(value2.replace(trailingCharMatcher, "")) : asNumber(value2);
      onChange(processed, errorSchema, id);
    }, [onChange]);
    if (typeof lastValue === "string" && typeof value === "number") {
      const re2 = new RegExp(`^(${String(value).replace(".", "\\.")})?\\.?0*$`);
      if (lastValue.match(re2)) {
        value = lastValue;
      }
    }
    return (0, import_jsx_runtime102.jsx)(StringField2, { ...props, formData: value, onChange: handleChange });
  }
  var NumberField_default = NumberField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/ObjectField.js
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var import_react17 = __toESM(require_react());

  // react-user-mgmt/node_modules/markdown-to-jsx/dist/index.modern.js
  var e = __toESM(require_react(), 1);
  function t() {
    return t = Object.assign ? Object.assign.bind() : function(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var n2 = arguments[t2];
        for (var r3 in n2) Object.prototype.hasOwnProperty.call(n2, r3) && (e2[r3] = n2[r3]);
      }
      return e2;
    }, t.apply(this, arguments);
  }
  var n = ["children", "options"];
  var r2 = { blockQuote: "0", breakLine: "1", breakThematic: "2", codeBlock: "3", codeFenced: "4", codeInline: "5", footnote: "6", footnoteReference: "7", gfmTask: "8", heading: "9", headingSetext: "10", htmlBlock: "11", htmlComment: "12", htmlSelfClosing: "13", image: "14", link: "15", linkAngleBraceStyleDetector: "16", linkBareUrlDetector: "17", linkMailtoDetector: "18", newlineCoalescer: "19", orderedList: "20", paragraph: "21", ref: "22", refImage: "23", refLink: "24", table: "25", tableSeparator: "26", text: "27", textBolded: "28", textEmphasized: "29", textEscaped: "30", textMarked: "31", textStrikethroughed: "32", unorderedList: "33" };
  var i;
  !function(e2) {
    e2[e2.MAX = 0] = "MAX", e2[e2.HIGH = 1] = "HIGH", e2[e2.MED = 2] = "MED", e2[e2.LOW = 3] = "LOW", e2[e2.MIN = 4] = "MIN";
  }(i || (i = {}));
  var l = ["allowFullScreen", "allowTransparency", "autoComplete", "autoFocus", "autoPlay", "cellPadding", "cellSpacing", "charSet", "classId", "colSpan", "contentEditable", "contextMenu", "crossOrigin", "encType", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "hrefLang", "inputMode", "keyParams", "keyType", "marginHeight", "marginWidth", "maxLength", "mediaGroup", "minLength", "noValidate", "radioGroup", "readOnly", "rowSpan", "spellCheck", "srcDoc", "srcLang", "srcSet", "tabIndex", "useMap"].reduce((e2, t2) => (e2[t2.toLowerCase()] = t2, e2), { class: "className", for: "htmlFor" });
  var a = { amp: "&", apos: "'", gt: ">", lt: "<", nbsp: "\xA0", quot: "\u201C" };
  var o = ["style", "script"];
  var c = /([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi;
  var s = /mailto:/i;
  var d = /\n{2,}$/;
  var u = /^(\s*>[\s\S]*?)(?=\n\n|$)/;
  var p = /^ *> ?/gm;
  var f = /^(?:\[!([^\]]*)\]\n)?([\s\S]*)/;
  var h = /^ {2,}\n/;
  var m = /^(?:( *[-*_])){3,} *(?:\n *)+\n/;
  var g = /^(?: {1,3})?(`{3,}|~{3,}) *(\S+)? *([^\n]*?)?\n([\s\S]*?)(?:\1\n?|$)/;
  var y = /^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/;
  var k = /^(`+)((?:\\`|[^`])+)\1/;
  var x = /^(?:\n *)*\n/;
  var b = /\r\n?/g;
  var v = /^\[\^([^\]]+)](:(.*)((\n+ {4,}.*)|(\n(?!\[\^).+))*)/;
  var C = /^\[\^([^\]]+)]/;
  var $ = /\f/g;
  var S = /^---[ \t]*\n(.|\n)*\n---[ \t]*\n/;
  var w = /^\s*?\[(x|\s)\]/;
  var E = /^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/;
  var z = /^ *(#{1,6}) +([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/;
  var L = /^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/;
  var A = /^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1\b)[\s\S])*?)<\/\1>(?!<\/\1>)\n*/i;
  var T = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi;
  var B = /^<!--[\s\S]*?(?:-->)/;
  var O = /^(data|aria|x)-[a-z_][a-z\d_.-]*$/;
  var M = /^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i;
  var R = /^\{.*\}$/;
  var I = /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/;
  var U = /^<([^ >]+@[^ >]+)>/;
  var D = /^<([^ >]+:\/[^ >]+)>/;
  var N = /-([a-z])?/gi;
  var j = /^(\|.*)\n(?: *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*))?\n?/;
  var H = /^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/;
  var P = /^!\[([^\]]*)\] ?\[([^\]]*)\]/;
  var _ = /^\[([^\]]*)\] ?\[([^\]]*)\]/;
  var F = /(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/;
  var G = /\t/g;
  var W = /(^ *\||\| *$)/g;
  var Z = /^ *:-+: *$/;
  var q = /^ *:-+ *$/;
  var Q = /^ *-+: *$/;
  var V = "((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\1|[\\s\\S])+?)";
  var X = new RegExp(`^([*_])\\1${V}\\1\\1(?!\\1)`);
  var J = new RegExp(`^([*_])${V}\\1(?!\\1)`);
  var K = new RegExp(`^(==)${V}\\1`);
  var Y = new RegExp(`^(~~)${V}\\1`);
  var ee = /^\\([^0-9A-Za-z\s])/;
  var te = /\\([^0-9A-Za-z\s])/g;
  var ne = /^([\s\S](?:(?!  |[0-9]\.)[^*_~\-\n<`\\\[!])*)/;
  var re = /^\n+/;
  var ie = /^([ \t]*)/;
  var le = /\\([^\\])/g;
  var ae = /(?:^|\n)( *)$/;
  var oe = "(?:\\d+\\.)";
  var ce = "(?:[*+-])";
  function se(e2) {
    return "( *)(" + (1 === e2 ? oe : ce) + ") +";
  }
  var de = se(1);
  var ue = se(2);
  function pe(e2) {
    return new RegExp("^" + (1 === e2 ? de : ue));
  }
  var fe = pe(1);
  var he = pe(2);
  function me(e2) {
    return new RegExp("^" + (1 === e2 ? de : ue) + "[^\\n]*(?:\\n(?!\\1" + (1 === e2 ? oe : ce) + " )[^\\n]*)*(\\n|$)", "gm");
  }
  var ge = me(1);
  var ye = me(2);
  function ke(e2) {
    const t2 = 1 === e2 ? oe : ce;
    return new RegExp("^( *)(" + t2 + ") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1" + t2 + " (?!" + t2 + " ))\\n*|\\s*\\n*$)");
  }
  var xe = ke(1);
  var be = ke(2);
  function ve(e2, t2) {
    const n2 = 1 === t2, i2 = n2 ? xe : be, l2 = n2 ? ge : ye, a2 = n2 ? fe : he;
    return { match: Oe(function(e3, t3) {
      const n3 = ae.exec(t3.prevCapture);
      return n3 && (t3.list || !t3.inline && !t3.simple) ? i2.exec(e3 = n3[1] + e3) : null;
    }), order: 1, parse(e3, t3, r3) {
      const i3 = n2 ? +e3[2] : void 0, o2 = e3[0].replace(d, "\n").match(l2);
      let c2 = false;
      return { items: o2.map(function(e4, n3) {
        const i4 = a2.exec(e4)[0].length, l3 = new RegExp("^ {1," + i4 + "}", "gm"), s2 = e4.replace(l3, "").replace(a2, ""), d2 = n3 === o2.length - 1, u2 = -1 !== s2.indexOf("\n\n") || d2 && c2;
        c2 = u2;
        const p2 = r3.inline, f2 = r3.list;
        let h2;
        r3.list = true, u2 ? (r3.inline = false, h2 = Ee(s2) + "\n\n") : (r3.inline = true, h2 = Ee(s2));
        const m2 = t3(h2, r3);
        return r3.inline = p2, r3.list = f2, m2;
      }), ordered: n2, start: i3 };
    }, render: (t3, n3, i3) => e2(t3.ordered ? "ol" : "ul", { key: i3.key, start: t3.type === r2.orderedList ? t3.start : void 0 }, t3.items.map(function(t4, r3) {
      return e2("li", { key: r3 }, n3(t4, i3));
    })) };
  }
  var Ce = new RegExp(`^\\[((?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*)\\]\\(\\s*<?((?:\\([^)]*\\)|[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['"]([\\s\\S]*?)['"])?\\s*\\)`);
  var $e = /^!\[(.*?)\]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/;
  var Se = [u, g, y, E, L, z, j, xe, be];
  var we = [...Se, /^[^\n]+(?:  \n|\n{2,})/, A, B, M];
  function Ee(e2) {
    let t2 = e2.length;
    for (; t2 > 0 && e2[t2 - 1] <= " "; ) t2--;
    return e2.slice(0, t2);
  }
  function ze(e2) {
    return e2.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, "a").replace(/[çÇ]/g, "c").replace(/[ðÐ]/g, "d").replace(/[ÈÉÊËéèêë]/g, "e").replace(/[ÏïÎîÍíÌì]/g, "i").replace(/[Ññ]/g, "n").replace(/[øØœŒÕõÔôÓóÒò]/g, "o").replace(/[ÜüÛûÚúÙù]/g, "u").replace(/[ŸÿÝý]/g, "y").replace(/[^a-z0-9- ]/gi, "").replace(/ /gi, "-").toLowerCase();
  }
  function Le(e2) {
    return Q.test(e2) ? "right" : Z.test(e2) ? "center" : q.test(e2) ? "left" : null;
  }
  function Ae(e2, t2, n2, r3) {
    const i2 = n2.inTable;
    n2.inTable = true;
    let l2 = [[]], a2 = "";
    function o2() {
      if (!a2) return;
      const e3 = l2[l2.length - 1];
      e3.push.apply(e3, t2(a2, n2)), a2 = "";
    }
    return e2.trim().split(/(`[^`]*`|\\\||\|)/).filter(Boolean).forEach((e3, t3, n3) => {
      "|" === e3.trim() && (o2(), r3) ? 0 !== t3 && t3 !== n3.length - 1 && l2.push([]) : a2 += e3;
    }), o2(), n2.inTable = i2, l2;
  }
  function Te(e2, t2, n2) {
    n2.inline = true;
    const i2 = e2[2] ? e2[2].replace(W, "").split("|").map(Le) : [], l2 = e2[3] ? function(e3, t3, n3) {
      return e3.trim().split("\n").map(function(e4) {
        return Ae(e4, t3, n3, true);
      });
    }(e2[3], t2, n2) : [], a2 = Ae(e2[1], t2, n2, !!l2.length);
    return n2.inline = false, l2.length ? { align: i2, cells: l2, header: a2, type: r2.table } : { children: a2, type: r2.paragraph };
  }
  function Be(e2, t2) {
    return null == e2.align[t2] ? {} : { textAlign: e2.align[t2] };
  }
  function Oe(e2) {
    return e2.inline = 1, e2;
  }
  function Me(e2) {
    return Oe(function(t2, n2) {
      return n2.inline ? e2.exec(t2) : null;
    });
  }
  function Re(e2) {
    return Oe(function(t2, n2) {
      return n2.inline || n2.simple ? e2.exec(t2) : null;
    });
  }
  function Ie(e2) {
    return function(t2, n2) {
      return n2.inline || n2.simple ? null : e2.exec(t2);
    };
  }
  function Ue(e2) {
    return Oe(function(t2) {
      return e2.exec(t2);
    });
  }
  function De(e2, t2) {
    if (t2.inline || t2.simple) return null;
    let n2 = "";
    e2.split("\n").every((e3) => (e3 += "\n", !Se.some((t3) => t3.test(e3)) && (n2 += e3, !!e3.trim())));
    const r3 = Ee(n2);
    return "" == r3 ? null : [n2, , r3];
  }
  function Ne(e2) {
    try {
      if (decodeURIComponent(e2).replace(/[^A-Za-z0-9/:]/g, "").match(/^\s*(javascript|vbscript|data(?!:image)):/i)) return null;
    } catch (e3) {
      return null;
    }
    return e2;
  }
  function je(e2) {
    return e2.replace(le, "$1");
  }
  function He(e2, t2, n2) {
    const r3 = n2.inline || false, i2 = n2.simple || false;
    n2.inline = true, n2.simple = true;
    const l2 = e2(t2, n2);
    return n2.inline = r3, n2.simple = i2, l2;
  }
  function Pe(e2, t2, n2) {
    const r3 = n2.inline || false, i2 = n2.simple || false;
    n2.inline = false, n2.simple = true;
    const l2 = e2(t2, n2);
    return n2.inline = r3, n2.simple = i2, l2;
  }
  function _e(e2, t2, n2) {
    const r3 = n2.inline || false;
    n2.inline = false;
    const i2 = e2(t2, n2);
    return n2.inline = r3, i2;
  }
  var Fe = (e2, t2, n2) => ({ children: He(t2, e2[2], n2) });
  function Ge() {
    return {};
  }
  function We() {
    return null;
  }
  function Ze(...e2) {
    return e2.filter(Boolean).join(" ");
  }
  function qe(e2, t2, n2) {
    let r3 = e2;
    const i2 = t2.split(".");
    for (; i2.length && (r3 = r3[i2[0]], void 0 !== r3); ) i2.shift();
    return r3 || n2;
  }
  function Qe(n2 = "", i2 = {}) {
    function d2(e2, n3, ...r3) {
      const l2 = qe(i2.overrides, `${e2}.props`, {});
      return i2.createElement(function(e3, t2) {
        const n4 = qe(t2, e3);
        return n4 ? "function" == typeof n4 || "object" == typeof n4 && "render" in n4 ? n4 : qe(t2, `${e3}.component`, e3) : e3;
      }(e2, i2.overrides), t({}, n3, l2, { className: Ze(null == n3 ? void 0 : n3.className, l2.className) || void 0 }), ...r3);
    }
    function W2(e2) {
      e2 = e2.replace(S, "");
      let t2 = false;
      i2.forceInline ? t2 = true : i2.forceBlock || (t2 = false === F.test(e2));
      const n3 = ae2(le2(t2 ? e2 : `${Ee(e2).replace(re, "")}

`, { inline: t2 }));
      for (; "string" == typeof n3[n3.length - 1] && !n3[n3.length - 1].trim(); ) n3.pop();
      if (null === i2.wrapper) return n3;
      const r3 = i2.wrapper || (t2 ? "span" : "div");
      let l2;
      if (n3.length > 1 || i2.forceWrapper) l2 = n3;
      else {
        if (1 === n3.length) return l2 = n3[0], "string" == typeof l2 ? d2("span", { key: "outer" }, l2) : l2;
        l2 = null;
      }
      return i2.createElement(r3, { key: "outer" }, l2);
    }
    function Z2(e2, t2) {
      const n3 = t2.match(c);
      return n3 ? n3.reduce(function(t3, n4) {
        const r3 = n4.indexOf("=");
        if (-1 !== r3) {
          const a2 = function(e3) {
            return -1 !== e3.indexOf("-") && null === e3.match(O) && (e3 = e3.replace(N, function(e4, t4) {
              return t4.toUpperCase();
            })), e3;
          }(n4.slice(0, r3)).trim(), o2 = function(e3) {
            const t4 = e3[0];
            return ('"' === t4 || "'" === t4) && e3.length >= 2 && e3[e3.length - 1] === t4 ? e3.slice(1, -1) : e3;
          }(n4.slice(r3 + 1).trim()), c2 = l[a2] || a2;
          if ("ref" === c2) return t3;
          const s2 = t3[c2] = function(e3, t4, n5, r4) {
            return "style" === t4 ? n5.split(/;\s?/).reduce(function(e4, t5) {
              const n6 = t5.slice(0, t5.indexOf(":"));
              return e4[n6.trim().replace(/(-[a-z])/g, (e5) => e5[1].toUpperCase())] = t5.slice(n6.length + 1).trim(), e4;
            }, {}) : "href" === t4 || "src" === t4 ? r4(n5, e3, t4) : (n5.match(R) && (n5 = n5.slice(1, n5.length - 1)), "true" === n5 || "false" !== n5 && n5);
          }(e2, a2, o2, i2.sanitizer);
          "string" == typeof s2 && (A.test(s2) || M.test(s2)) && (t3[c2] = W2(s2.trim()));
        } else "style" !== n4 && (t3[l[n4] || n4] = true);
        return t3;
      }, {}) : null;
    }
    i2.overrides = i2.overrides || {}, i2.sanitizer = i2.sanitizer || Ne, i2.slugify = i2.slugify || ze, i2.namedCodesToUnicode = i2.namedCodesToUnicode ? t({}, a, i2.namedCodesToUnicode) : a, i2.createElement = i2.createElement || e.createElement;
    const q2 = [], Q2 = {}, V2 = { [r2.blockQuote]: { match: Ie(u), order: 1, parse(e2, t2, n3) {
      const [, r3, i3] = e2[0].replace(p, "").match(f);
      return { alert: r3, children: t2(i3, n3) };
    }, render(e2, t2, n3) {
      const l2 = { key: n3.key };
      return e2.alert && (l2.className = "markdown-alert-" + i2.slugify(e2.alert.toLowerCase(), ze), e2.children.unshift({ attrs: {}, children: [{ type: r2.text, text: e2.alert }], noInnerParse: true, type: r2.htmlBlock, tag: "header" })), d2("blockquote", l2, t2(e2.children, n3));
    } }, [r2.breakLine]: { match: Ue(h), order: 1, parse: Ge, render: (e2, t2, n3) => d2("br", { key: n3.key }) }, [r2.breakThematic]: { match: Ie(m), order: 1, parse: Ge, render: (e2, t2, n3) => d2("hr", { key: n3.key }) }, [r2.codeBlock]: { match: Ie(y), order: 0, parse: (e2) => ({ lang: void 0, text: Ee(e2[0].replace(/^ {4}/gm, "")).replace(te, "$1") }), render: (e2, n3, r3) => d2("pre", { key: r3.key }, d2("code", t({}, e2.attrs, { className: e2.lang ? `lang-${e2.lang}` : "" }), e2.text)) }, [r2.codeFenced]: { match: Ie(g), order: 0, parse: (e2) => ({ attrs: Z2("code", e2[3] || ""), lang: e2[2] || void 0, text: e2[4].replace(te, "$1"), type: r2.codeBlock }) }, [r2.codeInline]: { match: Re(k), order: 3, parse: (e2) => ({ text: e2[2].replace(te, "$1") }), render: (e2, t2, n3) => d2("code", { key: n3.key }, e2.text) }, [r2.footnote]: { match: Ie(v), order: 0, parse: (e2) => (q2.push({ footnote: e2[2], identifier: e2[1] }), {}), render: We }, [r2.footnoteReference]: { match: Me(C), order: 1, parse: (e2) => ({ target: `#${i2.slugify(e2[1], ze)}`, text: e2[1] }), render: (e2, t2, n3) => d2("a", { key: n3.key, href: i2.sanitizer(e2.target, "a", "href") }, d2("sup", { key: n3.key }, e2.text)) }, [r2.gfmTask]: { match: Me(w), order: 1, parse: (e2) => ({ completed: "x" === e2[1].toLowerCase() }), render: (e2, t2, n3) => d2("input", { checked: e2.completed, key: n3.key, readOnly: true, type: "checkbox" }) }, [r2.heading]: { match: Ie(i2.enforceAtxHeadings ? z : E), order: 1, parse: (e2, t2, n3) => ({ children: He(t2, e2[2], n3), id: i2.slugify(e2[2], ze), level: e2[1].length }), render: (e2, t2, n3) => d2(`h${e2.level}`, { id: e2.id, key: n3.key }, t2(e2.children, n3)) }, [r2.headingSetext]: { match: Ie(L), order: 0, parse: (e2, t2, n3) => ({ children: He(t2, e2[1], n3), level: "=" === e2[2] ? 1 : 2, type: r2.heading }) }, [r2.htmlBlock]: { match: Ue(A), order: 1, parse(e2, t2, n3) {
      const [, r3] = e2[3].match(ie), i3 = new RegExp(`^${r3}`, "gm"), l2 = e2[3].replace(i3, ""), a2 = (c2 = l2, we.some((e3) => e3.test(c2)) ? _e : He);
      var c2;
      const s2 = e2[1].toLowerCase(), d3 = -1 !== o.indexOf(s2), u2 = (d3 ? s2 : e2[1]).trim(), p2 = { attrs: Z2(u2, e2[2]), noInnerParse: d3, tag: u2 };
      return n3.inAnchor = n3.inAnchor || "a" === s2, d3 ? p2.text = e2[3] : p2.children = a2(t2, l2, n3), n3.inAnchor = false, p2;
    }, render: (e2, n3, r3) => d2(e2.tag, t({ key: r3.key }, e2.attrs), e2.text || (e2.children ? n3(e2.children, r3) : "")) }, [r2.htmlSelfClosing]: { match: Ue(M), order: 1, parse(e2) {
      const t2 = e2[1].trim();
      return { attrs: Z2(t2, e2[2] || ""), tag: t2 };
    }, render: (e2, n3, r3) => d2(e2.tag, t({}, e2.attrs, { key: r3.key })) }, [r2.htmlComment]: { match: Ue(B), order: 1, parse: () => ({}), render: We }, [r2.image]: { match: Re($e), order: 1, parse: (e2) => ({ alt: e2[1], target: je(e2[2]), title: e2[3] }), render: (e2, t2, n3) => d2("img", { key: n3.key, alt: e2.alt || void 0, title: e2.title || void 0, src: i2.sanitizer(e2.target, "img", "src") }) }, [r2.link]: { match: Me(Ce), order: 3, parse: (e2, t2, n3) => ({ children: Pe(t2, e2[1], n3), target: je(e2[2]), title: e2[3] }), render: (e2, t2, n3) => d2("a", { key: n3.key, href: i2.sanitizer(e2.target, "a", "href"), title: e2.title }, t2(e2.children, n3)) }, [r2.linkAngleBraceStyleDetector]: { match: Me(D), order: 0, parse: (e2) => ({ children: [{ text: e2[1], type: r2.text }], target: e2[1], type: r2.link }) }, [r2.linkBareUrlDetector]: { match: Oe((e2, t2) => t2.inAnchor || i2.disableAutoLink ? null : Me(I)(e2, t2)), order: 0, parse: (e2) => ({ children: [{ text: e2[1], type: r2.text }], target: e2[1], title: void 0, type: r2.link }) }, [r2.linkMailtoDetector]: { match: Me(U), order: 0, parse(e2) {
      let t2 = e2[1], n3 = e2[1];
      return s.test(n3) || (n3 = "mailto:" + n3), { children: [{ text: t2.replace("mailto:", ""), type: r2.text }], target: n3, type: r2.link };
    } }, [r2.orderedList]: ve(d2, 1), [r2.unorderedList]: ve(d2, 2), [r2.newlineCoalescer]: { match: Ie(x), order: 3, parse: Ge, render: () => "\n" }, [r2.paragraph]: { match: Oe(De), order: 3, parse: Fe, render: (e2, t2, n3) => d2("p", { key: n3.key }, t2(e2.children, n3)) }, [r2.ref]: { match: Me(H), order: 0, parse: (e2) => (Q2[e2[1]] = { target: e2[2], title: e2[4] }, {}), render: We }, [r2.refImage]: { match: Re(P), order: 0, parse: (e2) => ({ alt: e2[1] || void 0, ref: e2[2] }), render: (e2, t2, n3) => Q2[e2.ref] ? d2("img", { key: n3.key, alt: e2.alt, src: i2.sanitizer(Q2[e2.ref].target, "img", "src"), title: Q2[e2.ref].title }) : null }, [r2.refLink]: { match: Me(_), order: 0, parse: (e2, t2, n3) => ({ children: t2(e2[1], n3), fallbackChildren: e2[0], ref: e2[2] }), render: (e2, t2, n3) => Q2[e2.ref] ? d2("a", { key: n3.key, href: i2.sanitizer(Q2[e2.ref].target, "a", "href"), title: Q2[e2.ref].title }, t2(e2.children, n3)) : d2("span", { key: n3.key }, e2.fallbackChildren) }, [r2.table]: { match: Ie(j), order: 1, parse: Te, render(e2, t2, n3) {
      const r3 = e2;
      return d2("table", { key: n3.key }, d2("thead", null, d2("tr", null, r3.header.map(function(e3, i3) {
        return d2("th", { key: i3, style: Be(r3, i3) }, t2(e3, n3));
      }))), d2("tbody", null, r3.cells.map(function(e3, i3) {
        return d2("tr", { key: i3 }, e3.map(function(e4, i4) {
          return d2("td", { key: i4, style: Be(r3, i4) }, t2(e4, n3));
        }));
      })));
    } }, [r2.text]: { match: Ue(ne), order: 4, parse: (e2) => ({ text: e2[0].replace(T, (e3, t2) => i2.namedCodesToUnicode[t2] ? i2.namedCodesToUnicode[t2] : e3) }), render: (e2) => e2.text }, [r2.textBolded]: { match: Re(X), order: 2, parse: (e2, t2, n3) => ({ children: t2(e2[2], n3) }), render: (e2, t2, n3) => d2("strong", { key: n3.key }, t2(e2.children, n3)) }, [r2.textEmphasized]: { match: Re(J), order: 3, parse: (e2, t2, n3) => ({ children: t2(e2[2], n3) }), render: (e2, t2, n3) => d2("em", { key: n3.key }, t2(e2.children, n3)) }, [r2.textEscaped]: { match: Re(ee), order: 1, parse: (e2) => ({ text: e2[1], type: r2.text }) }, [r2.textMarked]: { match: Re(K), order: 3, parse: Fe, render: (e2, t2, n3) => d2("mark", { key: n3.key }, t2(e2.children, n3)) }, [r2.textStrikethroughed]: { match: Re(Y), order: 3, parse: Fe, render: (e2, t2, n3) => d2("del", { key: n3.key }, t2(e2.children, n3)) } };
    true === i2.disableParsingRawHTML && (delete V2[r2.htmlBlock], delete V2[r2.htmlSelfClosing]);
    const le2 = function(e2) {
      let t2 = Object.keys(e2);
      function n3(r3, i3) {
        let l2, a2, o2 = [], c2 = "", s2 = "";
        for (i3.prevCapture = i3.prevCapture || ""; r3; ) {
          let d3 = 0;
          for (; d3 < t2.length; ) {
            if (c2 = t2[d3], l2 = e2[c2], i3.inline && !l2.match.inline) {
              d3++;
              continue;
            }
            const u2 = l2.match(r3, i3);
            if (u2) {
              s2 = u2[0], i3.prevCapture += s2, r3 = r3.substring(s2.length), a2 = l2.parse(u2, n3, i3), null == a2.type && (a2.type = c2), o2.push(a2);
              break;
            }
            d3++;
          }
        }
        return i3.prevCapture = "", o2;
      }
      return t2.sort(function(t3, n4) {
        let r3 = e2[t3].order, i3 = e2[n4].order;
        return r3 !== i3 ? r3 - i3 : t3 < n4 ? -1 : 1;
      }), function(e3, t3) {
        return n3(function(e4) {
          return e4.replace(b, "\n").replace($, "").replace(G, "    ");
        }(e3), t3);
      };
    }(V2), ae2 = (oe2 = /* @__PURE__ */ function(e2, t2) {
      return function(n3, r3, i3) {
        const l2 = e2[n3.type].render;
        return t2 ? t2(() => l2(n3, r3, i3), n3, r3, i3) : l2(n3, r3, i3);
      };
    }(V2, i2.renderRule), function e2(t2, n3 = {}) {
      if (Array.isArray(t2)) {
        const r3 = n3.key, i3 = [];
        let l2 = false;
        for (let r4 = 0; r4 < t2.length; r4++) {
          n3.key = r4;
          const a2 = e2(t2[r4], n3), o2 = "string" == typeof a2;
          o2 && l2 ? i3[i3.length - 1] += a2 : null !== a2 && i3.push(a2), l2 = o2;
        }
        return n3.key = r3, i3;
      }
      return oe2(t2, e2, n3);
    });
    var oe2;
    const ce2 = W2(n2);
    return q2.length ? d2("div", null, ce2, d2("footer", { key: "footer" }, q2.map(function(e2) {
      return d2("div", { id: i2.slugify(e2.identifier, ze), key: e2.identifier }, e2.identifier, ae2(le2(e2.footnote, { inline: true })));
    }))) : ce2;
  }
  var index_modern_default = (t2) => {
    let { children: r3 = "", options: i2 } = t2, l2 = function(e2, t3) {
      if (null == e2) return {};
      var n2, r4, i3 = {}, l3 = Object.keys(e2);
      for (r4 = 0; r4 < l3.length; r4++) t3.indexOf(n2 = l3[r4]) >= 0 || (i3[n2] = e2[n2]);
      return i3;
    }(t2, n);
    return e.cloneElement(Qe(r3, i2), l2);
  };

  // react-user-mgmt/node_modules/lodash-es/unset.js
  function unset2(object, path) {
    return object == null ? true : baseUnset_default(object, path);
  }
  var unset_default = unset2;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/ObjectField.js
  var ObjectField = class extends import_react17.Component {
    constructor() {
      super(...arguments);
      /** Set up the initial state */
      __publicField(this, "state", {
        wasPropertyKeyModified: false,
        additionalProperties: {}
      });
      /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting
       * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated
       * formData.
       *
       * @param name - The name of the property
       * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property
       * @returns - The onPropertyChange callback for the `name` property
       */
      __publicField(this, "onPropertyChange", (name, addedByAdditionalProperties = false) => {
        return (value, newErrorSchema, id) => {
          const { formData, onChange, errorSchema } = this.props;
          if (value === void 0 && addedByAdditionalProperties) {
            value = "";
          }
          const newFormData = { ...formData, [name]: value };
          onChange(newFormData, errorSchema && errorSchema && {
            ...errorSchema,
            [name]: newErrorSchema
          }, id);
        };
      });
      /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data
       * and calls the `onChange` callback with it
       *
       * @param key - The key for which the drop callback is desired
       * @returns - The drop property click callback
       */
      __publicField(this, "onDropPropertyClick", (key) => {
        return (event) => {
          event.preventDefault();
          const { onChange, formData } = this.props;
          const copiedFormData = { ...formData };
          unset_default(copiedFormData, key);
          onChange(copiedFormData);
        };
      });
      /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one
       * that is already not assigned is found.
       *
       * @param preferredKey - The preferred name of a new key
       * @param [formData] - The form data in which to check if the desired key already exists
       * @returns - The name of the next available key from `preferredKey`
       */
      __publicField(this, "getAvailableKey", (preferredKey, formData) => {
        const { uiSchema, registry } = this.props;
        const { duplicateKeySuffixSeparator = "-" } = getUiOptions(uiSchema, registry.globalUiOptions);
        let index = 0;
        let newKey = preferredKey;
        while (has_default(formData, newKey)) {
          newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;
        }
        return newKey;
      });
      /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That
       * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.
       *
       * @param oldValue - The old value of a field
       * @returns - The key change callback function
       */
      __publicField(this, "onKeyChange", (oldValue) => {
        return (value, newErrorSchema) => {
          if (oldValue === value) {
            return;
          }
          const { formData, onChange, errorSchema } = this.props;
          value = this.getAvailableKey(value, formData);
          const newFormData = {
            ...formData
          };
          const newKeys = { [oldValue]: value };
          const keyValues = Object.keys(newFormData).map((key) => {
            const newKey = newKeys[key] || key;
            return { [newKey]: newFormData[key] };
          });
          const renamedObj = Object.assign({}, ...keyValues);
          this.setState({ wasPropertyKeyModified: true });
          onChange(renamedObj, errorSchema && errorSchema && {
            ...errorSchema,
            [value]: newErrorSchema
          });
        };
      });
      /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new
       * default data for that field has been added to the formData.
       *
       * @param schema - The schema element to which the new property is being added
       */
      __publicField(this, "handleAddClick", (schema) => () => {
        if (!schema.additionalProperties) {
          return;
        }
        const { formData, onChange, registry } = this.props;
        const newFormData = { ...formData };
        let type = void 0;
        let constValue = void 0;
        let defaultValue = void 0;
        if (isObject_default(schema.additionalProperties)) {
          type = schema.additionalProperties.type;
          constValue = schema.additionalProperties.const;
          defaultValue = schema.additionalProperties.default;
          let apSchema = schema.additionalProperties;
          if (REF_KEY in apSchema) {
            const { schemaUtils } = registry;
            apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] }, formData);
            type = apSchema.type;
            constValue = apSchema.const;
            defaultValue = apSchema.default;
          }
          if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {
            type = "object";
          }
        }
        const newKey = this.getAvailableKey("newKey", newFormData);
        const newValue = constValue ?? defaultValue ?? this.getDefaultValue(type);
        set_default(newFormData, newKey, newValue);
        onChange(newFormData);
      });
    }
    /** Returns a flag indicating whether the `name` field is required in the object schema
     *
     * @param name - The name of the field to check for required-ness
     * @returns - True if the field `name` is required, false otherwise
     */
    isRequired(name) {
      const { schema } = this.props;
      return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;
    }
    /** Returns a default value to be used for a new additional schema property of the given `type`
     *
     * @param type - The type of the new additional schema property
     */
    getDefaultValue(type) {
      const { registry: { translateString } } = this.props;
      switch (type) {
        case "array":
          return [];
        case "boolean":
          return false;
        case "null":
          return null;
        case "number":
          return 0;
        case "object":
          return {};
        case "string":
        default:
          return translateString(TranslatableString.NewStringDefault);
      }
    }
    /** Renders the `ObjectField` from the given props
     */
    render() {
      const { schema: rawSchema, uiSchema = {}, formData, errorSchema, idSchema, name, required = false, disabled, readonly, hideError, idPrefix, idSeparator, onBlur, onFocus, registry, title } = this.props;
      const { fields: fields2, formContext, schemaUtils, translateString, globalUiOptions } = registry;
      const { SchemaField: SchemaField2 } = fields2;
      const schema = schemaUtils.retrieveSchema(rawSchema, formData);
      const uiOptions = getUiOptions(uiSchema, globalUiOptions);
      const { properties: schemaProperties = {} } = schema;
      const templateTitle = uiOptions.title ?? schema.title ?? title ?? name;
      const description = uiOptions.description ?? schema.description;
      let orderedProperties;
      try {
        const properties2 = Object.keys(schemaProperties);
        orderedProperties = orderProperties(properties2, uiOptions.order);
      } catch (err) {
        return (0, import_jsx_runtime103.jsxs)("div", { children: [(0, import_jsx_runtime103.jsx)("p", { className: "config-error", style: { color: "red" }, children: (0, import_jsx_runtime103.jsx)(index_modern_default, { options: { disableParsingRawHTML: true }, children: translateString(TranslatableString.InvalidObjectField, [name || "root", err.message]) }) }), (0, import_jsx_runtime103.jsx)("pre", { children: JSON.stringify(schema) })] });
      }
      const Template = getTemplate("ObjectFieldTemplate", registry, uiOptions);
      const templateProps = {
        // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`
        title: uiOptions.label === false ? "" : templateTitle,
        description: uiOptions.label === false ? void 0 : description,
        properties: orderedProperties.map((name2) => {
          const addedByAdditionalProperties = has_default(schema, [PROPERTIES_KEY, name2, ADDITIONAL_PROPERTY_FLAG]);
          const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name2];
          const hidden = getUiOptions(fieldUiSchema).widget === "hidden";
          const fieldIdSchema = get_default(idSchema, [name2], {});
          return {
            content: (0, import_jsx_runtime103.jsx)(SchemaField2, { name: name2, required: this.isRequired(name2), schema: get_default(schema, [PROPERTIES_KEY, name2], {}), uiSchema: fieldUiSchema, errorSchema: get_default(errorSchema, name2), idSchema: fieldIdSchema, idPrefix, idSeparator, formData: get_default(formData, name2), formContext, wasPropertyKeyModified: this.state.wasPropertyKeyModified, onKeyChange: this.onKeyChange(name2), onChange: this.onPropertyChange(name2, addedByAdditionalProperties), onBlur, onFocus, registry, disabled, readonly, hideError, onDropPropertyClick: this.onDropPropertyClick }, name2),
            name: name2,
            readonly,
            disabled,
            required,
            hidden
          };
        }),
        readonly,
        disabled,
        required,
        idSchema,
        uiSchema,
        errorSchema,
        schema,
        formData,
        formContext,
        registry
      };
      return (0, import_jsx_runtime103.jsx)(Template, { ...templateProps, onAddClick: this.handleAddClick });
    }
  };
  var ObjectField_default = ObjectField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/SchemaField.js
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var import_react18 = __toESM(require_react());
  var COMPONENT_TYPES = {
    array: "ArrayField",
    boolean: "BooleanField",
    integer: "NumberField",
    number: "NumberField",
    object: "ObjectField",
    string: "StringField",
    null: "NullField"
  };
  function getFieldComponent(schema, uiOptions, idSchema, registry) {
    const field = uiOptions.field;
    const { fields: fields2, translateString } = registry;
    if (typeof field === "function") {
      return field;
    }
    if (typeof field === "string" && field in fields2) {
      return fields2[field];
    }
    const schemaType = getSchemaType(schema);
    const type = Array.isArray(schemaType) ? schemaType[0] : schemaType || "";
    const schemaId = schema.$id;
    let componentName = COMPONENT_TYPES[type];
    if (schemaId && schemaId in fields2) {
      componentName = schemaId;
    }
    if (!componentName && (schema.anyOf || schema.oneOf)) {
      return () => null;
    }
    return componentName in fields2 ? fields2[componentName] : () => {
      const UnsupportedFieldTemplate = getTemplate("UnsupportedFieldTemplate", registry, uiOptions);
      return (0, import_jsx_runtime104.jsx)(UnsupportedFieldTemplate, { schema, idSchema, reason: translateString(TranslatableString.UnknownFieldType, [String(schema.type)]), registry });
    };
  }
  function SchemaFieldRender(props) {
    const { schema: _schema, idSchema: _idSchema, uiSchema, formData, errorSchema, idPrefix, idSeparator, name, onChange, onKeyChange, onDropPropertyClick, required, registry, wasPropertyKeyModified = false } = props;
    const { formContext, schemaUtils, globalUiOptions } = registry;
    const uiOptions = getUiOptions(uiSchema, globalUiOptions);
    const FieldTemplate3 = getTemplate("FieldTemplate", registry, uiOptions);
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, uiOptions);
    const FieldHelpTemplate3 = getTemplate("FieldHelpTemplate", registry, uiOptions);
    const FieldErrorTemplate3 = getTemplate("FieldErrorTemplate", registry, uiOptions);
    const schema = schemaUtils.retrieveSchema(_schema, formData);
    const fieldId = _idSchema[ID_KEY];
    const idSchema = mergeObjects(schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator), _idSchema);
    const handleFieldComponentChange = (0, import_react18.useCallback)((formData2, newErrorSchema, id2) => {
      const theId = id2 || fieldId;
      return onChange(formData2, newErrorSchema, theId);
    }, [fieldId, onChange]);
    const FieldComponent = getFieldComponent(schema, uiOptions, idSchema, registry);
    const disabled = Boolean(uiOptions.disabled ?? props.disabled);
    const readonly = Boolean(uiOptions.readonly ?? (props.readonly || props.schema.readOnly || schema.readOnly));
    const uiSchemaHideError = uiOptions.hideError;
    const hideError = uiSchemaHideError === void 0 ? props.hideError : Boolean(uiSchemaHideError);
    const autofocus = Boolean(uiOptions.autofocus ?? props.autofocus);
    if (Object.keys(schema).length === 0) {
      return null;
    }
    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
    const { __errors, ...fieldErrorSchema } = errorSchema || {};
    const fieldUiSchema = omit_default(uiSchema, ["ui:classNames", "classNames", "ui:style"]);
    if (UI_OPTIONS_KEY in fieldUiSchema) {
      fieldUiSchema[UI_OPTIONS_KEY] = omit_default(fieldUiSchema[UI_OPTIONS_KEY], ["classNames", "style"]);
    }
    const field = (0, import_jsx_runtime104.jsx)(FieldComponent, { ...props, onChange: handleFieldComponentChange, idSchema, schema, uiSchema: fieldUiSchema, disabled, readonly, hideError, autofocus, errorSchema: fieldErrorSchema, formContext, rawErrors: __errors });
    const id = idSchema[ID_KEY];
    let label;
    if (wasPropertyKeyModified) {
      label = name;
    } else {
      label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || props.title || name;
    }
    const description = uiOptions.description || props.schema.description || schema.description || "";
    const richDescription = uiOptions.enableMarkdownInDescription ? (0, import_jsx_runtime104.jsx)(index_modern_default, { options: { disableParsingRawHTML: true }, children: description }) : description;
    const help = uiOptions.help;
    const hidden = uiOptions.widget === "hidden";
    const classNames = ["form-group", "field", `field-${getSchemaType(schema)}`];
    if (!hideError && __errors && __errors.length > 0) {
      classNames.push("field-error has-error has-danger");
    }
    if (uiSchema?.classNames) {
      if (true) {
        console.warn("'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.");
      }
      classNames.push(uiSchema.classNames);
    }
    if (uiOptions.classNames) {
      classNames.push(uiOptions.classNames);
    }
    const helpComponent = (0, import_jsx_runtime104.jsx)(FieldHelpTemplate3, { help, idSchema, schema, uiSchema, hasErrors: !hideError && __errors && __errors.length > 0, registry });
    const errorsComponent = hideError || (schema.anyOf || schema.oneOf) && !schemaUtils.isSelect(schema) ? void 0 : (0, import_jsx_runtime104.jsx)(FieldErrorTemplate3, { errors: __errors, errorSchema, idSchema, schema, uiSchema, registry });
    const fieldProps = {
      description: (0, import_jsx_runtime104.jsx)(DescriptionFieldTemplate, { id: descriptionId(id), description: richDescription, schema, uiSchema, registry }),
      rawDescription: description,
      help: helpComponent,
      rawHelp: typeof help === "string" ? help : void 0,
      errors: errorsComponent,
      rawErrors: hideError ? void 0 : __errors,
      id,
      label,
      hidden,
      onChange,
      onKeyChange,
      onDropPropertyClick,
      required,
      disabled,
      readonly,
      hideError,
      displayLabel,
      classNames: classNames.join(" ").trim(),
      style: uiOptions.style,
      formContext,
      formData,
      schema,
      uiSchema,
      registry
    };
    const _AnyOfField = registry.fields.AnyOfField;
    const _OneOfField = registry.fields.OneOfField;
    const isReplacingAnyOrOneOf = uiSchema?.["ui:field"] && uiSchema?.["ui:fieldReplacesAnyOrOneOf"] === true;
    return (0, import_jsx_runtime104.jsx)(FieldTemplate3, { ...fieldProps, children: (0, import_jsx_runtime104.jsxs)(import_jsx_runtime104.Fragment, { children: [field, schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (0, import_jsx_runtime104.jsx)(_AnyOfField, { name, disabled, readonly, hideError, errorSchema, formData, formContext, idPrefix, idSchema, idSeparator, onBlur: props.onBlur, onChange: props.onChange, onFocus: props.onFocus, options: schema.anyOf.map((_schema2) => schemaUtils.retrieveSchema(isObject_default(_schema2) ? _schema2 : {}, formData)), registry, required, schema, uiSchema }), schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (0, import_jsx_runtime104.jsx)(_OneOfField, { name, disabled, readonly, hideError, errorSchema, formData, formContext, idPrefix, idSchema, idSeparator, onBlur: props.onBlur, onChange: props.onChange, onFocus: props.onFocus, options: schema.oneOf.map((_schema2) => schemaUtils.retrieveSchema(isObject_default(_schema2) ? _schema2 : {}, formData)), registry, required, schema, uiSchema })] }) });
  }
  var SchemaField = class extends import_react18.Component {
    shouldComponentUpdate(nextProps) {
      return !deepEquals(this.props, nextProps);
    }
    render() {
      return (0, import_jsx_runtime104.jsx)(SchemaFieldRender, { ...this.props });
    }
  };
  var SchemaField_default = SchemaField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/StringField.js
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  function StringField(props) {
    const { schema, name, uiSchema, idSchema, formData, required, disabled = false, readonly = false, autofocus = false, onChange, onBlur, onFocus, registry, rawErrors, hideError } = props;
    const { title, format } = schema;
    const { widgets: widgets2, formContext, schemaUtils, globalUiOptions } = registry;
    const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema, uiSchema) : void 0;
    let defaultWidget = enumOptions ? "select" : "text";
    if (format && hasWidget(schema, format, widgets2)) {
      defaultWidget = format;
    }
    const { widget = defaultWidget, placeholder = "", title: uiTitle, ...options } = getUiOptions(uiSchema);
    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
    const label = uiTitle ?? title ?? name;
    const Widget = getWidget(schema, widget, widgets2);
    return (0, import_jsx_runtime105.jsx)(Widget, { options: { ...options, enumOptions }, schema, uiSchema, id: idSchema.$id, name, label, hideLabel: !displayLabel, hideError, value: formData, onChange, onBlur, onFocus, required, disabled, readonly, formContext, autofocus, registry, placeholder, rawErrors });
  }
  var StringField_default = StringField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/NullField.js
  var import_react19 = __toESM(require_react());
  function NullField(props) {
    const { formData, onChange } = props;
    (0, import_react19.useEffect)(() => {
      if (formData === void 0) {
        onChange(null);
      }
    }, [formData, onChange]);
    return null;
  }
  var NullField_default = NullField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/fields/index.js
  function fields() {
    return {
      AnyOfField: MultiSchemaField_default,
      ArrayField: ArrayField_default,
      // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default
      BooleanField: BooleanField_default,
      NumberField: NumberField_default,
      ObjectField: ObjectField_default,
      OneOfField: MultiSchemaField_default,
      SchemaField: SchemaField_default,
      StringField: StringField_default,
      NullField: NullField_default
    };
  }
  var fields_default = fields;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ArrayFieldDescriptionTemplate.js
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  function ArrayFieldDescriptionTemplate(props) {
    const { idSchema, description, registry, schema, uiSchema } = props;
    const options = getUiOptions(uiSchema, registry.globalUiOptions);
    const { label: displayLabel = true } = options;
    if (!description || !displayLabel) {
      return null;
    }
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    return (0, import_jsx_runtime106.jsx)(DescriptionFieldTemplate, { id: descriptionId(idSchema), description, schema, uiSchema, registry });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ArrayFieldItemTemplate.js
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  function ArrayFieldItemTemplate(props) {
    const { children, className, disabled, hasToolbar, hasMoveDown, hasMoveUp, hasRemove, hasCopy, index, onCopyIndexClick, onDropIndexClick, onReorderClick, readonly, registry, uiSchema } = props;
    const { CopyButton: CopyButton3, MoveDownButton: MoveDownButton3, MoveUpButton: MoveUpButton3, RemoveButton: RemoveButton3 } = registry.templates.ButtonTemplates;
    const btnStyle = {
      flex: 1,
      paddingLeft: 6,
      paddingRight: 6,
      fontWeight: "bold"
    };
    return (0, import_jsx_runtime107.jsxs)("div", { className, children: [(0, import_jsx_runtime107.jsx)("div", { className: hasToolbar ? "col-xs-9" : "col-xs-12", children }), hasToolbar && (0, import_jsx_runtime107.jsx)("div", { className: "col-xs-3 array-item-toolbox", children: (0, import_jsx_runtime107.jsxs)("div", { className: "btn-group", style: {
      display: "flex",
      justifyContent: "space-around"
    }, children: [(hasMoveUp || hasMoveDown) && (0, import_jsx_runtime107.jsx)(MoveUpButton3, { style: btnStyle, disabled: disabled || readonly || !hasMoveUp, onClick: onReorderClick(index, index - 1), uiSchema, registry }), (hasMoveUp || hasMoveDown) && (0, import_jsx_runtime107.jsx)(MoveDownButton3, { style: btnStyle, disabled: disabled || readonly || !hasMoveDown, onClick: onReorderClick(index, index + 1), uiSchema, registry }), hasCopy && (0, import_jsx_runtime107.jsx)(CopyButton3, { style: btnStyle, disabled: disabled || readonly, onClick: onCopyIndexClick(index), uiSchema, registry }), hasRemove && (0, import_jsx_runtime107.jsx)(RemoveButton3, { style: btnStyle, disabled: disabled || readonly, onClick: onDropIndexClick(index), uiSchema, registry })] }) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ArrayFieldTemplate.js
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  function ArrayFieldTemplate(props) {
    const { canAdd, className, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title } = props;
    const uiOptions = getUiOptions(uiSchema);
    const ArrayFieldDescriptionTemplate2 = getTemplate("ArrayFieldDescriptionTemplate", registry, uiOptions);
    const ArrayFieldItemTemplate3 = getTemplate("ArrayFieldItemTemplate", registry, uiOptions);
    const ArrayFieldTitleTemplate2 = getTemplate("ArrayFieldTitleTemplate", registry, uiOptions);
    const { ButtonTemplates: { AddButton: AddButton3 } } = registry.templates;
    return (0, import_jsx_runtime108.jsxs)("fieldset", { className, id: idSchema.$id, children: [(0, import_jsx_runtime108.jsx)(ArrayFieldTitleTemplate2, { idSchema, title: uiOptions.title || title, required, schema, uiSchema, registry }), (0, import_jsx_runtime108.jsx)(ArrayFieldDescriptionTemplate2, { idSchema, description: uiOptions.description || schema.description, schema, uiSchema, registry }), (0, import_jsx_runtime108.jsx)("div", { className: "row array-item-list", children: items && items.map(({ key, ...itemProps }) => (0, import_jsx_runtime108.jsx)(ArrayFieldItemTemplate3, { ...itemProps }, key)) }), canAdd && (0, import_jsx_runtime108.jsx)(AddButton3, { className: "array-item-add", onClick: onAddClick, disabled: disabled || readonly, uiSchema, registry })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ArrayFieldTitleTemplate.js
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  function ArrayFieldTitleTemplate(props) {
    const { idSchema, title, schema, uiSchema, required, registry } = props;
    const options = getUiOptions(uiSchema, registry.globalUiOptions);
    const { label: displayLabel = true } = options;
    if (!title || !displayLabel) {
      return null;
    }
    const TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, options);
    return (0, import_jsx_runtime109.jsx)(TitleFieldTemplate, { id: titleId(idSchema), title, required, schema, uiSchema, registry });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/BaseInputTemplate.js
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var import_react20 = __toESM(require_react());
  function BaseInputTemplate(props) {
    const {
      id,
      name,
      // remove this from ...rest
      value,
      readonly,
      disabled,
      autofocus,
      onBlur,
      onFocus,
      onChange,
      onChangeOverride,
      options,
      schema,
      uiSchema,
      formContext,
      registry,
      rawErrors,
      type,
      hideLabel,
      // remove this from ...rest
      hideError,
      // remove this from ...rest
      ...rest
    } = props;
    if (!id) {
      console.log("No id for", props);
      throw new Error(`no id for props ${JSON.stringify(props)}`);
    }
    const inputProps = {
      ...rest,
      ...getInputProps(schema, type, options)
    };
    let inputValue;
    if (inputProps.type === "number" || inputProps.type === "integer") {
      inputValue = value || value === 0 ? value : "";
    } else {
      inputValue = value == null ? "" : value;
    }
    const _onChange = (0, import_react20.useCallback)(({ target: { value: value2 } }) => onChange(value2 === "" ? options.emptyValue : value2), [onChange, options]);
    const _onBlur = (0, import_react20.useCallback)(({ target }) => onBlur(id, target && target.value), [onBlur, id]);
    const _onFocus = (0, import_react20.useCallback)(({ target }) => onFocus(id, target && target.value), [onFocus, id]);
    return (0, import_jsx_runtime110.jsxs)(import_jsx_runtime110.Fragment, { children: [(0, import_jsx_runtime110.jsx)("input", { id, name: id, className: "form-control", readOnly: readonly, disabled, autoFocus: autofocus, value: inputValue, ...inputProps, list: schema.examples ? examplesId(id) : void 0, onChange: onChangeOverride || _onChange, onBlur: _onBlur, onFocus: _onFocus, "aria-describedby": ariaDescribedByIds(id, !!schema.examples) }), Array.isArray(schema.examples) && (0, import_jsx_runtime110.jsx)("datalist", { id: examplesId(id), children: schema.examples.concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : []).map((example) => {
      return (0, import_jsx_runtime110.jsx)("option", { value: example }, example);
    }) }, `datalist_${id}`)] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/SubmitButton.js
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  function SubmitButton({ uiSchema }) {
    const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions(uiSchema);
    if (norender) {
      return null;
    }
    return (0, import_jsx_runtime111.jsx)("div", { children: (0, import_jsx_runtime111.jsx)("button", { type: "submit", ...submitButtonProps, className: `btn btn-info ${submitButtonProps.className || ""}`, children: submitText }) });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/AddButton.js
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/IconButton.js
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  function IconButton3(props) {
    const { iconType = "default", icon, className, uiSchema, registry, ...otherProps } = props;
    return (0, import_jsx_runtime112.jsx)("button", { type: "button", className: `btn btn-${iconType} ${className}`, ...otherProps, children: (0, import_jsx_runtime112.jsx)("i", { className: `glyphicon glyphicon-${icon}` }) });
  }
  function CopyButton(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime112.jsx)(IconButton3, { title: translateString(TranslatableString.CopyButton), className: "array-item-copy", ...props, icon: "copy" });
  }
  function MoveDownButton(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime112.jsx)(IconButton3, { title: translateString(TranslatableString.MoveDownButton), className: "array-item-move-down", ...props, icon: "arrow-down" });
  }
  function MoveUpButton(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime112.jsx)(IconButton3, { title: translateString(TranslatableString.MoveUpButton), className: "array-item-move-up", ...props, icon: "arrow-up" });
  }
  function RemoveButton(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime112.jsx)(IconButton3, { title: translateString(TranslatableString.RemoveButton), className: "array-item-remove", ...props, iconType: "danger", icon: "remove" });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/AddButton.js
  function AddButton({ className, onClick, disabled, registry }) {
    const { translateString } = registry;
    return (0, import_jsx_runtime113.jsx)("div", { className: "row", children: (0, import_jsx_runtime113.jsx)("p", { className: `col-xs-3 col-xs-offset-9 text-right ${className}`, children: (0, import_jsx_runtime113.jsx)(IconButton3, { iconType: "info", icon: "plus", className: "btn-add col-xs-12", title: translateString(TranslatableString.AddButton), onClick, disabled, registry }) }) });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ButtonTemplates/index.js
  function buttonTemplates() {
    return {
      SubmitButton,
      AddButton,
      CopyButton,
      MoveDownButton,
      MoveUpButton,
      RemoveButton
    };
  }
  var ButtonTemplates_default = buttonTemplates;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/DescriptionField.js
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  function DescriptionField(props) {
    const { id, description } = props;
    if (!description) {
      return null;
    }
    if (typeof description === "string") {
      return (0, import_jsx_runtime114.jsx)("p", { id, className: "field-description", children: description });
    } else {
      return (0, import_jsx_runtime114.jsx)("div", { id, className: "field-description", children: description });
    }
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ErrorList.js
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  function ErrorList({ errors, registry }) {
    const { translateString } = registry;
    return (0, import_jsx_runtime115.jsxs)("div", { className: "panel panel-danger errors", children: [(0, import_jsx_runtime115.jsx)("div", { className: "panel-heading", children: (0, import_jsx_runtime115.jsx)("h3", { className: "panel-title", children: translateString(TranslatableString.ErrorsLabel) }) }), (0, import_jsx_runtime115.jsx)("ul", { className: "list-group", children: errors.map((error, i2) => {
      return (0, import_jsx_runtime115.jsx)("li", { className: "list-group-item text-danger", children: error.stack }, i2);
    }) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/FieldTemplate/FieldTemplate.js
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/FieldTemplate/Label.js
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var REQUIRED_FIELD_SYMBOL = "*";
  function Label(props) {
    const { label, required, id } = props;
    if (!label) {
      return null;
    }
    return (0, import_jsx_runtime116.jsxs)("label", { className: "control-label", htmlFor: id, children: [label, required && (0, import_jsx_runtime116.jsx)("span", { className: "required", children: REQUIRED_FIELD_SYMBOL })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/FieldTemplate/FieldTemplate.js
  function FieldTemplate(props) {
    const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;
    const uiOptions = getUiOptions(uiSchema);
    const WrapIfAdditionalTemplate3 = getTemplate("WrapIfAdditionalTemplate", registry, uiOptions);
    if (hidden) {
      return (0, import_jsx_runtime117.jsx)("div", { className: "hidden", children });
    }
    return (0, import_jsx_runtime117.jsxs)(WrapIfAdditionalTemplate3, { ...props, children: [displayLabel && (0, import_jsx_runtime117.jsx)(Label, { label, required, id }), displayLabel && description ? description : null, children, errors, help] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/FieldTemplate/index.js
  var FieldTemplate_default = FieldTemplate;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/FieldErrorTemplate.js
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  function FieldErrorTemplate(props) {
    const { errors = [], idSchema } = props;
    if (errors.length === 0) {
      return null;
    }
    const id = errorId(idSchema);
    return (0, import_jsx_runtime118.jsx)("div", { children: (0, import_jsx_runtime118.jsx)("ul", { id, className: "error-detail bs-callout bs-callout-info", children: errors.filter((elem) => !!elem).map((error, index) => {
      return (0, import_jsx_runtime118.jsx)("li", { className: "text-danger", children: error }, index);
    }) }) });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/FieldHelpTemplate.js
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  function FieldHelpTemplate(props) {
    const { idSchema, help } = props;
    if (!help) {
      return null;
    }
    const id = helpId(idSchema);
    if (typeof help === "string") {
      return (0, import_jsx_runtime119.jsx)("p", { id, className: "help-block", children: help });
    }
    return (0, import_jsx_runtime119.jsx)("div", { id, className: "help-block", children: help });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/ObjectFieldTemplate.js
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  function ObjectFieldTemplate(props) {
    const { description, disabled, formData, idSchema, onAddClick, properties: properties2, readonly, registry, required, schema, title, uiSchema } = props;
    const options = getUiOptions(uiSchema);
    const TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, options);
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    const { ButtonTemplates: { AddButton: AddButton3 } } = registry.templates;
    return (0, import_jsx_runtime120.jsxs)("fieldset", { id: idSchema.$id, children: [title && (0, import_jsx_runtime120.jsx)(TitleFieldTemplate, { id: titleId(idSchema), title, required, schema, uiSchema, registry }), description && (0, import_jsx_runtime120.jsx)(DescriptionFieldTemplate, { id: descriptionId(idSchema), description, schema, uiSchema, registry }), properties2.map((prop) => prop.content), canExpand(schema, uiSchema, formData) && (0, import_jsx_runtime120.jsx)(AddButton3, { className: "object-property-expand", onClick: onAddClick(schema), disabled: disabled || readonly, uiSchema, registry })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/TitleField.js
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var REQUIRED_FIELD_SYMBOL2 = "*";
  function TitleField(props) {
    const { id, title, required } = props;
    return (0, import_jsx_runtime121.jsxs)("legend", { id, children: [title, required && (0, import_jsx_runtime121.jsx)("span", { className: "required", children: REQUIRED_FIELD_SYMBOL2 })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/UnsupportedField.js
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  function UnsupportedField(props) {
    const { schema, idSchema, reason, registry } = props;
    const { translateString } = registry;
    let translateEnum = TranslatableString.UnsupportedField;
    const translateParams = [];
    if (idSchema && idSchema.$id) {
      translateEnum = TranslatableString.UnsupportedFieldWithId;
      translateParams.push(idSchema.$id);
    }
    if (reason) {
      translateEnum = translateEnum === TranslatableString.UnsupportedField ? TranslatableString.UnsupportedFieldWithReason : TranslatableString.UnsupportedFieldWithIdAndReason;
      translateParams.push(reason);
    }
    return (0, import_jsx_runtime122.jsxs)("div", { className: "unsupported-field", children: [(0, import_jsx_runtime122.jsx)("p", { children: (0, import_jsx_runtime122.jsx)(index_modern_default, { options: { disableParsingRawHTML: true }, children: translateString(translateEnum, translateParams) }) }), schema && (0, import_jsx_runtime122.jsx)("pre", { children: JSON.stringify(schema, null, 2) })] });
  }
  var UnsupportedField_default = UnsupportedField;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/WrapIfAdditionalTemplate.js
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  function WrapIfAdditionalTemplate(props) {
    const { id, classNames, style: style4, disabled, label, onKeyChange, onDropPropertyClick, readonly, required, schema, children, uiSchema, registry } = props;
    const { templates: templates2, translateString } = registry;
    const { RemoveButton: RemoveButton3 } = templates2.ButtonTemplates;
    const keyLabel = translateString(TranslatableString.KeyLabel, [label]);
    const additional = ADDITIONAL_PROPERTY_FLAG in schema;
    if (!additional) {
      return (0, import_jsx_runtime123.jsx)("div", { className: classNames, style: style4, children });
    }
    return (0, import_jsx_runtime123.jsx)("div", { className: classNames, style: style4, children: (0, import_jsx_runtime123.jsxs)("div", { className: "row", children: [(0, import_jsx_runtime123.jsx)("div", { className: "col-xs-5 form-additional", children: (0, import_jsx_runtime123.jsxs)("div", { className: "form-group", children: [(0, import_jsx_runtime123.jsx)(Label, { label: keyLabel, required, id: `${id}-key` }), (0, import_jsx_runtime123.jsx)("input", { className: "form-control", type: "text", id: `${id}-key`, onBlur: ({ target }) => onKeyChange(target && target.value), defaultValue: label })] }) }), (0, import_jsx_runtime123.jsx)("div", { className: "form-additional form-group col-xs-5", children }), (0, import_jsx_runtime123.jsx)("div", { className: "col-xs-2", children: (0, import_jsx_runtime123.jsx)(RemoveButton3, { className: "array-item-remove btn-block", style: { border: "0" }, disabled: disabled || readonly, onClick: onDropPropertyClick(label), uiSchema, registry }) })] }) });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/templates/index.js
  function templates() {
    return {
      ArrayFieldDescriptionTemplate,
      ArrayFieldItemTemplate,
      ArrayFieldTemplate,
      ArrayFieldTitleTemplate,
      ButtonTemplates: ButtonTemplates_default(),
      BaseInputTemplate,
      DescriptionFieldTemplate: DescriptionField,
      ErrorListTemplate: ErrorList,
      FieldTemplate: FieldTemplate_default,
      FieldErrorTemplate,
      FieldHelpTemplate,
      ObjectFieldTemplate,
      TitleFieldTemplate: TitleField,
      UnsupportedFieldTemplate: UnsupportedField_default,
      WrapIfAdditionalTemplate
    };
  }
  var templates_default = templates;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/AltDateWidget.js
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var import_react21 = __toESM(require_react());
  function readyForChange(state) {
    return Object.values(state).every((value) => value !== -1);
  }
  function DateElement({ type, range, value, select, rootId, name, disabled, readonly, autofocus, registry, onBlur, onFocus }) {
    const id = rootId + "_" + type;
    const { SelectWidget: SelectWidget3 } = registry.widgets;
    return (0, import_jsx_runtime124.jsx)(SelectWidget3, { schema: { type: "integer" }, id, name, className: "form-control", options: { enumOptions: dateRangeOptions(range[0], range[1]) }, placeholder: type, value, disabled, readonly, autofocus, onChange: (value2) => select(type, value2), onBlur, onFocus, registry, label: "", "aria-describedby": ariaDescribedByIds(rootId) });
  }
  function AltDateWidget({ time = false, disabled = false, readonly = false, autofocus = false, options, id, name, registry, onBlur, onFocus, onChange, value }) {
    const { translateString } = registry;
    const [lastValue, setLastValue] = (0, import_react21.useState)(value);
    const [state, setState] = (0, import_react21.useReducer)((state2, action) => {
      return { ...state2, ...action };
    }, parseDateString(value, time));
    (0, import_react21.useEffect)(() => {
      const stateValue = toDateString(state, time);
      if (readyForChange(state) && stateValue !== value) {
        onChange(stateValue);
      } else if (lastValue !== value) {
        setLastValue(value);
        setState(parseDateString(value, time));
      }
    }, [time, value, onChange, state, lastValue]);
    const handleChange = (0, import_react21.useCallback)((property2, value2) => {
      setState({ [property2]: value2 });
    }, []);
    const handleSetNow = (0, import_react21.useCallback)((event) => {
      event.preventDefault();
      if (disabled || readonly) {
        return;
      }
      const nextState = parseDateString((/* @__PURE__ */ new Date()).toJSON(), time);
      onChange(toDateString(nextState, time));
    }, [disabled, readonly, time]);
    const handleClear = (0, import_react21.useCallback)((event) => {
      event.preventDefault();
      if (disabled || readonly) {
        return;
      }
      onChange(void 0);
    }, [disabled, readonly, onChange]);
    return (0, import_jsx_runtime124.jsxs)("ul", { className: "list-inline", children: [getDateElementProps(state, time, options.yearsRange, options.format).map((elemProps, i2) => (0, import_jsx_runtime124.jsx)("li", { className: "list-inline-item", children: (0, import_jsx_runtime124.jsx)(DateElement, { rootId: id, name, select: handleChange, ...elemProps, disabled, readonly, registry, onBlur, onFocus, autofocus: autofocus && i2 === 0 }) }, i2)), (options.hideNowButton !== "undefined" ? !options.hideNowButton : true) && (0, import_jsx_runtime124.jsx)("li", { className: "list-inline-item", children: (0, import_jsx_runtime124.jsx)("a", { href: "#", className: "btn btn-info btn-now", onClick: handleSetNow, children: translateString(TranslatableString.NowLabel) }) }), (options.hideClearButton !== "undefined" ? !options.hideClearButton : true) && (0, import_jsx_runtime124.jsx)("li", { className: "list-inline-item", children: (0, import_jsx_runtime124.jsx)("a", { href: "#", className: "btn btn-warning btn-clear", onClick: handleClear, children: translateString(TranslatableString.ClearLabel) }) })] });
  }
  var AltDateWidget_default = AltDateWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/AltDateTimeWidget.js
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  function AltDateTimeWidget({ time = true, ...props }) {
    const { AltDateWidget: AltDateWidget2 } = props.registry.widgets;
    return (0, import_jsx_runtime125.jsx)(AltDateWidget2, { time, ...props });
  }
  var AltDateTimeWidget_default = AltDateTimeWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/CheckboxWidget.js
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  var import_react22 = __toESM(require_react());
  function CheckboxWidget({ schema, uiSchema, options, id, value, disabled, readonly, label, hideLabel, autofocus = false, onBlur, onFocus, onChange, registry }) {
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    const required = schemaRequiresTrueValue(schema);
    const handleChange = (0, import_react22.useCallback)((event) => onChange(event.target.checked), [onChange]);
    const handleBlur = (0, import_react22.useCallback)((event) => onBlur(id, event.target.checked), [onBlur, id]);
    const handleFocus = (0, import_react22.useCallback)((event) => onFocus(id, event.target.checked), [onFocus, id]);
    const description = options.description ?? schema.description;
    return (0, import_jsx_runtime126.jsxs)("div", { className: `checkbox ${disabled || readonly ? "disabled" : ""}`, children: [!hideLabel && !!description && (0, import_jsx_runtime126.jsx)(DescriptionFieldTemplate, { id: descriptionId(id), description, schema, uiSchema, registry }), (0, import_jsx_runtime126.jsxs)("label", { children: [(0, import_jsx_runtime126.jsx)("input", { type: "checkbox", id, name: id, checked: typeof value === "undefined" ? false : value, required, disabled: disabled || readonly, autoFocus: autofocus, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, "aria-describedby": ariaDescribedByIds(id) }), labelValue((0, import_jsx_runtime126.jsx)("span", { children: label }), hideLabel)] })] });
  }
  var CheckboxWidget_default = CheckboxWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/CheckboxesWidget.js
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var import_react23 = __toESM(require_react());
  function CheckboxesWidget({ id, disabled, options: { inline = false, enumOptions, enumDisabled, emptyValue }, value, autofocus = false, readonly, onChange, onBlur, onFocus }) {
    const checkboxesValues = Array.isArray(value) ? value : [value];
    const handleBlur = (0, import_react23.useCallback)(({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue)), [onBlur, id]);
    const handleFocus = (0, import_react23.useCallback)(({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue)), [onFocus, id]);
    return (0, import_jsx_runtime127.jsx)("div", { className: "checkboxes", id, children: Array.isArray(enumOptions) && enumOptions.map((option, index) => {
      const checked = enumOptionsIsSelected(option.value, checkboxesValues);
      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      const disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      const handleChange = (event) => {
        if (event.target.checked) {
          onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));
        } else {
          onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));
        }
      };
      const checkbox = (0, import_jsx_runtime127.jsxs)("span", { children: [(0, import_jsx_runtime127.jsx)("input", { type: "checkbox", id: optionId(id, index), name: id, checked, value: String(index), disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && index === 0, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, "aria-describedby": ariaDescribedByIds(id) }), (0, import_jsx_runtime127.jsx)("span", { children: option.label })] });
      return inline ? (0, import_jsx_runtime127.jsx)("label", { className: `checkbox-inline ${disabledCls}`, children: checkbox }, index) : (0, import_jsx_runtime127.jsx)("div", { className: `checkbox ${disabledCls}`, children: (0, import_jsx_runtime127.jsx)("label", { children: checkbox }) }, index);
    }) });
  }
  var CheckboxesWidget_default = CheckboxesWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/ColorWidget.js
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  function ColorWidget(props) {
    const { disabled, readonly, options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime128.jsx)(BaseInputTemplate3, { type: "color", ...props, disabled: disabled || readonly });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/DateWidget.js
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var import_react24 = __toESM(require_react());
  function DateWidget(props) {
    const { onChange, options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    const handleChange = (0, import_react24.useCallback)((value) => onChange(value || void 0), [onChange]);
    return (0, import_jsx_runtime129.jsx)(BaseInputTemplate3, { type: "date", ...props, onChange: handleChange });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/DateTimeWidget.js
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  function DateTimeWidget(props) {
    const { onChange, value, options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime130.jsx)(BaseInputTemplate3, { type: "datetime-local", ...props, value: utcToLocal(value), onChange: (value2) => onChange(localToUTC(value2)) });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/EmailWidget.js
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  function EmailWidget(props) {
    const { options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime131.jsx)(BaseInputTemplate3, { type: "email", ...props });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/FileWidget.js
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var import_react25 = __toESM(require_react());
  function addNameToDataURL(dataURL, name) {
    if (dataURL === null) {
      return null;
    }
    return dataURL.replace(";base64", `;name=${encodeURIComponent(name)};base64`);
  }
  function processFile(file) {
    const { name, size, type } = file;
    return new Promise((resolve, reject) => {
      const reader = new window.FileReader();
      reader.onerror = reject;
      reader.onload = (event) => {
        if (typeof event.target?.result === "string") {
          resolve({
            dataURL: addNameToDataURL(event.target.result, name),
            name,
            size,
            type
          });
        } else {
          resolve({
            dataURL: null,
            name,
            size,
            type
          });
        }
      };
      reader.readAsDataURL(file);
    });
  }
  function processFiles(files) {
    return Promise.all(Array.from(files).map(processFile));
  }
  function FileInfoPreview({ fileInfo, registry }) {
    const { translateString } = registry;
    const { dataURL, type, name } = fileInfo;
    if (!dataURL) {
      return null;
    }
    if (["image/jpeg", "image/png"].includes(type)) {
      return (0, import_jsx_runtime132.jsx)("img", { src: dataURL, style: { maxWidth: "100%" }, className: "file-preview" });
    }
    return (0, import_jsx_runtime132.jsxs)(import_jsx_runtime132.Fragment, { children: [" ", (0, import_jsx_runtime132.jsx)("a", { download: `preview-${name}`, href: dataURL, className: "file-download", children: translateString(TranslatableString.PreviewLabel) })] });
  }
  function FilesInfo({ filesInfo, registry, preview, onRemove, options }) {
    if (filesInfo.length === 0) {
      return null;
    }
    const { translateString } = registry;
    const { RemoveButton: RemoveButton3 } = getTemplate("ButtonTemplates", registry, options);
    return (0, import_jsx_runtime132.jsx)("ul", { className: "file-info", children: filesInfo.map((fileInfo, key) => {
      const { name, size, type } = fileInfo;
      const handleRemove = () => onRemove(key);
      return (0, import_jsx_runtime132.jsxs)("li", { children: [(0, import_jsx_runtime132.jsx)(index_modern_default, { children: translateString(TranslatableString.FilesInfo, [name, type, String(size)]) }), preview && (0, import_jsx_runtime132.jsx)(FileInfoPreview, { fileInfo, registry }), (0, import_jsx_runtime132.jsx)(RemoveButton3, { onClick: handleRemove, registry })] }, key);
    }) });
  }
  function extractFileInfo(dataURLs) {
    return dataURLs.reduce((acc, dataURL) => {
      if (!dataURL) {
        return acc;
      }
      try {
        const { blob, name } = dataURItoBlob(dataURL);
        return [
          ...acc,
          {
            dataURL,
            name,
            size: blob.size,
            type: blob.type
          }
        ];
      } catch (e2) {
        return acc;
      }
    }, []);
  }
  function FileWidget(props) {
    const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    const handleChange = (0, import_react25.useCallback)((event) => {
      if (!event.target.files) {
        return;
      }
      processFiles(event.target.files).then((filesInfoEvent) => {
        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);
        if (multiple) {
          onChange(value.concat(newValue));
        } else {
          onChange(newValue[0]);
        }
      });
    }, [multiple, value, onChange]);
    const filesInfo = (0, import_react25.useMemo)(() => extractFileInfo(Array.isArray(value) ? value : [value]), [value]);
    const rmFile = (0, import_react25.useCallback)((index) => {
      if (multiple) {
        const newValue = value.filter((_2, i2) => i2 !== index);
        onChange(newValue);
      } else {
        onChange(void 0);
      }
    }, [multiple, value, onChange]);
    return (0, import_jsx_runtime132.jsxs)("div", { children: [(0, import_jsx_runtime132.jsx)(BaseInputTemplate3, { ...props, disabled: disabled || readonly, type: "file", required: value ? false : required, onChangeOverride: handleChange, value: "", accept: options.accept ? String(options.accept) : void 0 }), (0, import_jsx_runtime132.jsx)(FilesInfo, { filesInfo, onRemove: rmFile, registry, preview: options.filePreview, options })] });
  }
  var FileWidget_default = FileWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/HiddenWidget.js
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  function HiddenWidget({ id, value }) {
    return (0, import_jsx_runtime133.jsx)("input", { type: "hidden", id, name: id, value: typeof value === "undefined" ? "" : value });
  }
  var HiddenWidget_default = HiddenWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/PasswordWidget.js
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  function PasswordWidget(props) {
    const { options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime134.jsx)(BaseInputTemplate3, { type: "password", ...props });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/RadioWidget.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  var import_react26 = __toESM(require_react());
  function RadioWidget({ options, value, required, disabled, readonly, autofocus = false, onBlur, onFocus, onChange, id }) {
    const { enumOptions, enumDisabled, inline, emptyValue } = options;
    const handleBlur = (0, import_react26.useCallback)(({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue)), [onBlur, id]);
    const handleFocus = (0, import_react26.useCallback)(({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue)), [onFocus, id]);
    return (0, import_jsx_runtime135.jsx)("div", { className: "field-radio-group", id, children: Array.isArray(enumOptions) && enumOptions.map((option, i2) => {
      const checked = enumOptionsIsSelected(option.value, value);
      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      const disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      const handleChange = () => onChange(option.value);
      const radio = (0, import_jsx_runtime135.jsxs)("span", { children: [(0, import_jsx_runtime135.jsx)("input", { type: "radio", id: optionId(id, i2), checked, name: id, required, value: String(i2), disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && i2 === 0, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, "aria-describedby": ariaDescribedByIds(id) }), (0, import_jsx_runtime135.jsx)("span", { children: option.label })] });
      return inline ? (0, import_jsx_runtime135.jsx)("label", { className: `radio-inline ${disabledCls}`, children: radio }, i2) : (0, import_jsx_runtime135.jsx)("div", { className: `radio ${disabledCls}`, children: (0, import_jsx_runtime135.jsx)("label", { children: radio }) }, i2);
    }) });
  }
  var RadioWidget_default = RadioWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/RangeWidget.js
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  function RangeWidget(props) {
    const { value, registry: { templates: { BaseInputTemplate: BaseInputTemplate3 } } } = props;
    return (0, import_jsx_runtime136.jsxs)("div", { className: "field-range-wrapper", children: [(0, import_jsx_runtime136.jsx)(BaseInputTemplate3, { type: "range", ...props }), (0, import_jsx_runtime136.jsx)("span", { className: "range-view", children: value })] });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/SelectWidget.js
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var import_react27 = __toESM(require_react());
  function getValue3(event, multiple) {
    if (multiple) {
      return Array.from(event.target.options).slice().filter((o2) => o2.selected).map((o2) => o2.value);
    }
    return event.target.value;
  }
  function SelectWidget({ schema, id, options, value, required, disabled, readonly, multiple = false, autofocus = false, onChange, onBlur, onFocus, placeholder }) {
    const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;
    const emptyValue = multiple ? [] : "";
    const handleFocus = (0, import_react27.useCallback)((event) => {
      const newValue = getValue3(event, multiple);
      return onFocus(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));
    }, [onFocus, id, schema, multiple, enumOptions, optEmptyVal]);
    const handleBlur = (0, import_react27.useCallback)((event) => {
      const newValue = getValue3(event, multiple);
      return onBlur(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));
    }, [onBlur, id, schema, multiple, enumOptions, optEmptyVal]);
    const handleChange = (0, import_react27.useCallback)((event) => {
      const newValue = getValue3(event, multiple);
      return onChange(enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));
    }, [onChange, schema, multiple, enumOptions, optEmptyVal]);
    const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);
    const showPlaceholderOption = !multiple && schema.default === void 0;
    return (0, import_jsx_runtime137.jsxs)("select", { id, name: id, multiple, className: "form-control", value: typeof selectedIndexes === "undefined" ? emptyValue : selectedIndexes, required, disabled: disabled || readonly, autoFocus: autofocus, onBlur: handleBlur, onFocus: handleFocus, onChange: handleChange, "aria-describedby": ariaDescribedByIds(id), children: [showPlaceholderOption && (0, import_jsx_runtime137.jsx)("option", { value: "", children: placeholder }), Array.isArray(enumOptions) && enumOptions.map(({ value: value2, label }, i2) => {
      const disabled2 = enumDisabled && enumDisabled.indexOf(value2) !== -1;
      return (0, import_jsx_runtime137.jsx)("option", { value: String(i2), disabled: disabled2, children: label }, i2);
    })] });
  }
  var SelectWidget_default = SelectWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/TextareaWidget.js
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  var import_react28 = __toESM(require_react());
  function TextareaWidget({ id, options = {}, placeholder, value, required, disabled, readonly, autofocus = false, onChange, onBlur, onFocus }) {
    const handleChange = (0, import_react28.useCallback)(({ target: { value: value2 } }) => onChange(value2 === "" ? options.emptyValue : value2), [onChange, options.emptyValue]);
    const handleBlur = (0, import_react28.useCallback)(({ target }) => onBlur(id, target && target.value), [onBlur, id]);
    const handleFocus = (0, import_react28.useCallback)(({ target }) => onFocus(id, target && target.value), [id, onFocus]);
    return (0, import_jsx_runtime138.jsx)("textarea", { id, name: id, className: "form-control", value: value ? value : "", placeholder, required, disabled, readOnly: readonly, autoFocus: autofocus, rows: options.rows, onBlur: handleBlur, onFocus: handleFocus, onChange: handleChange, "aria-describedby": ariaDescribedByIds(id) });
  }
  TextareaWidget.defaultProps = {
    autofocus: false,
    options: {}
  };
  var TextareaWidget_default = TextareaWidget;

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/TextWidget.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  function TextWidget(props) {
    const { options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime139.jsx)(BaseInputTemplate3, { ...props });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/TimeWidget.js
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var import_react29 = __toESM(require_react());
  function TimeWidget(props) {
    const { onChange, options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    const handleChange = (0, import_react29.useCallback)((value) => onChange(value ? `${value}:00` : void 0), [onChange]);
    return (0, import_jsx_runtime140.jsx)(BaseInputTemplate3, { type: "time", ...props, onChange: handleChange });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/URLWidget.js
  var import_jsx_runtime141 = __toESM(require_jsx_runtime());
  function URLWidget(props) {
    const { options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime141.jsx)(BaseInputTemplate3, { type: "url", ...props });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/UpDownWidget.js
  var import_jsx_runtime142 = __toESM(require_jsx_runtime());
  function UpDownWidget(props) {
    const { options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    return (0, import_jsx_runtime142.jsx)(BaseInputTemplate3, { type: "number", ...props });
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/widgets/index.js
  function widgets() {
    return {
      AltDateWidget: AltDateWidget_default,
      AltDateTimeWidget: AltDateTimeWidget_default,
      CheckboxWidget: CheckboxWidget_default,
      CheckboxesWidget: CheckboxesWidget_default,
      ColorWidget,
      DateWidget,
      DateTimeWidget,
      EmailWidget,
      FileWidget: FileWidget_default,
      HiddenWidget: HiddenWidget_default,
      PasswordWidget,
      RadioWidget: RadioWidget_default,
      RangeWidget,
      SelectWidget: SelectWidget_default,
      TextWidget,
      TextareaWidget: TextareaWidget_default,
      TimeWidget,
      UpDownWidget,
      URLWidget
    };
  }
  var widgets_default = widgets;

  // react-user-mgmt/node_modules/@rjsf/core/lib/getDefaultRegistry.js
  function getDefaultRegistry() {
    return {
      fields: fields_default(),
      templates: templates_default(),
      widgets: widgets_default(),
      rootSchema: {},
      formContext: {},
      translateString: englishStringTranslator
    };
  }

  // react-user-mgmt/node_modules/@rjsf/core/lib/components/Form.js
  var Form = class extends import_react30.Component {
    /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the
     * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the
     * state construction.
     *
     * @param props - The initial props for the `Form`
     */
    constructor(props) {
      super(props);
      /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can
       * provide any possible type here
       */
      __publicField(this, "formElement");
      /** Returns the `formData` with only the elements specified in the `fields` list
       *
       * @param formData - The data for the `Form`
       * @param fields - The fields to keep while filtering
       */
      __publicField(this, "getUsedFormData", (formData, fields2) => {
        if (fields2.length === 0 && typeof formData !== "object") {
          return formData;
        }
        const data = pick_default(formData, fields2);
        if (Array.isArray(formData)) {
          return Object.keys(data).map((key) => data[key]);
        }
        return data;
      });
      /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`
       *
       * @param pathSchema - The `PathSchema` object for the form
       * @param [formData] - The form data to use while checking for empty objects/arrays
       */
      __publicField(this, "getFieldNames", (pathSchema, formData) => {
        const getAllPaths = (_obj, acc = [], paths = [[]]) => {
          Object.keys(_obj).forEach((key) => {
            if (typeof _obj[key] === "object") {
              const newPaths = paths.map((path) => [...path, key]);
              if (_obj[key][RJSF_ADDITIONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== "") {
                acc.push(_obj[key][NAME_KEY]);
              } else {
                getAllPaths(_obj[key], acc, newPaths);
              }
            } else if (key === NAME_KEY && _obj[key] !== "") {
              paths.forEach((path) => {
                const formValue = get_default(formData, path);
                if (typeof formValue !== "object" || isEmpty_default(formValue) || Array.isArray(formValue) && formValue.every((val) => typeof val !== "object")) {
                  acc.push(path);
                }
              });
            }
          });
          return acc;
        };
        return getAllPaths(pathSchema);
      });
      /** Returns the `formData` after filtering to remove any extra data not in a form field
       *
       * @param formData - The data for the `Form`
       * @returns The `formData` after omitting extra data
       */
      __publicField(this, "omitExtraData", (formData) => {
        const { schema, schemaUtils } = this.state;
        const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);
        const pathSchema = schemaUtils.toPathSchema(retrievedSchema, "", formData);
        const fieldNames = this.getFieldNames(pathSchema, formData);
        const newFormData = this.getUsedFormData(formData, fieldNames);
        return newFormData;
      });
      /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the
       * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and
       * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filtered to remove any extra data not
       * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new
       * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`
       * callback will be called if specified with the updated state.
       *
       * @param formData - The new form data from a change to a field
       * @param newErrorSchema - The new `ErrorSchema` based on the field change
       * @param id - The id of the field that caused the change
       */
      __publicField(this, "onChange", (formData, newErrorSchema, id) => {
        const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;
        const { schemaUtils, schema } = this.state;
        let retrievedSchema = this.state.retrievedSchema;
        if (isObject2(formData) || Array.isArray(formData)) {
          const newState = this.getStateFromProps(this.props, formData);
          formData = newState.formData;
          retrievedSchema = newState.retrievedSchema;
        }
        const mustValidate = !noValidate && liveValidate;
        let state = { formData, schema };
        let newFormData = formData;
        if (omitExtraData === true && liveOmit === true) {
          newFormData = this.omitExtraData(formData);
          state = {
            formData: newFormData
          };
        }
        if (mustValidate) {
          const schemaValidation = this.validate(newFormData, schema, schemaUtils, retrievedSchema);
          let errors = schemaValidation.errors;
          let errorSchema = schemaValidation.errorSchema;
          const schemaValidationErrors = errors;
          const schemaValidationErrorSchema = errorSchema;
          if (extraErrors) {
            const merged = validationDataMerge(schemaValidation, extraErrors);
            errorSchema = merged.errorSchema;
            errors = merged.errors;
          }
          if (newErrorSchema) {
            const filteredErrors = this.filterErrorsBasedOnSchema(newErrorSchema, retrievedSchema, newFormData);
            errorSchema = mergeObjects(errorSchema, filteredErrors, "preventDuplicates");
          }
          state = {
            formData: newFormData,
            errors,
            errorSchema,
            schemaValidationErrors,
            schemaValidationErrorSchema
          };
        } else if (!noValidate && newErrorSchema) {
          const errorSchema = extraErrors ? mergeObjects(newErrorSchema, extraErrors, "preventDuplicates") : newErrorSchema;
          state = {
            formData: newFormData,
            errorSchema,
            errors: toErrorList(errorSchema)
          };
        }
        this.setState(state, () => onChange && onChange({ ...this.state, ...state }, id));
      });
      /**
       * Callback function to handle reset form data.
       * - Reset all fields with default values.
       * - Reset validations and errors
       *
       */
      __publicField(this, "reset", () => {
        const { onChange } = this.props;
        const newState = this.getStateFromProps(this.props, void 0);
        const newFormData = newState.formData;
        const state = {
          formData: newFormData,
          errorSchema: {},
          errors: [],
          schemaValidationErrors: [],
          schemaValidationErrorSchema: {}
        };
        this.setState(state, () => onChange && onChange({ ...this.state, ...state }));
      });
      /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it
       * was provided.
       *
       * @param id - The unique `id` of the field that was blurred
       * @param data - The data associated with the field that was blurred
       */
      __publicField(this, "onBlur", (id, data) => {
        const { onBlur } = this.props;
        if (onBlur) {
          onBlur(id, data);
        }
      });
      /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it
       * was provided.
       *
       * @param id - The unique `id` of the field that was focused
       * @param data - The data associated with the field that was focused
       */
      __publicField(this, "onFocus", (id, data) => {
        const { onFocus } = this.props;
        if (onFocus) {
          onFocus(id, data);
        }
      });
      /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing
       * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the
       * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors
       * via the `onError()` callback unless validation is disabled. Finally, it will add in any `extraErrors` and then call
       * back the `onSubmit` callback if it was provided.
       *
       * @param event - The submit HTML form event
       */
      __publicField(this, "onSubmit", (event) => {
        event.preventDefault();
        if (event.target !== event.currentTarget) {
          return;
        }
        event.persist();
        const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;
        let { formData: newFormData } = this.state;
        if (omitExtraData === true) {
          newFormData = this.omitExtraData(newFormData);
        }
        if (noValidate || this.validateFormWithFormData(newFormData)) {
          const errorSchema = extraErrors || {};
          const errors = extraErrors ? toErrorList(extraErrors) : [];
          this.setState({
            formData: newFormData,
            errors,
            errorSchema,
            schemaValidationErrors: [],
            schemaValidationErrorSchema: {}
          }, () => {
            if (onSubmit) {
              onSubmit({ ...this.state, formData: newFormData, status: "submitted" }, event);
            }
          });
        }
      });
      /** Provides a function that can be used to programmatically submit the `Form` */
      __publicField(this, "submit", () => {
        if (this.formElement.current) {
          const submitCustomEvent = new CustomEvent("submit", {
            cancelable: true
          });
          submitCustomEvent.preventDefault();
          this.formElement.current.dispatchEvent(submitCustomEvent);
          this.formElement.current.requestSubmit();
        }
      });
      /** Validates the form using the given `formData`. For use on form submission or on programmatic validation.
       * If `onError` is provided, then it will be called with the list of errors.
       *
       * @param formData - The form data to validate
       * @returns - True if the form is valid, false otherwise.
       */
      __publicField(this, "validateFormWithFormData", (formData) => {
        const { extraErrors, extraErrorsBlockSubmit, focusOnFirstError, onError } = this.props;
        const { errors: prevErrors } = this.state;
        const schemaValidation = this.validate(formData);
        let errors = schemaValidation.errors;
        let errorSchema = schemaValidation.errorSchema;
        const schemaValidationErrors = errors;
        const schemaValidationErrorSchema = errorSchema;
        const hasError = errors.length > 0 || extraErrors && extraErrorsBlockSubmit;
        if (hasError) {
          if (extraErrors) {
            const merged = validationDataMerge(schemaValidation, extraErrors);
            errorSchema = merged.errorSchema;
            errors = merged.errors;
          }
          if (focusOnFirstError) {
            if (typeof focusOnFirstError === "function") {
              focusOnFirstError(errors[0]);
            } else {
              this.focusOnError(errors[0]);
            }
          }
          this.setState({
            errors,
            errorSchema,
            schemaValidationErrors,
            schemaValidationErrorSchema
          }, () => {
            if (onError) {
              onError(errors);
            } else {
              console.error("Form validation failed", errors);
            }
          });
        } else if (prevErrors.length > 0) {
          this.setState({
            errors: [],
            errorSchema: {},
            schemaValidationErrors: [],
            schemaValidationErrorSchema: {}
          });
        }
        return !hasError;
      });
      if (!props.validator) {
        throw new Error("A validator is required for Form functionality to work");
      }
      this.state = this.getStateFromProps(props, props.formData);
      if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {
        this.props.onChange(this.state);
      }
      this.formElement = (0, import_react30.createRef)();
    }
    /**
     * `getSnapshotBeforeUpdate` is a React lifecycle method that is invoked right before the most recently rendered
     * output is committed to the DOM. It enables your component to capture current values (e.g., scroll position) before
     * they are potentially changed.
     *
     * In this case, it checks if the props have changed since the last render. If they have, it computes the next state
     * of the component using `getStateFromProps` method and returns it along with a `shouldUpdate` flag set to `true` IF
     * the `nextState` and `prevState` are different, otherwise `false`. This ensures that we have the most up-to-date
     * state ready to be applied in `componentDidUpdate`.
     *
     * If `formData` hasn't changed, it simply returns an object with `shouldUpdate` set to `false`, indicating that a
     * state update is not necessary.
     *
     * @param prevProps - The previous set of props before the update.
     * @param prevState - The previous state before the update.
     * @returns Either an object containing the next state and a flag indicating that an update should occur, or an object
     *        with a flag indicating that an update is not necessary.
     */
    getSnapshotBeforeUpdate(prevProps, prevState) {
      if (!deepEquals(this.props, prevProps)) {
        const formDataChangedFields = getChangedFields(this.props.formData, prevProps.formData);
        const isSchemaChanged = !deepEquals(prevProps.schema, this.props.schema);
        const isFormDataChanged = formDataChangedFields.length > 0 || !deepEquals(prevProps.formData, this.props.formData);
        const nextState = this.getStateFromProps(
          this.props,
          this.props.formData,
          // If the `schema` has changed, we need to update the retrieved schema.
          // Or if the `formData` changes, for example in the case of a schema with dependencies that need to
          //  match one of the subSchemas, the retrieved schema must be updated.
          isSchemaChanged || isFormDataChanged ? void 0 : this.state.retrievedSchema,
          isSchemaChanged,
          formDataChangedFields
        );
        const shouldUpdate = !deepEquals(nextState, prevState);
        return { nextState, shouldUpdate };
      }
      return { shouldUpdate: false };
    }
    /**
     * `componentDidUpdate` is a React lifecycle method that is invoked immediately after updating occurs. This method is
     * not called for the initial render.
     *
     * Here, it checks if an update is necessary based on the `shouldUpdate` flag received from `getSnapshotBeforeUpdate`.
     * If an update is required, it applies the next state and, if needed, triggers the `onChange` handler to inform about
     * changes.
     *
     * This method effectively replaces the deprecated `UNSAFE_componentWillReceiveProps`, providing a safer alternative
     * to handle prop changes and state updates.
     *
     * @param _ - The previous set of props.
     * @param prevState - The previous state of the component before the update.
     * @param snapshot - The value returned from `getSnapshotBeforeUpdate`.
     */
    componentDidUpdate(_2, prevState, snapshot) {
      if (snapshot.shouldUpdate) {
        const { nextState } = snapshot;
        if (!deepEquals(nextState.formData, this.props.formData) && !deepEquals(nextState.formData, prevState.formData) && this.props.onChange) {
          this.props.onChange(nextState);
        }
        this.setState(nextState);
      }
    }
    /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the
     * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the
     * validation process IF required by the `props`.
     *
     * @param props - The props passed to the `Form`
     * @param inputFormData - The new or current data for the `Form`
     * @param retrievedSchema - An expanded schema, if not provided, it will be retrieved from the `schema` and `formData`.
     * @param isSchemaChanged - A flag indicating whether the schema has changed.
     * @param formDataChangedFields - The changed fields of `formData`
     * @returns - The new state for the `Form`
     */
    getStateFromProps(props, inputFormData, retrievedSchema, isSchemaChanged = false, formDataChangedFields = []) {
      const state = this.state || {};
      const schema = "schema" in props ? props.schema : this.props.schema;
      const uiSchema = ("uiSchema" in props ? props.uiSchema : this.props.uiSchema) || {};
      const edit = typeof inputFormData !== "undefined";
      const liveValidate = "liveValidate" in props ? props.liveValidate : this.props.liveValidate;
      const mustValidate = edit && !props.noValidate && liveValidate;
      const rootSchema = schema;
      const experimental_defaultFormStateBehavior = "experimental_defaultFormStateBehavior" in props ? props.experimental_defaultFormStateBehavior : this.props.experimental_defaultFormStateBehavior;
      const experimental_customMergeAllOf = "experimental_customMergeAllOf" in props ? props.experimental_customMergeAllOf : this.props.experimental_customMergeAllOf;
      let schemaUtils = state.schemaUtils;
      if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema, experimental_defaultFormStateBehavior, experimental_customMergeAllOf)) {
        schemaUtils = createSchemaUtils(props.validator, rootSchema, experimental_defaultFormStateBehavior, experimental_customMergeAllOf);
      }
      const formData = schemaUtils.getDefaultFormState(schema, inputFormData);
      const _retrievedSchema = this.updateRetrievedSchema(retrievedSchema ?? schemaUtils.retrieveSchema(schema, formData));
      const getCurrentErrors = () => {
        if (props.noValidate || isSchemaChanged) {
          return { errors: [], errorSchema: {} };
        } else if (!props.liveValidate) {
          return {
            errors: state.schemaValidationErrors || [],
            errorSchema: state.schemaValidationErrorSchema || {}
          };
        }
        return {
          errors: state.errors || [],
          errorSchema: state.errorSchema || {}
        };
      };
      let errors;
      let errorSchema;
      let schemaValidationErrors = state.schemaValidationErrors;
      let schemaValidationErrorSchema = state.schemaValidationErrorSchema;
      if (mustValidate) {
        const schemaValidation = this.validate(formData, schema, schemaUtils, _retrievedSchema);
        errors = schemaValidation.errors;
        if (retrievedSchema === void 0) {
          errorSchema = schemaValidation.errorSchema;
        } else {
          errorSchema = mergeObjects(this.state?.errorSchema, schemaValidation.errorSchema, "preventDuplicates");
        }
        schemaValidationErrors = errors;
        schemaValidationErrorSchema = errorSchema;
      } else {
        const currentErrors = getCurrentErrors();
        errors = currentErrors.errors;
        errorSchema = currentErrors.errorSchema;
        if (formDataChangedFields.length > 0) {
          const newErrorSchema = formDataChangedFields.reduce((acc, key) => {
            acc[key] = void 0;
            return acc;
          }, {});
          errorSchema = schemaValidationErrorSchema = mergeObjects(currentErrors.errorSchema, newErrorSchema, "preventDuplicates");
        }
      }
      if (props.extraErrors) {
        const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);
        errorSchema = merged.errorSchema;
        errors = merged.errors;
      }
      const idSchema = schemaUtils.toIdSchema(_retrievedSchema, uiSchema["ui:rootFieldId"], formData, props.idPrefix, props.idSeparator);
      const nextState = {
        schemaUtils,
        schema,
        uiSchema,
        idSchema,
        formData,
        edit,
        errors,
        errorSchema,
        schemaValidationErrors,
        schemaValidationErrorSchema,
        retrievedSchema: _retrievedSchema
      };
      return nextState;
    }
    /** React lifecycle method that is used to determine whether component should be updated.
     *
     * @param nextProps - The next version of the props
     * @param nextState - The next version of the state
     * @returns - True if the component should be updated, false otherwise
     */
    shouldComponentUpdate(nextProps, nextState) {
      return shouldRender(this, nextProps, nextState);
    }
    /** Gets the previously raised customValidate errors.
     *
     * @returns the previous customValidate errors
     */
    getPreviousCustomValidateErrors() {
      const { customValidate, uiSchema } = this.props;
      const prevFormData = this.state.formData;
      let customValidateErrors = {};
      if (typeof customValidate === "function") {
        const errorHandler = customValidate(prevFormData, createErrorHandler(prevFormData), uiSchema);
        const userErrorSchema = unwrapErrorHandler(errorHandler);
        customValidateErrors = userErrorSchema;
      }
      return customValidateErrors;
    }
    /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the
     * `schemaUtils` in the state), returning the results.
     *
     * @param formData - The new form data to validate
     * @param schema - The schema used to validate against
     * @param altSchemaUtils - The alternate schemaUtils to use for validation
     */
    validate(formData, schema = this.props.schema, altSchemaUtils, retrievedSchema) {
      const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;
      const { customValidate, transformErrors, uiSchema } = this.props;
      const resolvedSchema = retrievedSchema ?? schemaUtils.retrieveSchema(schema, formData);
      return schemaUtils.getValidator().validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);
    }
    /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */
    renderErrors(registry) {
      const { errors, errorSchema, schema, uiSchema } = this.state;
      const { formContext } = this.props;
      const options = getUiOptions(uiSchema);
      const ErrorListTemplate = getTemplate("ErrorListTemplate", registry, options);
      if (errors && errors.length) {
        return (0, import_jsx_runtime143.jsx)(ErrorListTemplate, { errors, errorSchema: errorSchema || {}, schema, uiSchema, formContext, registry });
      }
      return null;
    }
    // Filtering errors based on your retrieved schema to only show errors for properties in the selected branch.
    filterErrorsBasedOnSchema(schemaErrors, resolvedSchema, formData) {
      const { retrievedSchema, schemaUtils } = this.state;
      const _retrievedSchema = resolvedSchema ?? retrievedSchema;
      const pathSchema = schemaUtils.toPathSchema(_retrievedSchema, "", formData);
      const fieldNames = this.getFieldNames(pathSchema, formData);
      const filteredErrors = pick_default(schemaErrors, fieldNames);
      if (resolvedSchema?.type !== "object" && resolvedSchema?.type !== "array") {
        filteredErrors.__errors = schemaErrors.__errors;
      }
      const prevCustomValidateErrors = this.getPreviousCustomValidateErrors();
      const filterPreviousCustomErrors = (errors = [], prevCustomErrors) => {
        if (errors.length === 0) {
          return errors;
        }
        return errors.filter((error) => {
          return !prevCustomErrors.includes(error);
        });
      };
      const filterNilOrEmptyErrors = (errors, previousCustomValidateErrors = {}) => {
        forEach_default(errors, (errorAtKey, errorKey) => {
          const prevCustomValidateErrorAtKey = previousCustomValidateErrors[errorKey];
          if (isNil_default(errorAtKey) || Array.isArray(errorAtKey) && errorAtKey.length === 0) {
            delete errors[errorKey];
          } else if (isObject2(errorAtKey) && isObject2(prevCustomValidateErrorAtKey) && Array.isArray(prevCustomValidateErrorAtKey?.__errors)) {
            errors[errorKey] = filterPreviousCustomErrors(errorAtKey.__errors, prevCustomValidateErrorAtKey.__errors);
          } else if (typeof errorAtKey === "object" && !Array.isArray(errorAtKey.__errors)) {
            filterNilOrEmptyErrors(errorAtKey, previousCustomValidateErrors[errorKey]);
          }
        });
        return errors;
      };
      return filterNilOrEmptyErrors(filteredErrors, prevCustomValidateErrors);
    }
    /**
     * If the retrievedSchema has changed the new retrievedSchema is returned.
     * Otherwise, the old retrievedSchema is returned to persist reference.
     * -  This ensures that AJV retrieves the schema from the cache when it has not changed,
     *    avoiding the performance cost of recompiling the schema.
     *
     * @param retrievedSchema The new retrieved schema.
     * @returns The new retrieved schema if it has changed, else the old retrieved schema.
     */
    updateRetrievedSchema(retrievedSchema) {
      const isTheSame = deepEquals(retrievedSchema, this.state?.retrievedSchema);
      return isTheSame ? this.state.retrievedSchema : retrievedSchema;
    }
    /** Returns the registry for the form */
    getRegistry() {
      const { translateString: customTranslateString, uiSchema = {} } = this.props;
      const { schemaUtils } = this.state;
      const { fields: fields2, templates: templates2, widgets: widgets2, formContext, translateString } = getDefaultRegistry();
      return {
        fields: { ...fields2, ...this.props.fields },
        templates: {
          ...templates2,
          ...this.props.templates,
          ButtonTemplates: {
            ...templates2.ButtonTemplates,
            ...this.props.templates?.ButtonTemplates
          }
        },
        widgets: { ...widgets2, ...this.props.widgets },
        rootSchema: this.props.schema,
        formContext: this.props.formContext || formContext,
        schemaUtils,
        translateString: customTranslateString || translateString,
        globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY]
      };
    }
    /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error
     * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that
     * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.
     *
     * @param error - The error on which to focus
     */
    focusOnError(error) {
      const { idPrefix = "root", idSeparator = "_" } = this.props;
      const { property: property2 } = error;
      const path = toPath_default(property2);
      if (path[0] === "") {
        path[0] = idPrefix;
      } else {
        path.unshift(idPrefix);
      }
      const elementId = path.join(idSeparator);
      let field = this.formElement.current.elements[elementId];
      if (!field) {
        field = this.formElement.current.querySelector(`input[id^="${elementId}"`);
      }
      if (field && field.length) {
        field = field[0];
      }
      if (field) {
        field.focus();
      }
    }
    /** Programmatically validate the form.  If `omitExtraData` is true, the `formData` will first be filtered to remove
     * any extra data not in a form field. If `onError` is provided, then it will be called with the list of errors the
     * same way as would happen on form submission.
     *
     * @returns - True if the form is valid, false otherwise.
     */
    validateForm() {
      const { omitExtraData } = this.props;
      let { formData: newFormData } = this.state;
      if (omitExtraData === true) {
        newFormData = this.omitExtraData(newFormData);
      }
      return this.validateFormWithFormData(newFormData);
    }
    /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if
     * needed along with the submit button or any children of the form.
     */
    render() {
      const { children, id, idPrefix, idSeparator, className = "", tagName, name, method, target, action, autoComplete, enctype, acceptcharset, acceptCharset, noHtml5Validate = false, disabled, readonly, formContext, showErrorList = "top", _internalFormWrapper } = this.props;
      const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;
      const registry = this.getRegistry();
      const { SchemaField: _SchemaField } = registry.fields;
      const { SubmitButton: SubmitButton3 } = registry.templates.ButtonTemplates;
      const as = _internalFormWrapper ? tagName : void 0;
      const FormTag = _internalFormWrapper || tagName || "form";
      let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions(uiSchema);
      if (disabled) {
        submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };
      }
      const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };
      return (0, import_jsx_runtime143.jsxs)(FormTag, { className: className ? className : "rjsf", id, name, method, target, action, autoComplete, encType: enctype, acceptCharset: acceptCharset || acceptcharset, noValidate: noHtml5Validate, onSubmit: this.onSubmit, as, ref: this.formElement, children: [showErrorList === "top" && this.renderErrors(registry), (0, import_jsx_runtime143.jsx)(_SchemaField, { name: "", schema, uiSchema, errorSchema, idSchema, idPrefix, idSeparator, formContext, formData, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, registry, disabled, readonly }), children ? children : (0, import_jsx_runtime143.jsx)(SubmitButton3, { uiSchema: submitUiSchema, registry }), showErrorList === "bottom" && this.renderErrors(registry)] });
    }
  };

  // react-user-mgmt/node_modules/@rjsf/core/lib/withTheme.js
  var import_jsx_runtime144 = __toESM(require_jsx_runtime());
  var import_react31 = __toESM(require_react());
  function withTheme2(themeProps) {
    return (0, import_react31.forwardRef)(({ fields: fields2, widgets: widgets2, templates: templates2, ...directProps }, ref) => {
      fields2 = { ...themeProps?.fields, ...fields2 };
      widgets2 = { ...themeProps?.widgets, ...widgets2 };
      templates2 = {
        ...themeProps?.templates,
        ...templates2,
        ButtonTemplates: {
          ...themeProps?.templates?.ButtonTemplates,
          ...templates2?.ButtonTemplates
        }
      };
      return (0, import_jsx_runtime144.jsx)(Form, { ...themeProps, ...directProps, fields: fields2, widgets: widgets2, templates: templates2, ref });
    });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/AddButton/AddButton.js
  var import_jsx_runtime146 = __toESM(require_jsx_runtime());

  // react-user-mgmt/node_modules/@mui/icons-material/esm/Add.js
  var import_jsx_runtime145 = __toESM(require_jsx_runtime());
  var Add_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime145.jsx)("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z"
  }), "Add");

  // react-user-mgmt/node_modules/@rjsf/mui/lib/AddButton/AddButton.js
  function AddButton2({ uiSchema, registry, ...props }) {
    const { translateString } = registry;
    return (0, import_jsx_runtime146.jsx)(IconButton_default, { title: translateString(TranslatableString.AddItemButton), ...props, color: "primary", children: (0, import_jsx_runtime146.jsx)(Add_default, {}) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/ArrayFieldItemTemplate/ArrayFieldItemTemplate.js
  var import_jsx_runtime147 = __toESM(require_jsx_runtime());
  function ArrayFieldItemTemplate2(props) {
    const { children, disabled, hasToolbar, hasCopy, hasMoveDown, hasMoveUp, hasRemove, index, onCopyIndexClick, onDropIndexClick, onReorderClick, readonly, uiSchema, registry } = props;
    const { CopyButton: CopyButton3, MoveDownButton: MoveDownButton3, MoveUpButton: MoveUpButton3, RemoveButton: RemoveButton3 } = registry.templates.ButtonTemplates;
    const btnStyle = {
      flex: 1,
      paddingLeft: 6,
      paddingRight: 6,
      fontWeight: "bold",
      minWidth: 0
    };
    return (0, import_jsx_runtime147.jsxs)(Grid_default, { container: true, alignItems: "center", children: [(0, import_jsx_runtime147.jsx)(Grid_default, { item: true, xs: true, style: { overflow: "auto" }, children: (0, import_jsx_runtime147.jsx)(Box_default, { mb: 2, children: (0, import_jsx_runtime147.jsx)(Paper_default, { elevation: 2, children: (0, import_jsx_runtime147.jsx)(Box_default, { p: 2, children }) }) }) }), hasToolbar && (0, import_jsx_runtime147.jsxs)(Grid_default, { item: true, children: [(hasMoveUp || hasMoveDown) && (0, import_jsx_runtime147.jsx)(MoveUpButton3, { style: btnStyle, disabled: disabled || readonly || !hasMoveUp, onClick: onReorderClick(index, index - 1), uiSchema, registry }), (hasMoveUp || hasMoveDown) && (0, import_jsx_runtime147.jsx)(MoveDownButton3, { style: btnStyle, disabled: disabled || readonly || !hasMoveDown, onClick: onReorderClick(index, index + 1), uiSchema, registry }), hasCopy && (0, import_jsx_runtime147.jsx)(CopyButton3, { style: btnStyle, disabled: disabled || readonly, onClick: onCopyIndexClick(index), uiSchema, registry }), hasRemove && (0, import_jsx_runtime147.jsx)(RemoveButton3, { style: btnStyle, disabled: disabled || readonly, onClick: onDropIndexClick(index), uiSchema, registry })] })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/ArrayFieldTemplate/ArrayFieldTemplate.js
  var import_jsx_runtime148 = __toESM(require_jsx_runtime());
  function ArrayFieldTemplate2(props) {
    const { canAdd, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title } = props;
    const uiOptions = getUiOptions(uiSchema);
    const ArrayFieldDescriptionTemplate2 = getTemplate("ArrayFieldDescriptionTemplate", registry, uiOptions);
    const ArrayFieldItemTemplate3 = getTemplate("ArrayFieldItemTemplate", registry, uiOptions);
    const ArrayFieldTitleTemplate2 = getTemplate("ArrayFieldTitleTemplate", registry, uiOptions);
    const { ButtonTemplates: { AddButton: AddButton3 } } = registry.templates;
    return (0, import_jsx_runtime148.jsx)(Paper_default, { elevation: 2, children: (0, import_jsx_runtime148.jsxs)(Box_default, { p: 2, children: [(0, import_jsx_runtime148.jsx)(ArrayFieldTitleTemplate2, { idSchema, title: uiOptions.title || title, schema, uiSchema, required, registry }), (0, import_jsx_runtime148.jsx)(ArrayFieldDescriptionTemplate2, { idSchema, description: uiOptions.description || schema.description, schema, uiSchema, registry }), items && items.map(({ key, ...itemProps }) => (0, import_jsx_runtime148.jsx)(ArrayFieldItemTemplate3, { ...itemProps }, key)), canAdd && (0, import_jsx_runtime148.jsx)(Grid_default, { container: true, justifyContent: "flex-end", children: (0, import_jsx_runtime148.jsx)(Grid_default, { item: true, children: (0, import_jsx_runtime148.jsx)(Box_default, { mt: 2, children: (0, import_jsx_runtime148.jsx)(AddButton3, { className: "array-item-add", onClick: onAddClick, disabled: disabled || readonly, uiSchema, registry }) }) }) })] }) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/BaseInputTemplate/BaseInputTemplate.js
  var import_jsx_runtime149 = __toESM(require_jsx_runtime());
  var TYPES_THAT_SHRINK_LABEL = ["date", "datetime-local", "file", "time"];
  function BaseInputTemplate2(props) {
    const {
      id,
      name,
      // remove this from textFieldProps
      placeholder,
      required,
      readonly,
      disabled,
      type,
      label,
      hideLabel,
      hideError,
      value,
      onChange,
      onChangeOverride,
      onBlur,
      onFocus,
      autofocus,
      options,
      schema,
      uiSchema,
      rawErrors = [],
      errorSchema,
      formContext,
      registry,
      InputLabelProps,
      ...textFieldProps
    } = props;
    const inputProps = getInputProps(schema, type, options);
    const { step, min, max, accept, ...rest } = inputProps;
    const htmlInputProps = { step, min, max, accept, ...schema.examples ? { list: examplesId(id) } : void 0 };
    const _onChange = ({ target: { value: value2 } }) => onChange(value2 === "" ? options.emptyValue : value2);
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    const DisplayInputLabelProps = TYPES_THAT_SHRINK_LABEL.includes(type) ? {
      ...InputLabelProps,
      shrink: true
    } : InputLabelProps;
    return (0, import_jsx_runtime149.jsxs)(import_jsx_runtime149.Fragment, { children: [(0, import_jsx_runtime149.jsx)(TextField_default, { id, name: id, placeholder, label: labelValue(label || void 0, hideLabel, void 0), autoFocus: autofocus, required, disabled: disabled || readonly, slotProps: {
      htmlInput: htmlInputProps
    }, ...rest, value: value || value === 0 ? value : "", error: rawErrors.length > 0, onChange: onChangeOverride || _onChange, onBlur: _onBlur, onFocus: _onFocus, InputLabelProps: DisplayInputLabelProps, ...textFieldProps, "aria-describedby": ariaDescribedByIds(id, !!schema.examples) }), Array.isArray(schema.examples) && (0, import_jsx_runtime149.jsx)("datalist", { id: examplesId(id), children: schema.examples.concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : []).map((example) => {
      return (0, import_jsx_runtime149.jsx)("option", { value: example }, example);
    }) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/DescriptionField/DescriptionField.js
  var import_jsx_runtime150 = __toESM(require_jsx_runtime());
  function DescriptionField2(props) {
    const { id, description } = props;
    if (description) {
      return (0, import_jsx_runtime150.jsx)(Typography_default, { id, variant: "subtitle2", style: { marginTop: "5px" }, children: description });
    }
    return null;
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/ErrorList/ErrorList.js
  var import_jsx_runtime152 = __toESM(require_jsx_runtime());

  // react-user-mgmt/node_modules/@mui/icons-material/esm/Error.js
  var import_jsx_runtime151 = __toESM(require_jsx_runtime());
  var Error_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime151.jsx)("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-2h2zm0-4h-2V7h2z"
  }), "Error");

  // react-user-mgmt/node_modules/@rjsf/mui/lib/ErrorList/ErrorList.js
  function ErrorList2({ errors, registry }) {
    const { translateString } = registry;
    return (0, import_jsx_runtime152.jsx)(Paper_default, { elevation: 2, children: (0, import_jsx_runtime152.jsxs)(Box_default, { mb: 2, p: 2, children: [(0, import_jsx_runtime152.jsx)(Typography_default, { variant: "h6", children: translateString(TranslatableString.ErrorsLabel) }), (0, import_jsx_runtime152.jsx)(List_default, { dense: true, children: errors.map((error, i2) => {
      return (0, import_jsx_runtime152.jsxs)(ListItem_default, { children: [(0, import_jsx_runtime152.jsx)(ListItemIcon_default, { children: (0, import_jsx_runtime152.jsx)(Error_default, { color: "error" }) }), (0, import_jsx_runtime152.jsx)(ListItemText_default, { primary: error.stack })] }, i2);
    }) })] }) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/IconButton/IconButton.js
  var import_jsx_runtime157 = __toESM(require_jsx_runtime());

  // react-user-mgmt/node_modules/@mui/icons-material/esm/ArrowDownward.js
  var import_jsx_runtime153 = __toESM(require_jsx_runtime());
  var ArrowDownward_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime153.jsx)("path", {
    d: "m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8z"
  }), "ArrowDownward");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/ArrowUpward.js
  var import_jsx_runtime154 = __toESM(require_jsx_runtime());
  var ArrowUpward_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime154.jsx)("path", {
    d: "m4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8z"
  }), "ArrowUpward");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/ContentCopy.js
  var import_jsx_runtime155 = __toESM(require_jsx_runtime());
  var ContentCopy_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime155.jsx)("path", {
    d: "M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m0 16H8V7h11z"
  }), "ContentCopy");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/Remove.js
  var import_jsx_runtime156 = __toESM(require_jsx_runtime());
  var Remove_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime156.jsx)("path", {
    d: "M19 13H5v-2h14z"
  }), "Remove");

  // react-user-mgmt/node_modules/@rjsf/mui/lib/IconButton/IconButton.js
  function MuiIconButton(props) {
    const { icon, color: color2, uiSchema, registry, ...otherProps } = props;
    return (0, import_jsx_runtime157.jsx)(IconButton_default, { ...otherProps, size: "small", color: color2, children: icon });
  }
  function CopyButton2(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime157.jsx)(MuiIconButton, { title: translateString(TranslatableString.CopyButton), ...props, icon: (0, import_jsx_runtime157.jsx)(ContentCopy_default, { fontSize: "small" }) });
  }
  function MoveDownButton2(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime157.jsx)(MuiIconButton, { title: translateString(TranslatableString.MoveDownButton), ...props, icon: (0, import_jsx_runtime157.jsx)(ArrowDownward_default, { fontSize: "small" }) });
  }
  function MoveUpButton2(props) {
    const { registry: { translateString } } = props;
    return (0, import_jsx_runtime157.jsx)(MuiIconButton, { title: translateString(TranslatableString.MoveUpButton), ...props, icon: (0, import_jsx_runtime157.jsx)(ArrowUpward_default, { fontSize: "small" }) });
  }
  function RemoveButton2(props) {
    const { iconType, ...otherProps } = props;
    const { registry: { translateString } } = otherProps;
    return (0, import_jsx_runtime157.jsx)(MuiIconButton, { title: translateString(TranslatableString.RemoveButton), ...otherProps, color: "error", icon: (0, import_jsx_runtime157.jsx)(Remove_default, { fontSize: iconType === "default" ? void 0 : "small" }) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/FieldErrorTemplate/FieldErrorTemplate.js
  var import_jsx_runtime158 = __toESM(require_jsx_runtime());
  function FieldErrorTemplate2(props) {
    const { errors = [], idSchema } = props;
    if (errors.length === 0) {
      return null;
    }
    const id = errorId(idSchema);
    return (0, import_jsx_runtime158.jsx)(List_default, { id, dense: true, disablePadding: true, children: errors.map((error, i2) => {
      return (0, import_jsx_runtime158.jsx)(ListItem_default, { disableGutters: true, children: (0, import_jsx_runtime158.jsx)(FormHelperText_default, { component: "div", id: `${id}-${i2}`, children: error }) }, i2);
    }) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/FieldHelpTemplate/FieldHelpTemplate.js
  var import_jsx_runtime159 = __toESM(require_jsx_runtime());
  function FieldHelpTemplate2(props) {
    const { idSchema, help } = props;
    if (!help) {
      return null;
    }
    const id = helpId(idSchema);
    return (0, import_jsx_runtime159.jsx)(FormHelperText_default, { component: "div", id, children: help });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/FieldTemplate/FieldTemplate.js
  var import_jsx_runtime160 = __toESM(require_jsx_runtime());
  function FieldTemplate2(props) {
    const { id, children, classNames, style: style4, disabled, displayLabel, hidden, label, onDropPropertyClick, onKeyChange, readonly, required, rawErrors = [], errors, help, description, rawDescription, schema, uiSchema, registry } = props;
    const uiOptions = getUiOptions(uiSchema);
    const WrapIfAdditionalTemplate3 = getTemplate("WrapIfAdditionalTemplate", registry, uiOptions);
    if (hidden) {
      return (0, import_jsx_runtime160.jsx)("div", { style: { display: "none" }, children });
    }
    return (0, import_jsx_runtime160.jsx)(WrapIfAdditionalTemplate3, { classNames, style: style4, disabled, id, label, onDropPropertyClick, onKeyChange, readonly, required, schema, uiSchema, registry, children: (0, import_jsx_runtime160.jsxs)(FormControl_default, { fullWidth: true, error: rawErrors.length ? true : false, required, children: [children, displayLabel && rawDescription ? (0, import_jsx_runtime160.jsx)(Typography_default, { variant: "caption", color: "textSecondary", children: description }) : null, errors, help] }) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/ObjectFieldTemplate/ObjectFieldTemplate.js
  var import_jsx_runtime161 = __toESM(require_jsx_runtime());
  function ObjectFieldTemplate2(props) {
    const { description, title, properties: properties2, required, disabled, readonly, uiSchema, idSchema, schema, formData, onAddClick, registry } = props;
    const uiOptions = getUiOptions(uiSchema);
    const TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, uiOptions);
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, uiOptions);
    const { ButtonTemplates: { AddButton: AddButton3 } } = registry.templates;
    return (0, import_jsx_runtime161.jsxs)(import_jsx_runtime161.Fragment, { children: [title && (0, import_jsx_runtime161.jsx)(TitleFieldTemplate, { id: titleId(idSchema), title, required, schema, uiSchema, registry }), description && (0, import_jsx_runtime161.jsx)(DescriptionFieldTemplate, { id: descriptionId(idSchema), description, schema, uiSchema, registry }), (0, import_jsx_runtime161.jsxs)(Grid_default, { container: true, spacing: 2, style: { marginTop: "10px" }, children: [properties2.map((element, index) => (
      // Remove the <Grid> if the inner element is hidden as the <Grid>
      // itself would otherwise still take up space.
      element.hidden ? element.content : (0, import_jsx_runtime161.jsx)(Grid_default, { item: true, xs: 12, style: { marginBottom: "10px" }, children: element.content }, index)
    )), canExpand(schema, uiSchema, formData) && (0, import_jsx_runtime161.jsx)(Grid_default, { container: true, justifyContent: "flex-end", children: (0, import_jsx_runtime161.jsx)(Grid_default, { item: true, children: (0, import_jsx_runtime161.jsx)(AddButton3, { className: "object-property-expand", onClick: onAddClick(schema), disabled: disabled || readonly, uiSchema, registry }) }) })] })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/SubmitButton/SubmitButton.js
  var import_jsx_runtime162 = __toESM(require_jsx_runtime());
  function SubmitButton2({ uiSchema }) {
    const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions(uiSchema);
    if (norender) {
      return null;
    }
    return (0, import_jsx_runtime162.jsx)(Box_default, { marginTop: 3, children: (0, import_jsx_runtime162.jsx)(Button_default, { type: "submit", variant: "contained", color: "primary", ...submitButtonProps, children: submitText }) });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/TitleField/TitleField.js
  var import_jsx_runtime163 = __toESM(require_jsx_runtime());
  function TitleField2({ id, title }) {
    return (0, import_jsx_runtime163.jsxs)(Box_default, { id, mb: 1, mt: 1, children: [(0, import_jsx_runtime163.jsx)(Typography_default, { variant: "h5", children: title }), (0, import_jsx_runtime163.jsx)(Divider_default, {})] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.js
  var import_jsx_runtime164 = __toESM(require_jsx_runtime());
  function WrapIfAdditionalTemplate2(props) {
    const { children, classNames, style: style4, disabled, id, label, onDropPropertyClick, onKeyChange, readonly, required, schema, uiSchema, registry } = props;
    const { templates: templates2, translateString } = registry;
    const { RemoveButton: RemoveButton3 } = templates2.ButtonTemplates;
    const keyLabel = translateString(TranslatableString.KeyLabel, [label]);
    const additional = ADDITIONAL_PROPERTY_FLAG in schema;
    const btnStyle = {
      flex: 1,
      paddingLeft: 6,
      paddingRight: 6,
      fontWeight: "bold"
    };
    if (!additional) {
      return (0, import_jsx_runtime164.jsx)("div", { className: classNames, style: style4, children });
    }
    const handleBlur = ({ target }) => onKeyChange(target && target.value);
    return (0, import_jsx_runtime164.jsxs)(Grid_default, { container: true, alignItems: "center", spacing: 2, className: classNames, style: style4, children: [(0, import_jsx_runtime164.jsx)(Grid_default, { item: true, xs: true, children: (0, import_jsx_runtime164.jsx)(TextField_default, { fullWidth: true, required, label: keyLabel, defaultValue: label, disabled: disabled || readonly, id: `${id}-key`, name: `${id}-key`, onBlur: !readonly ? handleBlur : void 0, type: "text" }) }), (0, import_jsx_runtime164.jsx)(Grid_default, { item: true, xs: true, children }), (0, import_jsx_runtime164.jsx)(Grid_default, { item: true, children: (0, import_jsx_runtime164.jsx)(RemoveButton3, { iconType: "default", style: btnStyle, disabled: disabled || readonly, onClick: onDropPropertyClick(label), uiSchema, registry }) })] }, `${id}-key`);
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/Templates/Templates.js
  function generateTemplates() {
    return {
      ArrayFieldItemTemplate: ArrayFieldItemTemplate2,
      ArrayFieldTemplate: ArrayFieldTemplate2,
      BaseInputTemplate: BaseInputTemplate2,
      ButtonTemplates: {
        AddButton: AddButton2,
        CopyButton: CopyButton2,
        MoveDownButton: MoveDownButton2,
        MoveUpButton: MoveUpButton2,
        RemoveButton: RemoveButton2,
        SubmitButton: SubmitButton2
      },
      DescriptionFieldTemplate: DescriptionField2,
      ErrorListTemplate: ErrorList2,
      FieldErrorTemplate: FieldErrorTemplate2,
      FieldHelpTemplate: FieldHelpTemplate2,
      FieldTemplate: FieldTemplate2,
      ObjectFieldTemplate: ObjectFieldTemplate2,
      TitleFieldTemplate: TitleField2,
      WrapIfAdditionalTemplate: WrapIfAdditionalTemplate2
    };
  }
  var Templates_default = generateTemplates();

  // react-user-mgmt/node_modules/@rjsf/mui/lib/CheckboxWidget/CheckboxWidget.js
  var import_jsx_runtime165 = __toESM(require_jsx_runtime());
  function CheckboxWidget2(props) {
    var _a;
    const { schema, id, value, disabled, readonly, label = "", hideLabel, autofocus, onChange, onBlur, onFocus, registry, options, uiSchema } = props;
    const DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
    const required = schemaRequiresTrueValue(schema);
    const _onChange = (_2, checked) => onChange(checked);
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    const description = (_a = options.description) !== null && _a !== void 0 ? _a : schema.description;
    return (0, import_jsx_runtime165.jsxs)(import_jsx_runtime165.Fragment, { children: [!hideLabel && !!description && (0, import_jsx_runtime165.jsx)(DescriptionFieldTemplate, { id: descriptionId(id), description, schema, uiSchema, registry }), (0, import_jsx_runtime165.jsx)(FormControlLabel_default, { control: (0, import_jsx_runtime165.jsx)(Checkbox_default, { id, name: id, checked: typeof value === "undefined" ? false : Boolean(value), required, disabled: disabled || readonly, autoFocus: autofocus, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, "aria-describedby": ariaDescribedByIds(id) }), label: labelValue(label, hideLabel, false) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/CheckboxesWidget/CheckboxesWidget.js
  var import_jsx_runtime166 = __toESM(require_jsx_runtime());
  function CheckboxesWidget2({ label, hideLabel, id, disabled, options, value, autofocus, readonly, required, onChange, onBlur, onFocus }) {
    const { enumOptions, enumDisabled, inline, emptyValue } = options;
    const checkboxesValues = Array.isArray(value) ? value : [value];
    const _onChange = (index) => ({ target: { checked } }) => {
      if (checked) {
        onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));
      } else {
        onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));
      }
    };
    const _onBlur = ({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
    const _onFocus = ({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
    return (0, import_jsx_runtime166.jsxs)(import_jsx_runtime166.Fragment, { children: [labelValue((0, import_jsx_runtime166.jsx)(FormLabel_default, { required, htmlFor: id, children: label || void 0 }), hideLabel), (0, import_jsx_runtime166.jsx)(FormGroup_default, { id, row: !!inline, children: Array.isArray(enumOptions) && enumOptions.map((option, index) => {
      const checked = enumOptionsIsSelected(option.value, checkboxesValues);
      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      const checkbox = (0, import_jsx_runtime166.jsx)(Checkbox_default, { id: optionId(id, index), name: id, checked, disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && index === 0, onChange: _onChange(index), onBlur: _onBlur, onFocus: _onFocus, "aria-describedby": ariaDescribedByIds(id) });
      return (0, import_jsx_runtime166.jsx)(FormControlLabel_default, { control: checkbox, label: option.label }, index);
    }) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/RadioWidget/RadioWidget.js
  var import_jsx_runtime167 = __toESM(require_jsx_runtime());
  function RadioWidget2({ id, options, value, required, disabled, readonly, label, hideLabel, onChange, onBlur, onFocus }) {
    var _a;
    const { enumOptions, enumDisabled, emptyValue } = options;
    const _onChange = (_2, value2) => onChange(enumOptionsValueForIndex(value2, enumOptions, emptyValue));
    const _onBlur = ({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
    const _onFocus = ({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, emptyValue));
    const row = options ? options.inline : false;
    const selectedIndex = (_a = enumOptionsIndexForValue(value, enumOptions)) !== null && _a !== void 0 ? _a : null;
    return (0, import_jsx_runtime167.jsxs)(import_jsx_runtime167.Fragment, { children: [labelValue((0, import_jsx_runtime167.jsx)(FormLabel_default, { required, htmlFor: id, children: label || void 0 }), hideLabel), (0, import_jsx_runtime167.jsx)(RadioGroup_default, { id, name: id, value: selectedIndex, row, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, "aria-describedby": ariaDescribedByIds(id), children: Array.isArray(enumOptions) && enumOptions.map((option, index) => {
      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      const radio = (0, import_jsx_runtime167.jsx)(FormControlLabel_default, { control: (0, import_jsx_runtime167.jsx)(Radio_default, { name: id, id: optionId(id, index), color: "primary" }), label: option.label, value: String(index), disabled: disabled || itemDisabled || readonly }, index);
      return radio;
    }) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/RangeWidget/RangeWidget.js
  var import_jsx_runtime168 = __toESM(require_jsx_runtime());
  function RangeWidget2(props) {
    const { value, readonly, disabled, onBlur, onFocus, options, schema, onChange, required, label, hideLabel, id } = props;
    const sliderProps = { value, label, id, name: id, ...rangeSpec(schema) };
    const _onChange = (_2, value2) => {
      onChange(value2 !== null && value2 !== void 0 ? value2 : options.emptyValue);
    };
    const _onBlur = ({ target }) => onBlur(id, target && target.value);
    const _onFocus = ({ target }) => onFocus(id, target && target.value);
    return (0, import_jsx_runtime168.jsxs)(import_jsx_runtime168.Fragment, { children: [labelValue((0, import_jsx_runtime168.jsx)(FormLabel_default, { required, htmlFor: id, children: label || void 0 }), hideLabel), (0, import_jsx_runtime168.jsx)(Slider_default, { disabled: disabled || readonly, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, valueLabelDisplay: "auto", ...sliderProps, "aria-describedby": ariaDescribedByIds(id) })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/SelectWidget/SelectWidget.js
  var import_jsx_runtime169 = __toESM(require_jsx_runtime());
  function SelectWidget2({
    schema,
    id,
    name,
    // remove this from textFieldProps
    options,
    label,
    hideLabel,
    required,
    disabled,
    placeholder,
    readonly,
    value,
    multiple,
    autofocus,
    onChange,
    onBlur,
    onFocus,
    errorSchema,
    rawErrors = [],
    registry,
    uiSchema,
    hideError,
    formContext,
    ...textFieldProps
  }) {
    const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;
    multiple = typeof multiple === "undefined" ? false : !!multiple;
    const emptyValue = multiple ? [] : "";
    const isEmpty5 = typeof value === "undefined" || multiple && value.length < 1 || !multiple && value === emptyValue;
    const _onChange = ({ target: { value: value2 } }) => onChange(enumOptionsValueForIndex(value2, enumOptions, optEmptyVal));
    const _onBlur = ({ target }) => onBlur(id, enumOptionsValueForIndex(target && target.value, enumOptions, optEmptyVal));
    const _onFocus = ({ target }) => onFocus(id, enumOptionsValueForIndex(target && target.value, enumOptions, optEmptyVal));
    const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);
    const { InputLabelProps, SelectProps, autocomplete, ...textFieldRemainingProps } = textFieldProps;
    const showPlaceholderOption = !multiple && schema.default === void 0;
    return (0, import_jsx_runtime169.jsxs)(TextField_default, { id, name: id, label: labelValue(label || void 0, hideLabel, void 0), value: !isEmpty5 && typeof selectedIndexes !== "undefined" ? selectedIndexes : emptyValue, required, disabled: disabled || readonly, autoFocus: autofocus, autoComplete: autocomplete, placeholder, error: rawErrors.length > 0, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, ...textFieldRemainingProps, select: true, InputLabelProps: {
      ...InputLabelProps,
      shrink: !isEmpty5
    }, SelectProps: {
      ...SelectProps,
      multiple
    }, "aria-describedby": ariaDescribedByIds(id), children: [showPlaceholderOption && (0, import_jsx_runtime169.jsx)(MenuItem_default, { value: "", children: placeholder }), Array.isArray(enumOptions) && enumOptions.map(({ value: value2, label: label2 }, i2) => {
      const disabled2 = Array.isArray(enumDisabled) && enumDisabled.indexOf(value2) !== -1;
      return (0, import_jsx_runtime169.jsx)(MenuItem_default, { value: String(i2), disabled: disabled2, children: label2 }, i2);
    })] });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/TextareaWidget/TextareaWidget.js
  var import_jsx_runtime170 = __toESM(require_jsx_runtime());
  function TextareaWidget2(props) {
    const { options, registry } = props;
    const BaseInputTemplate3 = getTemplate("BaseInputTemplate", registry, options);
    let rows = 5;
    if (typeof options.rows === "string" || typeof options.rows === "number") {
      rows = options.rows;
    }
    return (0, import_jsx_runtime170.jsx)(BaseInputTemplate3, { ...props, multiline: true, rows });
  }

  // react-user-mgmt/node_modules/@rjsf/mui/lib/Widgets/Widgets.js
  function generateWidgets() {
    return {
      CheckboxWidget: CheckboxWidget2,
      CheckboxesWidget: CheckboxesWidget2,
      RadioWidget: RadioWidget2,
      RangeWidget: RangeWidget2,
      SelectWidget: SelectWidget2,
      TextareaWidget: TextareaWidget2
    };
  }
  var Widgets_default = generateWidgets();

  // react-user-mgmt/node_modules/@rjsf/mui/lib/Theme/Theme.js
  function generateTheme() {
    return {
      templates: generateTemplates(),
      widgets: generateWidgets()
    };
  }
  var Theme_default = generateTheme();

  // react-user-mgmt/node_modules/@rjsf/mui/lib/MuiForm/MuiForm.js
  function generateForm() {
    return withTheme2(generateTheme());
  }
  var MuiForm_default = generateForm();

  // react-user-mgmt/node_modules/@rjsf/mui/lib/index.js
  var lib_default2 = MuiForm_default;

  // react-user-mgmt/src/helpers/forms.tsx
  var import_react32 = __toESM(require_react(), 1);
  var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);
  function filterProps(props, uischema) {
    const result = {};
    Object.entries(props).forEach(([key, value]) => {
      result[key] = Object.fromEntries(Object.entries(value).filter(([k2, v2]) => k2.startsWith("ui:") === uischema));
    });
    return result;
  }
  function JsonForm(props) {
    const [errorMessage, setErrorMessage] = (0, import_react32.useState)(null);
    const [successMessage, setSuccessMessage] = (0, import_react32.useState)(null);
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsxs)(import_jsx_runtime171.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
        lib_default2,
        {
          schema: props.schema,
          uiSchema: {
            ...props.uiSchema,
            "ui:submitButtonOptions": props.submitOptions
          },
          validator: lib_default,
          onSubmit: async (data, event) => {
            setErrorMessage(null);
            const [good, error, result] = await props.onSubmit(data, event).then((result2) => [true, void 0, result2], (error2) => [false, error2, void 0]);
            if (good) {
              setErrorMessage(null);
              setSuccessMessage(result);
            } else if (typeof error === "string") {
              setErrorMessage(error);
              setSuccessMessage(null);
            } else {
              setErrorMessage("An error occurred");
              setSuccessMessage(null);
              console.log(error);
            }
          },
          formData: props.value,
          onChange: (data) => {
            props.onChange(data.formData);
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime171.jsxs)(Stack_default, { paddingBlock: 2, children: [
        errorMessage && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(Alert_default, { severity: "error", children: errorMessage }),
        successMessage && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(Alert_default, { severity: "success", children: successMessage })
      ] })
    ] });
  }
  function JsonFormSimple({ required, properties: properties2, submitOptions, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
      JsonForm,
      {
        schema: {
          type: "object",
          required,
          properties: filterProps(properties2, false)
        },
        uiSchema: {
          ...filterProps(properties2, true),
          "ui:submitButtonOptions": submitOptions
        },
        value: props.value,
        onChange: props.onChange,
        onSubmit: props.onSubmit,
        submitOptions
      }
    );
  }

  // react-user-mgmt/src/components/Login.tsx
  var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
  function fetchPostJSON(url, formData) {
    return fetch(url, {
      method: "POST",
      redirect: "manual",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "TiddlyWiki"
      },
      body: JSON.stringify(formData)
    });
  }
  async function logout() {
    await fetchPostJSON("/logout", void 0);
  }
  var LOGIN_FAILED = "Login failed. Please check your credentials.";
  async function loginWithOpaque(username, password) {
    const { clientLoginState, startLoginRequest } = client.startLogin({ password });
    const login1 = await fetchPostJSON("/login/1", { username, startLoginRequest });
    if (!login1.ok) throw await login1.text() || LOGIN_FAILED;
    const { loginResponse } = await login1.json();
    const loginResult = client.finishLogin({ clientLoginState, loginResponse, password });
    if (!loginResult) throw LOGIN_FAILED;
    const { finishLoginRequest, sessionKey, exportKey, serverStaticPublicKey } = loginResult;
    const login2 = await fetchPostJSON("/login/2", { username, finishLoginRequest });
    if (!login2.ok) throw await login2.text() || LOGIN_FAILED;
    return { username, sessionKey, exportKey, serverStaticPublicKey };
  }
  var Login = () => {
    const [index] = useIndexJson();
    const isLoggedIn = !!index.isLoggedIn;
    const [errorMessage, setErrorMessage] = (0, import_react33.useState)(null);
    const returnUrl = new URLSearchParams(location.search).get("returnUrl") || "/";
    const handleSubmit = async (formData) => {
      setErrorMessage(null);
      console.log(formData);
      const { username, password } = formData;
      if (!username || !password)
        return setErrorMessage("Please enter a username and password.");
      await loginWithOpaque(username, password).then((e2) => {
        location.href = returnUrl || "/";
      }, (e2) => {
        setErrorMessage(`${e2}`);
      });
    };
    const [value, onChange] = (0, import_react33.useState)({});
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Stack_default, { spacing: 2, justifyContent: "center", alignItems: "center", height: "100vh", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Container_default, { maxWidth: "sm", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Card_default, { children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(CardContent_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "login-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("h1", { children: "Be our Guest" }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("a", { href: "/", children: "Explore as Guest" }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("h2", { children: "TiddlyWiki Login" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(
        JsonFormSimple,
        {
          required: ["username", "password"],
          properties: {
            returnUrl: { type: "string", default: "/dashboard", "ui:widget": "hidden" },
            username: { type: "string", title: "Username" },
            password: { type: "string", title: "Password", "ui:widget": "password" }
          },
          onSubmit: async (data, event) => {
            await handleSubmit(data.formData);
            return "";
          },
          value,
          onChange
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Stack_default, { paddingBlock: 2, children: errorMessage && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(Alert_default, { severity: "error", children: errorMessage }) })
    ] }) }) }) });
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "login-page", children: /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "login-container", children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)("div", { className: "login-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("h1", { children: "Be our Guest" }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("a", { href: "/", children: "Explore as Guest" }),
        /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("h2", { children: "TiddlyWiki Login" })
      ] }),
      errorMessage && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("div", { className: "mws-error-message", children: errorMessage })
    ] }) });
  };
  var Login_default = Login;

  // react-user-mgmt/src/components/Frame/Frame.tsx
  var import_react40 = __toESM(require_react(), 1);

  // react-user-mgmt/src/components/Frame/Header.tsx
  var import_react34 = __toESM(require_react(), 1);

  // react-user-mgmt/node_modules/@mui/icons-material/esm/Settings.js
  var import_jsx_runtime173 = __toESM(require_jsx_runtime());
  var Settings_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime173.jsx)("path", {
    d: "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6"
  }), "Settings");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/Home.js
  var import_jsx_runtime174 = __toESM(require_jsx_runtime());
  var Home_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime174.jsx)("path", {
    d: "M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"
  }), "Home");

  // react-user-mgmt/src/components/Frame/Header.tsx
  var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);
  var Header = ({
    pageTitle,
    username,
    userIsAdmin,
    userIsLoggedIn,
    firstGuestUser,
    userId,
    setShowAnonConfig
  }) => {
    const [isLoggingOut, setIsLoggingOut] = (0, import_react34.useState)(false);
    const navigateTo = (path) => {
      window.location.href = path;
    };
    const handleManageUsers = () => {
      navigateTo("/admin/users?q=*");
    };
    const handleManageRoles = () => {
      navigateTo("/admin/roles?q=*");
    };
    const handleAnonConfig = async () => {
      setShowAnonConfig(true);
    };
    const handleClickProfile = async () => {
      navigateTo(`/admin/users/${userId}`);
    };
    const handleLogout = async () => {
      setIsLoggingOut(true);
      await logout();
      setIsLoggingOut(false);
      window.location.href = "/";
    };
    const [anchorEl, setAnchorEl] = import_react34.default.useState(null);
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(Box_default, { sx: { flexGrow: 0 }, children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(AppBar_default, { position: "static", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(Toolbar_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
        IconButton_default,
        {
          size: "large",
          edge: "start",
          color: "inherit",
          "aria-label": "home",
          sx: { mr: 2 },
          onClick: () => {
            navigateTo("/");
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(Home_default, {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(Typography_default, { variant: "h6", component: "div", sx: { flexGrow: 1 }, children: pageTitle }),
      userIsLoggedIn ? /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
          IconButton_default,
          {
            size: "large",
            "aria-label": "account of current user",
            "aria-controls": "menu-appbar",
            "aria-haspopup": "true",
            onClick: (event) => {
              setAnchorEl(event.currentTarget);
            },
            color: "inherit",
            children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(Settings_default, {})
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(
          Menu_default,
          {
            id: "menu-appbar",
            anchorEl,
            anchorOrigin: {
              vertical: "top",
              horizontal: "right"
            },
            keepMounted: true,
            transformOrigin: {
              vertical: "top",
              horizontal: "right"
            },
            open: Boolean(anchorEl),
            onClose: () => {
              setAnchorEl(null);
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(MenuItem_default, { divider: true, onClick: handleClickProfile, children: "Profile" }),
              /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(MenuItem_default, { onClick: handleManageUsers, children: "Manage Users" }),
              /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(MenuItem_default, { divider: true, onClick: handleManageRoles, children: "Manage Roles" }),
              /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(MenuItem_default, { onClick: handleLogout, children: "Logout" })
            ]
          }
        )
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(Button_default, { color: "inherit", onClick: () => {
        navigateTo("/login");
      }, children: "Login" })
    ] }) }) });
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "mws-header", children: [
      /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("h1", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("a", { href: "/", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("span", { className: "mws-logo", children: "\u{1F3E0}" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("span", { className: "divider", children: "|" }),
        /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("span", { children: pageTitle })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "mws-user-info", children: [
        /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("span", { children: [
          "Hello, ",
          username
        ] }),
        userIsAdmin && /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "mws-admin-dropdown", children: [
          /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("button", { className: "mws-admin-dropbtn", children: "\u2699\uFE0F" }),
          /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "mws-admin-dropdown-content", children: [
            /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("button", { onClick: handleManageUsers, className: "mws-admin-form-button", children: "Manage Users" }),
            /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("button", { onClick: handleManageRoles, className: "mws-admin-form-button", children: "Manage Roles" }),
            /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("button", { onClick: handleAnonConfig, className: "mws-admin-form-button", children: "Reconfigure Anonymous Access" })
          ] })
        ] }),
        userIsLoggedIn && !firstGuestUser && !userIsAdmin && userId && /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
          "button",
          {
            onClick: () => navigateTo(`/admin/users/${userId}`),
            className: "mws-profile-btn",
            children: "Profile"
          }
        ),
        userIsLoggedIn ? /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
          "button",
          {
            onClick: handleLogout,
            className: "mws-logout-button",
            disabled: isLoggingOut,
            children: isLoggingOut ? "Logging out..." : "Logout"
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
          "button",
          {
            onClick: () => navigateTo("/login"),
            className: "mws-login-btn",
            children: "Login"
          }
        )
      ] })
    ] });
  };
  var Header_default = Header;

  // react-user-mgmt/src/components/Frame/AnonConfigModal.tsx
  var import_react35 = __toESM(require_react(), 1);
  var import_jsx_runtime176 = __toESM(require_jsx_runtime(), 1);
  function toParams(obj) {
    const entries = Object.entries(obj).map(([key, value]) => {
      if (typeof value === "object" && value !== null)
        throw new Error("Cannot convert object to URLSearchParams");
      if (typeof value === "function")
        throw new Error("Cannot convert function to URLSearchParams");
      if (typeof value === "symbol")
        throw new Error("Cannot convert symbol to URLSearchParams");
      if (value === void 0 || value === null)
        return [key, ""];
      return [key, value];
    });
    return new URLSearchParams(entries.map(([key, value]) => [key, `${value}`]));
  }
  var AnonConfigModal = ({
    initialAllowReads,
    initialAllowWrites,
    onClose
  }) => {
    const [allowReads, setAllowReads] = (0, import_react35.useState)(initialAllowReads);
    const [allowWrites, setAllowWrites] = (0, import_react35.useState)(initialAllowWrites);
    const [isSaving, setIsSaving] = (0, import_react35.useState)(false);
    const handleSubmit = async (e2) => {
      e2.preventDefault();
      setIsSaving(true);
      try {
        const response = await fetch("/admin/post-anon-config", {
          method: "POST",
          body: toParams({ allowReads, allowWrites }),
          headers: { "Content-Type": "application/json" }
        });
        if (response.ok) {
          onClose();
        } else {
          console.error("Failed to save anonymous config");
        }
      } catch (error) {
        console.error("Error saving anonymous config:", error);
      } finally {
        setIsSaving(false);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "mws-modal-container", children: /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)("div", { className: "mws-modal-content", children: [
      /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("h1", { children: "Anonymous Access Configuration" }),
      /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("p", { children: "This configuration allows anonymous users to read and write to the wiki." }),
      /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)("form", { className: "mws-anon-config-form", onSubmit: handleSubmit, children: [
        /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)("div", { className: "mws-modal-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
            "input",
            {
              type: "checkbox",
              name: "allowReads",
              checked: allowReads,
              onChange: (e2) => setAllowReads(e2.target.checked)
            }
          ),
          " Allow anonymous reads"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)("div", { className: "mws-modal-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
            "input",
            {
              type: "checkbox",
              name: "allowWrites",
              checked: allowWrites,
              onChange: (e2) => setAllowWrites(e2.target.checked)
            }
          ),
          " Allow anonymous writes"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "mws-modal-buttons", children: /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
          "button",
          {
            type: "submit",
            className: "mws-modal-button-primary",
            disabled: isSaving,
            children: isSaving ? "Saving..." : "Save Changes"
          }
        ) })
      ] })
    ] }) });
  };
  var AnonConfigModal_default = AnonConfigModal;

  // react-user-mgmt/src/components/Dashboard/Dashboard.tsx
  var import_react36 = __toESM(require_react(), 1);
  var import_react_dom2 = __toESM(require_react_dom(), 1);

  // react-user-mgmt/node_modules/@mui/icons-material/esm/AdminPanelSettings.js
  var import_jsx_runtime177 = __toESM(require_jsx_runtime());
  var AdminPanelSettings_default = createSvgIcon([/* @__PURE__ */ (0, import_jsx_runtime177.jsx)("path", {
    d: "M17 11c.34 0 .67.04 1 .09V6.27L10.5 3 3 6.27v4.91c0 4.54 3.2 8.79 7.5 9.82.55-.13 1.08-.32 1.6-.55-.69-.98-1.1-2.17-1.1-3.45 0-3.31 2.69-6 6-6"
  }, "0"), /* @__PURE__ */ (0, import_jsx_runtime177.jsx)("path", {
    d: "M17 13c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4m0 1.38c.62 0 1.12.51 1.12 1.12s-.51 1.12-1.12 1.12-1.12-.51-1.12-1.12.5-1.12 1.12-1.12m0 5.37c-.93 0-1.74-.46-2.24-1.17.05-.72 1.51-1.08 2.24-1.08s2.19.36 2.24 1.08c-.5.71-1.31 1.17-2.24 1.17"
  }, "1")], "AdminPanelSettings");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/Edit.js
  var import_jsx_runtime178 = __toESM(require_jsx_runtime());
  var Edit_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime178.jsx)("path", {
    d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z"
  }), "Edit");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/ExpandLess.js
  var import_jsx_runtime179 = __toESM(require_jsx_runtime());
  var ExpandLess_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime179.jsx)("path", {
    d: "m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"
  }), "ExpandLess");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/ExpandMore.js
  var import_jsx_runtime180 = __toESM(require_jsx_runtime());
  var ExpandMore_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime180.jsx)("path", {
    d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }), "ExpandMore");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/GppGood.js
  var import_jsx_runtime181 = __toESM(require_jsx_runtime());
  var GppGood_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime181.jsx)("path", {
    d: "M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41z"
  }), "GppGood");

  // react-user-mgmt/node_modules/@mui/icons-material/esm/GppBadOutlined.js
  var import_jsx_runtime182 = __toESM(require_jsx_runtime());
  var GppBadOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime182.jsx)("path", {
    d: "M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5zm6 9.09c0 4-2.55 7.7-6 8.83-3.45-1.13-6-4.82-6-8.83v-4.7l6-2.25 6 2.25zM9.91 8.5 8.5 9.91 10.59 12 8.5 14.09l1.41 1.41L12 13.42l2.09 2.08 1.41-1.41L13.42 12l2.08-2.09-1.41-1.41L12 10.59z"
  }), "GppBadOutlined");

  // react-user-mgmt/src/components/Dashboard/Dashboard.tsx
  var import_jsx_runtime183 = __toESM(require_jsx_runtime(), 1);
  function MissingFavicon() {
    return /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(SvgIcon_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "680", height: "317pt", viewBox: "34 107 510 317", children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)("path", { d: "m204.10294 372.67294 2.81039.8291c3.53151-1.58007 10.63031.86197 14.3959 2.05591-6.934-7.68695-17.38058-18.97509-24.90698-26.09145-2.4704-8.61546-1.41632-17.2848-.88481-26.0799l.10661-.7276c-2.96672 7.0407-6.73159 13.8847-8.75512 21.29577-2.36798 9.99817 10.5243 20.78568 15.5234 26.96817Zm214.89999 42.28504c-19.34998-.54698-27.86099-.49994-37.71558-16.70502l-7.68051.22004c-8.93988-.397-5.2142-.21705-11.1784-.51399-9.9719-.38803-8.37448-9.86297-10.12879-14.86898-2.8063-16.99305 3.71359-34.07392 3.50791-51.07032-.07282-6.03332-8.61032-27.38909-11.6604-35.02423-9.56162 1.80024-19.17511 2.14347-28.8754 2.62683-22.35922-.05477-44.5668-2.79281-66.61382-6.26983-4.29641 17.74804-17.06701 42.58935-6.5111 60.62682 12.81291 18.65766 21.80439 23.82667 35.7414 24.95164 13.93686 1.12406 17.0839 16.85904 13.71207 22.47903-2.98447 3.88403-8.22986 4.58905-12.68646 5.53003l-8.9144.41898c-7.01489-.23599-13.28491-2.12998-19.53552-5.051-10.43848-5.82696-21.2195-17.94095-29.22959-26.63797 1.86481 3.47299 2.97712 10.25293 1.28571 13.40802-4.7359 6.70896-25.21872 6.66797-34.59912 2.49897-10.65598-4.73502-36.40497-37.98197-40.386-62.88245 10.591-20.02872 26.02-37.47495 33.826-59.28323-17.015-10.85694-26.128-28.53113-24.94499-48.55152l.427-2.3175c-16.74199 3.13418-8.05998 1.96809-26.069976 3.33049-57.356004-.17549-107.796005-39.06484-79.393997-99.505786 1.846985-3.57904 3.603989-6.833004 6.735001-5.278994 2.512985 1.24695 2.152008 6.24898.887985 11.79598-16.234985 72.21878 63.111997 72.77153 111.887997 59.40782 4.84098-1.3266 14.46898-10.2612 21.13848-13.22311 10.9019-4.84113 22.7348-6.8053 34.47801-8.22059 29.20767-3.32814 64.31171 12.05838 82.14798 12.56079 17.83648.50239 43.20953-4.27082 58.785-3.26582 11.30133.51708 22.39853 2.55699 33.30252 5.46282 7.05802-34.3909 7.55701-59.737904 24.289-65.6059 9.82001 1.550995 17.38696 14.93298 22.98801 22.08301l.02298-.00403c11.40697-.45001 22.26203 2.44403 33.05499 5.65599 19.54004-2.772964 35.93702-13.74597 53.193-22.28198-.05396.268995-.33594.35998-.50397.54098-16.98199 13.73401-19.35405 36.95803-17.35602 58.43425.74304 11.14415-2.406 23.24344-6.29895 34.65357-7.28503 18.5899-21.35406 38.18498-37.68304 37.17997-6.17298-.19526-9.75901-3.69059-14.34699-7.4223-.89001 7.55863-4.388 14.30321-7.76001 20.98812-7.78698 14.82183-28.13598 21.35339-46.97802 37.18005-18.84076 15.8269 6.02902 72.35141 12.05902 82.65039 6.02902 10.29996 22.85998 14.06796 16.32901 23.36392-1.99799 3.07004-5.05301 4.16806-8.31803 5.35904Z" }) }) });
  }
  var Dashboard = () => {
    const [{ getBagName, getBagDesc, hasBagAclAccess, hasRecipeAclAccess, ...indexJson }, refresh] = useIndexJson();
    const isAdmin = indexJson.isAdmin;
    const [showSystem, setShowSystem] = (0, import_react36.useState)(false);
    const filteredBags = showSystem ? indexJson.bagList : indexJson.bagList.filter((bag) => !bag.bag_name.startsWith("$:/"));
    const handleShowSystemChange = (e2) => {
      const newShowSystem = e2.target.checked;
      setShowSystem(newShowSystem);
      try {
        const url = new URL(window.location.href);
        url.searchParams.set("show_system", newShowSystem ? "on" : "off");
        window.history.replaceState({}, "", url.toString());
      } catch (error) {
        console.error("Error updating URL:", error);
      }
    };
    const handleRecipeSubmit = async (formData) => {
      console.log(formData);
      if (!isAdmin) formData.owned = true;
      const {
        recipe_name,
        bag_names,
        description,
        owned = false
      } = formData;
      await serverRequest2.recipe_create({
        recipe_name,
        description,
        bag_names,
        owned
      });
      return "Recipe created successfully.";
    };
    const handleBagSubmit = async (formData) => {
      console.log(formData);
      if (!isAdmin) formData.owned = true;
      formData.owned = !!formData.owned;
      await serverRequest2.bag_create(formData);
      return "Bag created successfully.";
    };
    const [openRecipeItems, setOpenRecipeItems] = (0, import_react36.useState)(null);
    const [showRecipeDialog, setShowRecipeDialog] = (0, import_react36.useState)(false);
    const [recipeTitle, setRecipeTitle] = (0, import_react36.useState)("");
    const [valueRecipe, onChangeRecipe] = (0, import_react36.useState)({});
    const [showBagDialog, setShowBagDialog] = (0, import_react36.useState)(false);
    const [bagTitle, setBagTitle] = (0, import_react36.useState)("");
    const [valueBag, onChangeBag] = (0, import_react36.useState)({});
    console.log(valueRecipe, valueBag);
    return /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(CardContent_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(Stack_default, { direction: "column", spacing: 2, children: [
      /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(Card_default, { variant: "outlined", children: [
        /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(CardContent_default, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime183.jsx)("h1", { children: "Recipes" }),
          /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(List_default, { children: indexJson.recipeList.map((recipe) => /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(import_jsx_runtime183.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(ListItem_default, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(ListItemAvatar_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Avatar_default, { src: `/recipes/${encodeURIComponent(recipe.recipe_name)}/tiddlers/%24%3A%2Ffavicon.ico`, children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(MissingFavicon, {}) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
                ListItemText_default,
                {
                  primary: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Link_default, { href: `/wiki/${encodeURIComponent(recipe.recipe_name)}`, children: recipe.recipe_name }),
                  secondary: recipe.description
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
                IconButton_default,
                {
                  edge: "end",
                  "aria-label": "edit recipe",
                  href: "",
                  onClick: (event) => {
                    setShowRecipeDialog(true);
                    setRecipeTitle("Edit recipe");
                    onChangeRecipe({
                      recipe_name: recipe.recipe_name,
                      description: recipe.description,
                      bag_names: recipe.recipe_bags.map((recipeBag) => ({
                        bag_name: getBagName(recipeBag.bag_id),
                        with_acl: recipeBag.with_acl
                      })),
                      with_acl: false,
                      owned: false
                    });
                  },
                  children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Edit_default, {})
                }
              ),
              hasRecipeAclAccess(recipe) && /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
                IconButton_default,
                {
                  edge: "end",
                  "aria-label": "open acl",
                  href: `/admin/acl/${recipe.recipe_name}`,
                  children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(AdminPanelSettings_default, {})
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
                IconButton_default,
                {
                  edge: "end",
                  "aria-label": "show bags",
                  onClick: () => {
                    setOpenRecipeItems(recipe.recipe_name === openRecipeItems ? null : recipe.recipe_name);
                  },
                  children: openRecipeItems === recipe.recipe_name ? /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(ExpandLess_default, {}) : /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(ExpandMore_default, {})
                }
              )
            ] }, recipe.recipe_name),
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Collapse_default, { in: openRecipeItems === recipe.recipe_name, timeout: "auto", unmountOnExit: true, children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(List_default, { sx: { pl: "4.25rem" }, component: "div", disablePadding: true, children: recipe.recipe_bags.map((bag) => /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(ListItem_default, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(ListItemAvatar_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Avatar_default, { src: `/bags/${encodeURIComponent(getBagName(bag.bag_id))}/tiddlers/%24%3A%2Ffavicon.ico`, children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(MissingFavicon, {}) }) }),
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(ListItemIcon_default, { children: bag.with_acl ? /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GppGood_default, {}) : /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(GppBadOutlined_default, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
                ListItemText_default,
                {
                  primary: getBagName(bag.bag_id),
                  secondary: getBagDesc(bag.bag_id)
                }
              )
            ] }, getBagName(bag.bag_id))) }) })
          ] })) }),
          /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(Dialog_default, { open: showRecipeDialog, onClose: () => {
            setShowRecipeDialog(false);
          }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogTitle_default, { children: recipeTitle }),
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogContent_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
              JsonForm,
              {
                schema: {
                  type: "object",
                  required: ["recipe_name", "description", "bag_names"],
                  properties: {
                    recipe_name: { type: "string", title: "Recipe name" },
                    description: { type: "string", title: "Recipe description" },
                    bag_names: {
                      type: "array",
                      title: "Bags",
                      items: {
                        type: "object",
                        required: ["bag_name"],
                        properties: {
                          bag_name: {
                            type: "string",
                            title: "Bag Name",
                            default: ""
                          },
                          with_acl: {
                            type: "boolean",
                            title: "With ACL",
                            description: "Set this bag to inherit permissions from this recipe:",
                            default: false
                          }
                        }
                      }
                    },
                    owned: { type: "boolean", title: "Admin: Is this your personal recipe or a site-wide recipe?" }
                  }
                },
                uiSchema: {
                  bag_names: {
                    "ui:options": {}
                  }
                },
                value: valueRecipe,
                onChange: onChangeRecipe,
                onSubmit: async (data, event) => {
                  console.log(data);
                  if (!data.formData) throw "No data";
                  return await handleRecipeSubmit(data.formData);
                }
              }
            ) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(CardActions_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Button_default, { onClick: () => {
          setShowRecipeDialog(true);
          setRecipeTitle("Create new recipe");
          onChangeRecipe({
            recipe_name: "",
            description: "",
            bag_names: [],
            with_acl: false,
            owned: false
          });
        }, children: "Create new recipe" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(Card_default, { variant: "outlined", children: [
        /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(CardContent_default, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime183.jsx)("h1", { children: "Bags" }),
          /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(List_default, { children: filteredBags.map((bag) => /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(ListItem_default, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(ListItemAvatar_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Avatar_default, { src: `/bags/${encodeURIComponent(bag.bag_name)}/tiddlers/%24%3A%2Ffavicon.ico`, children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(MissingFavicon, {}) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
              ListItemText_default,
              {
                primary: bag.bag_name,
                secondary: bag.description
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
              IconButton_default,
              {
                edge: "end",
                "aria-label": "delete",
                href: "",
                onClick: (event) => {
                  setShowBagDialog(true);
                  setBagTitle("Edit bag");
                  onChangeBag({
                    bag_name: bag.bag_name,
                    description: bag.description,
                    owned: false
                  });
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Edit_default, {})
              }
            )
          ] }, bag.bag_name)) }),
          /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)(Dialog_default, { open: showBagDialog, onClose: () => {
            setShowBagDialog(false);
          }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogTitle_default, { children: bagTitle }),
            /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(DialogContent_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
              JsonFormSimple,
              {
                required: ["bag_name", "description"],
                properties: {
                  bag_name: { type: "string", title: "Bag name" },
                  description: { type: "string", title: "Bag description" },
                  owned: { type: "boolean", title: "Admin: Is this your personal recipe or a site-wide recipe?" }
                },
                onSubmit: async (data, event) => {
                  return await handleBagSubmit(data.formData);
                },
                value: valueBag,
                onChange: onChangeBag
              }
            ) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(CardActions_default, { children: /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(Button_default, { onClick: () => {
          setShowBagDialog(true);
          setBagTitle("Create new bag");
          onChangeBag({
            bag_name: "",
            description: "",
            owned: false
          });
        }, children: "Create new bag" }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime183.jsx)("h1", { children: "Advanced" }),
      /* @__PURE__ */ (0, import_jsx_runtime183.jsxs)("div", { id: "checkboxForm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(
          "input",
          {
            type: "checkbox",
            id: "chkShowSystem",
            name: "show_system",
            value: "on",
            checked: showSystem,
            onChange: handleShowSystemChange
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime183.jsx)("label", { htmlFor: "chkShowSystem", children: "Show system bags" })
      ] })
    ] }) });
  };
  var Dashboard_default = Dashboard;

  // react-user-mgmt/src/components/UserList/UserManagement.tsx
  var import_react38 = __toESM(require_react(), 1);

  // react-user-mgmt/src/components/UserList/AddUserForm.tsx
  var import_react37 = __toESM(require_react(), 1);
  var import_jsx_runtime184 = __toESM(require_jsx_runtime(), 1);
  async function addNewUser(input) {
    const { username, email, password, confirmPassword } = input;
    if (password !== confirmPassword) throw "Passwords do not match";
    const { user_id } = await serverRequest2.user_create({ username, email, role_id: 2 });
    await changePassword({ userId: user_id.toString(), password, confirmPassword });
    return "User added successfully";
  }
  var AddUserForm = (props) => {
    const [value, onChange] = (0, import_react37.useState)({});
    return /* @__PURE__ */ (0, import_jsx_runtime184.jsxs)(Card_default, { sx: { width: "20rem" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(CardHeader_default, { title: "Add New User" }),
      /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(CardContent_default, { children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
        JsonFormSimple,
        {
          required: ["username", "email", "password", "confirmPassword"],
          properties: {
            username: { type: "string", title: "Username" },
            email: { type: "string", title: "Email", "ui:inputType": "email" },
            password: { type: "string", title: "Password", "ui:widget": "password" },
            confirmPassword: { type: "string", title: "Confirm Password", "ui:widget": "password" }
          },
          value,
          onChange,
          onSubmit: async (data, event) => {
            return await addNewUser(data.formData);
          }
        }
      ) })
    ] });
  };
  var AddUserForm_default = AddUserForm;

  // react-user-mgmt/src/components/UserList/UserManagement.tsx
  var import_jsx_runtime185 = __toESM(require_jsx_runtime(), 1);
  var UserManagement = DataLoader(async () => {
    return await serverRequest2.user_list(void 0);
  }, (userList, refreshUsers, props) => {
    const [indexJson, refreshIndex] = useIndexJson();
    const userIsAdmin = indexJson?.isAdmin || false;
    const firstGuestUser = indexJson?.firstGuestUser || false;
    const username = indexJson?.username || "";
    const refreshPage = (0, import_react38.useCallback)(() => {
      refreshUsers();
      refreshIndex();
    }, [refreshUsers, refreshIndex]);
    return /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(Container_default, { maxWidth: "lg", children: /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)(Stack_default, { direction: "row", width: "100%", spacing: 2, marginBlockStart: 4, children: [
      /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(Card_default, { sx: { flexGrow: 1 }, children: /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(CardContent_default, { children: userList.map((user) => /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)(
        "a",
        {
          href: `/admin/users/${user.user_id}?q=preview`,
          className: "mws-user-item",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "mws-user-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("span", { className: "mws-user-name", children: user.username }),
              /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("span", { className: "mws-user-email", children: user.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "mws-user-details", children: [
              /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("span", { className: "mws-user-created", children: [
                "Created: ",
                user.created_at.slice(0, 10)
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("span", { className: "mws-user-last-login", children: [
                "Last Login: ",
                user.last_login?.slice(0, 10) || "Never"
              ] })
            ] })
          ]
        },
        user.user_id
      )) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(AddUserForm_default, { refreshPage })
    ] }) });
    return /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(import_jsx_runtime185.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "mws-users-container", children: [
      userList.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("div", { className: "mws-users-list", children: userList.map((user) => /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)(
        "a",
        {
          href: `/admin/users/${user.user_id}?q=preview`,
          className: "mws-user-item",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "mws-user-info", children: [
              /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("span", { className: "mws-user-name", children: user.username }),
              /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("span", { className: "mws-user-email", children: user.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("div", { className: "mws-user-details", children: [
              /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("span", { className: "mws-user-created", children: [
                "Created: ",
                user.created_at
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)("span", { className: "mws-user-last-login", children: [
                "Last Login: ",
                user.last_login || "Never"
              ] })
            ] })
          ]
        },
        user.user_id
      )) }) : /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("div", { className: "mws-no-users-message", children: "No users found" }),
      (userIsAdmin || firstGuestUser) && /* @__PURE__ */ (0, import_jsx_runtime185.jsx)("div", { className: "mws-add-user-card", children: /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(AddUserForm_default, { refreshPage }) })
    ] }) });
  });
  var UserManagement_default = UserManagement;

  // react-user-mgmt/src/components/UserEdit/ManageUser.tsx
  var import_react39 = __toESM(require_react(), 1);

  // react-user-mgmt/node_modules/@mui/icons-material/esm/ArrowBack.js
  var import_jsx_runtime186 = __toESM(require_jsx_runtime());
  var ArrowBack_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime186.jsx)("path", {
    d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z"
  }), "ArrowBack");

  // react-user-mgmt/src/components/UserEdit/ManageUser.tsx
  var import_jsx_runtime187 = __toESM(require_jsx_runtime(), 1);
  var ManageUser = DataLoader(async (props) => {
    const res = await serverRequest2.prisma.users.findUnique({
      where: { user_id: +props.userID },
      select: {
        user_id: true,
        username: true,
        email: true,
        roles: true,
        last_login: true,
        created_at: true
      }
    });
    if (!res) throw "User not found";
    const allRoles = await serverRequest2.prisma.roles.findMany({
      select: {
        role_id: true,
        role_name: true
      }
    });
    return [res, allRoles];
  }, ([user, allRoles], refreshUser, props) => {
    const [indexJson] = useIndexJson();
    const isCurrentUserProfile = indexJson.user_id === user.user_id;
    const userIsAdmin = indexJson.isAdmin;
    const theme2 = useTheme5();
    const [valueUpdate, onChangeUpdate] = (0, import_react39.useState)({
      userId: `${user.user_id}`,
      username: user.username,
      email: user.email,
      role: user.roles[0].role_id
    });
    const [valueDelete, onChangeDelete] = (0, import_react39.useState)({
      user_id: `${user.user_id}`
    });
    const [valuePassword, onChangePassword] = (0, import_react39.useState)({
      userId: `${user.user_id}`,
      newPassword: "",
      confirmPassword: ""
    });
    console.log(valueUpdate, valueDelete, valuePassword);
    const userInitials = user.username?.[0].toUpperCase();
    const handleUpdateProfile = async (formData) => {
      return await serverRequest2.user_update({
        user_id: +formData.userId,
        username: formData.username,
        email: formData.email,
        role_id: +formData.role
      }).then(() => {
        return "User updated successfully.";
      }).catch((e2) => {
        throw `${e2}`;
      });
    };
    const handleDeleteAccount = async (formData) => {
      if (window.confirm("Are you sure you want to delete this user account? This action cannot be undone."))
        return await serverRequest2.user_delete({ user_id: +formData.user_id }).then(() => {
          return "User deleted successfully.";
        }).catch((e2) => {
          throw `${e2}`;
        });
      else
        throw "Cancelled.";
    };
    const handleChangePassword = async (formData) => {
      const { userId, newPassword: password, confirmPassword } = formData;
      if (!userId || !password || !confirmPassword) throw "All fields are required.";
      if (password !== confirmPassword) {
        throw "Passwords do not match.";
      }
      return await changePassword({ userId, password, confirmPassword }).then(() => {
        return "Password successfully changed.";
      }).catch((e2) => {
        throw `${e2}`;
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(import_jsx_runtime187.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)("div", { className: "mws-main-wrapper", children: [
      /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)(Card_default, { className: "mws-user-profile-container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(Stack_default, { sx: { bgcolor: theme2.palette.primary.main }, direction: "row", justifyContent: "start", children: /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(
          IconButton_default,
          {
            size: "large",
            "aria-label": "account of current user",
            "aria-controls": "menu-appbar",
            "aria-haspopup": "true",
            onClick: (event) => {
              location.pathname = "/admin/users";
            },
            sx: { color: theme2.palette.primary.contrastText },
            children: /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ArrowBack_default, {})
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)(Stack_default, { spacing: 0, sx: {
          bgcolor: theme2.palette.primary.main,
          color: theme2.palette.primary.contrastText
        }, alignItems: "center", justifyContent: "center", direction: "column", children: [
          /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(Avatar_default, { sx: {
            bgcolor: theme2.palette.primary.contrastText,
            color: theme2.palette.primary.main,
            width: "8rem",
            height: "8rem",
            fontSize: "3rem",
            fontWeight: "bold"
          }, children: userInitials }),
          /* @__PURE__ */ (0, import_jsx_runtime187.jsx)("h1", { children: user.username }),
          /* @__PURE__ */ (0, import_jsx_runtime187.jsx)("p", { children: user.email })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)(CardContent_default, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)(List_default, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ListItem_default, { children: /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ListItemText_default, { primary: "User ID", secondary: user.user_id }) }),
            /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ListItem_default, { children: /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ListItemText_default, { primary: "Created At", secondary: user.created_at?.split("T")[0] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ListItem_default, { children: /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(ListItemText_default, { primary: "Last Login", secondary: user.last_login?.split("T")[0] }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)("div", { className: "mws-user-profile-roles", children: [
            /* @__PURE__ */ (0, import_jsx_runtime187.jsx)("h2", { children: "User Role" }),
            /* @__PURE__ */ (0, import_jsx_runtime187.jsx)("ul", { children: user.roles.map((e2) => /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(Chip_default, { label: e2.role_name }, e2.role_id)) })
          ] })
        ] })
      ] }),
      (userIsAdmin || isCurrentUserProfile) && /* @__PURE__ */ (0, import_jsx_runtime187.jsxs)(Card_default, { className: "mws-user-profile-management", children: [
        /* @__PURE__ */ (0, import_jsx_runtime187.jsx)("h2", { children: "Manage Account" }),
        /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(
          JsonFormSimple,
          {
            required: ["userId", "username", "email"],
            properties: {
              userId: { type: "string", title: "User ID", "ui:widget": "hidden", default: `${user.user_id}` },
              username: { type: "string", title: "Username" },
              email: { type: "string", title: "Email" },
              role: {
                type: "number",
                title: "Role",
                "ui:widget": "select",
                enum: allRoles.map((e2) => e2.role_id),
                enumNames: allRoles.map((e2) => e2.role_name)
              }
            },
            value: valueUpdate,
            onChange: onChangeUpdate,
            onSubmit: async (data, event) => {
              return await handleUpdateProfile(data.formData);
            },
            submitOptions: {
              submitText: "Update Profile"
            }
          }
        ),
        isCurrentUserProfile && /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(
          JsonFormSimple,
          {
            required: ["userId", "newPassword", "confirmPassword"],
            properties: {
              userId: { type: "string", title: "User ID", "ui:widget": "hidden", default: `${user.user_id}` },
              newPassword: { type: "string", title: "New Password", "ui:widget": "password" },
              confirmPassword: { type: "string", title: "Confirm Password", "ui:widget": "password" }
            },
            value: valuePassword,
            onChange: onChangePassword,
            onSubmit: async (data, event) => {
              return await handleChangePassword(data.formData);
            },
            submitOptions: {
              submitText: "Change Password"
            }
          }
        ),
        userIsAdmin && !isCurrentUserProfile && /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(
          JsonFormSimple,
          {
            required: ["user_id"],
            properties: {
              user_id: { type: "string", title: "User ID", "ui:widget": "hidden", default: `${user.user_id}` }
            },
            value: valueDelete,
            onChange: onChangeDelete,
            onSubmit: async (data, event) => {
              return await handleDeleteAccount(data.formData);
            },
            submitOptions: {
              submitText: "Delete Account"
            }
          }
        )
      ] })
    ] }) });
  });
  var ManageUser_default = ManageUser;

  // react-user-mgmt/src/components/ACL/ManageAcl.tsx
  var import_jsx_runtime188 = __toESM(require_jsx_runtime(), 1);
  var ManageAcl = DataLoader(async ({ recipe_name }) => {
    const result = await serverRequest("ListACL", { recipe_name });
    return {
      ...result,
      permissions: result.permissions.map((e2) => ({
        permission_id: e2,
        permission_name: e2,
        permission_description: ""
      }))
    };
  }, (result, refresh, props) => {
    const { recipe, bag, roles, permissions, recipeAclRecords, bagAclRecords } = result;
    const recipeForm = useForm({
      defaultValues: {
        role_id: 0,
        permission_id: "READ"
      }
    });
    const bagForm = useForm({
      defaultValues: {
        role_id: 0,
        permission_id: "READ"
      }
    });
    const handleAddRecipeAcl = async (data) => {
      console.log("Adding recipe ACL:", data);
      await serverRequest("CreateACL", "WRITE", {
        entity_type: "recipe",
        entity_name: recipe.recipe_name,
        role_id: +data.role_id,
        permission: data.permission_id
      });
      recipeForm.reset();
      refresh();
    };
    const handleAddBagAcl = async (data) => {
      console.log("Adding bag ACL:", data);
      await serverRequest("CreateACL", "WRITE", {
        entity_type: "bag",
        entity_name: bag.bag_name,
        role_id: +data.role_id,
        permission: data.permission_id
      });
      bagForm.reset();
      refresh();
    };
    const handleDeleteRecipeAcl = async (aclId) => {
      await serverRequest("DeleteACL", "WRITE", { acl_id: aclId });
      refresh();
    };
    const handleDeleteBagAcl = async (aclId) => {
      await serverRequest("DeleteACL", "WRITE", { acl_id: aclId });
      refresh();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("h2", { children: [
          "Recipe ACL: ",
          recipe.recipe_name
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "acl-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "acl-form", children: [
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("h3", { children: "Add Recipe ACL Record" }),
            /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("form", { onSubmit: recipeForm.handleSubmit(handleAddRecipeAcl), children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
                  Controller,
                  {
                    name: "role_id",
                    control: recipeForm.control,
                    rules: { required: true },
                    render: ({ field }) => /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("select", { ...field, className: "tc-select", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: "", children: "Select Role" }),
                      roles.map((role) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: role.role_id, children: role.role_name }, role.role_id))
                    ] })
                  }
                ),
                recipeForm.formState.errors.role_id && /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("span", { className: "error-message", children: "Role is required" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
                  Controller,
                  {
                    name: "permission_id",
                    control: recipeForm.control,
                    rules: { required: true },
                    render: ({ field }) => /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("select", { ...field, className: "tc-select", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: "", children: "Select Permission" }),
                      permissions.map((permission) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: permission.permission_id, children: permission.permission_name }, permission.permission_id))
                    ] })
                  }
                ),
                recipeForm.formState.errors.permission_id && /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("span", { className: "error-message", children: "Permission is required" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("button", { type: "submit", className: "btn btn-add", children: "Add ACL Record" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "acl-table", children: /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("table", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("thead", { children: /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("th", { children: "Role" }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("th", { children: "Permission" }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("th", { children: "Action" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("tbody", { children: recipeAclRecords.map((record) => /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("td", { children: record.role?.role_name }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("td", { children: record.permission }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("td", { children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
                "button",
                {
                  className: "btn btn-delete",
                  onClick: () => handleDeleteRecipeAcl(record.acl_id),
                  children: "Delete"
                }
              ) })
            ] }, record.acl_id)) })
          ] }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "container", children: [
        /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("h2", { children: [
          "Bag ACL: ",
          bag.bag_name
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "acl-section", children: [
          /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "acl-form", children: [
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("h3", { children: "Add Bag ACL Record" }),
            /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("form", { onSubmit: bagForm.handleSubmit(handleAddBagAcl), children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
                  Controller,
                  {
                    name: "role_id",
                    control: bagForm.control,
                    rules: { required: true },
                    render: ({ field }) => /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("select", { ...field, className: "tc-select", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: "", children: "Select Role" }),
                      roles.map((role) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: role.role_id, children: role.role_name }, role.role_id))
                    ] })
                  }
                ),
                bagForm.formState.errors.role_id && /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("span", { className: "error-message", children: "Role is required" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("div", { className: "form-group", children: [
                /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
                  Controller,
                  {
                    name: "permission_id",
                    control: bagForm.control,
                    rules: { required: true },
                    render: ({ field }) => /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("select", { ...field, className: "tc-select", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: "", children: "Select Permission" }),
                      permissions.map((permission) => /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("option", { value: permission.permission_id, children: permission.permission_name }, permission.permission_id))
                    ] })
                  }
                ),
                bagForm.formState.errors.permission_id && /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("span", { className: "error-message", children: "Permission is required" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("button", { type: "submit", className: "btn btn-add", children: "Add ACL Record" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("div", { className: "acl-table", children: /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("table", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("thead", { children: /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("th", { children: "Role" }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("th", { children: "Permission" }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("th", { children: "Action" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("tbody", { children: bagAclRecords.map((record) => /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)("tr", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("td", { children: record.role?.role_name }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("td", { children: record.permission }),
              /* @__PURE__ */ (0, import_jsx_runtime188.jsx)("td", { children: /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
                "button",
                {
                  className: "btn btn-delete",
                  onClick: () => handleDeleteBagAcl(record.acl_id),
                  children: "Delete"
                }
              ) })
            ] }, record.acl_id)) })
          ] }) })
        ] })
      ] })
    ] });
  });
  var ManageAcl_default = ManageAcl;

  // react-user-mgmt/src/components/Frame/Frame.tsx
  var import_jsx_runtime189 = __toESM(require_jsx_runtime(), 1);
  var Frame = (props) => {
    const [indexJson, refresh] = useIndexJson();
    const username = indexJson?.username;
    const userIsAdmin = indexJson?.isAdmin || false;
    const userIsLoggedIn = !!indexJson.isLoggedIn;
    const firstGuestUser = indexJson.firstGuestUser;
    const user = indexJson;
    const allowReads = indexJson.allowAnonReads;
    const allowWrites = indexJson.allowAnonWrites;
    const [showAnonConfig, setShowAnonConfig] = (0, import_react40.useState)(false);
    const pages = [
      [/^\/$/, () => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(Dashboard_default, {}), "Wikis Available Here"],
      [/^\/admin\/users\/?$/, () => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(UserManagement_default, {}), "User Management"],
      [/^\/admin\/users\/(\d+)$/, ([, user_id]) => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(ManageUser_default, { userID: user_id }), "Manage User"],
      [
        /^\/admin\/acl\/([^\/]+)$/,
        ([, recipe_name]) => /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
          ManageAcl_default,
          {
            recipe_name: decodeURIComponent(recipe_name)
          }
        ),
        "ACL Management"
      ]
    ];
    const matches = pages.map(([re2]) => re2.exec(location.pathname));
    const index = matches.findIndex((m2) => m2 !== null);
    const page = index > -1 && pages[index][1](matches[index]) || null;
    return /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(import_jsx_runtime189.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
        Header_default,
        {
          pageTitle: page ? pages[index][2] : "TiddlyWiki",
          username,
          userIsAdmin,
          userIsLoggedIn,
          firstGuestUser,
          userId: user?.user_id,
          setShowAnonConfig
        }
      ),
      firstGuestUser && /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "mws-security-warning", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "mws-security-warning-content", children: [
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "mws-security-warning-icon", children: "\u26A0\uFE0F" }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "mws-security-warning-text", children: [
          /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("strong", { children: "Warning:" }),
          " TiddlyWiki is currently running in anonymous access mode which allows anyone with access to the server to read and modify data."
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "mws-security-warning-action", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("a", { href: "/admin/users", className: "mws-security-warning-button", children: "Add Admin Account" }) })
      ] }) }),
      showAnonConfig && /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
        AnonConfigModal_default,
        {
          initialAllowReads: allowReads,
          initialAllowWrites: allowWrites,
          onClose: () => setShowAnonConfig(false)
        }
      ),
      page ?? /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("div", { className: "mws-error", children: "Page not found" })
    ] });
  };

  // react-user-mgmt/src/main.tsx
  var import_jsx_runtime190 = __toESM(require_jsx_runtime(), 1);
  var theme = createTheme2({
    palette: {
      background: {
        default: "#f0f0f0",
        paper: "#fff"
      }
    },
    colorSchemes: {
      dark: true
    }
  });
  var App = DataLoader(async () => {
    return await getIndexJson();
  }, (indexJson, refresh, props) => {
    return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(import_react41.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime190.jsxs)(ThemeProvider4, { theme, children: [
      /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(CssBaseline_default, { enableColorScheme: true }),
      /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(IndexJsonContext.Provider, { value: [indexJson, refresh], children: location.pathname === "/login" ? /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(Login_default, {}) : /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(Frame, {}) })
    ] }) });
  });
  (async () => {
    (0, import_client2.createRoot)(document.getElementById("root")).render(/* @__PURE__ */ (0, import_jsx_runtime190.jsx)(App, {}));
  })();
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

@prisma/client/runtime/index-browser.js:
  (*! Bundled license information:
  
  decimal.js/decimal.mjs:
    (*!
     *  decimal.js v10.5.0
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js
     *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Licence
     *)
  *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/index.js:
  (**
   * @mui/styled-engine v6.4.6
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/index.js:
  (**
   * @mui/private-theming v6.4.6
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/material/index.js:
  (**
   * @mui/material v6.4.7
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
